# LL1 grammar inside Rustlr
auto
lifetime 'lt
#valuetype i32
terminals + - * / ( )
lexterminal POWER **
valterminal Int i32
nonterminal E i32
nonterminal T i32
nonterminal F i32
nonterminal G i32
nonterminal E1 Continuation<'lt,i32>
nonterminal T1 Continuation<'lt,i32>
nonterminal F1 Continuation<'lt,i32>
startsymbol E

# LR grammar:
# E --> E + T | E - T | T
# T --> T * F | T / F | F
# F --> Int | - F | ( E )

!use crate::ll1calcast::*;

E --> T:x E1:f { f.apply(x) }
E1 -->  { Continuation::default() }   # default continuation is |x|x
E1 --> + T:y E1:f { Continuation::make(move |x|f.apply(x+y)) }
E1 --> - T:y E1:f { Continuation::make(move |x|f.apply(x-y)) }

T --> F:z T1:g { g.apply(z) }
T1 --> { Continuation::default() }
T1 --> * F:z T1:g { Continuation::make(move |y|g.apply(y*z)) }
T1 --> / F:z T1:g { Continuation::make(move |y|g.apply(y/z)) }

#F --> G ** F | G   right associative, left factoring...
F --> G:y F1:f { f.apply(y) }
F1 --> { Continuation::default() }
F1 --> POWER F:z { Continuation::make(move |y:i32|y.pow(z as u32)) }

G --> Int:x { x }
G --> - G:x { -1*x }
G --> ( E:x ) { x }

