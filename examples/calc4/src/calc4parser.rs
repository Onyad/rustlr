//Parser generated by rustlr for grammar calc4

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(irrefutable_let_patterns)]
#![allow(unreachable_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use crate::exprtrees::*; /* ! lines are injected verbatim into parser */
use crate::exprtrees::Expr::*;
use rustlr::{LBox};

static SYMBOLS:[&'static str;16] = ["E","ES","+","-","*","/","(",")","=",";","let","in","int","var","START","EOF"];

static TABLE:[u64;177] = [42950000640,196609,55835033600,25770065920,12885295104,51539673088,4295098369,281492156579842,281522221350914,281505041481730,281483566645250,281496451547138,281487861612546,281513631416322,281509336449026,563014377930755,563001493094400,562949953945601,563005788454912,562962838716416,562992903421952,562975723487232,844442110787584,844446405558272,844463585558528,844437815689216,844433520918528,1125925676908544,1125955741876224,1125951446515712,1125942856843264,1125912792137728,1125899907760129,1407426423226368,1407430718586880,1407387768848384,1407374884536321,1407417833553920,1407400653619200,1688892810264576,1688875630329856,1688849861312513,1688901399937024,1688862745559040,1688905695297536,1970333426974722,1970363491745794,1970346311876610,1970372081680386,1970354901811202,1970359196778498,1970342016909314,1970337721942018,2251808404471808,2251816994340864,2251812699242496,2251838469505024,2251821289111552,2533287675691008,2533317740396544,2533300560461824,2533274791575553,2533330625429504,2533326330068992,2814792717107200,2814805602140160,2814749768351745,2814775537172480,2814801306779648,2814762652401664,3096280578981890,3096267694080002,3096289168916482,3096276284014594,3096250514210818,3096237629308930,3377751260200960,3377725490593792,3377712605822976,3377742670528512,3377755555561472,3377699721838593,3659187582533632,3659230532272128,3659174698614785,3659200467304448,3659217647239168,3659226236911616,3940666854604800,3940662559506432,3940671149375488,3940658264735744,3940679740162048,4222133241446400,4222146126086144,4222141831315456,4222137536217088,4222159011905536,4503612512665602,4503633987502082,4503608217698306,4503616808026112,4503638282469378,4503646872403970,4503621102796800,4503629692534786,4785117554409474,4785139029245954,4785100374540290,4785126144344066,4785130439311362,4785087489638402,5066566760923138,5066588235759618,5066579645825026,5066562465955842,5066571055890434,5066558170988546,5066583940792322,5066596825694210,5348054622470146,5348046032928768,5348041738158080,5348058917437442,5348033147633666,5348071802339330,5348063212404738,5348037442600962,5629538189246466,5629512419442690,5629546779181058,5629521009377282,5629516714409986,5629529599311874,5629533894279170,5629508124475394,5910995986350080,5910983100989442,5911013165760514,5911004575825922,5910987395956738,5910991691579392,5911008870793218,5911021755695106,6192470962929666,6192479552864258,6192488142798850,6192466667962370,6192458078027778,6192483847831554,6192462372995074,6192496732733442,6473950234411008,6473980299378688,6473967414345728,6473924465917953,6473976004018176,6473937349640192,6755416621711360,6755446687334400,6755420916482048,6755412326612992,6755408031842304,7036874419470337,7036887303061504,7036917367767040,7036900187832320,7036930252800000,7036925957439488,7318370869903360,7318383754739714,7318357985263616,7318362280034304,7318396639641602,7318388049707010,7318366575132672,7318379459772418,];

pub fn make_parser<'src_lt>() -> ZCParser<Expr<'src_lt>,i64>
{
 let mut parser1:ZCParser<Expr<'src_lt>,i64> = ZCParser::new(12,27);
 let mut rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("start");
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut m = parser.popstack();  m.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut s = parser.popstack();  s.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e2 = parser.popstack(); let mut _item1_ = parser.popstack(); let mut e1 = parser.popstack();  Plus(e1.lbox(),parser.lbx(2,e2.value)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e2 = parser.popstack().lbox(); let mut _item1_ = parser.popstack(); let mut e1 = parser.popstack().lbox();  Minus(e1,e2)};
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e2 = parser.popstack().lbox(); let mut _item1_ = parser.popstack(); let mut e1 = parser.popstack().lbox();  Divide(e1,e2) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e2 = parser.popstack().lbox(); let mut _item1_ = parser.popstack(); let mut e1 = parser.popstack().lbox();  Times(e1,e2) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e = parser.popstack().lbox(); let mut _item0_ = parser.popstack();  Negative(e) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut e = parser.popstack(); let mut _item0_ = parser.popstack();  e.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut b = parser.popstack().lbox(); let mut _item4_ = parser.popstack(); let mut e = parser.popstack().lbox(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Var(x),)=(_item1_.value,) { Letexp(x,e,b)}  else {parser.bad_pattern("(Var(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("ES");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut n = parser.popstack().lbox();  Seq(vec![n]) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("ES");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut e = parser.popstack().lbox(); let mut _item0_ = parser.popstack(); 
  if let (Seq(mut v),)=(_item0_.value,) { 
   v.push(e);
   Seq(v)
   }  else {parser.bad_pattern("(Seq(mut v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("START");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); <Expr<'src_lt>>::default()};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..177 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser


// Lexical Scanner using RawToken and StrTokenizer
pub struct calc4lexer<'t> {
   stk: StrTokenizer<'t>,
   keywords: HashSet<&'static str>,
}
impl<'t> calc4lexer<'t> 
{
  pub fn from_str(s:&'t str) -> calc4lexer<'t>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'t LexSource<'t>) -> calc4lexer<'t>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'t>) -> calc4lexer<'t> {
    let mut keywords = HashSet::with_capacity(16);
    for kw in ["let","in",] {keywords.insert(kw);}
    for c in ['+','-','*','/','(',')','=',';',] {stk.add_single(c);}
    for d in [] {stk.add_double(d);}
    stk.set_line_comment("#");
    calc4lexer {stk,keywords}
  }
}
impl<'src_lt> Tokenizer<'src_lt,Expr<'src_lt>> for calc4lexer<'src_lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'src_lt,Expr<'src_lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => Some(TerminalToken::from_raw(token,sym,<Expr<'src_lt>>::default())),
      RawToken::Num(n) => Some(TerminalToken::from_raw(token,"int",Val(n))),
      RawToken::Alphanum(x) => Some(TerminalToken::from_raw(token,"var",Var(x))),
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<Expr<'src_lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<Expr<'src_lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<Expr<'src_lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
}//impl Tokenizer

fn load_extras<'src_lt>(parser:&mut ZCParser<Expr<'src_lt>,i64>)
{
}//end of load_extras: don't change this line as it affects augmentation
