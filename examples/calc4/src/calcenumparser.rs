//Parser generated by rustlr for grammar calcenum
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::any::Any;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use crate::exprtrees::*; /* ! lines are injected verbatim into parser */
use crate::exprtrees::Expr::*;
use rustlr::{LBox,makelbox};

static SYMBOLS:[&'static str;16] = ["E","ES","+","-","*","/","(",")","=",";","let","in","int","var","START","EOF"];

static TABLE:[u64;177] = [65537,42950066176,12885032960,55834902528,51540066304,4295229441,25770000384,281496452136960,281492157366272,281487862136832,281483567300608,281513632137216,563001493487616,563005788323840,562992903487488,562949954273281,562975723421696,562962838454272,844467880198144,844424931049473,844480765034496,844476470198272,844450700132352,844437815164928,1125912791875584,1125925676843008,1125942856908800,1125899907825665,1125955741745152,1125964331352067,1125951446908928,1407383473553410,1407404948389890,1407387768520706,1407392063488002,1407396358455298,1407422128259074,1407409243357186,1407413538324482,1688875630264320,1688862745296896,1688892810330112,1688849861312513,1688901400330240,1688905695166464,1970363491680258,1970354901745666,1970342016843778,1970359196712962,1970346311811074,1970337721876482,1970372081614850,1970333426909186,2251851353751552,2251855648587776,2251842763751424,2251825583685632,2251799814799361,2251812698718208,2533300560396288,2533330625298432,2533287675428864,2533326330462208,2533317740462080,2533274791575553,2814749768351745,2814792717172736,2814762652139520,2814775537106944,2814801307172864,2814805602009088,3096280578981890,3096237629308930,3096250514210818,3096276284014594,3096289168916482,3096267694080002,3377742670594048,3377755555430400,3377751260594176,3377712605560832,3377725490528256,3377699721838593,3659213352402946,3659183287631874,3659191877894144,3659187582599170,3659196172664832,3659209057435650,3659204762468354,3659221942337538,3940679740096512,3940666854604800,3940671149375488,3940658264539136,3940662559375360,4222133241249792,4222146126086144,4222141831315456,4222137536086016,4222163306807296,4503633988616192,4503608217960448,4503616808026112,4503621102796800,4503612512796672,4785121848983554,4785108964081666,4785087489245186,4785104669114370,4785083194277890,4785091784736768,4785113259048962,4785096079507456,5066583940857858,5066596825759746,5066579645890562,5066571055955970,5066566760988674,5066558171054082,5066588235825154,5066562466021378,5348071802339330,5348063212404738,5348037442600962,5348041738158080,5348058917437442,5348033147633666,5348054622470146,5348046032928768,5629512419508226,5629533894344706,5629508124540930,5629516714475522,5629529599377410,5629538189312002,5629546779246594,5629521009442818,5910987396349954,5910983101382658,5910995986284546,5911004576219138,5911008871186434,5910991691317250,5911013166153730,5911021756088322,6192492437962754,6192505322864642,6192462373191682,6192475258093570,6192513912799234,6192501027897346,6473980299247616,6473967414411264,6473976004411392,6473924465917953,6473937349378048,6473950234345472,6755446687334400,6755408031645696,6755416621711360,6755412326481920,6755420916482048,7036900187766784,7036874419470337,7036917367832576,7036925957832704,7036930252668928,7036887302799360,7318357985067008,7318379459379202,7318362279903232,7318370869903360,7318383754346498,7318396639248386,7318366575132672,7318388049313794,];


fn _semaction_rule_0_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut m = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<i64>::default()};  Val(m) }

fn _semaction_rule_1_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut s = if let RetTypeEnum::Enumvariant_2(_x_2)=parser.popstack().value { _x_2 } else {<&'src_lt str>::default()};  Var(s) }

fn _semaction_rule_2_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut b = parser.lbx(5,_b_);  let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e = parser.lbx(3,_e_);  let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _vx_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut vx = parser.lbx(1,_vx_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; 
  if let (Var(x),)=(&mut *vx,) { Letexp(x,e,b)}  else {parser.report("(Var(x),)"); <Expr<'src_lt>>::default()} }

fn _semaction_rule_3_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _e2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e2 = parser.lbx(2,_e2_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _e1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e1 = parser.lbx(0,_e1_);   Plus(e1,e2) }

fn _semaction_rule_4_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _e2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e2 = parser.lbx(2,_e2_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _e1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e1 = parser.lbx(0,_e1_);   Minus(e1,e2) }

fn _semaction_rule_5_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _e2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e2 = parser.lbx(2,_e2_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _e1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e1 = parser.lbx(0,_e1_);  Divide(e1,e2)}

fn _semaction_rule_6_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut e2 = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut e1 = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  Times(parser.lbx(0,e1),parser.lbx(2,e2))}

fn _semaction_rule_7_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _e_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e = parser.lbx(1,_e_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  Negative(e) }

fn _semaction_rule_8_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut e = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  e }

fn _semaction_rule_9_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut n = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  Seq(vec![parser.lbx(0,n)]) }

fn _semaction_rule_10_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut e = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; 
  if let (Seq(mut v),)=(_item0_,) { 
   v.push(parser.lbx(1,e));
   Seq(v)
   }  else {parser.report("(Seq(mut v),)"); <Expr<'src_lt>>::default()} }

fn _semaction_rule_11_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; <Expr<'src_lt>>::default()}

pub fn make_parser<'src_lt>() -> ZCParser<RetTypeEnum<'src_lt>,i64>
{
 let mut parser1:ZCParser<RetTypeEnum<'src_lt>,i64> = ZCParser::new(12,27);
 let mut rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("ES");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("ES");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..177 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>, lexer:&mut calcenumlexer<'src_lt>) -> Result<Expr<'src_lt>,Expr<'src_lt>>
{
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse(lexer) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Expr<'src_lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>, lexer:&mut calcenumlexer<'src_lt>, parserpath:&str) -> Result<Expr<'src_lt>,Expr<'src_lt>>
{
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(lexer,parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Expr<'src_lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'src_lt> {
  Enumvariant_2(&'src_lt str),
  Enumvariant_1(i64),
  Enumvariant_0(Expr<'src_lt>),
}
impl<'src_lt> Default for RetTypeEnum<'src_lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Expr<'src_lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct calcenumlexer<'t> {
   stk: StrTokenizer<'t>,
   keywords: HashSet<&'static str>,
}
impl<'t> calcenumlexer<'t> 
{
  pub fn from_str(s:&'t str) -> calcenumlexer<'t>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'t LexSource<'t>) -> calcenumlexer<'t>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'t>) -> calcenumlexer<'t> {
    let mut keywords = HashSet::with_capacity(16);
    for kw in ["let","in",] {keywords.insert(kw);}
    for c in ['+','-','*','/','(',')','=',';',] {stk.add_single(c);}
    for d in [] {stk.add_double(d);}
    stk.set_line_comment("#");
    calcenumlexer {stk,keywords}
  }
}
impl<'src_lt> Tokenizer<'src_lt,RetTypeEnum<'src_lt>> for calcenumlexer<'src_lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'src_lt,RetTypeEnum<'src_lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => Some(TerminalToken::from_raw(token,sym,<RetTypeEnum<'src_lt>>::default())),
      RawToken::Num(n) => Some(TerminalToken::from_raw(token,"int",RetTypeEnum::Enumvariant_1(n))),
      RawToken::Alphanum(x) => Some(TerminalToken::from_raw(token,"var",RetTypeEnum::Enumvariant_2(x))),
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'src_lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'src_lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'src_lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
}//impl Tokenizer

fn load_extras<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>)
{
}//end of load_extras: don't change this line as it affects augmentation
