//Parser generated by rustlr for grammar calcenum
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::any::Any;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use crate::exprtrees::*; /* ! lines are injected verbatim into parser */
use crate::exprtrees::Expr::*;
use rustlr::{LBox,makelbox};

static SYMBOLS:[&'static str;16] = ["E","ES","+","-","*","/","(",")","=",";","let","in","int","var","START","EOF"];

static TABLE:[u64;177] = [51539869696,25770131456,4295032833,12885295104,42949869568,131073,55835033600,281474977234945,281539401220099,281530811744256,281526516580352,281517926580224,281487862005760,281500746842112,562962838913024,562988608782336,562971428978688,562958544142336,562967134142464,844476470001664,844467880001536,844450700263424,844424931049473,844480765165568,844437815427072,1125917086711810,1125938561548290,1125929971613698,1125947151482882,1125912791744514,1125908496777218,1125934266580994,1125921381679106,1407387768848384,1407374884536321,1407400653684736,1407417833422848,1407430718586880,1407426423422976,1688905695297536,1688901400133632,1688862745559040,1688849861312513,1688892810133504,1688875630395392,1970333426974722,1970363491745794,1970337721942018,1970342016909314,1970372081680386,1970354901811202,1970359196778498,1970346311876610,2251812699176960,2251816994406400,2251838469505024,2251808404406272,2251821289242624,2533300560527360,2533287675691008,2533330625429504,2533326330265600,2533317740265472,2533274791575553,2814762652598274,2814814192205826,2814775537500162,2814801307303938,2814792717369346,2814805602271234,3096276283686912,3096224745062401,3096280578850816,3096267693686784,3096250513948672,3096237629112320,3377712605822976,3377699721838593,3377751260397568,3377755555561472,3377725490659328,3377742670397440,3659230532272128,3659217647108096,3659226237108224,3659174698614785,3659200467369984,3659187582533632,3940662559440896,3940666854670336,3940658264670208,3940671149506560,3940684035129344,4222137536151552,4222154716938240,4222133241380864,4222141831380992,4222146126217216,4503608217763842,4503646872469506,4503612512731138,4503633987567618,4503616808091648,4503621102927872,4503629692600322,4503638282534914,4785087489638402,4785130439311362,4785100374540290,4785139029245954,4785126144344066,4785117554409474,5066583940792322,5066579645825026,5066562465955842,5066588235759618,5066566761512960,5066596825694210,5066571056349184,5066558170988546,5348037442732034,5348063212535810,5348058917568514,5348054622601218,5348033147764738,5348046032666626,5348041737699330,5348071802470402,5629512419311618,5629521009770496,5629529599180802,5629546779049986,5629533894148098,5629516714934272,5629508124344322,5629538189115394,5910995986153474,5911004576088066,5911013166022658,5911008871055362,5910987396218882,5910991691186178,5910983101251586,5911021755957250,6192462372929536,6192501027504128,6192505322668032,6192492437504000,6192449489207297,6192475257765888,6473945939705858,6473963119575042,6473933054803970,6473971709509634,6473937349771266,6473954529640450,6473941644738562,6473958824607746,6755412326547456,6755416621776896,6755408031776768,6755446687334400,6755420916613120,7036874419470337,7036900187897856,7036887303061504,7036925957636096,7036917367635968,7036930252800000,7318357985198080,7318362279968768,7318370870034432,7318366575198208,7318379459379202,7318396639248386,7318383754346498,7318388049313794,];


fn _semaction_rule_0_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut m = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<i64>::default()};  Val(m) }

fn _semaction_rule_1_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut s = if let RetTypeEnum::Enumvariant_2(_x_2)=parser.popstack().value { _x_2 } else {<&'src_lt str>::default()};  Var(s) }

fn _semaction_rule_2_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut b = parser.lbx(5,_b_);  let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e = parser.lbx(3,_e_);  let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _vx_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut vx = parser.lbx(1,_vx_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; 
  if let (Var(x),)=(&mut *vx,) { Letexp(x,e,b)}  else {parser.report("(Var(x),)"); <Expr<'src_lt>>::default()} }

fn _semaction_rule_3_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _e2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e2 = parser.lbx(2,_e2_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _e1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e1 = parser.lbx(0,_e1_);   Plus(e1,e2) }

fn _semaction_rule_4_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _e2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e2 = parser.lbx(2,_e2_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _e1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e1 = parser.lbx(0,_e1_);   Minus(e1,e2) }

fn _semaction_rule_5_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _e2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e2 = parser.lbx(2,_e2_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _e1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e1 = parser.lbx(0,_e1_);  Divide(e1,e2)}

fn _semaction_rule_6_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut e2 = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut e1 = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  Times(parser.lbx(0,e1),parser.lbx(2,e2))}

fn _semaction_rule_7_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _e_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  let mut e = parser.lbx(1,_e_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  Negative(e) }

fn _semaction_rule_8_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut e = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  e }

fn _semaction_rule_9_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut n = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()};  Seq(vec![parser.lbx(0,n)]) }

fn _semaction_rule_10_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut e = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; 
  if let (Seq(mut v),)=(_item0_,) { 
   v.push(parser.lbx(1,e));
   Seq(v)
   }  else {parser.report("(Seq(mut v),)"); <Expr<'src_lt>>::default()} }

fn _semaction_rule_11_<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>) -> Expr<'src_lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Expr<'src_lt>>::default()}; <Expr<'src_lt>>::default()}

pub fn make_parser<'src_lt>() -> ZCParser<RetTypeEnum<'src_lt>,i64>
{
 let mut parser1:ZCParser<RetTypeEnum<'src_lt>,i64> = ZCParser::new(12,27);
 let mut rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("ES");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("ES");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'src_lt>,i64>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..177 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>, lexer:&mut calcenumlexer<'src_lt>) -> Result<Expr<'src_lt>,Expr<'src_lt>>
{
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse(lexer) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Expr<'src_lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>, lexer:&mut calcenumlexer<'src_lt>, parserpath:&str) -> Result<Expr<'src_lt>,Expr<'src_lt>>
{
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(lexer,parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Expr<'src_lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'src_lt> {
  Enumvariant_0(Expr<'src_lt>),
  Enumvariant_2(&'src_lt str),
  Enumvariant_1(i64),
}
impl<'src_lt> Default for RetTypeEnum<'src_lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Expr<'src_lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct calcenumlexer<'t> {
   stk: StrTokenizer<'t>,
   keywords: HashSet<&'static str>,
}
impl<'t> calcenumlexer<'t> 
{
  pub fn from_str(s:&'t str) -> calcenumlexer<'t>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'t LexSource<'t>) -> calcenumlexer<'t>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'t>) -> calcenumlexer<'t> {
    let mut keywords = HashSet::with_capacity(16);
    for kw in ["let","in",] {keywords.insert(kw);}
    for c in ['+','-','*','/','(',')','=',';',] {stk.add_single(c);}
    for d in [] {stk.add_double(d);}
    stk.set_line_comment("#");
    calcenumlexer {stk,keywords}
  }
}
impl<'src_lt> Tokenizer<'src_lt,RetTypeEnum<'src_lt>> for calcenumlexer<'src_lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'src_lt,RetTypeEnum<'src_lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => Some(TerminalToken::from_raw(token,sym,<RetTypeEnum<'src_lt>>::default())),
      RawToken::Num(n) => Some(TerminalToken::from_raw(token,"int",RetTypeEnum::Enumvariant_1(n))),
      RawToken::Alphanum(x) => Some(TerminalToken::from_raw(token,"var",RetTypeEnum::Enumvariant_2(x))),
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'src_lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'src_lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'src_lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
}//impl Tokenizer

fn load_extras<'src_lt>(parser:&mut ZCParser<RetTypeEnum<'src_lt>,i64>)
{
  parser.RSM[4].insert("ANY_ERROR",Stateaction::Error("unrecognized operator"));
  parser.RSM[4].insert("var",Stateaction::Error("variables are not allowed"));
}//end of load_extras: don't change this line as it affects augmentation
