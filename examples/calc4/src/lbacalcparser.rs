//Parser generated by rustlr for grammar lbacalc

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use crate::exprtrees::*;
use crate::exprtrees::Expr::*;
use rustlr::{LBox,makelbox};

const SYMBOLS:[&'static str;16] = ["E","ES","+","-","*","/","(",")","=",";","let","in","int","var","START","EOF"];

const TABLE:[u64;177] = [42950131712,51539738624,25770196992,55834836992,4295163905,65537,12885229568,281483567235072,281492157300736,281487862136832,281496452202496,281513632202752,562967133290498,562971428257794,562997198061570,562962838323202,562984313159682,562958543355906,562980018192386,562988608126978,844476469870592,844480764968960,844424930983937,844489354641411,844450700328960,844437815361536,844467880263680,1125921381744642,1125917086777346,1125908496842754,1125912791810050,1125947151548418,1125934266646530,1125929971679234,1125938561613826,1407426423291904,1407430718390272,1407374884470785,1407387768782848,1407400653750272,1407417833684992,1688862745493504,1688849861246977,1688905695100928,1688892810395648,1688901400002560,1688875630460928,1970380671811584,1970324838023169,1970337722204160,1970367787106304,1970376376713216,1970350607171584,2251851353423872,2251855648522240,2251842763816960,2251812698914816,2251825583882240,2251799814799361,2533274791575553,2533330625232896,2533317740527616,2533326330134528,2533300560592896,2533287675625472,2814801306845184,2814805601943552,2814749768351745,2814792717238272,2814775537303552,2814762652336128,3096237629046784,3096224745127937,3096280578654208,3096276283555840,3096267693948928,3096250514014208,3377725490921474,3377712606019586,3377742670790658,3377764145627138,3377751260725250,3377755555692546,3659196172730368,3659213353320448,3659183287762944,3659191877828608,3659187582664704,3940684034146306,3940688329113602,3940679739179010,3940666854539264,3940658264342530,3940671149441024,3940696919048194,3940662559309826,4222133241184256,4222137536086016,4222141831249920,4222154716872704,4222146126151680,4503621102862336,4503612512796672,4503616807960576,4503633988616192,4503608217894912,4785113259048962,4785083194277890,4785091784671232,4785096079572992,4785087489245186,4785104669114370,4785108964081666,4785121848983554,5066571056283648,5066583940726786,5066566761381888,5066579645759490,5066562465890306,5066588235694082,5066596825628674,5066558170923010,5348058917568514,5348063212535810,5348046032666626,5348037442732034,5348041737699330,5348033147764738,5348071802470402,5348054622601218,5629508124540930,5629533894344706,5629521009442818,5629546779246594,5629538189312002,5629516714475522,5629512419508226,5629529599377410,5911000281382914,5911030346153986,5910987396481026,5911017461252098,5911026051186690,5911038936088578,6192496732798978,6192488142864386,6192483847897090,6192479552929794,6192466668027906,6192470962995202,6192458078093314,6192462373060610,6473976004083712,6473924465917953,6473980299182080,6473937349574656,6473967414476800,6473950234542080,6755408031580160,6755446687334400,6755416621645824,6755420916547584,6755412326481920,7036887302995968,7036900187963392,7036917367898112,7036925957505024,7036930252603392,7036874419470337,7318366575067136,7318357985001472,7318379459379202,7318388049313794,7318383754346498,7318362279903232,7318370869968896,7318396639248386,];

pub fn new_parser<'src_lt>() -> ZCParser<Expr<'src_lt>,i64>
{
 let mut parser1:ZCParser<Expr<'src_lt>,i64> = ZCParser::new(12,27);
 let mut rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("start");
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut m = parser.popstack();  m.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut s = parser.popstack(); 
  if let (Var(v),)=(&mut s.value,) {  s.value }  else {parser.bad_pattern("(Var(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut b = parser.popstack(); let mut _item4_ = parser.popstack(); let mut e = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Var(x),)=(_item1_.value,) { Letexp(x,e.lbox(),b.lbox())}  else {parser.bad_pattern("(Var(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e2 = parser.popstack(); let mut _item1_ = parser.popstack(); let mut e1 = parser.popstack();  Plus(e1.lbox(), e2.lbox()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e2 = parser.popstack(); let mut _item1_ = parser.popstack(); let mut e1 = parser.popstack();  Minus(e1.lbox(), e2.lbox())};
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e2 = parser.popstack(); let mut _item1_ = parser.popstack(); let mut e1 = parser.popstack();  Divide(e1.lbox(), e2.lbox())};
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e2 = parser.popstack(); let mut _item1_ = parser.popstack(); let mut e1 = parser.popstack();  Times(e1.lbox(), e2.lbox())};
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut e = parser.popstack(); let mut _item0_ = parser.popstack();  Negative(e.lbox()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("E");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut e = parser.popstack(); let mut _item0_ = parser.popstack();  e.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("ES");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut n = parser.popstack();  Seq(vec![n.lbox()]) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("ES");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut e = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Seq(mut v),)=(_item0_.value,) { 
   v.push(e.lbox());
   Seq(v)
   }  else {parser.bad_pattern("(Seq(mut v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Expr<'src_lt>,i64>::new_skeleton("START");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); <Expr<'src_lt>>::default()};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..177 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras<'src_lt>(parser:&mut ZCParser<Expr<'src_lt>,i64>)
{
}//end of load_extras: don't change this line as it affects augmentation
