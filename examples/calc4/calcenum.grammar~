# types Expr, Calcscanner defined in exprtrees.rs
!use crate::exprtrees::*; /* ! lines are injected verbatim into parser */
!use crate::exprtrees::Expr::*;
!use rustlr::{LBox,makelbox};

lifetime 'src_lt
absyntype Expr<'src_lt>
externtype i64
nonterminals E ES
terminals + - * / ( ) = ;
terminals let in
typedterminal int i64
typedterminal var &'src_lt str
topsym ES
resync ;

left * 500
left / 500
left + 400
left - 400

lexvalue int Num(n) n
lexvalue var Alphanum(x) x
lexattribute set_line_comment("#")

E --> int:m { Val(m) }
E --> var:s { Var(s) }
E --> let E:@Var(x)@ = E:e in E:b {Letexp(x,parser.lbx(3,e),parser.lbx(5,b))}
E --> E:e1 + E:e2 { Plus(parser.lbx(0,e1),parser.lbx(2,e2))}
E --> E:e1 - E:e2 { Minus(parser.lbx(0,e1), parser.lbx(2,e2))}
E --> E:e1 / E:e2 { Divide(parser.lbx(0,e1),parser.lbx(2,e2))}
E --> E:e1 * E:e2 { Times(parser.lbx(0,e1),parser.lbx(2,e2))}
E --> - E:e { Negative(parser.lbx(1,e)) }
E --> ( E:e )  { e }
ES --> E:n ; { Seq(vec![parser.lbx(0,n)]) }
ES ==> ES:@Seq(mut v)@  E:e ;  {
   v.push(parser.lbx(1,e));
   Seq(v)
   } <==

# ==> and <== are required for rules spanning multiple lines

EOF

alternate
ES ==> ES:vs@Seq(v)@  E:e ;  {
   v.push(parser.lbx(1,e));
   vs
   } <==
   