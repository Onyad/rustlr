# ambiguous grammar for online calculator, enum Expr defined in exprtrees.rs
# version using LBox<Any>

!use crate::exprtrees::*;
!use crate::exprtrees::Expr::*;
#!use rustlr::{LBox,makelbox};

lifetime 'src_lt
absyntype LBox<dyn Any+'src_lt>
externtype i64
nonterminal E Expr<'src_lt>
nonterminal ES Vec<LBox<Expr<'src_lt>>>
terminal + - * / ( ) ;
typedterminal int i64
typedterminal var &'src_lt str
topsym ES
resync ;

left * 500
left / 500
left + 400
left - 400

E --> int:m { Val(unbox!(m)) }
E --> var:v { Var(unbox!(v)) }
E --> E:e1 + E:e2 { Plus(e1,e2) }
E --> E:e1 - E:e2 { Minus(e1,e2) }
E --> E:e1 / E:e2 { Divide(e1,e2) }
E --> E:e1 * E:e2 { Times(e1,e2) }
E --> - E:e { Negative(e) }
E --> ( E:e )  { *e.exp }
ES --> E:n ; { vec![n] }
ES ==> ES:v E:e ;  {
   v.push(e);
   unbox!(v)
   } <==

# ==> and <== are required for rules spanning multiple lines

EOF

What could be better syntax than makelbox! ?
Plus(parser.lbox(0,e1), parser.lbox(2,e2)) ??

ZCParser can have a vector of (line,col) values popped off from the
stack in a separate vector that's clearly before each reduce. - the vector
will be in reverse.
