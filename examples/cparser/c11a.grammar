# ANSI C YACC Grammar 2011 version adopted to Rustlr
# from http://www.quut.com/c/ANSI-C-grammar-y.html
# intended for use with rustlr -auto

lifetime 'lt
externtype HashSet<&'lt str>

# new keywords
lexterminal FUNC_NAME __func__
lexterminal INLINE inline
lexterminal RESTRICT restrict
lexterminal ALIGNAS _Alignas
lexterminal ALIGNOF _Alignof
lexterminal ATOMIC _Atomic
lexterminal BOOL _Bool
lexterminal COMPLEX _Complex
lexterminal GENERIC _Generic
lexterminal IMAGINARY _Imaginary
lexterminal NORETURN _Noreturn
lexterminal STATIC_ASSERT _Static_assert
lexterminal THREAD_LOCAL _Thread_local

# from original 
lexterminal PTR_OP ->
lexterminal INC_OP ++
lexterminal DEC_OP --
lexterminal LEFT_OP <<
lexterminal RIGHT_OP >>
lexterminal LE_OP <=
lexterminal GE_OP >=
lexterminal EQ_OP ==
lexterminal NE_OP !=
lexterminal AND_OP &&
lexterminal OR_OP ||
lexterminal MUL_ASSIGN *=
lexterminal DIV_ASSIGN /=
lexterminal MOD_ASSIGN %=
lexterminal ADD_ASSIGN +=
lexterminal SUB_ASSIGN -=
lexterminal LEFT_ASSIGN <<=
lexterminal RIGHT_ASSIGN >>=
lexterminal AND_ASSIGN &=
lexterminal XOR_ASSIGN ^=
lexterminal OR_ASSIGN |=
lexterminal SIZEOF sizeof
lexterminal TYPEDEF typedef
lexterminal EXTERN extern
lexterminal STATIC static
lexterminal AUTO auto
lexterminal REGISTER register
lexterminal CHAR char
lexterminal SHORT short
lexterminal INT int
lexterminal LONG long
lexterminal SIGNED signed
lexterminal UNSIGNED unsigned
lexterminal FLOAT float
lexterminal DOUBLE double
lexterminal CONST const
lexterminal VOLATILE volatile
lexterminal VOID void
lexterminal STRUCT struct
lexterminal UNION union
lexterminal ENUM enum
lexterminal CASE case
lexterminal DEFAULT default
lexterminal IF if
lexterminal ELSE else
lexterminal SWITCH switch
lexterminal WHILE while
lexterminal DO do
lexterminal FOR for
lexterminal GOTO goto
lexterminal CONTINUE continue
lexterminal BREAK break
lexterminal RETURN return
lexterminal INCLUDE include
lexterminal DEFINE define
lexterminal ELLIPSIS ...
lexterminal Lbrace {
lexterminal Rbrace }
lexterminal Amp &
lexterminal Bang !
lexterminal Bar |
lexterminal Hat ^
lexterminal Dot .
lexterminal Comma ,
lexterminal Colon :
lexterminal Star *
lexterminal Div /
lexterminal Percent %
lexterminal Lt <
lexterminal Gt >
lexterminal Eq1 =
lexterminal Quest ?
lexterminal Hash #
terminals [ ] ( )  + - ~ ;

valueterminal TYPEDEF_NAME~ &'lt str~ Alphanum(n) if self.shared_state.borrow().contains(n)~ n
# this has to change
valueterminal ENUMERATION_CONSTANT~ &'lt str~ Alphanum(n)~ n
valueterminal IDENTIFIER~ &'lt str~ Alphanum(n)~ n
valueterminal I_CONSTANT~ i32~ Num(n)~ (n as i32)
valueterminal F_CONSTANT~ f64~ Float(n)~ n
valueterminal STRING_LITERAL~ &'lt str~ Strlit(s)~ s

nonterminals primary_expression postfix_expression argument_expression_list
nonterminals unary_expression unary_operator cast_expression multiplicative_expression
nonterminals additive_expression shift_expression relational_expression equality_expression
nonterminals and_expression exclusive_or_expression inclusive_or_expression
nonterminals logical_and_expression logical_or_expression conditional_expression

nonterminals assignment_expression assignment_operator expression constant_expression
nonterminals declaration declaration_specifiers init_declarator_list init_declarator
nonterminals storage_class_specifier type_specifier struct_or_union_specifier
nonterminals struct_or_union struct_declaration_list struct_declaration
nonterminals specifier_qualifier_list struct_declarator_list struct_declarator
nonterminals enum_specifier enumerator_list enumerator type_qualifier
nonterminals declarator direct_declarator pointer type_qualifier_list
nonterminals parameter_type_list parameter_list parameter_declaration
nonterminals identifier_list type_name abstract_declarator
nonterminals direct_abstract_declarator initializer initializer_list
nonterminals statement labeled_statement compound_statement declaration_list
nonterminals statement_list expression_statement selection_statement
nonterminals iteration_statement jump_statement translation_unit
nonterminals external_declaration function_definition

nonterminals constant stringnt generic_selection generic_assoc_list
nonterminals generic_association static_assert_declaration designation
nonterminals function_specifier alignment_specifier atomic_type_specifier
nonterminals designator_list designator block_item

topsym translation_unit

# added for Rustlr edition to resolve dangling else problem:
left IF 100
left ELSE 200
#left ( 3
#left ATOMIC 1

# added to distinguish between IDENTIFIER and TYPE_NAME
#transform |parser,token|{if token.sym=="IDENTIFIER" {let v=extract_value_IDENTIFIER(&token.value); if parser.exstate.contains(v)  {token.sym="TYPE_NAME";}} }


primary_expression ==>
	 IDENTIFIER
	| ( expression )
	| constant
	| stringnt
        | generic_selection
	<==

constant --> I_CONSTANT | F_CONSTANT | ENUMERATION_CONSTANT
stringnt --> STRING_LITERAL | FUNC_NAME

generic_selection --> GENERIC ( assignment_expression Comma generic_assoc_list )
generic_assoc_list --> generic_association | generic_assoc_list Comma generic_association

generic_association ==>
         type_name Colon assignment_expression
       | DEFAULT Colon assignment_expression 
       <==

# originals
postfix_expression ==>
	 primary_expression
	| postfix_expression [ expression ]
	| postfix_expression ( )        
	| postfix_expression ( argument_expression_list )
	| postfix_expression Dot IDENTIFIER
	| postfix_expression PTR_OP IDENTIFIER
	| postfix_expression INC_OP
	| postfix_expression DEC_OP
        | ( type_name ) Lbrace initializer_list Rbrace
        | ( type_name ) Lbrace initializer_list Comma Rbrace        
	<==

argument_expression_list --> assignment_expression | argument_expression_list Comma assignment_expression

unary_expression ==>
	 postfix_expression
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression
	| SIZEOF ( type_name )
        | ALIGNOF ( type_name )
	<==

unary_operator ==>
	 Amp
	| Star
	| +
	| -
	| ~
	| Bang
	<==

cast_expression ==>
	 unary_expression
	| ( type_name ) cast_expression
	<==

# precedence determined here

multiplicative_expression ==>
	 cast_expression
	| multiplicative_expression Star cast_expression
	| multiplicative_expression Div cast_expression
	| multiplicative_expression Percent cast_expression
	<==

additive_expression ==>
	 multiplicative_expression
	| additive_expression + multiplicative_expression
	| additive_expression - multiplicative_expression
	<==

shift_expression ==>
	 additive_expression
	| shift_expression LEFT_OP additive_expression
	| shift_expression RIGHT_OP additive_expression
	<==

relational_expression ==>
	 shift_expression
	| relational_expression Lt shift_expression
	| relational_expression Gt shift_expression
	| relational_expression LE_OP shift_expression
	| relational_expression GE_OP shift_expression
        <==
        
equality_expression ==>
	 relational_expression
	| equality_expression EQ_OP relational_expression
	| equality_expression NE_OP relational_expression
	<==

and_expression ==>
	 equality_expression
	| and_expression Amp equality_expression
	<==

exclusive_or_expression ==>
	 and_expression
	| exclusive_or_expression Hat and_expression
	<==

inclusive_or_expression ==>
	 exclusive_or_expression
	| inclusive_or_expression Bar exclusive_or_expression
	<==

logical_and_expression ==>
	 inclusive_or_expression
	| logical_and_expression AND_OP inclusive_or_expression
	<==

logical_or_expression ==>
	 logical_and_expression
	| logical_or_expression OR_OP logical_and_expression
	<==

conditional_expression ==>
	 logical_or_expression
	| logical_or_expression Quest expression Colon conditional_expression
	<==

assignment_expression ==>
	 conditional_expression
	| unary_expression assignment_operator assignment_expression
	<==

assignment_operator ==>
	 Eq1
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	<==

expression ==>
	 assignment_expression
	| expression Comma assignment_expression
	<==

constant_expression --> conditional_expression


#declaration ==>
#	 declaration_specifiers ;
#	| declaration_specifiers init_declarator_list ;
#	<==


!use crate::cauto_ast::declaration_specifiers::*;
!use crate::cauto_ast::storage_class_specifier::*;
!use crate::cauto_ast::init_declarator::*;
!use crate::cauto_ast::init_declarator_list::*;
!use crate::cauto_ast::declarator::*;
!use crate::cauto_ast::declaration::*;
!use crate::cauto_ast::direct_declarator::*;

declaration:DecSpec --> declaration_specifiers ;
declaration:DecSpecList --> declaration_specifiers:ds init_declarator_list:il ;
# { if let (DSCDS(td,_),init_declarator_list_84(x)) = (&ds,&il) {
#    if let Typedef = &**td {
#      if let init_declarator_86(y) = &**x {
#        if let declarator_130(z) = &**y {
#          if let IDENTIFIER_131(id)= &**z {
#            parser.shared_state.borrow_mut().insert(id);
#          }}}}} ...
# } <==
declaration:Statassert --> static_assert_declaration

declaration_specifiers ==>
	 storage_class_specifier
        | type_specifier
        | type_specifier declaration_specifiers
	| type_qualifier
	| type_qualifier declaration_specifiers
        | function_specifier
        | function_specifier declaration_specifiers
        | alignment_specifier
        | alignment_specifier declaration_specifiers
	<==

# this rule corresponds to typedef: set next identifier to be TYPE_NAME

declaration_specifiers:DSCDS -->  storage_class_specifier declaration_specifiers

#:s { parser.exstate.insert(s.to_string()); ... }

# probably doesn't work : define new id in terms of others won't work.
# must keep a list.  Must be visible to tokenizer.

init_declarator_list ==>
	 init_declarator
	| init_declarator_list Comma init_declarator
	<==

init_declarator ==>
	 declarator
	| declarator Eq1 initializer 
	<==

storage_class_specifier:Typedef --> TYPEDEF
storage_class_specifier ==>
	EXTERN
	| STATIC
	| AUTO
	| REGISTER
        | THREAD_LOCAL
	<==

type_specifier:Typename --> TYPEDEF_NAME        
type_specifier ==>
	 VOID
	| CHAR
	| SHORT
	| INT
	| LONG
	| FLOAT
	| DOUBLE
	| SIGNED
	| UNSIGNED
        | BOOL
        | COMPLEX
        | IMAGINARY
	| struct_or_union_specifier
	| enum_specifier
        | atomic_type_specifier
	<==


struct_or_union_specifier ==>
	 struct_or_union IDENTIFIER? Lbrace struct_declaration_list Rbrace
	| struct_or_union IDENTIFIER
	<==

struct_or_union --> STRUCT | UNION

struct_declaration ==>
         specifier_qualifier_list struct_declarator_list? ;
       | static_assert_declaration
       <==
#       | specifier_qualifier_list


#struct_declaration_list ==>
#	 struct_declaration
#	| struct_declaration_list struct_declaration
#	<==
struct_declaration_list --> struct_declaration+


specifier_qualifier_list ==>
	 type_specifier specifier_qualifier_list
	| type_specifier
	| type_qualifier specifier_qualifier_list
	| type_qualifier
	<==

struct_declarator_list ==>
	 struct_declarator
	| struct_declarator_list Comma struct_declarator
	<==

struct_declarator ==>
	 declarator
	| Colon constant_expression
	| declarator Colon constant_expression
	<==

enum_specifier ==>
	 ENUM Lbrace enumerator_list Comma? Rbrace
	| ENUM IDENTIFIER Lbrace enumerator_list Comma? Rbrace
	| ENUM IDENTIFIER
	<==

enumerator_list ==>
	 enumerator
	| enumerator_list Comma enumerator
	<==

# change IDENTIFIER TO ENUMERATION_CONSTANT?
enumerator ==>
	 ENUMERATION_CONSTANT
	| ENUMERATION_CONSTANT Eq1 constant_expression
	<==

atomic_type_specifier --> ATOMIC ( type_name )

type_qualifier --> CONST | VOLATILE | ATOMIC | RESTRICT


function_specifier --> INLINE | NORETURN

alignment_specifier --> ALIGNAS ( type_name ) 
alignment_specifier --> ALIGNAS ( constant_expression )

declarator ==>
	 pointer direct_declarator
	| direct_declarator
	<==

direct_declarator ==>
	 IDENTIFIER
	| ( declarator )
	| direct_declarator [ ]
        | direct_declarator [ Star ]
        | direct_declarator [ STATIC type_qualifier_list? assignment_expression ]
        | direct_declarator [ type_qualifier_list Star ]
        | direct_declarator [ type_qualifier_list assignment_expression ]
        | direct_declarator [ type_qualifier_list STATIC assignment_expression ]        
        | direct_declarator [ type_qualifier_list ]
        | direct_declarator [ assignment_expression ]        
	| direct_declarator ( parameter_type_list )
	| direct_declarator ( identifier_list )
	| direct_declarator ( )
	<==


pointer --> Star type_qualifier_list?:tql pointer?:ptr
#pointer ==>
#	 Star
#	| Star type_qualifier_list
#	| Star pointer
#	| Star type_qualifier_list pointer
#	<==

type_qualifier_list --> type_qualifier+:qualifiers
#	 type_qualifier
#	| type_qualifier_list type_qualifier
#	<==


parameter_type_list ==>
	 parameter_list
	| parameter_list Comma ELLIPSIS
	<==

parameter_list --> parameter_declaration
parameter_list --> parameter_list Comma parameter_declaration


parameter_declaration ==>
	 declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	<==

identifier_list ==>
	 IDENTIFIER
	| identifier_list Comma IDENTIFIER
	<==

type_name ==>
	 specifier_qualifier_list
	| specifier_qualifier_list abstract_declarator
	<==

abstract_declarator ==>
	 pointer
	| direct_abstract_declarator
	| pointer direct_abstract_declarator
	<==

direct_abstract_declarator ==>
	 ( abstract_declarator )
	| [ ]
        | [ Star ]
        | [ STATIC type_qualifier_list? assignment_expression ]
        | [ type_qualifier_list STATIC?:s assignment_expression? ]
        | [ assignment_expression ]
	| direct_abstract_declarator [ ]
	| direct_abstract_declarator [ Star ]        
	| direct_abstract_declarator [ STATIC type_qualifier_list? assignment_expression ]
	| direct_abstract_declarator [ type_qualifier_list STATIC?:s assignment_expression ]        
	| direct_abstract_declarator [ type_qualifier_list ]
	| direct_abstract_declarator [ assignment_expression ]                
	| ( )
	| ( parameter_type_list )
	| direct_abstract_declarator ( )
	| direct_abstract_declarator ( parameter_type_list )
	<==

initializer ==>
	 assignment_expression
	| Lbrace initializer_list Comma? Rbrace
	<==

initializer_list ==>
	 initializer
	| initializer_list Comma initializer
        | designation initializer
        | initializer_list Comma designation initializer
	<==

designation --> designator_list Eq1

designator_list --> designator+

designator --> [ constant_expression ] | Dot IDENTIFIER

static_assert_declaration --> STATIC_ASSERT ( constant_expression Comma STRING_LITERAL ) ;

statement ==>
	 labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	<==

labeled_statement ==>
	 IDENTIFIER Colon statement
	| CASE constant_expression Colon statement
	| DEFAULT Colon statement
	<==

compound_statement --> Lbrace block_item*:items Rbrace
#	| Lbrace statement_list Rbrace
#	| Lbrace declaration_list Rbrace
#	| Lbrace declaration_list statement_list Rbrace
#	<==

block_item --> declaration | statement

# not needed?
#declaration_list ==> 
#	 declaration
#	| declaration_list declaration
#	<==
#statement_list ==>
#	 statement
#	| statement_list statement
#	<==

expression_statement --> ; | expression ;

selection_statement ==>
	 IF ( expression ) statement
	| IF ( expression ) statement ELSE statement
	| SWITCH ( expression ) statement
	<==

iteration_statement ==>
	 WHILE ( expression ) statement
	| DO statement WHILE ( expression ) ;
	| FOR ( expression_statement expression_statement expression? ) statement
        | FOR ( declaration expression_statement expression? ) statement
	<==

jump_statement ==>
	 GOTO IDENTIFIER ;
	| CONTINUE ;
	| BREAK ;
	| RETURN ;
	| RETURN expression ;
	<==

translation_unit --> external_declaration+
#	 external_declaration
#	| translation_unit external_declaration
#	<==

external_declaration ==>
	 function_definition
	| declaration
	<==

function_definition --> declaration_specifiers declarator declaration* compound_statement

#	| declaration_specifiers declarator compound_statement
#	| declarator declaration_list compound_statement
#	| declarator compound_statement
#	<==


EOF
