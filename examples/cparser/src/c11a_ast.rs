//Abstract syntax types generated by rustlr for grammar c11a
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(dead_code)]
extern crate rustlr;
use rustlr::LBox;
use crate::cauto_ast::declaration_specifiers::*;
use crate::cauto_ast::storage_class_specifier::*;
use crate::cauto_ast::init_declarator::*;
use crate::cauto_ast::init_declarator_list::*;
use crate::cauto_ast::declarator::*;
use crate::cauto_ast::declaration::*;
use crate::cauto_ast::direct_declarator::*;


#[derive(Debug)]
pub enum generic_association<'lt> {
  DEFAULT_14(LBox<assignment_expression<'lt>>),
  generic_association_13(LBox<type_name<'lt>>,LBox<assignment_expression<'lt>>),
  generic_association_Nothing,
}
impl<'lt> Default for generic_association<'lt> { fn default()->Self { generic_association::generic_association_Nothing } }

#[derive(Debug)]
pub enum direct_declarator<'lt> {
  direct_declarator_177(LBox<direct_declarator<'lt>>,type_qualifier_list,LBox<assignment_expression<'lt>>),
  direct_declarator_176(LBox<direct_declarator<'lt>>,type_qualifier_list,LBox<assignment_expression<'lt>>),
  direct_declarator_174(LBox<direct_declarator<'lt>>,Option<LBox<type_qualifier_list>>,LBox<assignment_expression<'lt>>),
  direct_declarator_175(LBox<direct_declarator<'lt>>,type_qualifier_list),
  IDENTIFIER(&'lt str),
  direct_declarator_169(LBox<declarator<'lt>>),
  direct_declarator_178(LBox<direct_declarator<'lt>>,type_qualifier_list),
  direct_declarator_179(LBox<direct_declarator<'lt>>,LBox<assignment_expression<'lt>>),
  direct_declarator_180(LBox<direct_declarator<'lt>>,LBox<parameter_type_list<'lt>>),
  direct_declarator_181(LBox<direct_declarator<'lt>>,identifier_list<'lt>),
  direct_declarator_Nothing,
}
impl<'lt> Default for direct_declarator<'lt> { fn default()->Self { direct_declarator::direct_declarator_Nothing } }

#[derive(Debug)]
pub enum type_specifier<'lt> {
  Typename(&'lt str),
  UNSIGNED,
  FLOAT,
  DOUBLE,
  SIGNED,
  type_specifier_126(LBox<enum_specifier<'lt>>),
  INT,
  BOOL,
  SHORT,
  IMAGINARY,
  type_specifier_125(LBox<struct_or_union_specifier<'lt>>),
  type_specifier_127(LBox<atomic_type_specifier<'lt>>),
  LONG,
  CHAR,
  COMPLEX,
  VOID,
  type_specifier_Nothing,
}
impl<'lt> Default for type_specifier<'lt> { fn default()->Self { type_specifier::type_specifier_Nothing } }

#[derive(Debug)]
pub enum parameter_type_list<'lt> {
  parameter_type_list_190(LBox<parameter_list<'lt>>),
  parameter_type_list_189(LBox<parameter_list<'lt>>),
  parameter_type_list_Nothing,
}
impl<'lt> Default for parameter_type_list<'lt> { fn default()->Self { parameter_type_list::parameter_type_list_Nothing } }

#[derive(Debug)]
pub enum type_name<'lt> {
  type_name_199(LBox<specifier_qualifier_list<'lt>>,LBox<abstract_declarator<'lt>>),
  type_name_198(LBox<specifier_qualifier_list<'lt>>),
  type_name_Nothing,
}
impl<'lt> Default for type_name<'lt> { fn default()->Self { type_name::type_name_Nothing } }

#[derive(Default,Debug)]
pub struct function_definition<'lt>(pub declaration_specifiers<'lt>,pub declarator<'lt>,pub Vec<LBox<declaration<'lt>>>,pub compound_statement<'lt>,);

#[derive(Debug)]
pub enum selection_statement<'lt> {
  IF_252(expression<'lt>,LBox<statement<'lt>>),
  IF_253(expression<'lt>,LBox<statement<'lt>>,LBox<statement<'lt>>),
  SWITCH_254(expression<'lt>,LBox<statement<'lt>>),
  selection_statement_Nothing,
}
impl<'lt> Default for selection_statement<'lt> { fn default()->Self { selection_statement::selection_statement_Nothing } }

#[derive(Debug)]
pub enum external_declaration<'lt> {
  external_declaration_269(function_definition<'lt>),
  external_declaration_270(declaration<'lt>),
  external_declaration_Nothing,
}
impl<'lt> Default for external_declaration<'lt> { fn default()->Self { external_declaration::external_declaration_Nothing } }

#[derive(Debug)]
pub enum equality_expression<'lt> {
  equality_expression_58(LBox<relational_expression<'lt>>),
  equality_expression_60(LBox<equality_expression<'lt>>,LBox<relational_expression<'lt>>),
  equality_expression_59(LBox<equality_expression<'lt>>,LBox<relational_expression<'lt>>),
  equality_expression_Nothing,
}
impl<'lt> Default for equality_expression<'lt> { fn default()->Self { equality_expression::equality_expression_Nothing } }

#[derive(Debug)]
pub enum conditional_expression<'lt> {
  conditional_expression_71(LBox<logical_or_expression<'lt>>),
  conditional_expression_72(LBox<logical_or_expression<'lt>>,LBox<expression<'lt>>,LBox<conditional_expression<'lt>>),
  conditional_expression_Nothing,
}
impl<'lt> Default for conditional_expression<'lt> { fn default()->Self { conditional_expression::conditional_expression_Nothing } }

#[derive(Debug)]
pub enum direct_abstract_declarator<'lt> {
  direct_abstract_declarator_203(LBox<abstract_declarator<'lt>>),
  direct_abstract_declarator_218(LBox<direct_abstract_declarator<'lt>>,LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_222(LBox<direct_abstract_declarator<'lt>>,LBox<parameter_type_list<'lt>>),
  direct_abstract_declarator_215(LBox<direct_abstract_declarator<'lt>>,Option<LBox<type_qualifier_list>>,LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_206(Option<LBox<type_qualifier_list>>,LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_219,
  direct_abstract_declarator_216(LBox<direct_abstract_declarator<'lt>>,type_qualifier_list,Option<()>,LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_220(LBox<parameter_type_list<'lt>>),
  direct_abstract_declarator_204,
  direct_abstract_declarator_212(LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_217(LBox<direct_abstract_declarator<'lt>>,type_qualifier_list),
  direct_abstract_declarator_205,
  direct_abstract_declarator_211(type_qualifier_list,Option<()>,Option<LBox<assignment_expression<'lt>>>),
  direct_abstract_declarator_Nothing,
}
impl<'lt> Default for direct_abstract_declarator<'lt> { fn default()->Self { direct_abstract_declarator::direct_abstract_declarator_Nothing } }

#[derive(Debug)]
pub enum jump_statement<'lt> {
  GOTO_261(&'lt str),
  RETURN_264,
  RETURN_265(expression<'lt>),
  CONTINUE_262,
  BREAK_263,
  jump_statement_Nothing,
}
impl<'lt> Default for jump_statement<'lt> { fn default()->Self { jump_statement::jump_statement_Nothing } }

#[derive(Debug)]
pub enum logical_or_expression<'lt> {
  logical_or_expression_69(LBox<logical_and_expression<'lt>>),
  logical_or_expression_70(LBox<logical_or_expression<'lt>>,LBox<logical_and_expression<'lt>>),
  logical_or_expression_Nothing,
}
impl<'lt> Default for logical_or_expression<'lt> { fn default()->Self { logical_or_expression::logical_or_expression_Nothing } }

#[derive(Debug)]
pub enum parameter_list<'lt> {
  parameter_list_191(LBox<parameter_declaration<'lt>>),
  parameter_list_192(LBox<parameter_list<'lt>>,LBox<parameter_declaration<'lt>>),
  parameter_list_Nothing,
}
impl<'lt> Default for parameter_list<'lt> { fn default()->Self { parameter_list::parameter_list_Nothing } }

#[derive(Debug)]
pub enum struct_declarator<'lt> {
  Colon_148(LBox<constant_expression<'lt>>),
  struct_declarator_149(LBox<declarator<'lt>>,LBox<constant_expression<'lt>>),
  struct_declarator_147(LBox<declarator<'lt>>),
  struct_declarator_Nothing,
}
impl<'lt> Default for struct_declarator<'lt> { fn default()->Self { struct_declarator::struct_declarator_Nothing } }

#[derive(Debug)]
pub enum struct_or_union_specifier<'lt> {
  struct_or_union_specifier_131(struct_or_union,&'lt str),
  struct_or_union_specifier_130(struct_or_union,Option<LBox<&'lt str>>,LBox<struct_declaration_list<'lt>>),
  struct_or_union_specifier_Nothing,
}
impl<'lt> Default for struct_or_union_specifier<'lt> { fn default()->Self { struct_or_union_specifier::struct_or_union_specifier_Nothing } }

#[derive(Debug)]
pub enum designator<'lt> {
  Dot_234(&'lt str),
  designator_233(LBox<constant_expression<'lt>>),
  designator_Nothing,
}
impl<'lt> Default for designator<'lt> { fn default()->Self { designator::designator_Nothing } }

#[derive(Default,Debug)]
pub struct static_assert_declaration<'lt>(pub LBox<constant_expression<'lt>>,pub &'lt str,);

#[derive(Debug)]
pub enum expression_statement<'lt> {
  expression_statement_250,
  expression_statement_251(expression<'lt>),
  expression_statement_Nothing,
}
impl<'lt> Default for expression_statement<'lt> { fn default()->Self { expression_statement::expression_statement_Nothing } }

#[derive(Debug)]
pub enum initializer<'lt> {
  initializer_223(LBox<assignment_expression<'lt>>),
  Lbrace_224(LBox<initializer_list<'lt>>),
  initializer_Nothing,
}
impl<'lt> Default for initializer<'lt> { fn default()->Self { initializer::initializer_Nothing } }

#[derive(Default,Debug)]
pub struct designator_list<'lt>(pub Vec<LBox<designator<'lt>>>,);

#[derive(Debug)]
pub enum initializer_list<'lt> {
  initializer_list_227(LBox<designation<'lt>>,LBox<initializer<'lt>>),
  initializer_list_225(LBox<initializer<'lt>>),
  initializer_list_226(LBox<initializer_list<'lt>>,LBox<initializer<'lt>>),
  initializer_list_228(LBox<initializer_list<'lt>>,LBox<designation<'lt>>,LBox<initializer<'lt>>),
  initializer_list_Nothing,
}
impl<'lt> Default for initializer_list<'lt> { fn default()->Self { initializer_list::initializer_list_Nothing } }

#[derive(Debug)]
pub enum assignment_expression<'lt> {
  assignment_expression_74(LBox<unary_expression<'lt>>,assignment_operator,LBox<assignment_expression<'lt>>),
  assignment_expression_73(LBox<conditional_expression<'lt>>),
  assignment_expression_Nothing,
}
impl<'lt> Default for assignment_expression<'lt> { fn default()->Self { assignment_expression::assignment_expression_Nothing } }

#[derive(Debug)]
pub enum struct_declaration<'lt> {
  struct_declaration_137(LBox<static_assert_declaration<'lt>>),
  struct_declaration_136(LBox<specifier_qualifier_list<'lt>>,Option<LBox<struct_declarator_list<'lt>>>),
  struct_declaration_Nothing,
}
impl<'lt> Default for struct_declaration<'lt> { fn default()->Self { struct_declaration::struct_declaration_Nothing } }

#[derive(Debug)]
pub enum relational_expression<'lt> {
  relational_expression_54(LBox<relational_expression<'lt>>,LBox<shift_expression<'lt>>),
  relational_expression_56(LBox<relational_expression<'lt>>,LBox<shift_expression<'lt>>),
  relational_expression_53(LBox<shift_expression<'lt>>),
  relational_expression_55(LBox<relational_expression<'lt>>,LBox<shift_expression<'lt>>),
  relational_expression_57(LBox<relational_expression<'lt>>,LBox<shift_expression<'lt>>),
  relational_expression_Nothing,
}
impl<'lt> Default for relational_expression<'lt> { fn default()->Self { relational_expression::relational_expression_Nothing } }

#[derive(Debug)]
pub enum enumerator<'lt> {
  ENUMERATION_CONSTANT_156(&'lt str,LBox<constant_expression<'lt>>),
  ENUMERATION_CONSTANT(&'lt str),
  enumerator_Nothing,
}
impl<'lt> Default for enumerator<'lt> { fn default()->Self { enumerator::enumerator_Nothing } }

#[derive(Debug)]
pub enum declaration<'lt> {
  DecSpec(declaration_specifiers<'lt>),
  DecSpecList(declaration_specifiers<'lt>,init_declarator_list<'lt>),
  Statassert(static_assert_declaration<'lt>),
  declaration_Nothing,
}
impl<'lt> Default for declaration<'lt> { fn default()->Self { declaration::declaration_Nothing } }

#[derive(Debug)]
pub enum enumerator_list<'lt> {
  enumerator_list_154(LBox<enumerator_list<'lt>>,LBox<enumerator<'lt>>),
  enumerator_list_153(LBox<enumerator<'lt>>),
  enumerator_list_Nothing,
}
impl<'lt> Default for enumerator_list<'lt> { fn default()->Self { enumerator_list::enumerator_list_Nothing } }

#[derive(Default,Debug)]
pub struct generic_selection<'lt>(pub LBox<assignment_expression<'lt>>,pub LBox<generic_assoc_list<'lt>>,);

#[derive(Debug)]
pub enum alignment_specifier<'lt> {
  ALIGNAS_165(LBox<constant_expression<'lt>>),
  ALIGNAS_164(LBox<type_name<'lt>>),
  alignment_specifier_Nothing,
}
impl<'lt> Default for alignment_specifier<'lt> { fn default()->Self { alignment_specifier::alignment_specifier_Nothing } }

#[derive(Debug)]
pub enum identifier_list<'lt> {
  IDENTIFIER(&'lt str),
  identifier_list_197(LBox<identifier_list<'lt>>,&'lt str),
  identifier_list_Nothing,
}
impl<'lt> Default for identifier_list<'lt> { fn default()->Self { identifier_list::identifier_list_Nothing } }

#[derive(Debug)]
pub enum unary_expression<'lt> {
  unary_expression_31(unary_operator,LBox<cast_expression<'lt>>),
  SIZEOF_33(LBox<type_name<'lt>>),
  unary_expression_28(LBox<postfix_expression<'lt>>),
  ALIGNOF_34(LBox<type_name<'lt>>),
  unary_expression_Nothing,
}
impl<'lt> Default for unary_expression<'lt> { fn default()->Self { unary_expression::unary_expression_Nothing } }

#[derive(Debug)]
pub enum specifier_qualifier_list<'lt> {
  specifier_qualifier_list_142(LBox<type_specifier<'lt>>),
  specifier_qualifier_list_144(type_qualifier),
  specifier_qualifier_list_141(LBox<type_specifier<'lt>>,LBox<specifier_qualifier_list<'lt>>),
  specifier_qualifier_list_143(type_qualifier,LBox<specifier_qualifier_list<'lt>>),
  specifier_qualifier_list_Nothing,
}
impl<'lt> Default for specifier_qualifier_list<'lt> { fn default()->Self { specifier_qualifier_list::specifier_qualifier_list_Nothing } }

#[derive(Debug)]
pub enum multiplicative_expression<'lt> {
  multiplicative_expression_45(LBox<multiplicative_expression<'lt>>,LBox<cast_expression<'lt>>),
  multiplicative_expression_44(LBox<multiplicative_expression<'lt>>,LBox<cast_expression<'lt>>),
  multiplicative_expression_43(LBox<cast_expression<'lt>>),
  multiplicative_expression_46(LBox<multiplicative_expression<'lt>>,LBox<cast_expression<'lt>>),
  multiplicative_expression_Nothing,
}
impl<'lt> Default for multiplicative_expression<'lt> { fn default()->Self { multiplicative_expression::multiplicative_expression_Nothing } }

#[derive(Default,Debug)]
pub struct struct_declaration_list<'lt>(pub Vec<LBox<struct_declaration<'lt>>>,);

#[derive(Debug)]
pub enum generic_assoc_list<'lt> {
  generic_assoc_list_11(LBox<generic_association<'lt>>),
  generic_assoc_list_12(LBox<generic_assoc_list<'lt>>,LBox<generic_association<'lt>>),
  generic_assoc_list_Nothing,
}
impl<'lt> Default for generic_assoc_list<'lt> { fn default()->Self { generic_assoc_list::generic_assoc_list_Nothing } }

#[derive(Debug)]
pub enum statement_list {
  statement_list_Nothing,
}
impl Default for statement_list { fn default()->Self { statement_list::statement_list_Nothing } }

#[derive(Debug)]
pub enum function_specifier {
  INLINE,
  NORETURN,
  function_specifier_Nothing,
}
impl Default for function_specifier { fn default()->Self { function_specifier::function_specifier_Nothing } }

#[derive(Debug)]
pub enum declarator<'lt> {
  declarator_167(LBox<direct_declarator<'lt>>),
  declarator_166(pointer,LBox<direct_declarator<'lt>>),
  declarator_Nothing,
}
impl<'lt> Default for declarator<'lt> { fn default()->Self { declarator::declarator_Nothing } }

#[derive(Default,Debug)]
pub struct atomic_type_specifier<'lt>(pub LBox<type_name<'lt>>,);

#[derive(Debug)]
pub enum init_declarator_list<'lt> {
  init_declarator_list_103(LBox<init_declarator_list<'lt>>,init_declarator<'lt>),
  init_declarator_list_102(init_declarator<'lt>),
  init_declarator_list_Nothing,
}
impl<'lt> Default for init_declarator_list<'lt> { fn default()->Self { init_declarator_list::init_declarator_list_Nothing } }

#[derive(Debug)]
pub enum argument_expression_list<'lt> {
  argument_expression_list_27(LBox<argument_expression_list<'lt>>,LBox<assignment_expression<'lt>>),
  argument_expression_list_26(LBox<assignment_expression<'lt>>),
  argument_expression_list_Nothing,
}
impl<'lt> Default for argument_expression_list<'lt> { fn default()->Self { argument_expression_list::argument_expression_list_Nothing } }

#[derive(Debug)]
pub enum and_expression<'lt> {
  and_expression_61(LBox<equality_expression<'lt>>),
  and_expression_62(LBox<and_expression<'lt>>,LBox<equality_expression<'lt>>),
  and_expression_Nothing,
}
impl<'lt> Default for and_expression<'lt> { fn default()->Self { and_expression::and_expression_Nothing } }

#[derive(Debug)]
pub enum storage_class_specifier {
  AUTO,
  REGISTER,
  STATIC,
  THREAD_LOCAL,
  Typedef,
  EXTERN,
  storage_class_specifier_Nothing,
}
impl Default for storage_class_specifier { fn default()->Self { storage_class_specifier::storage_class_specifier_Nothing } }

#[derive(Debug)]
pub enum cast_expression<'lt> {
  cast_expression_41(LBox<unary_expression<'lt>>),
  cast_expression_42(LBox<type_name<'lt>>,LBox<cast_expression<'lt>>),
  cast_expression_Nothing,
}
impl<'lt> Default for cast_expression<'lt> { fn default()->Self { cast_expression::cast_expression_Nothing } }

#[derive(Default,Debug)]
pub struct pointer {
  pub tql:Option<LBox<type_qualifier_list>>,
  pub ptr:Option<LBox<pointer>>,
}

#[derive(Default,Debug)]
pub struct translation_unit<'lt>(pub Vec<LBox<external_declaration<'lt>>>,);

#[derive(Debug)]
pub enum labeled_statement<'lt> {
  CASE_243(constant_expression<'lt>,LBox<statement<'lt>>),
  IDENTIFIER_242(&'lt str,LBox<statement<'lt>>),
  DEFAULT_244(LBox<statement<'lt>>),
  labeled_statement_Nothing,
}
impl<'lt> Default for labeled_statement<'lt> { fn default()->Self { labeled_statement::labeled_statement_Nothing } }

#[derive(Debug)]
pub enum type_qualifier {
  CONST,
  VOLATILE,
  ATOMIC,
  RESTRICT,
  type_qualifier_Nothing,
}
impl Default for type_qualifier { fn default()->Self { type_qualifier::type_qualifier_Nothing } }

#[derive(Debug)]
pub enum logical_and_expression<'lt> {
  logical_and_expression_68(LBox<logical_and_expression<'lt>>,LBox<inclusive_or_expression<'lt>>),
  logical_and_expression_67(LBox<inclusive_or_expression<'lt>>),
  logical_and_expression_Nothing,
}
impl<'lt> Default for logical_and_expression<'lt> { fn default()->Self { logical_and_expression::logical_and_expression_Nothing } }

#[derive(Debug)]
pub enum additive_expression<'lt> {
  additive_expression_49(LBox<additive_expression<'lt>>,LBox<multiplicative_expression<'lt>>),
  additive_expression_47(LBox<multiplicative_expression<'lt>>),
  additive_expression_48(LBox<additive_expression<'lt>>,LBox<multiplicative_expression<'lt>>),
  additive_expression_Nothing,
}
impl<'lt> Default for additive_expression<'lt> { fn default()->Self { additive_expression::additive_expression_Nothing } }

#[derive(Debug)]
pub enum init_declarator<'lt> {
  init_declarator_104(declarator<'lt>),
  init_declarator_105(declarator<'lt>,initializer<'lt>),
  init_declarator_Nothing,
}
impl<'lt> Default for init_declarator<'lt> { fn default()->Self { init_declarator::init_declarator_Nothing } }

#[derive(Default,Debug)]
pub struct designation<'lt>(pub LBox<designator_list<'lt>>,);

#[derive(Debug)]
pub enum expression<'lt> {
  expression_87(LBox<expression<'lt>>,LBox<assignment_expression<'lt>>),
  expression_86(LBox<assignment_expression<'lt>>),
  expression_Nothing,
}
impl<'lt> Default for expression<'lt> { fn default()->Self { expression::expression_Nothing } }

#[derive(Debug)]
pub enum shift_expression<'lt> {
  shift_expression_51(LBox<shift_expression<'lt>>,LBox<additive_expression<'lt>>),
  shift_expression_52(LBox<shift_expression<'lt>>,LBox<additive_expression<'lt>>),
  shift_expression_50(LBox<additive_expression<'lt>>),
  shift_expression_Nothing,
}
impl<'lt> Default for shift_expression<'lt> { fn default()->Self { shift_expression::shift_expression_Nothing } }

#[derive(Debug)]
pub enum exclusive_or_expression<'lt> {
  exclusive_or_expression_63(LBox<and_expression<'lt>>),
  exclusive_or_expression_64(LBox<exclusive_or_expression<'lt>>,LBox<and_expression<'lt>>),
  exclusive_or_expression_Nothing,
}
impl<'lt> Default for exclusive_or_expression<'lt> { fn default()->Self { exclusive_or_expression::exclusive_or_expression_Nothing } }

#[derive(Debug)]
pub enum struct_or_union {
  STRUCT,
  UNION,
  struct_or_union_Nothing,
}
impl Default for struct_or_union { fn default()->Self { struct_or_union::struct_or_union_Nothing } }

#[derive(Default,Debug)]
pub struct constant_expression<'lt>(pub LBox<conditional_expression<'lt>>,);

#[derive(Debug)]
pub enum declaration_list {
  declaration_list_Nothing,
}
impl Default for declaration_list { fn default()->Self { declaration_list::declaration_list_Nothing } }

#[derive(Debug)]
pub enum declaration_specifiers<'lt> {
  declaration_specifiers_99(LBox<alignment_specifier<'lt>>),
  declaration_specifiers_97(function_specifier),
  declaration_specifiers_96(type_qualifier,LBox<declaration_specifiers<'lt>>),
  declaration_specifiers_92(storage_class_specifier),
  declaration_specifiers_93(LBox<type_specifier<'lt>>),
  declaration_specifiers_95(type_qualifier),
  declaration_specifiers_100(LBox<alignment_specifier<'lt>>,LBox<declaration_specifiers<'lt>>),
  declaration_specifiers_98(function_specifier,LBox<declaration_specifiers<'lt>>),
  DSCDS(storage_class_specifier,LBox<declaration_specifiers<'lt>>),
  declaration_specifiers_94(LBox<type_specifier<'lt>>,LBox<declaration_specifiers<'lt>>),
  declaration_specifiers_Nothing,
}
impl<'lt> Default for declaration_specifiers<'lt> { fn default()->Self { declaration_specifiers::declaration_specifiers_Nothing } }

#[derive(Debug)]
pub enum constant<'lt> {
  ENUMERATION_CONSTANT(&'lt str),
  I_CONSTANT(i32),
  F_CONSTANT(f64),
  constant_Nothing,
}
impl<'lt> Default for constant<'lt> { fn default()->Self { constant::constant_Nothing } }

#[derive(Debug)]
pub enum statement<'lt> {
  statement_241(jump_statement<'lt>),
  statement_238(expression_statement<'lt>),
  statement_236(LBox<labeled_statement<'lt>>),
  statement_237(LBox<compound_statement<'lt>>),
  statement_239(LBox<selection_statement<'lt>>),
  statement_240(LBox<iteration_statement<'lt>>),
  statement_Nothing,
}
impl<'lt> Default for statement<'lt> { fn default()->Self { statement::statement_Nothing } }

#[derive(Default,Debug)]
pub struct compound_statement<'lt> {
  pub items:Vec<LBox<block_item<'lt>>>,
}

#[derive(Debug)]
pub enum abstract_declarator<'lt> {
  abstract_declarator_201(LBox<direct_abstract_declarator<'lt>>),
  abstract_declarator_202(pointer,LBox<direct_abstract_declarator<'lt>>),
  abstract_declarator_200(pointer),
  abstract_declarator_Nothing,
}
impl<'lt> Default for abstract_declarator<'lt> { fn default()->Self { abstract_declarator::abstract_declarator_Nothing } }

#[derive(Debug)]
pub enum postfix_expression<'lt> {
  postfix_expression_16(LBox<postfix_expression<'lt>>,LBox<expression<'lt>>),
  postfix_expression_18(LBox<postfix_expression<'lt>>,LBox<argument_expression_list<'lt>>),
  postfix_expression_19(LBox<postfix_expression<'lt>>,&'lt str),
  postfix_expression_15(LBox<primary_expression<'lt>>),
  postfix_expression_20(LBox<postfix_expression<'lt>>,&'lt str),
  postfix_expression_25(LBox<type_name<'lt>>,LBox<initializer_list<'lt>>),
  postfix_expression_Nothing,
}
impl<'lt> Default for postfix_expression<'lt> { fn default()->Self { postfix_expression::postfix_expression_Nothing } }

#[derive(Debug)]
pub enum iteration_statement<'lt> {
  FOR_260(declaration<'lt>,expression_statement<'lt>,Option<LBox<expression<'lt>>>,LBox<statement<'lt>>),
  DO_256(LBox<statement<'lt>>,expression<'lt>),
  FOR_259(expression_statement<'lt>,expression_statement<'lt>,Option<LBox<expression<'lt>>>,LBox<statement<'lt>>),
  WHILE_255(expression<'lt>,LBox<statement<'lt>>),
  iteration_statement_Nothing,
}
impl<'lt> Default for iteration_statement<'lt> { fn default()->Self { iteration_statement::iteration_statement_Nothing } }

#[derive(Debug)]
pub enum inclusive_or_expression<'lt> {
  inclusive_or_expression_65(LBox<exclusive_or_expression<'lt>>),
  inclusive_or_expression_66(LBox<inclusive_or_expression<'lt>>,LBox<exclusive_or_expression<'lt>>),
  inclusive_or_expression_Nothing,
}
impl<'lt> Default for inclusive_or_expression<'lt> { fn default()->Self { inclusive_or_expression::inclusive_or_expression_Nothing } }

#[derive(Debug)]
pub enum struct_declarator_list<'lt> {
  struct_declarator_list_146(LBox<struct_declarator_list<'lt>>,LBox<struct_declarator<'lt>>),
  struct_declarator_list_145(LBox<struct_declarator<'lt>>),
  struct_declarator_list_Nothing,
}
impl<'lt> Default for struct_declarator_list<'lt> { fn default()->Self { struct_declarator_list::struct_declarator_list_Nothing } }

#[derive(Debug)]
pub enum stringnt<'lt> {
  STRING_LITERAL(&'lt str),
  FUNC_NAME,
  stringnt_Nothing,
}
impl<'lt> Default for stringnt<'lt> { fn default()->Self { stringnt::stringnt_Nothing } }

#[derive(Debug)]
pub enum block_item<'lt> {
  block_item_248(declaration<'lt>),
  block_item_249(LBox<statement<'lt>>),
  block_item_Nothing,
}
impl<'lt> Default for block_item<'lt> { fn default()->Self { block_item::block_item_Nothing } }

#[derive(Default,Debug)]
pub struct type_qualifier_list {
  pub qualifiers:Vec<LBox<type_qualifier>>,
}

#[derive(Debug)]
pub enum primary_expression<'lt> {
  IDENTIFIER(&'lt str),
  primary_expression_2(stringnt<'lt>),
  primary_expression_4(LBox<generic_selection<'lt>>),
  primary_expression_3(LBox<expression<'lt>>),
  primary_expression_1(constant<'lt>),
  primary_expression_Nothing,
}
impl<'lt> Default for primary_expression<'lt> { fn default()->Self { primary_expression::primary_expression_Nothing } }

#[derive(Debug)]
pub enum assignment_operator {
  AND_ASSIGN,
  MOD_ASSIGN,
  LEFT_ASSIGN,
  SUB_ASSIGN,
  RIGHT_ASSIGN,
  OR_ASSIGN,
  Eq1,
  MUL_ASSIGN,
  DIV_ASSIGN,
  ADD_ASSIGN,
  XOR_ASSIGN,
  assignment_operator_Nothing,
}
impl Default for assignment_operator { fn default()->Self { assignment_operator::assignment_operator_Nothing } }

#[derive(Debug)]
pub enum parameter_declaration<'lt> {
  parameter_declaration_195(LBox<declaration_specifiers<'lt>>),
  parameter_declaration_194(LBox<declaration_specifiers<'lt>>,LBox<abstract_declarator<'lt>>),
  parameter_declaration_193(LBox<declaration_specifiers<'lt>>,LBox<declarator<'lt>>),
  parameter_declaration_Nothing,
}
impl<'lt> Default for parameter_declaration<'lt> { fn default()->Self { parameter_declaration::parameter_declaration_Nothing } }

#[derive(Debug)]
pub enum enum_specifier<'lt> {
  ENUM_152(&'lt str),
  ENUM_150(LBox<enumerator_list<'lt>>),
  ENUM_151(&'lt str,LBox<enumerator_list<'lt>>),
  enum_specifier_Nothing,
}
impl<'lt> Default for enum_specifier<'lt> { fn default()->Self { enum_specifier::enum_specifier_Nothing } }

#[derive(Debug)]
pub enum unary_operator {
  unary_operator_37,
  Star,
  Amp,
  unary_operator_38,
  unary_operator_39,
  Bang,
  unary_operator_Nothing,
}
impl Default for unary_operator { fn default()->Self { unary_operator::unary_operator_Nothing } }

