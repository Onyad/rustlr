//Abstract syntax types generated by rustlr for grammar c11riM
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(dead_code)]
extern crate rustlr;
use rustlr::LBox;

#[derive(Debug)]
pub enum struct_declarator<'lt> {
  struct_declarator_129(LBox<declarator<'lt>>,LBox<expression<'lt>>),
  Colon_128(LBox<expression<'lt>>),
  struct_declarator_127(LBox<declarator<'lt>>),
  struct_declarator_Nothing,
}
impl<'lt> Default for struct_declarator<'lt> { fn default()->Self { struct_declarator::struct_declarator_Nothing } }

#[derive(Debug)]
pub enum type_specifier<'lt> {
  CHAR,
  type_specifier_108(LBox<atomic_type_specifier<'lt>>),
  type_specifier_107(LBox<enum_specifier<'lt>>),
  DOUBLE,
  COMPLEX,
  LONG,
  BOOL,
  FLOAT,
  Typename(&'lt str),
  VOID,
  SIGNED,
  INT,
  SHORT,
  UNSIGNED,
  IMAGINARY,
  type_specifier_106(LBox<struct_or_union_specifier<'lt>>),
  type_specifier_Nothing,
}
impl<'lt> Default for type_specifier<'lt> { fn default()->Self { type_specifier::type_specifier_Nothing } }

#[derive(Default,Debug)]
pub struct atomic_type_specifier<'lt>(pub LBox<type_name<'lt>>,);

#[derive(Debug)]
pub enum function_specifier {
  INLINE,
  NORETURN,
  function_specifier_Nothing,
}
impl Default for function_specifier { fn default()->Self { function_specifier::function_specifier_Nothing } }

#[derive(Debug)]
pub enum abstract_declarator<'lt> {
  abstract_declarator_193(pointer),
  abstract_declarator_195(pointer,LBox<direct_abstract_declarator<'lt>>),
  abstract_declarator_194(LBox<direct_abstract_declarator<'lt>>),
  abstract_declarator_Nothing,
}
impl<'lt> Default for abstract_declarator<'lt> { fn default()->Self { abstract_declarator::abstract_declarator_Nothing } }

#[derive(Default,Debug)]
pub struct init_declarator<'lt> {
  pub decl:declarator<'lt>,
  pub initializer:Option<LBox<initializer<'lt>>>,
}

#[derive(Debug)]
pub enum iteration_statement<'lt> {
  FOR_247(expression_statement<'lt>,expression_statement<'lt>,Option<LBox<expressionS<'lt>>>,LBox<statement<'lt>>),
  FOR_248(declaration<'lt>,expression_statement<'lt>,Option<LBox<expressionS<'lt>>>,LBox<statement<'lt>>),
  WHILE_245(expressionS<'lt>,LBox<statement<'lt>>),
  DO_246(LBox<statement<'lt>>,expressionS<'lt>),
  iteration_statement_Nothing,
}
impl<'lt> Default for iteration_statement<'lt> { fn default()->Self { iteration_statement::iteration_statement_Nothing } }

#[derive(Debug)]
pub enum declaration<'lt> {
  Statassert(static_assert_declaration<'lt>),
  DecSpecList(Vec<LBox<declaration_specifier<'lt>>>,Vec<LBox<init_declarator<'lt>>>),
  DecSpec(Vec<LBox<declaration_specifier<'lt>>>),
  declaration_Nothing,
}
impl<'lt> Default for declaration<'lt> { fn default()->Self { declaration::declaration_Nothing } }

#[derive(Default,Debug)]
pub struct identifier_list<'lt>(pub Vec<LBox<&'lt str>>,);

#[derive(Default,Debug)]
pub struct initializer_designation<'lt>(pub Option<LBox<designation<'lt>>>,pub LBox<initializer<'lt>>,);

#[derive(Default,Debug)]
pub struct translation_unit<'lt>(pub Vec<LBox<external_declaration<'lt>>>,);

#[derive(Debug)]
pub enum type_qualifier {
  VOLATILE,
  ATOMIC,
  RESTRICT,
  CONST,
  type_qualifier_Nothing,
}
impl Default for type_qualifier { fn default()->Self { type_qualifier::type_qualifier_Nothing } }

#[derive(Debug)]
pub enum enum_specifier<'lt> {
  ENUM_132(&'lt str),
  ENUM_130(LBox<enumerator_list<'lt>>),
  ENUM_131(&'lt str,LBox<enumerator_list<'lt>>),
  enum_specifier_Nothing,
}
impl<'lt> Default for enum_specifier<'lt> { fn default()->Self { enum_specifier::enum_specifier_Nothing } }

#[derive(Debug)]
pub enum direct_contents<'lt> {
  direct_contents_159(Option<()>,LBox<expression<'lt>>),
  direct_contents_163(Option<()>,Vec<LBox<type_qualifier>>,LBox<expression<'lt>>),
  direct_contents_167(Vec<LBox<type_qualifier>>,Option<LBox<expression<'lt>>>),
  direct_contents_168(LBox<parameter_type_list<'lt>>),
  direct_contents_173(Vec<LBox<&'lt str>>),
  direct_contents_156(Option<()>),
  direct_contents_162(Vec<LBox<type_qualifier>>),
  DEC(LBox<declarator<'lt>>),
  IDENTIFIER(&'lt str),
  direct_contents_Nothing,
}
impl<'lt> Default for direct_contents<'lt> { fn default()->Self { direct_contents::direct_contents_Nothing } }

#[derive(Default,Debug)]
pub struct function_definition<'lt>(pub Vec<LBox<declaration_specifier<'lt>>>,pub declarator<'lt>,pub Vec<LBox<declaration<'lt>>>,pub compound_statement<'lt>,);

#[derive(Debug)]
pub enum selection_statement<'lt> {
  SWITCH_244(expressionS<'lt>,LBox<statement<'lt>>),
  IF_242(expressionS<'lt>,LBox<statement<'lt>>),
  IF_243(expressionS<'lt>,LBox<statement<'lt>>,LBox<statement<'lt>>),
  selection_statement_Nothing,
}
impl<'lt> Default for selection_statement<'lt> { fn default()->Self { selection_statement::selection_statement_Nothing } }

#[derive(Default,Debug)]
pub struct NEWSEQNT_182_1();

#[derive(Debug)]
pub enum block_item<'lt> {
  Declaration(declaration<'lt>),
  Statement(LBox<statement<'lt>>),
  block_item_Nothing,
}
impl<'lt> Default for block_item<'lt> { fn default()->Self { block_item::block_item_Nothing } }

#[derive(Default,Debug)]
pub struct designation<'lt>(pub Vec<LBox<designator<'lt>>>,);

#[derive(Debug)]
pub enum labeled_statement<'lt> {
  DEFAULT_233(LBox<statement<'lt>>),
  IDENTIFIER_231(&'lt str,LBox<statement<'lt>>),
  CASE_232(expression<'lt>,LBox<statement<'lt>>),
  labeled_statement_Nothing,
}
impl<'lt> Default for labeled_statement<'lt> { fn default()->Self { labeled_statement::labeled_statement_Nothing } }

#[derive(Debug)]
pub enum declaration_specifiers {
  declaration_specifiers_Nothing,
}
impl Default for declaration_specifiers { fn default()->Self { declaration_specifiers::declaration_specifiers_Nothing } }

#[derive(Default,Debug)]
pub struct static_assert_declaration<'lt>(pub LBox<expression<'lt>>,pub &'lt str,);

#[derive(Debug)]
pub enum expression<'lt> {
  Uminus(LBox<expression<'lt>>),
  SIZEOF_31(LBox<type_name<'lt>>),
  expression_47(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Comp(LBox<expression<'lt>>),
  expression_16(LBox<expression<'lt>>,&'lt str),
  expression_42(LBox<expression<'lt>>,LBox<expression<'lt>>),
  And(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_44(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_17(LBox<expression<'lt>>,&'lt str),
  Oreq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_39(LBox<type_name<'lt>>,LBox<expression<'lt>>),
  funcname,
  expression_19(LBox<expression<'lt>>),
  expression_51(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Econst(&'lt str),
  Or(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Stringlit(&'lt str),
  Band(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Not(LBox<expression<'lt>>),
  DEC_OP_29(LBox<expression<'lt>>),
  Iconst(i32),
  expression_50(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Bor(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_24(LBox<type_name<'lt>>,Vec<LBox<initializer_designation<'lt>>>),
  expression_45(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_58(LBox<expression<'lt>>,LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_46(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_49(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Leq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Xeq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_15(LBox<expression<'lt>>,LBox<expression_list<'lt>>),
  expression_18(LBox<expression<'lt>>),
  expression_52(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Ustar(LBox<expression<'lt>>),
  expression_6(LBox<expression<'lt>>),
  expression_14(LBox<expression<'lt>>),
  Assign(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Subeq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_13(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Fconst(f64),
  SIZEOF_30(LBox<expression<'lt>>),
  Aeq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_41(LBox<expression<'lt>>,LBox<expression<'lt>>),
  INC_OP_28(LBox<expression<'lt>>),
  ALIGNOF_32(LBox<type_name<'lt>>),
  Teq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Uplus(LBox<expression<'lt>>),
  Ref(LBox<expression<'lt>>),
  Xor(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_48(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Deq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Req(LBox<expression<'lt>>,LBox<expression<'lt>>),
  ID(&'lt str),
  expression_7(LBox<generic_selection<'lt>>),
  Andeq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_40(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Meq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_43(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_Nothing,
}
impl<'lt> Default for expression<'lt> { fn default()->Self { expression::expression_Nothing } }

#[derive(Debug)]
pub enum generic_association<'lt> {
  generic_association_11(LBox<type_name<'lt>>,LBox<expression<'lt>>),
  DEFAULT_12(LBox<expression<'lt>>),
  generic_association_Nothing,
}
impl<'lt> Default for generic_association<'lt> { fn default()->Self { generic_association::generic_association_Nothing } }

#[derive(Debug)]
pub enum statement<'lt> {
  statement_230(jump_statement<'lt>),
  statement_225(LBox<labeled_statement<'lt>>),
  statement_228(LBox<selection_statement<'lt>>),
  statement_229(LBox<iteration_statement<'lt>>),
  statement_227(expression_statement<'lt>),
  statement_226(LBox<compound_statement<'lt>>),
  statement_Nothing,
}
impl<'lt> Default for statement<'lt> { fn default()->Self { statement::statement_Nothing } }

#[derive(Default,Debug)]
pub struct expressionS<'lt>(pub expression_list<'lt>,);

#[derive(Debug)]
pub enum direct_abstract_declarator<'lt> {
  direct_abstract_declarator_209(LBox<direct_abstract_declarator<'lt>>,LBox<expression<'lt>>),
  direct_abstract_declarator_212(LBox<direct_abstract_declarator<'lt>>),
  direct_abstract_declarator_207(LBox<direct_abstract_declarator<'lt>>,Vec<LBox<type_qualifier>>,Option<()>,LBox<expression<'lt>>),
  direct_abstract_declarator_196(LBox<abstract_declarator<'lt>>),
  direct_abstract_declarator_213(LBox<direct_abstract_declarator<'lt>>,LBox<parameter_type_list<'lt>>),
  direct_abstract_declarator_199(Vec<LBox<type_qualifier>>,LBox<expression<'lt>>),
  direct_abstract_declarator_208(LBox<direct_abstract_declarator<'lt>>,Vec<LBox<type_qualifier>>),
  direct_abstract_declarator_210,
  direct_abstract_declarator_204(LBox<direct_abstract_declarator<'lt>>),
  direct_abstract_declarator_211(LBox<parameter_type_list<'lt>>),
  direct_abstract_declarator_202(Vec<LBox<type_qualifier>>,Option<()>,Option<LBox<expression<'lt>>>),
  direct_abstract_declarator_198,
  direct_abstract_declarator_206(LBox<direct_abstract_declarator<'lt>>,Vec<LBox<type_qualifier>>,LBox<expression<'lt>>),
  direct_abstract_declarator_205(LBox<direct_abstract_declarator<'lt>>),
  direct_abstract_declarator_197,
  direct_abstract_declarator_203(LBox<expression<'lt>>),
  direct_abstract_declarator_Nothing,
}
impl<'lt> Default for direct_abstract_declarator<'lt> { fn default()->Self { direct_abstract_declarator::direct_abstract_declarator_Nothing } }

#[derive(Default,Debug)]
pub struct compound_statement<'lt> {
  pub statements:Vec<LBox<block_item<'lt>>>,
}

#[derive(Debug)]
pub enum parameter_declaration<'lt> {
  parameter_declaration_187(Vec<LBox<declaration_specifier<'lt>>>,LBox<abstract_declarator<'lt>>),
  parameter_declaration_186(Vec<LBox<declaration_specifier<'lt>>>,LBox<declarator<'lt>>),
  parameter_declaration_188(Vec<LBox<declaration_specifier<'lt>>>),
  parameter_declaration_Nothing,
}
impl<'lt> Default for parameter_declaration<'lt> { fn default()->Self { parameter_declaration::parameter_declaration_Nothing } }

#[derive(Debug)]
pub enum external_declaration<'lt> {
  external_declaration_258(declaration<'lt>),
  directive(&'lt str),
  external_declaration_257(function_definition<'lt>),
  external_declaration_Nothing,
}
impl<'lt> Default for external_declaration<'lt> { fn default()->Self { external_declaration::external_declaration_Nothing } }

#[derive(Default,Debug)]
pub struct generic_selection<'lt>(pub LBox<expression<'lt>>,pub Vec<LBox<generic_association<'lt>>>,);

#[derive(Debug)]
pub enum jump_statement<'lt> {
  RETURN_253(expressionS<'lt>),
  BREAK_251,
  CONTINUE_250,
  RETURN_252,
  GOTO_249(&'lt str),
  jump_statement_Nothing,
}
impl<'lt> Default for jump_statement<'lt> { fn default()->Self { jump_statement::jump_statement_Nothing } }

#[derive(Default,Debug)]
pub struct declarator<'lt>(pub Option<LBox<pointer>>,pub LBox<direct_declarator<'lt>>,);

#[derive(Debug)]
pub enum designator<'lt> {
  designator_222(LBox<expression<'lt>>),
  Dot_223(&'lt str),
  designator_Nothing,
}
impl<'lt> Default for designator<'lt> { fn default()->Self { designator::designator_Nothing } }

#[derive(Default,Debug)]
pub struct pointer {
  pub tql:Vec<LBox<type_qualifier>>,
  pub ptr:Option<LBox<pointer>>,
}

#[derive(Default,Debug)]
pub struct type_name<'lt>(pub Vec<LBox<specifier_qualifier<'lt>>>,pub Option<LBox<abstract_declarator<'lt>>>,);

#[derive(Default,Debug)]
pub struct enumerator<'lt>(pub &'lt str,pub Option<LBox<expression<'lt>>>,);

#[derive(Debug)]
pub enum struct_or_union_specifier<'lt> {
  struct_or_union_specifier_113(struct_or_union,Option<LBox<&'lt str>>,Vec<LBox<struct_declaration<'lt>>>),
  struct_or_union_specifier_114(struct_or_union,&'lt str),
  struct_or_union_specifier_Nothing,
}
impl<'lt> Default for struct_or_union_specifier<'lt> { fn default()->Self { struct_or_union_specifier::struct_or_union_specifier_Nothing } }

#[derive(Debug)]
pub enum struct_declaration<'lt> {
  struct_declaration_124(LBox<static_assert_declaration<'lt>>),
  struct_declaration_123(Vec<LBox<specifier_qualifier<'lt>>>,Vec<LBox<struct_declarator<'lt>>>),
  struct_declaration_Nothing,
}
impl<'lt> Default for struct_declaration<'lt> { fn default()->Self { struct_declaration::struct_declaration_Nothing } }

#[derive(Debug)]
pub enum struct_or_union {
  STRUCT(()),
  UNION(()),
  struct_or_union_Nothing,
}
impl Default for struct_or_union { fn default()->Self { struct_or_union::struct_or_union_Nothing } }

#[derive(Default,Debug)]
pub struct expression_statement<'lt>(pub Option<LBox<expressionS<'lt>>>,);

#[derive(Default,Debug)]
pub struct parameter_type_list<'lt> {
  pub parameters:Vec<LBox<parameter_declaration<'lt>>>,
  pub ellipsis:Option<LBox<NEWSEQNT_182_1>>,
}

#[derive(Default,Debug)]
pub struct direct_declarator<'lt>(pub LBox<direct_contents<'lt>>,pub Vec<LBox<direct_contents<'lt>>>,);

#[derive(Debug)]
pub enum initializer<'lt> {
  initializer_214(LBox<expression<'lt>>),
  Lbrace_215(Vec<LBox<initializer_designation<'lt>>>),
  initializer_Nothing,
}
impl<'lt> Default for initializer<'lt> { fn default()->Self { initializer::initializer_Nothing } }

#[derive(Default,Debug)]
pub struct enumerator_list<'lt>(pub Vec<LBox<enumerator<'lt>>>,);

#[derive(Debug)]
pub enum specifier_qualifier<'lt> {
  specifier_qualifier_126(type_qualifier),
  specifier_qualifier_125(LBox<type_specifier<'lt>>),
  specifier_qualifier_Nothing,
}
impl<'lt> Default for specifier_qualifier<'lt> { fn default()->Self { specifier_qualifier::specifier_qualifier_Nothing } }

#[derive(Default,Debug)]
pub struct expression_list<'lt>(pub Vec<LBox<expression<'lt>>>,);

#[derive(Debug)]
pub enum type_qualifier_list {
  type_qualifier_list_Nothing,
}
impl Default for type_qualifier_list { fn default()->Self { type_qualifier_list::type_qualifier_list_Nothing } }

#[derive(Debug)]
pub enum storage_class_specifier {
  TYPEDEF,
  REGISTER,
  STATIC,
  EXTERN,
  AUTO,
  THREAD_LOCAL,
  storage_class_specifier_Nothing,
}
impl Default for storage_class_specifier { fn default()->Self { storage_class_specifier::storage_class_specifier_Nothing } }

#[derive(Debug)]
pub enum alignment_specifier<'lt> {
  ALIGNAS_148(LBox<expression<'lt>>),
  ALIGNAS_147(LBox<type_name<'lt>>),
  alignment_specifier_Nothing,
}
impl<'lt> Default for alignment_specifier<'lt> { fn default()->Self { alignment_specifier::alignment_specifier_Nothing } }

#[derive(Debug)]
pub enum declaration_specifier<'lt> {
  alignspec(LBox<alignment_specifier<'lt>>),
  storage(storage_class_specifier),
  typespec(LBox<type_specifier<'lt>>),
  typequal(type_qualifier),
  funcspec(function_specifier),
  declaration_specifier_Nothing,
}
impl<'lt> Default for declaration_specifier<'lt> { fn default()->Self { declaration_specifier::declaration_specifier_Nothing } }

