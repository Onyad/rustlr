//Abstract syntax types generated by rustlr for grammar c11b
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(dead_code)]
extern crate rustlr;
use rustlr::LBox;
use crate::cauto_ast::declaration_specifiers::*;
use crate::cauto_ast::storage_class_specifier::*;
use crate::cauto_ast::init_declarator::*;
use crate::cauto_ast::init_declarator_list::*;
use crate::cauto_ast::declarator::*;
use crate::cauto_ast::declaration::*;
use crate::cauto_ast::direct_declarator::*;


#[derive(Debug)]
pub enum generic_assoc_list {
  generic_assoc_list_Nothing,
}
impl Default for generic_assoc_list { fn default()->Self { generic_assoc_list::generic_assoc_list_Nothing } }

#[derive(Debug)]
pub enum enum_specifier<'lt> {
  ENUM_155(Vec<LBox<enumerator<'lt>>>),
  ENUM_157(&'lt str),
  ENUM_156(&'lt str,LBox<enumerator_list<'lt>>),
  enum_specifier_Nothing,
}
impl<'lt> Default for enum_specifier<'lt> { fn default()->Self { enum_specifier::enum_specifier_Nothing } }

#[derive(Default,Debug)]
pub struct struct_declaration_list<'lt>(pub Vec<LBox<struct_declaration<'lt>>>,);

#[derive(Default,Debug)]
pub struct compound_statement<'lt> {
  pub statements:Vec<LBox<block_item<'lt>>>,
}

#[derive(Debug)]
pub enum unary_expression<'lt> {
  unary_expression_32(unary_operator,LBox<cast_expression<'lt>>),
  unary_expression_29(LBox<postfix_expression<'lt>>),
  DEC_OP_31(LBox<unary_expression<'lt>>),
  SIZEOF_33(LBox<unary_expression<'lt>>),
  SIZEOF_34(LBox<type_name<'lt>>),
  ALIGNOF_35(LBox<type_name<'lt>>),
  INC_OP_30(LBox<unary_expression<'lt>>),
  unary_expression_Nothing,
}
impl<'lt> Default for unary_expression<'lt> { fn default()->Self { unary_expression::unary_expression_Nothing } }

#[derive(Debug)]
pub enum expression_list {
  expression_list_Nothing,
}
impl Default for expression_list { fn default()->Self { expression_list::expression_list_Nothing } }

#[derive(Debug)]
pub enum statement_list {
  statement_list_Nothing,
}
impl Default for statement_list { fn default()->Self { statement_list::statement_list_Nothing } }

#[derive(Debug)]
pub enum initializer<'lt> {
  initializer_235(assignment_expression<'lt>),
  Lbrace_238(Vec<LBox<initializer_designation<'lt>>>),
  initializer_Nothing,
}
impl<'lt> Default for initializer<'lt> { fn default()->Self { initializer::initializer_Nothing } }

#[derive(Default,Debug)]
pub struct init_declarator_list<'lt>(pub Vec<LBox<init_declarator<'lt>>>,);

#[derive(Debug)]
pub enum unary_operator {
  Comp,
  Amp,
  Bang,
  UPlus,
  Star,
  UMinus,
  unary_operator_Nothing,
}
impl Default for unary_operator { fn default()->Self { unary_operator::unary_operator_Nothing } }

#[derive(Debug)]
pub enum constant<'lt> {
  ENUMERATION_CONSTANT(&'lt str),
  I_CONSTANT(i32),
  F_CONSTANT(f64),
  constant_Nothing,
}
impl<'lt> Default for constant<'lt> { fn default()->Self { constant::constant_Nothing } }

#[derive(Debug)]
pub enum labeled_statement<'lt> {
  IDENTIFIER_255(&'lt str,LBox<statement<'lt>>),
  DEFAULT_257(LBox<statement<'lt>>),
  CASE_256(constant_expression<'lt>,LBox<statement<'lt>>),
  labeled_statement_Nothing,
}
impl<'lt> Default for labeled_statement<'lt> { fn default()->Self { labeled_statement::labeled_statement_Nothing } }

#[derive(Debug)]
pub enum direct_declarator<'lt> {
  direct_declarator_187(LBox<direct_declarator<'lt>>,identifier_list<'lt>),
  direct_declarator_188(LBox<direct_declarator<'lt>>),
  direct_declarator_177(LBox<direct_declarator<'lt>>),
  IDENTIFIER(&'lt str),
  direct_declarator_180(LBox<direct_declarator<'lt>>,LBox<assignment_expression<'lt>>),
  direct_declarator_183(LBox<direct_declarator<'lt>>,type_qualifier_list,LBox<assignment_expression<'lt>>),
  direct_declarator_182(LBox<direct_declarator<'lt>>,type_qualifier_list,LBox<assignment_expression<'lt>>),
  direct_declarator_185(LBox<direct_declarator<'lt>>,LBox<assignment_expression<'lt>>),
  direct_declarator_179(LBox<direct_declarator<'lt>>,type_qualifier_list,LBox<assignment_expression<'lt>>),
  direct_declarator_181(LBox<direct_declarator<'lt>>,type_qualifier_list),
  direct_declarator_184(LBox<direct_declarator<'lt>>,type_qualifier_list),
  direct_declarator_186(LBox<direct_declarator<'lt>>,LBox<parameter_type_list<'lt>>),
  direct_declarator_176(LBox<declarator<'lt>>),
  direct_declarator_178(LBox<direct_declarator<'lt>>),
  direct_declarator_Nothing,
}
impl<'lt> Default for direct_declarator<'lt> { fn default()->Self { direct_declarator::direct_declarator_Nothing } }

#[derive(Debug)]
pub enum parameter_list {
  parameter_list_Nothing,
}
impl Default for parameter_list { fn default()->Self { parameter_list::parameter_list_Nothing } }

#[derive(Default,Debug)]
pub struct initializer_designation<'lt>(pub Option<LBox<designation<'lt>>>,pub LBox<initializer<'lt>>,);

#[derive(Default,Debug)]
pub struct designation<'lt>(pub Vec<LBox<designator<'lt>>>,);

#[derive(Debug)]
pub enum logical_and_expression<'lt> {
  logical_and_expression_68(LBox<inclusive_or_expression<'lt>>),
  logical_and_expression_69(LBox<logical_and_expression<'lt>>,LBox<inclusive_or_expression<'lt>>),
  logical_and_expression_Nothing,
}
impl<'lt> Default for logical_and_expression<'lt> { fn default()->Self { logical_and_expression::logical_and_expression_Nothing } }

#[derive(Debug)]
pub enum struct_declaration<'lt> {
  struct_declaration_140(LBox<static_assert_declaration<'lt>>),
  struct_declaration_139(LBox<specifier_qualifier_list<'lt>>,Vec<LBox<struct_declarator<'lt>>>),
  struct_declaration_Nothing,
}
impl<'lt> Default for struct_declaration<'lt> { fn default()->Self { struct_declaration::struct_declaration_Nothing } }

#[derive(Default,Debug)]
pub struct designator_list<'lt>(pub Vec<LBox<designator<'lt>>>,);

#[derive(Default,Debug)]
pub struct translation_unit<'lt>(pub Vec<LBox<external_declaration<'lt>>>,);

#[derive(Debug)]
pub enum exclusive_or_expression<'lt> {
  exclusive_or_expression_64(LBox<and_expression<'lt>>),
  exclusive_or_expression_65(LBox<exclusive_or_expression<'lt>>,LBox<and_expression<'lt>>),
  exclusive_or_expression_Nothing,
}
impl<'lt> Default for exclusive_or_expression<'lt> { fn default()->Self { exclusive_or_expression::exclusive_or_expression_Nothing } }

#[derive(Debug)]
pub enum specifier_qualifier<'lt> {
  specifier_qualifier_144(LBox<type_specifier<'lt>>),
  specifier_qualifier_145(type_qualifier),
  specifier_qualifier_Nothing,
}
impl<'lt> Default for specifier_qualifier<'lt> { fn default()->Self { specifier_qualifier::specifier_qualifier_Nothing } }

#[derive(Debug)]
pub enum parameter_declaration<'lt> {
  parameter_declaration_203(LBox<declaration_specifiers<'lt>>,LBox<declarator<'lt>>),
  parameter_declaration_204(LBox<declaration_specifiers<'lt>>,LBox<abstract_declarator<'lt>>),
  parameter_declaration_205(LBox<declaration_specifiers<'lt>>),
  parameter_declaration_Nothing,
}
impl<'lt> Default for parameter_declaration<'lt> { fn default()->Self { parameter_declaration::parameter_declaration_Nothing } }

#[derive(Debug)]
pub enum shift_expression<'lt> {
  shift_expression_52(LBox<shift_expression<'lt>>,LBox<additive_expression<'lt>>),
  shift_expression_51(LBox<additive_expression<'lt>>),
  shift_expression_53(LBox<shift_expression<'lt>>,LBox<additive_expression<'lt>>),
  shift_expression_Nothing,
}
impl<'lt> Default for shift_expression<'lt> { fn default()->Self { shift_expression::shift_expression_Nothing } }

#[derive(Debug)]
pub enum storage_class_specifier {
  EXTERN,
  AUTO,
  STATIC,
  TYPEDEF,
  THREAD_LOCAL,
  REGISTER,
  storage_class_specifier_Nothing,
}
impl Default for storage_class_specifier { fn default()->Self { storage_class_specifier::storage_class_specifier_Nothing } }

#[derive(Debug)]
pub enum conditional_expression<'lt> {
  conditional_expression_72(LBox<logical_or_expression<'lt>>),
  conditional_expression_73(LBox<logical_or_expression<'lt>>,LBox<expression<'lt>>,LBox<conditional_expression<'lt>>),
  conditional_expression_Nothing,
}
impl<'lt> Default for conditional_expression<'lt> { fn default()->Self { conditional_expression::conditional_expression_Nothing } }

#[derive(Debug)]
pub enum external_declaration<'lt> {
  directive(&'lt str),
  external_declaration_281(function_definition<'lt>),
  external_declaration_282(declaration<'lt>),
  external_declaration_Nothing,
}
impl<'lt> Default for external_declaration<'lt> { fn default()->Self { external_declaration::external_declaration_Nothing } }

#[derive(Debug)]
pub enum enumerator_list<'lt> {
  enumerator_list_159(LBox<enumerator_list<'lt>>,LBox<enumerator<'lt>>),
  enumerator_list_158(LBox<enumerator<'lt>>),
  enumerator_list_Nothing,
}
impl<'lt> Default for enumerator_list<'lt> { fn default()->Self { enumerator_list::enumerator_list_Nothing } }

#[derive(Default,Debug)]
pub struct static_assert_declaration<'lt>(pub LBox<constant_expression<'lt>>,pub &'lt str,);

#[derive(Debug)]
pub enum multiplicative_expression<'lt> {
  multiplicative_expression_44(LBox<cast_expression<'lt>>),
  multiplicative_expression_46(LBox<multiplicative_expression<'lt>>,LBox<cast_expression<'lt>>),
  multiplicative_expression_45(LBox<multiplicative_expression<'lt>>,LBox<cast_expression<'lt>>),
  multiplicative_expression_47(LBox<multiplicative_expression<'lt>>,LBox<cast_expression<'lt>>),
  multiplicative_expression_Nothing,
}
impl<'lt> Default for multiplicative_expression<'lt> { fn default()->Self { multiplicative_expression::multiplicative_expression_Nothing } }

#[derive(Debug)]
pub enum block_item<'lt> {
  Declaration(declaration<'lt>),
  Statement(LBox<statement<'lt>>),
  block_item_Nothing,
}
impl<'lt> Default for block_item<'lt> { fn default()->Self { block_item::block_item_Nothing } }

#[derive(Default,Debug)]
pub struct function_definition<'lt>(pub declaration_specifiers<'lt>,pub declarator<'lt>,pub Vec<LBox<declaration<'lt>>>,pub compound_statement<'lt>,);

#[derive(Default,Debug)]
pub struct struct_declarator_list<'lt>(pub Vec<LBox<struct_declarator<'lt>>>,);

#[derive(Debug)]
pub enum alignment_specifier<'lt> {
  ALIGNAS_171(LBox<type_name<'lt>>),
  ALIGNAS_172(LBox<constant_expression<'lt>>),
  alignment_specifier_Nothing,
}
impl<'lt> Default for alignment_specifier<'lt> { fn default()->Self { alignment_specifier::alignment_specifier_Nothing } }

#[derive(Debug)]
pub enum equality_expression<'lt> {
  equality_expression_61(LBox<equality_expression<'lt>>,LBox<relational_expression<'lt>>),
  equality_expression_60(LBox<equality_expression<'lt>>,LBox<relational_expression<'lt>>),
  equality_expression_59(LBox<relational_expression<'lt>>),
  equality_expression_Nothing,
}
impl<'lt> Default for equality_expression<'lt> { fn default()->Self { equality_expression::equality_expression_Nothing } }

#[derive(Debug)]
pub enum declarator<'lt> {
  declarator_173(pointer,LBox<direct_declarator<'lt>>),
  declarator_174(LBox<direct_declarator<'lt>>),
  declarator_Nothing,
}
impl<'lt> Default for declarator<'lt> { fn default()->Self { declarator::declarator_Nothing } }

#[derive(Debug)]
pub enum type_specifier<'lt> {
  IMAGINARY,
  LONG,
  SIGNED,
  BOOL,
  VOID,
  FLOAT,
  type_specifier_126(LBox<struct_or_union_specifier<'lt>>),
  INT,
  type_specifier_128(LBox<atomic_type_specifier<'lt>>),
  Typename(&'lt str),
  type_specifier_127(LBox<enum_specifier<'lt>>),
  SHORT,
  DOUBLE,
  UNSIGNED,
  COMPLEX,
  CHAR,
  type_specifier_Nothing,
}
impl<'lt> Default for type_specifier<'lt> { fn default()->Self { type_specifier::type_specifier_Nothing } }

#[derive(Default,Debug)]
pub struct init_declarator<'lt> {
  pub declarator:declarator<'lt>,
  pub initializer:Option<LBox<initializer<'lt>>>,
}

#[derive(Debug)]
pub enum and_expression<'lt> {
  and_expression_62(LBox<equality_expression<'lt>>),
  and_expression_63(LBox<and_expression<'lt>>,LBox<equality_expression<'lt>>),
  and_expression_Nothing,
}
impl<'lt> Default for and_expression<'lt> { fn default()->Self { and_expression::and_expression_Nothing } }

#[derive(Debug)]
pub enum declaration_specifier<'lt> {
  alignspec(LBox<alignment_specifier<'lt>>),
  funcspec(function_specifier),
  storage(storage_class_specifier),
  typespec(LBox<type_specifier<'lt>>),
  typequal(type_qualifier),
  declaration_specifier_Nothing,
}
impl<'lt> Default for declaration_specifier<'lt> { fn default()->Self { declaration_specifier::declaration_specifier_Nothing } }

#[derive(Debug)]
pub enum cast_expression<'lt> {
  cast_expression_42(LBox<unary_expression<'lt>>),
  cast_expression_43(LBox<type_name<'lt>>,LBox<cast_expression<'lt>>),
  cast_expression_Nothing,
}
impl<'lt> Default for cast_expression<'lt> { fn default()->Self { cast_expression::cast_expression_Nothing } }

#[derive(Default,Debug)]
pub struct constant_expression<'lt>(pub LBox<conditional_expression<'lt>>,);

#[derive(Debug)]
pub enum direct_abstract_declarator<'lt> {
  direct_abstract_declarator_216,
  direct_abstract_declarator_226(LBox<direct_abstract_declarator<'lt>>),
  direct_abstract_declarator_225(LBox<direct_abstract_declarator<'lt>>),
  direct_abstract_declarator_223(type_qualifier_list,Option<()>,Option<LBox<assignment_expression<'lt>>>),
  direct_abstract_declarator_230(LBox<direct_abstract_declarator<'lt>>,LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_231,
  direct_abstract_declarator_224(LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_233(LBox<direct_abstract_declarator<'lt>>),
  direct_abstract_declarator_228(LBox<direct_abstract_declarator<'lt>>,type_qualifier_list,Option<()>,LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_229(LBox<direct_abstract_declarator<'lt>>,type_qualifier_list),
  direct_abstract_declarator_217,
  direct_abstract_declarator_232(LBox<parameter_type_list<'lt>>),
  direct_abstract_declarator_215(LBox<abstract_declarator<'lt>>),
  direct_abstract_declarator_234(LBox<direct_abstract_declarator<'lt>>,LBox<parameter_type_list<'lt>>),
  direct_abstract_declarator_227(LBox<direct_abstract_declarator<'lt>>,Vec<LBox<type_qualifier>>,LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_218(Vec<LBox<type_qualifier>>,LBox<assignment_expression<'lt>>),
  direct_abstract_declarator_Nothing,
}
impl<'lt> Default for direct_abstract_declarator<'lt> { fn default()->Self { direct_abstract_declarator::direct_abstract_declarator_Nothing } }

#[derive(Debug)]
pub enum initializer_list {
  initializer_list_Nothing,
}
impl Default for initializer_list { fn default()->Self { initializer_list::initializer_list_Nothing } }

#[derive(Debug)]
pub enum declaration<'lt> {
  Statassert(static_assert_declaration<'lt>),
  DecSpec(declaration_specifiers<'lt>),
  DecSpecList(declaration_specifiers<'lt>,init_declarator_list<'lt>),
  declaration_Nothing,
}
impl<'lt> Default for declaration<'lt> { fn default()->Self { declaration::declaration_Nothing } }

#[derive(Default,Debug)]
pub struct specifier_qualifier_list<'lt>(pub Vec<LBox<specifier_qualifier<'lt>>>,);

#[derive(Debug)]
pub enum stringnt<'lt> {
  FUNC_NAME,
  STRING_LITERAL(&'lt str),
  stringnt_Nothing,
}
impl<'lt> Default for stringnt<'lt> { fn default()->Self { stringnt::stringnt_Nothing } }

#[derive(Debug)]
pub enum additive_expression<'lt> {
  additive_expression_49(LBox<additive_expression<'lt>>,LBox<multiplicative_expression<'lt>>),
  additive_expression_50(LBox<additive_expression<'lt>>,LBox<multiplicative_expression<'lt>>),
  additive_expression_48(LBox<multiplicative_expression<'lt>>),
  additive_expression_Nothing,
}
impl<'lt> Default for additive_expression<'lt> { fn default()->Self { additive_expression::additive_expression_Nothing } }

#[derive(Default,Debug)]
pub struct expression_statement<'lt>(pub Option<LBox<expression<'lt>>>,);

#[derive(Debug)]
pub enum postfix_expression<'lt> {
  postfix_expression_17(LBox<postfix_expression<'lt>>),
  postfix_expression_25(LBox<type_name<'lt>>,initializer_list),
  postfix_expression_18(LBox<postfix_expression<'lt>>,LBox<argument_expression_list<'lt>>),
  postfix_expression_20(LBox<postfix_expression<'lt>>,&'lt str),
  postfix_expression_19(LBox<postfix_expression<'lt>>,&'lt str),
  postfix_expression_16(LBox<postfix_expression<'lt>>,LBox<expression<'lt>>),
  postfix_expression_21(LBox<postfix_expression<'lt>>),
  postfix_expression_15(LBox<primary_expression<'lt>>),
  postfix_expression_22(LBox<postfix_expression<'lt>>),
  postfix_expression_Nothing,
}
impl<'lt> Default for postfix_expression<'lt> { fn default()->Self { postfix_expression::postfix_expression_Nothing } }

#[derive(Debug)]
pub enum abstract_declarator<'lt> {
  abstract_declarator_213(LBox<direct_abstract_declarator<'lt>>),
  abstract_declarator_214(pointer,LBox<direct_abstract_declarator<'lt>>),
  abstract_declarator_212(pointer),
  abstract_declarator_Nothing,
}
impl<'lt> Default for abstract_declarator<'lt> { fn default()->Self { abstract_declarator::abstract_declarator_Nothing } }

#[derive(Debug)]
pub enum inclusive_or_expression<'lt> {
  inclusive_or_expression_67(LBox<inclusive_or_expression<'lt>>,LBox<exclusive_or_expression<'lt>>),
  inclusive_or_expression_66(LBox<exclusive_or_expression<'lt>>),
  inclusive_or_expression_Nothing,
}
impl<'lt> Default for inclusive_or_expression<'lt> { fn default()->Self { inclusive_or_expression::inclusive_or_expression_Nothing } }

#[derive(Debug)]
pub enum selection_statement<'lt> {
  IF_266(expression<'lt>,LBox<statement<'lt>>),
  SWITCH_268(expression<'lt>,LBox<statement<'lt>>),
  IF_267(expression<'lt>,LBox<statement<'lt>>,LBox<statement<'lt>>),
  selection_statement_Nothing,
}
impl<'lt> Default for selection_statement<'lt> { fn default()->Self { selection_statement::selection_statement_Nothing } }

#[derive(Default,Debug)]
pub struct parameter_type_list<'lt> {
  pub parameters:Vec<LBox<parameter_declaration<'lt>>>,
  pub ellipsis:Option<LBox<NEWSEQNT_199_1>>,
}

#[derive(Debug)]
pub enum jump_statement<'lt> {
  GOTO_273(&'lt str),
  RETURN_277(expression<'lt>),
  CONTINUE_274,
  RETURN_276,
  BREAK_275,
  jump_statement_Nothing,
}
impl<'lt> Default for jump_statement<'lt> { fn default()->Self { jump_statement::jump_statement_Nothing } }

#[derive(Default,Debug)]
pub struct enumerator<'lt>(pub &'lt str,pub Option<LBox<constant_expression<'lt>>>,);

#[derive(Default,Debug)]
pub struct type_name<'lt>(pub LBox<specifier_qualifier_list<'lt>>,pub Option<LBox<abstract_declarator<'lt>>>,);

#[derive(Debug)]
pub enum designator<'lt> {
  designator_246(constant_expression<'lt>),
  Dot_247(&'lt str),
  designator_Nothing,
}
impl<'lt> Default for designator<'lt> { fn default()->Self { designator::designator_Nothing } }

#[derive(Debug)]
pub enum generic_association<'lt> {
  generic_association_13(LBox<type_name<'lt>>,LBox<assignment_expression<'lt>>),
  DEFAULT_14(LBox<assignment_expression<'lt>>),
  generic_association_Nothing,
}
impl<'lt> Default for generic_association<'lt> { fn default()->Self { generic_association::generic_association_Nothing } }

#[derive(Debug)]
pub enum declaration_list {
  declaration_list_Nothing,
}
impl Default for declaration_list { fn default()->Self { declaration_list::declaration_list_Nothing } }

#[derive(Default,Debug)]
pub struct NEWSEQNT_199_1();

#[derive(Default,Debug)]
pub struct argument_expression_list<'lt>(pub Vec<LBox<assignment_expression<'lt>>>,);

#[derive(Default,Debug)]
pub struct generic_selection<'lt>(pub LBox<assignment_expression<'lt>>,pub Vec<LBox<generic_association<'lt>>>,);

#[derive(Debug)]
pub enum relational_expression<'lt> {
  relational_expression_55(LBox<relational_expression<'lt>>,LBox<shift_expression<'lt>>),
  relational_expression_54(LBox<shift_expression<'lt>>),
  relational_expression_56(LBox<relational_expression<'lt>>,LBox<shift_expression<'lt>>),
  relational_expression_57(LBox<relational_expression<'lt>>,LBox<shift_expression<'lt>>),
  relational_expression_58(LBox<relational_expression<'lt>>,LBox<shift_expression<'lt>>),
  relational_expression_Nothing,
}
impl<'lt> Default for relational_expression<'lt> { fn default()->Self { relational_expression::relational_expression_Nothing } }

#[derive(Default,Debug)]
pub struct pointer {
  pub tql:Vec<LBox<type_qualifier>>,
  pub ptr:Option<LBox<pointer>>,
}

#[derive(Debug)]
pub enum assignment_expression<'lt> {
  assignment_expression_74(LBox<conditional_expression<'lt>>),
  assignment_expression_75(LBox<unary_expression<'lt>>,assignment_operator,LBox<assignment_expression<'lt>>),
  assignment_expression_Nothing,
}
impl<'lt> Default for assignment_expression<'lt> { fn default()->Self { assignment_expression::assignment_expression_Nothing } }

#[derive(Debug)]
pub enum assignment_operator {
  MUL_ASSIGN,
  RIGHT_ASSIGN,
  XOR_ASSIGN,
  DIV_ASSIGN,
  AND_ASSIGN,
  ADD_ASSIGN,
  MOD_ASSIGN,
  OR_ASSIGN,
  Eq1,
  SUB_ASSIGN,
  LEFT_ASSIGN,
  assignment_operator_Nothing,
}
impl Default for assignment_operator { fn default()->Self { assignment_operator::assignment_operator_Nothing } }

#[derive(Debug)]
pub enum iteration_statement<'lt> {
  WHILE_269(expression<'lt>,LBox<statement<'lt>>),
  FOR_271(expression_statement<'lt>,expression_statement<'lt>,Option<LBox<expression<'lt>>>,LBox<statement<'lt>>),
  FOR_272(declaration<'lt>,expression_statement<'lt>,Option<LBox<expression<'lt>>>,LBox<statement<'lt>>),
  DO_270(LBox<statement<'lt>>,expression<'lt>),
  iteration_statement_Nothing,
}
impl<'lt> Default for iteration_statement<'lt> { fn default()->Self { iteration_statement::iteration_statement_Nothing } }

#[derive(Debug)]
pub enum primary_expression<'lt> {
  primary_expression_4(LBox<generic_selection<'lt>>),
  primary_expression_3(LBox<expression<'lt>>),
  IDENTIFIER(&'lt str),
  primary_expression_2(stringnt<'lt>),
  primary_expression_1(constant<'lt>),
  primary_expression_Nothing,
}
impl<'lt> Default for primary_expression<'lt> { fn default()->Self { primary_expression::primary_expression_Nothing } }

#[derive(Debug)]
pub enum statement<'lt> {
  statement_249(LBox<labeled_statement<'lt>>),
  statement_250(LBox<compound_statement<'lt>>),
  statement_251(expression_statement<'lt>),
  statement_252(LBox<selection_statement<'lt>>),
  statement_254(jump_statement<'lt>),
  statement_253(LBox<iteration_statement<'lt>>),
  statement_Nothing,
}
impl<'lt> Default for statement<'lt> { fn default()->Self { statement::statement_Nothing } }

#[derive(Debug)]
pub enum struct_or_union_specifier<'lt> {
  struct_or_union_specifier_132(struct_or_union,&'lt str),
  struct_or_union_specifier_131(struct_or_union,Option<LBox<&'lt str>>,LBox<struct_declaration_list<'lt>>),
  struct_or_union_specifier_Nothing,
}
impl<'lt> Default for struct_or_union_specifier<'lt> { fn default()->Self { struct_or_union_specifier::struct_or_union_specifier_Nothing } }

#[derive(Debug)]
pub enum struct_or_union {
  UNION(()),
  STRUCT(()),
  struct_or_union_Nothing,
}
impl Default for struct_or_union { fn default()->Self { struct_or_union::struct_or_union_Nothing } }

#[derive(Debug)]
pub enum struct_declarator<'lt> {
  struct_declarator_152(LBox<declarator<'lt>>,LBox<constant_expression<'lt>>),
  Colon_151(LBox<constant_expression<'lt>>),
  struct_declarator_150(LBox<declarator<'lt>>),
  struct_declarator_Nothing,
}
impl<'lt> Default for struct_declarator<'lt> { fn default()->Self { struct_declarator::struct_declarator_Nothing } }

#[derive(Default,Debug)]
pub struct expression<'lt> {
  pub assignments:Vec<LBox<assignment_expression<'lt>>>,
}

#[derive(Default,Debug)]
pub struct atomic_type_specifier<'lt>(pub LBox<type_name<'lt>>,);

#[derive(Default,Debug)]
pub struct declaration_specifiers<'lt>(pub Vec<LBox<declaration_specifier<'lt>>>,);

#[derive(Debug)]
pub enum compiler_directive {
  compiler_directive_Nothing,
}
impl Default for compiler_directive { fn default()->Self { compiler_directive::compiler_directive_Nothing } }

#[derive(Debug)]
pub enum type_qualifier {
  VOLATILE,
  RESTRICT,
  CONST,
  ATOMIC,
  type_qualifier_Nothing,
}
impl Default for type_qualifier { fn default()->Self { type_qualifier::type_qualifier_Nothing } }

#[derive(Debug)]
pub enum function_specifier {
  NORETURN,
  INLINE,
  function_specifier_Nothing,
}
impl Default for function_specifier { fn default()->Self { function_specifier::function_specifier_Nothing } }

#[derive(Default,Debug)]
pub struct type_qualifier_list(pub Vec<LBox<type_qualifier>>,);

#[derive(Debug)]
pub enum logical_or_expression<'lt> {
  logical_or_expression_71(LBox<logical_or_expression<'lt>>,LBox<logical_and_expression<'lt>>),
  logical_or_expression_70(LBox<logical_and_expression<'lt>>),
  logical_or_expression_Nothing,
}
impl<'lt> Default for logical_or_expression<'lt> { fn default()->Self { logical_or_expression::logical_or_expression_Nothing } }

#[derive(Default,Debug)]
pub struct identifier_list<'lt>(pub Vec<LBox<&'lt str>>,);

