//Parser generated by rustlr for grammar c11d
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::marker::PhantomData;
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use crate::c11_ast::declarator::*;
use crate::c11_ast::declaration::*;
use crate::c11_ast::direct_declarator::*;
use crate::c11_ast::declaration_specifier::*;
use crate::c11_ast::storage_class_specifier::*;
use rustlr::LBox;
use crate::c11d_ast;
use crate::c11d_ast::*;

static SYMBOLS:[&'static str;226] = ["_WILDCARD_TOKEN_","FUNC_NAME","INLINE","RESTRICT","ALIGNAS","ALIGNOF","ATOMIC","BOOL","COMPLEX","GENERIC","IMAGINARY","NORETURN","STATIC_ASSERT","THREAD_LOCAL","PTR_OP","INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","SIZEOF","TYPEDEF","EXTERN","STATIC","AUTO","REGISTER","CHAR","SHORT","INT","LONG","SIGNED","UNSIGNED","FLOAT","DOUBLE","CONST","VOLATILE","VOID","STRUCT","UNION","ENUM","CASE","DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE","BREAK","RETURN","INCLUDE","DEFINE","ELLIPSIS","Lbrace","Rbrace","Amp","Bang","Bar","Hat","Dot","Comma","Colon","Star","Div","Percent","Lt","Gt","ASSIGN","Quest","[","]","(",")","+","-","~",";","TYPEDEF_NAME","IDENTIFIER","ENUMERATION_CONSTANT","I_CONSTANT","F_CONSTANT","STRING_LITERAL","COMPILER_DIRECTIVE","primary_expression","postfix_expression","argument_expression_list","unary_expression","unary_operator","cast_expression","multiplicative_expression","additive_expression","shift_expression","relational_expression","equality_expression","and_expression","exclusive_or_expression","inclusive_or_expression","logical_and_expression","logical_or_expression","conditional_expression","assignment_expression","expression","constant_expression","declaration","declaration_specifiers","init_declarator","storage_class_specifier","type_specifier","struct_or_union_specifier","struct_or_union","struct_declaration_list","struct_declaration","specifier_qualifier_list","struct_declarator_list","struct_declarator","enum_specifier","enumerator_list","enumerator","type_qualifier","declarator","direct_declarator","pointer","type_qualifier_list","parameter_type_list","parameter_list","parameter_declaration","identifier_list","type_name","abstract_declarator","declaration_list","direct_abstract_declarator","initializer","initializer_list","statement","labeled_statement","compound_statement","statement_list","expression_statement","selection_statement","iteration_statement","jump_statement","translation_unit","external_declaration","function_definition","constant","stringnt","generic_selection","assignment_operator","generic_association","static_assert_declaration","designation","function_specifier","alignment_specifier","atomic_type_specifier","designator_list","designator","block_item","declaration_specifier","specifier_qualifier","initializer_designation","compiler_directive","expression_list","expressionS","NEWSEPNT_8_0","NEWRENT_20_0","NEWSEPNT_23_0","NEWSEPNT_70_0","NEWRENT_79_0","NEWSEQNT_82_0","NEWRENT_83_1","NEWRENT_108_0","NEWSEPNT_114_0","NEWSEPNT2_116_1","NEWRENT_120_0","NEWRENT_125_0","NEWSEPNT_128_0","NEWRENT_134_0","NEWRENT_137_1","NEWSEPNT_141_0","NEWSEQNT_144_0","NEWRENT_145_1","NEWRENT_157_0","NEWRENT_174_0","NEWRENT_176_1","NEWRENT_179_0","NEWSEPNT_182_0","NEWSEQNT_184_1","NEWRENT_185_2","NEWSEPNT_191_0","NEWRENT_194_0","NEWRENT_203_0","NEWRENT_206_1","NEWRENT_208_2","NEWRENT_214_3","NEWRENT_217_4","NEWSEPNT_227_0","NEWRENT_229_1","NEWRENT_232_0","NEWRENT_235_0","NEWRENT_238_0","NEWRENT_253_0","NEWRENT_258_0","NEWRENT_266_0","NEWRENT_269_1","NEWRENT_277_0","NEWRENT_283_0","START","EOF"];

static TABLE:[u64;11959] = [176095756288,206161051648,730147520513,180390789120,47247654912,158914904064,429498236928,227635691520,231929151488,34360000512,219043725312,163209805824,197571248128,687196209153,541166600193,154621509632,223339937792,536871370753,210453463040,717262487553,523986206721,167506542592,953484443649,725851045889,532577255425,691492225025,188981706752,734439931905,519691829249,25770131456,12885557248,584117387265,193275887616,184684838912,682902093825,403727056896,214750920704,51540197376,571231830017,30067654656,794569801729,171801903104,42951573504,17181245440,8591966208,545461829633,55836344320,751621242881,201865691136,281543705952258,281861533532162,281625310330882,281870123466754,281646785167362,281891598303234,281784224120834,281659670069250,281689734840322,281857238564866,281638195232770,281496461312002,281685439873026,281844353662978,281487871377410,281706914709506,281505051246594,281698324774914,281681144905730,281805698957314,281788519088130,281483576410114,281522231115778,281663965036546,281848648630274,281874418434050,281878713401346,281642490200066,281900188237826,281672554971138,281513641181186,281852943597570,281509346213890,281694029807618,281668260003842,281702619742210,281479281442818,281865828499458,281883008368642,281629605298178,281887303335938,281492166344706,281539410984962,281655375101954,281814288891906,281809993924610,281633900265474,281500756279298,281530821050370,281895893270530,281517936148482,281651080134658,281676849938434,562975729254402,563280671932418,562992909123586,563108873240578,562980024221698,563134643044354,563143232978946,563156117880834,562958549385218,563130348077058,563289261867010,563164707815426,563327916572674,563284966899714,562962844352514,563349391409154,563332211539970,562967139319810,563160412848130,562984319188994,563357981343746,563121758142466,563353686376450,563126053109762,563169002782722,563113168207874,563173297750018,562997204090882,563151822913538,563177592717314,563117463175170,563319326638082,563005794025474,563147527946242,563104578273282,563181887684610,563138938011650,845013343993857,845021933862913,844802897543170,845215207784449,845279632031745,844764236021760,844824365694976,844832962314242,844953214648321,1125947158233090,1125912798494722,1126101777055746,1126067417317378,1125908503527426,1126299345551362,1126071712284674,1126303640518658,1126131841826818,1126106072023042,1126307935485954,1126058827382786,1126084597186562,1126230626074626,1125942863265794,1126234921041922,1126282165682178,1126123251892226,1126054532415490,1126127546859522,1125955748167682,1126114661957634,1126076007251970,1126088892153858,1126097482088450,1126080302219266,1125929978363906,1126269280780290,1126277870714882,1126110366990338,1125917093462018,1125925683396610,1126118956924930,1126063122350082,1126239216009218,1126093187121154,1125934273331202,1407430728024066,1407585346846722,1407757145538562,1407422138089474,1407538102206466,1407417843122178,1407555282075650,1407602526715906,1407581051879426,1407572461944834,1407593936781314,1407383483383810,1407598231748610,1407568166977538,1407752844410880,1407387778351106,1407409253187586,1407589641814018,1407778620375042,1407714195865602,1407744260636674,1407546692141058,1407404958220290,1407782915342338,1407606821683202,1407392073318402,1407709900898306,1407774325407746,1407550987108354,1407533807239170,1407559577042946,1407529512271874,1407563872010242,1407400663252994,1407576756912130,1407542397173762,1407705605931010,1689219233546242,1688897110999042,1689073204658178,1688905700933634,1689249298317314,1688862751260674,1689021665050626,1688858456293378,1689189168775170,1688884226097154,1689025960017922,1688875636162562,1689043139887106,1689030254985218,1689064614723586,1689008780148738,1689180578840578,1689013075116034,1689184873807874,1689232118448130,1689038844919810,1689004485181442,1689227823480834,1689068909690882,1688867046227970,1689056024788994,1688879931129858,1689077499625474,1688892816031746,1689051729821698,1689034549952514,1689047434854402,1689081794592770,1689060319756290,1689257888251906,1689017370083330,1689253593284610,1970354906660866,1970488050647042,1970337726791682,1970539590254594,1970350611693570,1970380676464642,1970483755679746,1970492345614338,1970372086530050,1970367791562754,1970732863782914,1970496640581634,1970500935548930,1970535295287298,1970513820450818,1970526705352706,1970556770123778,1970518115418114,1970655554371586,1970548180189186,1970479460712450,1970342021758978,1970694209077250,1970531000320002,1970702799011842,1970359201628162,1970333431824386,1970509525483522,1970505230516226,1970728568815618,1970707093979138,1970724273848322,1970543885221890,1970552475156482,1970664144306178,1970522410385410,2252018864029698,2251967324422146,2252139123113986,2251825590501378,2252130533179394,2251988799258626,2252203547623426,2252207842590722,2251997389193218,2251975914356738,2251958734487554,2251954439520258,2252010274095106,2251834180435970,2252005979127810,2252169187885058,2252014569062402,2251984504291330,2252199252656130,2251842770370562,2252001684160514,2251847065337858,2252134828146690,2252027453964290,2251829885468674,2251963029454850,2252182072786946,2251993094225922,2251812705599490,2252031748931586,2251971619389442,2251817000566786,2252177777819650,2251980209324034,2251855655272450,2251808410632194,2252023158996994,2533652751319040,2814964525432834,2815136324124674,2814912985825282,2815162093928450,2815063309680642,2815140619091970,2814917280792578,2814955935498242,2814754072035330,2814968820400130,2814951640530946,2815123439222786,2814784136806402,2814934460661762,2814771251904514,2814930165694466,2814818496544770,2814900100923394,2815149209026562,2815119144255490,2815089079484418,2814775546871810,2815174978830338,2814947345563650,2814943050596354,2814908690857986,2814921575759874,2815084784517122,2814960230465538,2814977410334722,2814981705302018,2814762661969922,2815127734190082,2815144914059266,2814779841839106,2814766956937218,2814805611642882,2815059014713346,2814938755629058,2815132029157378,2814925870727170,2814973115367426,2815153503993858,2815170683863042,2814788431773698,2814904395890690,2814797021708290,2814758367002626,2815080489549826,2814814201577474,2814792726740994,2815157798961154,2815166388895746,3096452383965186,3096439499063298,3096435204096002,3096443794030594,3096602707820546,3096233340633090,3096387959455746,3096237635600386,3096456678932482,3096413729259522,3096241930567682,3096400844357634,3096555463180290,3096422319194114,3096559758147586,3096632772591618,3096396549390338,3096259110436866,3096405139324930,3096409434292226,3096379369521154,3096607002787842,3096564053114882,3096448088997890,3096430909128706,3096254815469570,3096250520502274,3096280585273346,3096271995338754,3096624182657026,3096383664488450,3096594117885954,3096392254423042,3096426614161410,3096418024226818,3096628477624322,3096267700371458,3377712623845378,3377931667177474,3377708328878082,3377716918812674,3377914487308290,3377871537635330,3378129235673090,3377746983583746,3377927372210178,3377854357766146,3377901602406402,3377751278551042,3377729803714562,3377923077242882,3377858652733442,3377905897373698,3377884422537218,3377888717504514,3378103465869314,3377755573518338,3377734098681858,3377867242668034,3377742688616450,3377725508747266,3378666106585090,3377893012471810,3377910192340994,3377918782275586,3377880127569922,3377875832602626,3377897307439106,3377862947700738,3659574134505474,3659200467369984,3659389448159232,3659904844759041,3659556954636290,3659329318748160,3659230533582848,3659745929068545,3659209057239040,3659926320381953,3659385150701568,3659715863838721,3659393740963840,3659183289204736,3659711568609281,3659355088027648,3659758814625793,3659342203781120,3659900548284417,3659376562929664,3659204764893184,3659363678945280,3659514004963330,3659359382077440,3659221944893440,3659552659668994,3659333612142592,3659582724440066,3659350792994816,3659544069734402,3659578424295424,3659380858290176,3659398037176320,3659346499141632,3659191878483968,3659217648812032,3659707274493953,3659337907044352,3659402332930048,3659505415028738,3659720159068161,3659406626390016,3659372268486656,3659187582795776,3659909137170433,3659367973126144,3941057699774464,3940950325657600,4222425305448450,4222932108574721,4222532676681728,4503780021698562,4503767136796674,4503797201567746,4503831561306114,4503981885161474,4503784316665858,4503827266338818,4503754251894786,4503788611633154,4503977590194178,4503818676404226,4503775726731266,4503642582745090,4503655467646978,4504007654965250,4503805791502338,4503999065030658,4503612517974018,4503801496535042,4503810086469634,4503969000259586,4503616812941314,4503814381436930,4503646877712386,4503771431763970,4503762841829378,4503930345553922,4503792906600450,4503633992810498,4504003359997954,4503625402875906,4503938935488514,4503629697843202,4503608223006722,4503822971371522,4503758546862082,4785254998343682,4785482631610370,4785443976904706,4785456861806594,4785091789586434,4785306537951234,4785104674488322,4785293653049346,4785250703376386,4785108969455618,4785130444292098,4785233523507202,4785100379521026,4785246408409090,4785297948016642,4785452566839298,4785117559390210,4785289358082050,4785478336643074,4785280768147458,4785267883245570,4785087494619138,4785285063114754,4785405322199042,4785263588278274,4785083199651842,4785302242983938,4785121854357506,4785276473180162,4785259293310978,4785413912133634,4785242113441794,4785237818474498,4785272178212866,4785229228539906,4785474041675778,5066583947476994,5066880300220418,5066566767607810,5066957609631746,5066575357542402,5066562472640514,5066558177673218,5066725681397762,5066755746168834,5066712796495874,5066751451201538,5066738566299650,5066579652509698,5066777221005314,5066734271332354,5066772926038018,5066596832378882,5066747156234242,5066949019697154,5066931839827970,5066764336103426,5066717091463170,5066721386430466,5066884595187714,5066953314664450,5066704206561282,5066592537411586,5066708501528578,5066888890155010,5066729976365058,5066927544860674,5066918954926082,5066742861266946,5066605422313474,5066781515972610,5066760041136130,5066768631070722,5348432585687042,5348200657453058,5348183477583874,5348041743663106,5348217837322242,5348239312158722,5348252197060610,5348230722224130,5348363866210306,5348054628564994,5348209247387650,5348067513466882,5348213542354946,5348359571243010,5348058923532290,5348423995752450,5348247902093314,5348428290719746,5348037448695810,5348222132289538,5348071808434178,5348393930981378,5348406815883266,5348256492027906,5348226427256834,5348187772551170,5348080398368770,5348179182616578,5348243607126018,5348204952420354,5348355276275714,5348196362485762,5348033153728514,5348235017191426,5348402520915970,5348192067518466,5348050333597698,5629714287427586,5629838841479170,5629830251544578,5629731467296770,5629675632721922,5629898971021314,5629709992460290,5629684222656514,5629692812591106,5629903265988610,5629718582394882,5629508128997378,5629512423964674,5629525308866562,5629907560955906,5629705697492994,5629722877362178,5629546783703042,5629671337754626,5629654157885442,5629727172329474,5629529603833858,5629662747820034,5629688517623810,5629868906250242,5629697107558402,5629679927689218,5629555373637634,5629533898801154,5629516718931970,5629542488735746,5629658452852738,5629877496184834,5629667042787330,5629881791152130,5629701402525698,5911352472240128,6193415873429506,6192672844087298,6192664254152706,6192621304479746,6192659959185410,6192681434021890,6192853232713730,6192668549120002,6192604124610562,6192647074283522,6192655664218114,6192879002517506,6192458095722498,6192505340362754,6192483865526274,6192625599447042,6192651369250818,6192466685657090,6192642779316226,6192496750428162,6192629894414338,6192638484348930,6192612714545154,6192479570558978,6192492455460866,6192617009512450,6192501045395458,6192677139054594,6192634189381634,6192475275591682,6192608419577858,6192462390689794,6474156411060226,6473941662695426,6474122051321858,6473937367728130,6474100576485378,6474130641256450,6473980317401090,6474890850467842,6474117756354562,6474147821125634,6473954547597314,6474087691583490,6473950252630018,6474353979555842,6473976022433794,6474143526158338,6474139231191042,6473958842564610,6474152116092930,6474134936223746,6473971727466498,6474328209752066,6473967432499202,6473933072760834,6474083396616194,6474109166419970,6474079101648898,6474091986550786,6474113461387266,6474126346289154,6474104871452674,6474096281518082,6755433805840386,6755588424663042,6755554064924674,6755425215905794,6755566949826562,6755412331003906,6755614194466818,6755584129695746,6755446690742274,6755601309564930,6755738748518402,6755455280676866,6755631374336002,6755730158583810,6755442395774978,6755416625971202,6755807467995138,6755571244793858,6755579834728450,6755622784401410,6755408036036610,6755605604532226,6755429510873090,6755777403224066,6755597014597634,6755803173027842,6755575539761154,6755558359891970,6755609899499522,6755781698191362,6755592719630338,6755618489434114,6755798878060546,6755562654859266,6755627079368706,6755768813289474,7037175072817154,7037282446999554,7318933511864321,7319143964278785,7318379462131712,7318375164608512,7318577030168576,7319066656964609,7318508309381120,7318538376183808,7318869086306305,7318396642131968,7318551260168192,7318890561077249,7318568438202368,7318559847940096,7318581323628544,7318778892713984,7318400934674432,7318521196380160,7319079541997569,7318886265847809,7318504015986688,7318529785266176,7318555555528704,7318366575722496,7319036593504257,7319315780403202,7318362280034304,7318920626307073,7318357986443264,7318383754477568,7318894856306689,7319040886702081,7319083834408961,7319101015719937,7318881971732481,7318405230821376,7318392346050560,7318516901019648,7318512604282880,7318753121533952,7318534079315968,7318873380683777,7318572734414848,7318542670364672,7318525490233344,7318546965725184,7318564145397760,7319075245522945,7599867326758914,7599832967020546,7600017650614274,7599996175777794,7600232398979074,7600193744273410,7600013355646978,7600047715385346,7600043420418050,7600223809044482,7599991880810498,7600004765712386,7600155089567746,7600000470745090,7599983290875906,7599871621726210,7600056305319938,7600228104011778,7599858736824322,7599987585843202,7600009060679682,7599841556955138,7600052010352642,7600021945581570,7600026240548866,7599837261987842,7599880211660802,7599854441857026,7600034830483458,7600206629175298,7600039125450754,7600202334208002,7599850146889730,7600030535516162,7600163679502338,7599978995908610,7881355187453954,7881325122682882,7881677310001154,7881329417650178,7881496921374722,7881307942813698,7881492626407426,7881458266669058,7881462561636354,7881522691178498,7881526986145794,7881346597519362,7881501216342018,7881505511309314,7881518396211202,7881316532748290,7881479741505538,7881698784837634,7881630065360898,7881531281113090,7881453971701762,7881484036472834,7881342302552066,7881475446538242,7881509806276610,7881668720066562,7881466856603650,7881703079804930,7881638655295490,7881514101243906,7881471151570946,7881312237780994,7881707374772226,7881488331440130,7881333712617474,7881681604968450,8163173763383298,8163178058350594,8163182353317890,8162989079789570,8162963309985794,8163143698612226,8162782921359362,8163156583514114,8162928950247426,8162791511293954,8162984784822274,8162997669724162,8163113633841154,8162971899920386,8162933245214722,8162950425083906,8162993374756866,8163152288546818,8162967604953090,8162980489854978,8163105043906562,8163001964691458,8162804396195842,8162821576065026,8162941835149314,8162830165999618,8162946130116610,8162954720051202,8162808691163138,8162959015018498,8162937540182018,8163006259658754,8162787216326658,8162800101228546,8162976194887682,8162817281097730,8163109338873858,8444481234731010,8444292256169986,8444266486366210,8444416810221570,8444283666235394,8444580018978818,8444618673684482,8444262191398914,8444657328390146,8444296551137282,8444429695123458,8444438285058050,8444408220286978,8444472644796418,8444442580025346,8444451169959938,8444464054861826,8444653033422850,8444459759894530,8444275076300802,8444305141071874,8444455464927234,8444403925319682,8444588608913410,8444446874992642,8444257896431618,8444468349829122,8444433990090754,8444631558586370,8444412515254274,8444627263619074,8444476939763714,8444421105188866,8444648738455554,8444279371268098,8444425400156162,8725771532697602,8726102245179394,8725887496814594,8725904676683778,8725732877991938,8726132309950466,8725926151520258,8726055000539138,8725951921324034,8726063590473730,8725750057861122,8725891791781890,8726093655244802,8726106540146690,8725780122632194,8725754352828418,8725943331389442,8725896086749186,8725878906880002,8725741467926530,8725921856552962,8725947626356738,8725758647795714,8725767237730306,8725917561585666,8725737172959234,8725883201847298,8726123720015874,8725939036422146,8725956216291330,8725930446487554,8725900381716482,8725934741454850,8726128014983170,8725913266618370,8725908971651074,9007396829396994,9007225030705154,9007379649527810,9007414009266178,9007246505541634,9007431189135362,9007422599200770,9007529973383170,9007242210574338,9007388239462402,9007383944495106,9007362469658626,9007353879724034,9007409714298882,9007426894168066,9007371059593218,9007568628088834,9007392534429698,9007212145803266,9007255095476226,9007375354560514,9007534268350466,9007405419331586,9007229325672450,9007577218023426,9007607282794498,9007233620639746,9007598692859906,9007358174691330,9007602987827202,9007401124364290,9007366764625922,9007207850835970,9007581512990722,9007216440770562,9007418304233474,9007538563317762,9288867511205890,9288682827612162,9288730072252418,9288850331336706,9288721482317826,9288871806173186,9288837446434818,9289077964603394,9288846036369410,9289009245126658,9289052194799618,9288708597415938,9288700007481346,9288833151467522,9288863216238594,9289073669636098,9289056489766914,9288841741402114,9288704302448642,9289013540093954,9288888986042370,9288828856500226,9288901870944258,9289043604865026,9288717187350530,9288854626304002,9288876101140482,9288691417546754,9288687122579458,9288897575976962,9288884691075074,9289082259570690,9288858921271298,9288880396107778,9288893281009666,9289004950159362,9288906165911554,9570557236477954,9570312423342082,9570308128374786,9570484222033922,9570518581772290,9570325308243970,9570342488113154,9570179279355906,9570346783080450,9570479927066626,9570363962949634,9570192164257794,9570355373015042,9570368257916930,9570376847851522,9570531466674178,9570488517001218,9570329603211266,9570372552884226,9570174984388610,9570548646543362,9570321013276674,9570333898178562,9570162099486722,9570552941510658,9570166394454018,9570359667982338,9570157804519426,9570381142818818,9570183574323202,9570205049159682,9570303833407490,9570351078047746,9570316718309378,9570527171706882,9570338193145858,9570196459225090,9852590552514563,10133481420226562,10133279556763650,10133498600095746,10133107758071810,10133258081927170,10133322506436610,10133124937940994,10133292441665538,10133129232908290,10133477125259266,10133468535324674,10133301031600130,10133116348006402,10133142117810178,10133318211469314,10133309621534722,10133283851730946,10133155002712066,10133266671861762,10133133527875586,10133502895063042,10133434175586306,10133429880619010,10133313916502018,10133326801403906,10133331096371202,10133112053039106,10133262376894466,10133507190030338,10133438470553602,10133253786959874,10133288146698242,10133305326567426,10133275261796354,10133146412777474,10133270966829058,10133296736632834,10414874793410562,10414982167592962,10696100672962562,10696246701850626,10696238111916034,10696255291785218,10696057723289602,10696263881719810,10696083493093378,10696079198126082,10696203752177666,10696062018256898,10696225227014146,10696268176687106,10696104967929858,10696259586752514,10696208047144962,10696066313224194,10696092083027970,10696281061588994,10696452860280834,10696250996817922,10696074903158786,10696242406883330,10696478630084610,10696272471654402,10696216637079554,10696276766621698,10696096377995266,10696220932046850,10696229521981442,10696233816948738,10697015500996610,10696212342112258,10977536986447874,10977936418406402,10977721670041602,10977738849910786,10977528396513282,10977567051218946,10977756029779970,10977893468733442,10977902058668034,10977691605270530,10977695900237826,10977897763700738,10977927828471810,10977549871349762,10977906353635330,10977949303308290,10977554166317058,10977747439845378,10977687310303234,10977940713373698,10977854814027778,10977725965008898,10977674425401346,10977859108995074,10977743144878082,10977683015335938,10977700195205122,10977923533504514,10977734554943490,10977704490172418,10977863403962370,10977678720368642,10977588526055426,10977571346186242,10977592821022722,10977541281415170,10977713080107010,10977751734812674,10977914943569922,10977730259976194,10977708785139714,10977579936120834,10977945008340994,10977910648602626,10977919238537218,10977558461284354,10977833339191298,10977545576382466,10977562756251650,10977837634158594,10977532691480578,10977717375074306,10977932123439106,11259179463540738,11259377032036354,11259213823279106,11259175168573442,11259016254783490,11259338377330690,11259381327003650,11259334082363394,11259196643409922,11259029139685378,11259368442101762,11259183758508034,11259407096807426,11259188053475330,11259007664848898,11259166578638850,11259162283671554,11259226708180994,11259153693736962,11259024844718082,11259205233344514,11259329787396098,11259218118246402,11259170873606146,11259157988704258,11259209528311810,11259402801840130,11259192348442626,11259231003148290,11259011959816194,11259054909489154,11259398506872834,11259222413213698,11259033434652674,11259046319554562,11259200938377218,11259042024587266,11540499820904450,11540486936002562,11540632964890626,11540705979334658,11540482641035266,11540504115871746,11540813353517058,11540856303190018,11540852008222722,11540680209530882,11540508410839042,11540701684367362,11540517000773634,11540628669923330,11540693094432770,11540877778026498,11540650144759810,11540873483059202,11540658734694402,11540637259857922,11540521295740930,11540684504498178,11540667324628994,11540804763582466,11540697389400066,11540843418288130,11540671619596290,11540645849792514,11540882072993794,11540663029661698,11540654439727106,11540491230969858,11540641554825218,11540688799465474,11540529885675522,11540675914563586,11822288330883074,11822168071798786,11822142301995010,11822331280556034,11822004863041538,11821957618401282,11822112237223938,11822146596962306,11822284035915778,11822318395654146,11822103647289346,11822180956700674,11822279740948482,11821974798270466,11822348460425218,11822116532191234,11821991978139650,11822107942256642,11822326985588738,11822150891929602,11821966208335874,11822138007027714,11822176661733378,11822159481864194,11821961913368578,11822129417093122,11822357050359810,11822172366766082,11821996273106946,11821979093237762,11822155186896898,11822125122125826,11822163776831490,11822133712060418,11822120827158530,11821983388205058,11822352755392514,12103832026218498,12103608687919106,12103471248965634,12103630162755586,12103793371512834,12103466953998338,12103449774129154,12103806256414722,12103827731251202,12103479838900226,12103625867788290,12103763306741762,12103643047657474,12103655932559362,12103638752690178,12103595803017218,12103591508049922,12103612982886402,12103582918115330,12103454069096450,12103436889227266,12103600097984514,12103621572820994,12103458364063746,12103647342624770,12103441184194562,12103578623148034,12103587213082626,12103604392951810,12103634457722882,12103754716807170,12103823436283906,12103432594259970,12103801961447426,12103651637592066,12103617277853698,12385057895743490,12385276939075586,12385079370579970,12385083665547266,12385302708879362,12385130910187522,12385066485678082,12385298413912066,12385229694435330,12385100845416450,12385092255481858,12385238284369922,12384907571888130,12384929046724610,12385087960514562,12385122320252930,12385053600776194,12385062190710786,12384941931626498,12385281234042882,12385233989402626,12384924751757314,12385075075612674,12384933341691906,12385307003846658,12385070780645378,12385113730318338,12385118025285634,12384946226593794,12385096550449154,12384916161822722,12385105140383746,12384954816528386,12385109435351042,12385126615220226,12385268349140994,12384911866855426,12666528575586306,12666799158525954,12666391136632834,12666593000095746,12666545755455490,12666567230291970,12666644539703298,12666554345390082,12666713259180034,12666794863558658,12666558640357378,12666760503820290,12666635949768706,12666580115193858,12666614474932226,12666571525259266,12666764798787586,12666575820226562,12666678899441666,12666687489376258,12666395431600130,12666605884997634,12666438381273090,12666769093754882,12666653129637890,12666786273624066,12666382546698242,12666550050422786,12666610179964930,12666442676240386,12666429791338498,12666541460488194,12666601590030338,12666781978656770,12666640244736002,12666386841665538,12666674604474370,12667340324405250,12666773388722178,12666631654801410,12666803453493250,12666408316502018,12666416906436610,12666532870553602,12666537165520898,12666751913885698,12666777683689474,12666627359834114,12666404021534722,12666421201403906,12666657424605186,12666790568591362,12666597295063042,12666524280619010,12666648834670594,12666378251730946,12666425496371202,12666584410161154,12666412611469314,12666399726567426,12666588705128450,12666683194408962,12666618769899522,12666562935324674,12948029327409154,12948179651264514,12948007852572674,12948012147539970,12947857528717314,12947879003553794,12948256960675842,12948003557605378,12947896183422978,12948188241199106,12948037917343746,12948059392180226,12947874708586498,12948025032441858,12947891888455682,12948046507278338,12948033622376450,12948072277082114,12948042212311042,12948016442507266,12948063687147522,12948076572049410,12948248370741250,12948050802245634,12947883298521090,12947866118651906,12947904773357570,12948252665708546,12948231190872066,12948226895904770,12948067982114818,12948080867016706,12948055097212930,12947861823684610,12948020737474562,12948218305970178,13229663212929026,13229693277700098,13229530068942850,13229534363910146,13229358270251010,13229341090381826,13229478529335298,13229727637438466,13229349680316418,13229731932405762,13229706162601986,13229547248812034,13229353975283714,13229723342471170,13229525773975554,13229512889073666,13229379745087490,13229517184040962,13229555838746626,13229551543779330,13229336795414530,13229701867634690,13229521479008258,13229542953844738,13229366860185602,13229487119269890,13229332500447234,13229371155152898,13229504299139074,13229538658877442,13229654622994434,13229508594106370,13229482824302594,13229491414237186,13229500004171778,13229495709204482,13511005046898690,13510811773370370,13511009341865986,13511138190884866,13511000751931394,13510966392193026,13510992161996802,13510846133108738,13510996456964098,13510983572062210,13510824658272258,13511133895917570,13511022226767874,13510962097225730,13511176845590530,13510974982127618,13511129600950274,13510957802258434,13511202615394306,13510807478403074,13511026521735170,13510854723043330,13511017931800578,13511206910361602,13511198320427010,13510953507291138,13511168255655938,13511030816702466,13510841838141442,13510833248206850,13510987867029506,13510816068337666,13511013636833282,13510970687160322,13510979277094914,13511181140557826,13510828953239554,13792505792888834,13792308224393218,13792467138183170,13792445663346690,13792501497921538,13792604577136642,13792471433150466,13792329699229698,13792282454589442,13792677591580674,13792656116744194,13792480023085058,13792475728117762,13792321109295106,13792488613019650,13792492907986946,13792441368379394,13792454253281282,13792316814327810,13792462843215874,13792458548248578,13792286749556738,13792643231842306,13792613167071234,13792497202954242,13792303929425922,13792291044524034,13792428483477506,13792681886547970,13792673296613378,13792437073412098,13792432778444802,13792449958313986,13792299634458626,13792484318052354,13792651821776898,14074126803009538,14074156867780610,14355236715692034,14355408514383874,14355266780463106,14355421399285762,14355241010659330,14355391334514690,14355434284187650,14355395629481986,14355524478500866,14355249600593922,14356026975584257,14356022680682497,14355623249641474,14355399924449282,14355404219416578,14355429989220354,14355442874122242,14355275370397698,14355447169089538,14355412809351170,14355455759024130,14355271075430402,14355387039547394,14355438579154946,14355451464056834,14355279665364994,14355417104318466,14355258190528514,14355382744580098,14355378449612802,14356181594341377,14355584593821696,14355425694253058,14355554530164738,14355253895561218,14355232420724738,14355627557715970,14637291499028481,14637076750794752,14637106815500288,14918384230465538,14918581798961154,14919032763908097,14918551734190082,14918186661969922,14918388525432834,14918513079484418,14918508784517122,14918199546871810,14918543144255490,14918504489549826,14918556029157378,15200048178921474,15199979459444738,15481153788379138,15481514565632002,15481347061907458,15481132313542658,15481312702169090,15481304112234498,15481424371318786,15481501680730114,15481316997136386,15481381421645826,15481149493411842,15481359946809346,15481377126678530,15481385716613122,15481523155566594,15481394306547714,15481544630403074,15481329882038274,15481286932365314,15481402896482306,15481432961253378,15481518860599298,15481136608509954,15481548925370370,15481308407201794,15481162378313730,15481398601515010,15481338471972866,15481428666286082,15481175263215618,15481536040468482,15481368536743938,15481291227332610,15481188148117506,15481166673281026,15481179558182914,15481364241776642,15481463026024450,15481128018575362,15481274047463426,15481299817267202,15481192443084802,15481140903477250,15481355651842050,15481527450533890,15481158083346434,15481325587070978,15482090091249666,15481170968248322,15481390011580418,15481334177005570,15481510270664706,15481145198444546,15481342766940162,15481437256220674,15481351356874754,15481278342430722,15481407191449602,15481553220337666,15481295522299906,15481282637398018,15481540335435778,15481321292103682,15481531745501186,15762998132670464,15762929413128192,16044305601658880,16044284125970432,16044103740162048,16044258357346304,16044644904337409,16044254063296512,16044271243755520,16044898311208961,16044477399564288,16044829591994369,16044279833559040,16044099442638848,16044619134337025,16044696447942657,16044632023367681,16044116624080896,16044262654214144,16044266948395008,16044808112439297,16044301308198912,16044614839107585,16044610548465665,16044086558064640,16044657793368065,16044108032507904,16044292716232704,16044275538198528,16044288423428096,16044297012445184,16044249768263680,16325862187663360,16325617375051776,16325943792697344,16325857892433920,16325926612041728,16326059755700225,16325887957401600,16325973857140736,16325935202369536,16325698978578432,16325570130083840,16325587310477312,16325956677337088,16325939497140224,16326253029294081,16325965267468288,16325969562304512,16325613079691264,16325552949821440,16325960972697600,16607036516073474,16607212609732610,16607199724830722,16607057990909954,16607208314765314,16607221199667202,16607032221106178,16607238379536386,16607053695942658,16607401588293634,16607070875811842,16607191134896130,16607405883260930,16607431653064706,16607186839928834,16607354343653378,16607246969470978,16607225494634498,16607427358097410,16607049400975362,16607195429863426,16607216904699906,16607242674503682,16607066580844546,16607229789601794,16607234084569090,16607423063130114,16607392998359042,16607251264438274,16607040811040770,16607255559405570,16607079465746434,16607182544961538,16607178249994242,16607204019798018,16607362933587970,16888721950113794,16888541561487362,16888691885342722,16888528676585474,16888507201748994,16888683295408130,16888554446389250,16888829324296194,16888661820571650,16888696180310018,16888704770244610,16888902338740226,16888670410506242,16888898043772930,16888730540048386,16888524381618178,16888726245081090,16888880863903746,16888674705473538,16888687590375426,16888700475277314,16888713360179202,16888545856454658,16888709065211906,16888833619263490,16888679000440834,16888511496716290,16888653230637058,16888657525604354,16888799257034752,16888532971552770,16888717655146498,16888666115538946,16888906633707522,16888876568936450,16888867979001858,16888837914230786,16888515791683586,17170549111783425,17170553406816257,17170385903157248,17170815399690241,17451749210783744,17732940719915010,17733116813574146,17733142583377922,17733331561938946,17733095338737666,17733224187625474,17733099633704962,17733078158868482,17732966489718786,17733155468279810,17733301497167874,17733322972004354,17733292907233282,17733129698476034,17732979374620674,17732957899784194,17733121108541442,17733151173312514,17732949309849602,17732953604816898,17733262842462210,17733138288410626,17733091043770370,17733146878345218,17733125403508738,17733305792135170,17733112518606850,17733327266971650,17733082453835778,17733108223639554,17733258547494914,17733086748803074,17733103928672258,17733254252527618,17732970784686082,17732932129980418,17733133993443330,17732936424947714,18014604670533632,18014411395039232,18015021286883329,18014939676082177,18014613260402688,18014424279613440,18014437170741248,18014596080730112,18014712047927296,18014982630342657,18014935385440257,18014956860342273,18014591785369600,18014441461055488,18014428577136640,18014548838842368,18014819422568448,18015132949413889,18014402810085376,18014587491188736,18014785062633472,18014600375173120,18014707752697856,18014810832961536,18014608962945024,18014432869482496,18014776472305664,18014621849419776,18014578900271104,18014806537601024,18015154428968961,18014626145173504,18014617553207296,18014793652961280,18014969741312001,18014737817665536,18014419990347776,18014583194320896,18014943971311617,18014815127732224,18014823717404672,18015223148183553,18014802236538880,18014462939955200,18015102889558017,18014574605238272,18014789357404160,18014467235315712,18014909617668097,18014630438633472,18295925044019202,18296041008136194,18296101137678338,18296028123234306,18295903569182722,18296083957809154,18296079662841858,18296105432645634,18295899274215426,18296049598070786,18296277231337474,18295890684280834,18296036713168898,18295882094346242,18296058188005378,18296066777939970,18295929338986498,18296839872053250,18296096842711042,18295907864150018,18296303001141250,18295886389313538,18296092547743746,18296032418201602,18296045303103490,18295920749051906,18296088252776450,18296053893038082,18296075367874562,18296062482972674,18296071072907266,18295916454084610,18577412893376512,18577735016054784,18577988420304897,18577756491022336,18577743606382592,18577352763506688,18577657706119168,18577765081153536,18577662001348608,18577769375989760,18577760786382848,18577739310825472,18577687771086848,18577649117954048,18577859571220481,18577387124162560,18577726425726976,18577498792263680,18577369943769088,18578052842979329,18577417188737024,18577773670825984,18859055368765440,18858870687268864,18859003830403072,18859368901443585,18859540702101505,18859347433029633,18859025305305088,18858853507268608,18859012421320704,18858874979811328,18858836325171200,18859356016869377,18859480577081345,18858999535370240,18859360310984705,18858982354518016,18859124094861312,18858879275958272,18859051075305472,18859549290659841,18859016715501568,18859553587134465,18859343138258945,18859046779551744,18859364606214145,18858840620859392,18858849209745408,18858986649419776,18859394671443969,18858978061123584,18858990946156544,18859407557001217,18859618009415681,18859575060856833,18858857799614464,18858832031580160,18859021010862080,18859038190534656,18859008124452864,18858866391187456,18859033893076992,18859042483339264,18859227166670848,18859029600665600,18858995241517056,18859557879545857,19140629134376962,19140697853853698,19422172830498818,19422104111022082,19703424473825282,19703652107091970,19703458833563650,19703415883890690,19703647812124674,19703411588923394,19703437358727170,19703476013432834,19703433063759874,19703450243629058,19703549027876866,19703304214740994,19703265560035330,19703445948661762,19703420178857986,19703256970100738,19703295624806402,19703609157419010,19703261265068034,19703471718465538,19703626334535680,19703291329839106,19703274149969922,19703617744666624,19703407293956098,19703299919773698,19703579092647938,19703278444937218,19703441653694466,19703583387615234,19703463128530946,19703428768792578,19703630632255490,19703454538596354,19703480308400130,19703402998988802,19703467423498242,19703282739904514,19984882270732290,19984929515372546,19984955285176322,19985105609031682,19984886565699586,19984890860666882,19984920925437954,19984933810339842,19985092724129794,19984770601582594,19984946695241730,19984877975764994,19984938105307138,19984912335503362,19984753421713410,19984899450601474,19984736241844226,19984740536811522,19985024004653058,19984779191517186,19984925220405250,19984942400274434,19984766306615298,19984903745568770,19984757716680706,19985101314064386,19985127083868162,19985054069424130,19985122788900866,19984908040536066,19985084134195202,19984895155634178,19984774896549890,19984950990209026,19984916630470658,19984731946876930,19984749126746114,19985058364391426,20266795326898177,20267053025067009,20266537629057024,20266576290578434,20266606355349506,20266786741485569,20548008318861314,20548055563501570,20548012605767680,20548081333305346,20548270308327425,20548051268534274,20547686185435136,20547883753340928,20547699077545984,20547888050798592,20548042678599682,20548536596234241,20548257423491073,20548004023894018,20829526243999746,20829745280319489,20829487582478336,20829676565757953,20829736695234561,20830002978488321,20829556308770818,21110657617756162,21110936790630402,21110863776186370,21110829416448002,21111026984943618,21110906725859330,21110786466775042,21110649027821570,21110795056709634,21110855186251778,21110661912723458,21110850891284482,21110962560434178,21110674797625346,21110803646644226,21110825121480706,21110627552985090,21110799351676930,21111044164812802,21110777876840450,21110923905728514,21110880956055554,21110807941611522,21110687682527234,21110679092592642,21111039869845506,21110666207690754,21110820826513410,21110902430892034,21110790761742338,21111009805074434,21110691977494530,21110812236578818,21110816531546114,21110644732854274,21110932495663106,21110846596317186,21111035574878210,21110876661088258,21111052754747394,21111031279910914,21111048459780098,21111589625659394,21111022689976322,21110670502658050,21110889545990146,21110859481219074,21111001215139842,21110833711415298,21110842301349890,21110631847952386,21110782171807746,21111018395009026,21110868071153666,21110636142919682,21110838006382594,21110773581873154,21110898135924738,21110885251022850,21111014100041730,21110893840957442,21110653322788866,21110928200695810,21110640437886978,21392643691839489,21392132590010368,21392274325766144,21392476195454978,21392433245782018,21392317273735168,21392278620798976,21392480490422274,21392291505897472,21392300095700992,21392141181583360,21392111115567104,21392467605520386,21392635105968129,21392682350870529,21392497670291458,21392330159161344,21392128297664512,21392295801257984,21392854152511489,21392312980930560,21392669461839873,21392321569947648,21392325865701376,21392639396610049,21392501957066752,21392506260226050,21392308683472896,21392437540749314,21392124000141312,21392304391061504,21392287211716608,21392282914848768,21392832669941761,21673603279552514,21673598984585218,21673951171903490,21673770783277058,21673766488309762,21673972646739970,21673792258113538,21673749308440578,21673800848048130,21673787963146242,21673796553080834,21673586099683330,21673908222230530,21673753603407874,21673779373211650,21673976941707266,21673805143015426,21673762193342466,21673757898375170,21673607574519810,21673942581968898,21673955466870786,21673783668178946,21673981236674562,21673616164454402,21673775078244354,21673912517197826,21955417558941696,21955430448234498,21955937250246657,21955387489320960,21955645192339457,21955675257176065,21955426149203968,21955383203594242,21955683846979585,22236905420947456,22518178533670914,22518367512231938,22518023914848258,22518011029946370,22518191418572802,22518380397133826,22518032504782850,22518230073278466,22518376102166530,22518406166937602,22518200008507394,22518187123605506,22518212893409282,22518204303474690,22518182828638210,22518225778311170,22518208598441986,22518217188376578,22518337447460866,22518333152493570,22518174238703618,22518028209815554,22518221483343874,22518195713540098,22518041094717442,22518397577003010,22518401871970306,22799808129138690,22799705049923586,22799516071362562,22799657805283330,22799881143582722,22799842488877058,22799700754956290,22799696459988994,22799872553648130,22799498891493378,22799507481427970,22799876848615426,22799674985152514,22799662100250626,22799486006591490,22799855373778946,22799687870054402,22799679280119810,22799670690185218,22799851078811650,22799503186460674,22799683575087106,22799666395217922,22799692165021698,22799649215348738,22799653510316034,22799812424105986,23081338941603840,23081021114351616,23081326057684992,23081089834745856,23081270222323712,23081046884089856,23081025408794624,23081300286504960,23081313171734528,23081051179974656,23081016819974144,23081072654090240,23081257339060224,23081068358205440,23081274517749760,23081308878209024,23081334647685120,23081304582258688,23081034000367616,23081064064286720,23081042590367744,23081287403634688,23081085539254272,23081295992717312,23081291696701440,23081265927684096,23081012524941312,23081317466636288,23081278811734016,23081038293368832,23081076948664320,23081081244876800,23081029705662464,23081008230891520,23081055473893376,23081059769843712,23081094130040832,23362740895023106,23362543326527490,23362551916462082,23362517556723714,23362783844696066,23362521851691010,23362530441625602,23362813909467138,23362749484957698,23362805319532546,23362728010121218,23362822499401730,23362487491952642,23362534736592898,23362801024565250,23362796729597954,23362504671821826,23362766664826882,23362792434630658,23362775254761474,23362508966789122,23362809614499842,23362560506396674,23362758074892290,23362779549728770,23362513261756418,23362500376854530,23362496081887234,23362547621494786,23362526146658306,23362788139663362,23362491786919938,23362564801363970,23362762369859586,23362483196985346,23362539031560194,23362745189990402,23362569096331266,23362732305088514,23362753779924994,23362770959794178,23362556211429378,23644318956781568,23644276012089344,23643936704954368,23643962474168320,23644293187174400,23644409156009985,23643902344298496,23643966769528832,23643919524560896,23644211582140416,23644207286910976,23644288891617280,23644310367174656,23644306071814144,23644237351878656,23644284596846592,23644314661945344,23644048373055488,23644602423771137,23644323251617792,23925437450878976,23925763868327936,23925682263621632,23925686558851072,23925793933492224,23925759573557248,23925377321009152,23925768163885056,23925441746239488,23925798228328448,23925411681665024,23925884132851713,23925781048524800,23925785343885312,23925394501271552,23925750983229440,23925789638656000,23925712328589312,23925523349766144,23926077400481793,24206925306855426,24206908126986242,24206985436397570,24206963961561090,24207152940122114,24207204479729666,24206929601822722,24207247429402626,24206916716920834,24206989731364866,24207174414958594,24206994026332162,24206976846462978,24207195889795074,24206938191757314,24207187299860482,24206912421953538,24206921011888130,24207221659598850,24207225954566146,24207157235089410,24206972551495682,24206959666593794,24206981141430274,24207200184762370,24207165825024002,24206942486724610,24207178709925890,24207208774696962,24207238839468034,24206946781691906,24206968256528386,24207183004893186,24206933896790018,24206955371626498,24207191594827778,24207234544500738,24207230249533442,24207217364631554,24207213069664258,24207170119991298,24206951076659202,24488511955533824,24489078893314049,24488859849785345,24488473303187456,24488894205657089,24488353041481728,24488357333827584,24489057413758977,24488533427290112,24488834086338561,24488636512272384,24488700936650752,24488709526978560,24488731001946112,24488529134878720,24488632217042944,24488335859384320,24488503364616192,24488348743958528,24488726700883968,24488554902978560,24488550609518592,24488537724747776,24488520545075200,24488713821749248,24488748181749760,24488499069583360,24488507658665984,24488524839518208,24488542017552384,24488361635086336,24488344454692864,24488945755553793,24488718117306368,24489147612528641,24488387404300288,24488662282010624,24489027353903105,24488391699660800,24488735297306624,24488516249714688,24488868435656705,24488546313764864,24488365925400576,24488743886913536,24488864140427265,24488327274430464,24488907094687745,24488739592077312,24488881324687361,24770137258721280,24770111488983040,24770184503689216,24770210274017280,24770175913361408,24770218863624192,24769948279898112,24770107193753600,24770193094017024,24770214568787968,24769802251141120,24769819431403520,24770502330613761,24769862381010944,24770309063180289,24770223158460416,24770205978656768,24769866676371456,24769836611796992,24770188798459904,25051582170464256,25051689545498624,25051680955367424,25051311588507648,25051784039956481,25051668070727680,25051423256608768,25051650890072064,25051277227851776,25051698135171072,25051612235431936,25051337357721600,25051341653082112,25051586465693696,25051685250727936,25051659480399872,25051663775170560,25051977307324417,25051693840334848,25051294408114176,25332752204562432,25332812334432256,25332816629792768,25333452284035073,25333259016732673,25332898233319424,25333160227438592,25333173111881728,25333138751881216,25333164522209280,25333057147174912,25333155932078080,25333061442404352,25333134457110528,25332786565218304,25333087212142592,25333143047438336,25333125866782720,25333168817045504,25332769384824832,25614227181273088,25614532123885568,25614291606503424,25614613728591872,25614733993508865,25614643793756160,25614600843493376,25614261541928960,25614635204149248,25614244361535488,25614639498919936,25614287311142912,25614562188853248,25614609433821184,25614648088592384,25614618024148992,25614373210030080,25614927260745729,25614630908788736,25614536419115008,25896075826298880,26177550796914688,26177482077306880,26177683947061249,26177580862210048,26177598042013696,26177211495350272,26177559387242496,26177877214167041,26177512142274560,26177589452341248,26177593747177472,26177237264564224,26177585157570560,26177563682013184,26177323163451392,26177194314956800,26177241559924736,26177567977570304,26177486372536320,26177177134694400,26458707940605954,26458987113480194,26458995703414786,26458772365115394,26458965638643714,26458750890278914,26458712235573250,26459034358120450,26459017178251266,26458780955049986,26458738005377026,26458969933611010,26458982818512898,26458720825507842,26458776660082690,26459012883283970,26459004293349378,26458763775180802,26458729415442434,26458742300344322,26458725120475138,26459008588316674,26458991408447490,26458733710409730,26458999998382082,26458768070148098,26459047243022338,26458789544984578,26458957048709122,26458746595311618,26459021473218562,26458793839951874,26458952753741826,26458759480213506,26458755185246210,26458978523545602,26458716530540546,26459038653087746,26458974228578306,26458785250017282,26459025768185858,26459030063153154,26740225866727426,26740483564765186,26740243046596610,26740474974830594,26740513629536258,26740212981825538,26740444910059522,26740449205026818,26740251636531202,26740255931498498,26740440615092226,26740432025157634,26740268816400386,26740195801956354,26740453499994114,26740208686858242,26740427730190338,26740462089928706,26740247341563906,26740234456662018,26740204391890946,26740200096923650,26740264521433090,26740230161694722,26740238751629314,26740182917054466,26740505039601666,26740496449667074,26740500744634370,26740221571760130,26740187212021762,26740487859732482,26740522219470850,26740260226465794,26740457794961410,26740492154699778,26740217276792834,26740470679863298,26740479269797890,26740466384896002,26740509334568962,26740191506989058,27021683663699970,27021679368732674,27021696548601858,27021945656705026,27021984311410690,27021713728471042,27021709433503746,27021928476835842,27021700843569154,27021662188863490,27021743793242114,27021919886901250,27021932771803138,27021975721476098,27021958541606914,27021722318405634,27021967131541506,27021980016443394,27021687958667266,27021988606377986,27021657893896194,27021907001999362,27021739498274818,27021971426508802,27021730908340226,27021675073765378,27021954246639618,27021705138536450,27021670778798082,27021997196312578,27021735203307522,27021666483830786,27021937066770434,27021962836574210,27021692253634562,27021941361737730,27021949951672322,27021924181868546,27021915591933954,27021902707032066,27021726613372930,27021718023438338,27303497948856320,27303493654020096,27303777121009665,27303094221799424,27303412049117184,27303141466767360,27303463588855808,27303077041537024,27303223070294016,27303489359183872,27303381984149504,27303386279378944,27303459294085120,27303467884412928,27303485064413184,27303583853969409,27303111402192896,27303137171406848,27303480769052672,27303450703757312,27584693746597890,27584667976794114,27584663681826818,27584904199995394,27584912789929986,27584625027121154,27584869840257026,27584887020126210,27584891315093506,27584629322088450,27584689451630594,27584685156663298,27584852660387842,27584616437186562,27584938559733762,27584659386859522,27584921379864578,27584925674831874,27584612142219266,27584929969799170,27584637912023042,27584620732153858,27584676566728706,27584908494962690,27584672271761410,27584856955355138,27584934264766466,27584655091892226,27584882725158914,27584947149668354,27584646501957634,27584874135224322,27584680861696002,27584865545289730,27584917084897282,27584607847251970,27584899905028098,27584633617055746,27584642206990338,27584650796924930,27584895610060802,27584878430191618,27866026994958336,27866533807456257,27866443607441408,27866409247506432,27866430722473984,27866336232800256,27866087124828160,27866091420188672,27866413542277120,27866400657178624,27866044175220736,27866173023715328,27866439312605184,27866331937570816,27866727074430977,27866435017834496,27866447902277632,27866061355614208,27866362002538496,27866417837834240,28147875640246272,28429320540323842,28429281885618178,28429045662416898,28429294770520066,28429342015160322,28429041367449602,28429067137253378,28429110086926338,28429101496991746,28429037072482306,28429058547318786,28429092907057154,28429277590650882,28429105791959042,28429316245356546,28429346310127618,28429363489996802,28429114381893634,28429337720193026,28429084317122562,28429350605094914,28429299065487362,28429054252351490,28429088612089858,28429311950389250,28429333425225730,28429118676860930,28429080022155266,28429324835291138,28429303360454658,28429097202024450,28429075727187970,28429359195029506,28429062842286082,28429071432220674,28429307655421954,28429032777515010,28429290475552770,28429049957384194,28429354900062210,28429372079931394,28429329130258434,28711289444827137,28711027451953153,28711023162228737,28710859948294144,28992253323051010,28992227553247234,29273728302710784,29274230813818881,29273702529368066,29555177506537474,29555203276341250,29837197947371521,29836652483510274,29837193652273153,29836678253314050,29836708321034240,30118363674640385,30118647146741761,30117835393597440,30118556947972097,30118359383998465,30118020079288320,30118041551765504,30118539780292609,30118011489746944,30118032961503232,30118226235097088,30117874048237568,30118406628900865,30117848278171648,30118054437191680,30118642859376641,30118037258960896,30118002898829312,30118050143731712,30118024373731328,30118376571469825,30118380866568193,30117852575694848,30118367969869825,30118578427527169,30118015783927808,30118028669091840,30117865459613696,30118007192879104,30118372276699137,30117856868040704,30117998603796480,30118393739870209,30118045847977984,30399439229222912,30399374803271680,30399413458763776,30399679749750784,30399387687845888,30399370508828672,30399649680982016,30399426343141376,30399396278566912,30399379100139520,30399391984844800,30399662566211584,30399684042162176,30399636798111744,30399443524517888,30399357625368576,30399653976735744,30399400574451712,30399666861113344,30399606733537280,30399366214451200,30399417752682496,30399641091178496,30399422048567296,30399619616800768,30399615322161152,30399688336080896,30399434933731328,30399383394844672,30399675452162048,30399409164320768,30399645387194368,30399404868370432,30399658272686080,30399361919418368,30399430639353856,30399623912226816,30681154726526976,30962646884941826,30962307578789888,30962354821791744,30962333348265984,30962372001988608,30962565275582464,30962612519632896,30962346231988224,30962569570222080,30962599634403328,30962341938266112,30962595340615680,30962552395661314,30962573865648128,30962633995583488,30962586751533056,30962384887152640,30962359117742080,30962625405583360,30962376296562688,30962324756692992,30962329053560832,30962389182644224,30962380592775168,30962350527873024,30962616814534656,30962320462249984,30962591044599808,30962638289502208,30962393477939200,30962363412185088,30962603930157056,30962578165465090,30962337641267200,30962608226107392,30962367706103808,30962316167872512,30962311872839680,30962556686958592,31244121852215298,31244053132738562,31525218881634306,31525605428690946,31525614018625538,31525566771822592,31525957614305281,31526112232734721,31525536709214210,31525347730653186,31526125117964289,31525261831307266,31525498054508546,31525618313592834,31525236061503490,31525266126274562,31525592543789058,31525575363919874,31525506644443138,31525622608560130,31525583953854466,31526120822931457,31525588248821762,31525609723658242,31525201701765122,31525523822411776,31525918959337473,31525940434108417,31525510939410434,31807200652820481,31807011674193920,31807050335715330,31807080400486402,31807462645956609,31807071803867136,31807269372035073,31807527070203905,31807260786950145,32088194608332802,32088332047286274,32088336342253570,32088340637220866,32088374996959234,32088349227155458,32088310572449794,32088173133496322,32088319162384386,32088306277482498,32088357817090050,32088155953627138,32088344932188162,32088576860422146,32088190313365506,32088160248594434,32088551090618370,32088164543561730,32088323457351682,32088353522122754,32088203198267394,32088181723430914,32088379291926530,32088177428463618,32088370701991938,32088362112057346,32088327752318978,32088314867417090,32089113731334146,32088301982515202,32088366407024642,32088198903300098,32369880036343810,32369643813142530,32369807021899778,32370043245101058,32369630928240642,32369811316867074,32369892921245698,32369781252096002,32369648108109826,32369678172880898,32369901511180290,32369897216212994,32370038950133762,32369858561507330,32369802726932482,32369849971572738,32369776957128706,32369884331311106,32369785547063298,32370047540068354,32369837086670850,32369828496736258,32370030360199170,32369862856474626,32369815611834370,32369922986016770,32369656698044418,32369652403077122,32370017475297282,32370021770264578,32369935870918658,32369854266540034,32369845676605442,32370026065231874,32369772662161410,32369961640722434,32370008885362690,32369927280984066,32369691057782786,32369669582946306,32369673877913602,32369867151441922,32369888626278402,32370013180329986,32369789842030594,32369841381638146,32369626633273346,32370034655166466,32369794136997890,32369931575951362,32370000295428098,32369665287979010,32370558638161921,32369798431965186,32369819906801666,32369824201768962,32369686762815490,32369875741376514,32369660993011714,32369639518175234,32369905806147586,32369635223207938,32369832791703554,32651299180511234,32651144561688578,32651307770445826,32651282000642050,32651324950315010,32651320655347714,32651397964759042,32651260525805570,32651114496917506,32651290590576642,32651123086852098,32651264820772866,32651105906982914,32651501043974146,32651273410707458,32651303475478530,32651140266721282,32651286295609346,32651131676786690,32651277705674754,32651329245282306,32651127381819394,32651269115740162,32651256230838274,32651153151623170,32651110201950210,32651148856655874,32651251935870978,32651294885543938,32651316360380418,32651312065413122,32933143506976769,32932752665935872,32932791318872064,32932580867112960,32932606635147264,32933190764527617,32933096274788353,32932765551034368,32932954541260800,32932980310802432,32932976002203648,32932795615084544,32932602342801408,32933444167401473,32932735484952576,32932598045278208,32932744077049856,32932585160704000,32932774140837888,32932761256853504,32933113441746945,32933298126192641,32933104852402177,32932787026067456,32933302422667265,32932804204298240,32933117736976385,32932799910838272,32933177879363585,32932589456392192,32932628111491072,32932778436198400,32932619522801664,32932769846394880,32932739781689344,32933366844948481,32932782728609792,32933323896389633,32932726896656384,32933186469429249,32932756959985664,32933109146517505,32933457052106753,32933306715078657,32932731190050816,32933156392534017,32932748370903040,32932615226720256,33214420928561152,33214472459780096,33214111682330624,33214459575336960,33214060137414656,33214751631933441,33214360790302720,33214914849603585,33214455279976448,33214197581217792,33214257705320448,33214433805008896,33214648561565697,33214068732723200,33214386568757248,33214210475032576,33214085913116672,33214262002778112,33214468164943872,33214438099779584,33214051552460800,33214073029525504,33214558367121409,33214631381630977,33214115977691136,33214425214681088,33214356495073280,33214442395336704,33214463870107648,33495904495271936,33777409532035074,33777413827002370,33777375172296706,33777379467264002,33777422416936962,33777418121969666,33777332222623746,33777065934651394,33777392352165890,33777147539030018,33777310747787266,33777160423931906,33777366582362114,33777388057198594,33777207668572162,33777327927656450,33777370877329410,33777306452819970,33777336517591042,33777022984978434,33777010100076546,33777383762231298,33777001510141954,33777061639684098,33777035869880322,33777211963539458,33777018690011138,33777405237067778,34058802906136578,34058854445744130,34058807201103874,34058841560842242,34058880215547906,34058850150776834,34340277882781698,34340316537487362,34340282177748994,34340329422389250,34340325127421954,34340355192193026,34621761449295874,34621800104001538,34621752859361282,34621636895244290,34621447916683266,34621804398968834,34621757154328578,34621632600276994,34621830168772610,34621435031781378,34621791514066946,34903227830042626,34903700275462145,34903296549519362,34903257893699584,34903695980560385,35184771525443586,35184702805966850,35466066117132290,35466074707066882,35465877138571266,35466061822164994,35466255095693314,35466040347328514,35466057527197698,35465890023473154,35465872843603970,35466027462426626,35466186376216578,35466031757393922,35466044642295810,35466048937263106,35466225030922242,35466250800726018,35465859958702082,35466036052361218,35465881433538562,35466182081249282,35466023167459330,35466053232230402,35466070412099586,35466229325889538,35466216440987650,35466079002034178,35466246505758722,35747326342856704,35747734365732864,35748026422329345,35747347819921408,35747742955339776,35747334927810560,35747747250176000,35748189639999489,35747661359480832,35747923352420353,35747635580698624,35747390768087040,35747631285469184,35747717185732608,35747906172026881,35747536793174016,35747485265887232,35747700005076992,35747738660503552,35747386472726528,35747695719350272,35747532495716352,35747712890175488,35747472371613696,35747730070372352,35747833158041601,35747360703512576,35747708595404800,35747343523119104,36029132039389186,36029127744421890,36029179284029442,36029166401224704,36029174991093760,36310607016034306,36310907665973249,36310649961447424,36310654260674562,36310641371185152,36592081992613890,36592129237254146,36873604214030338,36873556969390082,37154877316595712,37154714107052032,37155036231696384,37154907379269632,37154705517772800,37154903086858240,37155229503062017,37155281043193857,37155427073327105,37154864432349184,37155568818061313,37154726993461248,37155074891579392,37155491495608321,37154731285807104,37154851547316224,37155422776852481,37154898791497728,37155233797177345,37155220925448193,37154860135612416,37154890201694208,37155079193165824,37154924561498112,37154920265744384,37154709811363840,37154752762150912,37155448547049473,37154739877380096,37155242387636225,37155431365738497,37155293934714881,37154885907513344,37154881610645504,37154873021562880,37154744173461504,37154928854958080,37154915969531904,37155066301317120,37155238092406785,37155100652863488,37155324006367233,37154855840710656,37154868727709696,37155311120089089,37155268157636609,37154911676727296,37154894497054720,37154722695938048,37155332589355009,37155302531399681,37436343710908418,37436382365614082,37436180502151170,37436541279404034,37436339415941122,37436219156856834,37436571344175106,37436554164305922,37436579934109698,37436356595810306,37436549869338626,37436575639142402,37436378070646786,37436369480712194,37436502624698370,37436348005875714,37436360890777602,37436197682020354,37436352300843010,37436390955548674,37436201976987650,37436399545483266,37436511214632962,37436326531039234,37436403840450562,37436206271954946,37436335120973826,37436214861889538,37436386660581378,37436189092085762,37436227746791426,37436373775679490,37436365185744898,37436184797118466,37436395250515970,37436330826006530,37436506919665666,37717668360093696,37717651179831296,37718024842051584,37718063497478144,37717715605061632,37718042022707200,37717797208588288,37718037727150080,37717711309701120,37718351259303937,37717956122443776,37718072087150592,37717685540487168,37718157995737089,37718054907346944,37718067792314368,37717960417673216,37718059202707456,37718033432379392,37717986187411456,37999508409090048,37999529884057600,37999499818762240,37999632972513281,37999547063861248,37999431099154432,37999542769025024,37999160517197824,37999538474188800,37999186286411776,37999512703860736,37999534179418112,37999516999417856,37999826236014593,37999143336804352,37999126156541952,37999435394383872,37999272185298944,37999190581772288,37999461164122112,38281022040571904,38280665558482944,38281004860768256,38280983385800704,38281301212725249,38280635493908480,38280601133252608,38280974795472896,38280661263122432,38280618313515008,38280910371094528,38281107949289473,38280906075865088,38281013450899456,38280747162009600,38280936140832768,38280991976128512,38281017745735680,38281009156128768,38280987680571392,38562497026719744,38844057902841857,38843963404320768,38843860324515840,38843954814189568,38843585447329792,38843959109550080,38843697115430912,38843615511904256,38843971993993216,38843933339222016,38843611216543744,38843886094254080,38843941929549824,38843924748894208,38843568266936320,38843856029286400,38844251166146561,38843551086673920,38843937633992704,38843967699156992,39125026063384576,39125361070964736,39125412610703360,39125399725604864,39125532879618049,39125090488614912,39125429790900224,39125438381031424,39125442675867648,39125416906260480,39125172092141568,39125726142857217,39125408315932672,39125335301226496,39125043243646976,39125434086260736,39125446970703872,39125086193254400,39125331005997056,39125060424040448,39406518220357632,39406805982707712,39406647068852224,39406909062971392,39406891882971136,39406810277937152,39406883292643328,39406917652578304,39406565465325568,39406874702315520,39406913357742080,39406887587414016,39406535400751104,39406921947414528,39407201119567873,39407007856394241,39406836047675392,39406904767610880,39406561169965056,39406501040095232,39688311024386048,39688392629288960,39687976016805888,39688362564124672,39688388334452736,39688384039682048,39688040442036224,39687993197068288,39688285254647808,39688280959418368,39688379744321536,39688366859681792,39688396924125184,39688676096278529,39688036146675712,39688122045562880,39688010377461760,39688358269353984,39688482833170433,39688349679026176,39969597022273536,39969760231358464,39969837540835328,39969786001096704,39969854721032192,39969871900835840,39969841836392448,39969485354172416,39969515418746880,39969450993516544,39969833246064640,39969511123386368,39969957809946625,39969824655736832,39969863311163392,39969755936129024,39970151072989185,39969859016392704,39969867605999616,39969468173778944,40251329697742848,40250990395457536,40251230912839680,40250986100097024,40251260977807360,40251338287874048,40251346877546496,40250925970227200,40251071998984192,40250943150489600,40251308222775296,40251312517545984,40250960330883072,40251299632447488,40251342582710272,40251333993103360,40251432786722817,40251626049699841,40251316813103104,40251235208069120,40532418127200256,40532546975694848,40532804674453504,40532400946937856,40532821854257152,40532465372168192,40532791789813760,40532705889550336,40532813264584704,40532774609158144,40532735954518016,40533101026410497,40532461076807680,40532783199485952,40532907763499009,40532435307593728,40532710184779776,40532787494256640,40532817559420928,40532808969814016,40813940348878848,40814296830967808,40814180866260992,40814283946524672,40814021952405504,40814185161490432,40814288241295360,40813910284304384,40814262470967296,40814382740275201,40814258176196608,40814266766524416,40813875923648512,40813893103910912,40814279651164160,40814249585868800,40813936053518336,40814576003121153,40814292536131584,40814210931228672,41095737447677952,41095754627874816,41095741743235072,41095771807678464,41095496929116160,41095660138201088,41095368080621568,41096050979831809,41095733152907264,41095411030228992,41095685907939328,41095724562579456,41095857717051393,41095763218006016,41095655842971648,41095767512842240,41095385261015040,41095350900359168,41095758923235328,41095415325589504,41376860237725696,41377130819682304,41377160884649984,41376971905826816,41377216719945728,41377242489552896,41376886006939648,41376843057332224,41376890302300160,41377212424388608,41377135114911744,41377208129617920,41377525956542465,41377233899945984,41377246784389120,41377238194716672,41377199539290112,41377229604585472,41377332693827585,41376825877069824,41658687401099264,41658674516000768,41658721761099776,41658300853780480,41658683106328576,41658446882537472,41658708876656640,41658691696656384,41658717466263552,41658365279010816,41658605796392960,41658635861360640,41658318034042880,41658713171427328,41658335214436352,41658807670603777,41658704581296128,41658360983650304,41659000933253121,41658610091622400,41940085068333056,41940162377809920,41939793010753536,41940188148137984,41939921859248128,41940282647379969,41940179558006784,41939835960360960,41939775830491136,41940110838071296,41940166673367040,41939840255721472,41940196737810432,41940475909963777,41940158083039232,41940183853367296,41940192442974208,41939810191147008,41940080773103616,41940149492711424,42221560045043712,42221267987464192,42221637354520576,42221624469422080,42221950886674433,42221633059749888,42221285167857664,42221654534717440,42221250807201792,42221667419684864,42221671714521088,42221396835958784,42221585814781952,42221663124848640,42221757624156161,42221641650077696,42221555749814272,42221310937071616,42221658830077952,42221315232432128,42503425863385089,42502742964174848,42503116626788352,42503138101559296,42503129511428096,42503099446132736,42502760144568320,42503112331231232,42502785913782272,42503108036460544,42503133806788608,42503060791492608,42503232600932353,42502871812669440,42502725783912448,42503142396395520,42503035021754368,42503030726524928,42503146691231744,42502790209142784,42784604498493440,43065984975175680,43065710097989632,43066375816806401,43066010744913920,43066049399554048,43065821766090752,43065675737333760,43065740162564096,43066066580209664,43066096644653056,43066057989881856,43065735867203584,43066182554484737,43065980679946240,43065692917596160,43066092349816832,43066062284652544,43066088054980608,43066079464849408,43066083760209920,43347532966592512,43347554441560064,43347537261363200,43347657531260929,43347563031691264,43347150714044416,43347541556920320,43347558736920576,43347455656656896,43347524376264704,43347485721624576,43347571621363712,43347210843914240,43347459951886336,43347296742801408,43347850793517057,43347215139274752,43347567326527488,43347167894306816,43347185074700288,43628698700742658,43628960693747714,43628715880611842,43629003643420674,43628694405775362,43628767420219394,43628711585644546,43628947808845826,43628702995709954,43628681520873474,43628758830284802,43628737355448322,43628982168584194,43628990758518786,43628977873616898,43628943513878530,43628939218911234,43628685815840770,43628995053486082,43628973578649602,43628728765513730,43628930628976642,43628724470546434,43628952103813122,43628964988715010,43628733060481026,43628720175579138,43628750240350210,43628926334009346,43629020823289858,43629012233355266,43628969283682306,43628707290677250,43628986463551490,43629007938387970,43628763125252098,43628956398780418,43628690110808066,43628754535317506,43628741650415618,43628745945382914,43628999348453378,43910199447322626,43910182267453442,43910401310785538,43910225217126402,43910216627191810,43910435670523906,43910195152355330,43910165087584258,43910427080589314,43910186562420738,43910203742289922,43910405605752834,43910173677518850,43910418490654722,43910414195687426,43910169382551554,43910461440327682,43910478620196866,43910448555425794,43910220922159106,43910177972486146,43910439965491202,43910465735294978,43910190857388034,43910422785622018,43910474325229570,43910242396995586,43910470030262274,43910487210131458,43910452850393090,43910482915164162,43910229512093698,43910233807060994,43910156497649666,43910444260458498,43910208037257218,43910160792616962,43910238102028290,43910457145360386,43910212332224514,43910431375556610,43910495800066050,44191953612505088,44192357339496449,44191983667052544,44191979371692032,44191880586788864,44191962191495168,44192082461458433,44191575644176384,44191966487052288,44191996551495680,44191910651756544,44191884882018304,44191987961823232,44191957896724480,44191610004832256,44192340159692801,44191635774046208,44192275723649025,44191721672933376,44191949306396672,44191592824438784,44191640069406720,44191992256659456,44473471528206336,44473110750756864,44473441463762944,44473359858728960,44473458643763200,44473385628467200,44473750700359681,44473557438431233,44473067801149440,44473424283107328,44473437168205824,44473432873435136,44473454348402688,44473050620887040,44473462938533888,44473196649644032,44473355563499520,44473467233370112,44473084981542912,44473115046117376,44754590022828032,44755225677070337,44754830540210176,44754671626354688,44755032415207425,44754937915244544,44754907850145792,44754542777860096,44754834835439616,44754585727467520,44754942210080768,44754916440473600,44754912144916480,44754559958253568,44754860605177856,44754899259817984,44754929325113344,44754933620473856,44754525597597696,44754946504916992,45036391417184256,45036700653780993,45036017754570752,45036305516920832,45036417186791424,45036146603065344,45036408597184512,45036421481627648,45036335581888512,45036309812150272,45036387121627136,45036382826856448,45036374236528640,45036404301824000,45036507391983617,45036060704178176,45036034934964224,45036064999538688,45036000574308352,45036412891955200,45317883573895168,45317857803567104,45317866393894912,45317892163502080,45317780493631488,45317475551019008,45317879278534656,45317982368759809,45317887868665856,45317862098337792,45317849213239296,45317621579776000,45318175630491649,45317784788860928,45317509911674880,45317492731281408,45317535680888832,45317896458338304,45317539976249344,45317810558599168,45598950527729664,45599362845376512,45599367140212736,45599358550605824,45599354255245312,45599096556486656,45599014952960000,45599457345536001,45599332780277760,45599341370605568,45599650607202305,45599337075048448,45599255470342144,45599259765571584,45599371435048960,45599285535309824,45598967707992064,45598984888385536,45599324189949952,45599010657599488,45880730447052800,45880734742282240,45880571533197312,45880442684702720,45880799166660608,45880816347316224,45880485634310144,45880459865096192,45880829231955968,45880812051759104,45881125583912961,45880837822087168,45880807756988416,45880489929670656,45880846411759616,45880833527316480,45880760512020480,45880932322312193,45880842116923392,45880425504440320,46162308504027136,46162291324026880,46162317093634048,46162407299088385,46162304208666624,46161960611020800,46161964906381312,46162600560623617,46162274143371264,46162205423763456,46162321388470272,46162046509907968,46162287028469760,46161917661413376,46162282733699072,46162235488731136,46161900481150976,46162312798797824,46161934841806848,46162209718992896,46444075537334273,46443762005180416,46443757710409728,46443435587731456,46443749120081920,46443680400474112,46443409818517504,46443796365180928,46443375457861632,46443710465441792,46443439883091968,46443779185377280,46443882275864577,46443684695703552,46443392638124032,46443766300737536,46443792070344704,46443787775508480,46443521486618624,46443783480737792,46725155377184768,46724850434572288,46725267047055360,46724914859802624,46725236981891072,46725550514044929,46725357252640769,46724910564442112,46725258457448448,46725254162087936,46725159672414208,46724884795228160,46724996463329280,46725232687120384,46725185442152448,46725241277448192,46725262752219136,46724867614834688,46725271341891584,46725224096792576,47006471440039936,47006342591545344,47006733434159104,47006699073503232,47006711958601728,47006359771938816,47006385541152768,47007025490755585,47006660418863104,47006742023766016,47006707663831040,47006737728929792,47006389836513280,47006746318602240,47006325411282944,47006630353895424,47006634649124864,47006832229416961,47006716254158848,47006729138798592,47288204115509248,47287946416750592,47287860517863424,47288208410869760,47288174050213888,47287800387993600,47288221295312896,47288191230869504,47288500467466241,47288186935312384,47287864813223936,47287834748649472,47288217000476672,47288212705640448,47288105330606080,47288109625835520,47288182640541696,47288307206193153,47288135395573760,47287817568256000,47569679103754240,47851154068930560,47850810471284736,47850784702070784,47851136888733696,47851085348995072,47851450420887553,47850896370171904,47851141184290816,47851158364291072,47850814766645248,47851166953897984,47851171248734208,47851132593963008,47850750341414912,47851257159745537,47850767521677312,47851055284027392,47851059579256832,47851124003635200,47851162659061760,48132358458310658,48132336983474178,48132598984933376,48132289747222528,48132341278441474,48132547444998144,48132568911708162,48132594681511938,48132285452189696,48132543141904386,48132564616740866,48132349868376066,48132560321773570,48132328393539586,48132302623735810,48132354163343362,48132538846937090,48132586091577346,48132607566413826,48132603271446530,48132362753277954,48132530257002498,48132294033801218,48132345573408770,48132577501642754,48132332688506882,48132573206675458,48132306918703106,48132319803604994,48132551731838978,48132311213670402,48132581796610050,48132367048245250,48132525962035202,48132620451315714,48132281158139904,48132556026806274,48132298328768514,48132324098572290,48132611861381122,48132315508637698,48132590393884672,48413846323593216,48414318782382081,48414112612483072,48413915037958144,48413726061887488,48413721764364288,48414254345093121,48414099721289728,48413923629924352,48414091137712128,48414267226062849,48413730354233344,48414082547384320,48413734655492096,48414237160833025,48413897859923968,48414073957056512,48413876385021952,48413760424706048,48413927923384320,48413889270120448,48413884975939584,48414009532678144,48414116907319296,48413700294836224,48413708879790080,48414400374308865,48413764720066560,48414241456062465,48414430434164737,48414520632934401,48414086842155008,48413738945806336,48414451913719809,48413906447695872,48414108317712384,48414005237448704,48413910745153536,48414280115093505,48413717475098624,48413872089989120,48413902155284480,48414035302416384,48413880679071744,48413919334170624,48414232870191105,48414207106744321,48414121202155520,48414104022351872,48413893565480960,48695570404999170,48695510275457026,48695493095587842,48695239692517378,48695480210685954,48695231111561216,48695561815064578,48695536045260802,48695299822059522,48695540347305984,48695308411994114,48695488800620546,48695256872386562,48695265462321154,48695518865391618,48695548938354688,48695269757288450,48695295527092226,48695261167353858,48695527455326210,48695317001928706,48695248282451970,48695557520097282,48695497398419456,48695544635195394,48695553225129986,48695312706961410,48695235397550082,48695291232124930,48695531750293506,48695282642190338,48695514570424322,48695501685522434,48695243987484674,48695286937157634,48695274052255746,48695523160358914,48695475915718658,48695252577419266,48695505980489730,48695278347223042,48695304117026818,48976791987421184,48976783396634624,48976963785064448,48976968079704064,48976710382321664,48976985261015040,48976998143885312,48976761921667072,48976753331273728,48976718971731968,48976731857747968,48976740447748096,48976972375130112,48976955196440576,48976714677354496,48976723266174976,48976787692126208,48976774806044672,48976749037355008,48977002439639040,48976770511470592,48976736150749184,48977028217700352,48976706088271872,48976993850097664,48977036798984192,48976757627224064,48977032505065472,48977011029114880,48976766215585792,48977015324016640,48977006735589376,48976779102257152,48976744741470208,48976727563042816,48977023915065344,48976989554081792,49258503194476544,49539737637158914,49539930910687234,49539905140883458,49539935205654530,49539741932126210,49539965277437952,49539922328551424,49539960975458306,49539711867355138,49539724752257026,49539664622714882,49539973868486656,49539681802584066,49539677507616770,49539673212649474,49539986745262082,49539995335196674,49539952385523714,49539978155327490,49539948090556418,49539939500621826,49539690392518658,49539900845916162,49539969565392898,49539668917682178,49539660327747586,49539698982453250,49539918025785346,49539703277420546,49539729047224322,49539716162322434,49539943795589122,49539733342191618,49539656041693184,49539913730818050,49539982450294786,49539707572387842,49539956680491010,49539686097551362,49539694687485954,49539720457289730,49539926615719938,49821470311776258,49821444541972482,49821393002364930,49821414477201410,49821178254000130,49821199728836610,49821208318771202,49821195433869314,49821182548967426,49821216908705794,49821152484196354,49821212613738498,49821388707397634,49821204023803906,49821405887266818,49821169664065538,49821440254148608,49821131018403840,49821401592299522,49821410182234114,49821139599294466,49821461721841666,49821380117463042,49821375822495746,49821135304327170,49821453131907074,49821156779163650,49821418772168706,49821161074130946,49821397305262080,49821435952037890,49821448845197312,49821431657070594,49821148189229058,49821173959032834,49821191138902018,49821423067136002,49821143894261762,49821427362103298,49821165369098242,49821457426874370,49821186843934722,50102618871234562,50102919518945282,50102636051103746,50102640346071042,50102893749141506,50102863684370434,50102679000776706,50102936698814466,50102867979337730,50102687590711298,50102674705809410,50102915230859264,50102855094435842,50102691885678594,50102872281972736,50102910929010690,50102928108879874,50102889454174210,50102605995114496,50102923821907968,50102906634043394,50102653230972930,50102850799468546,50102623166201858,50102932403847170,50102885159206914,50102670410842114,50102614576267266,50102666115874818,50102610281299970,50102683295744002,50102661820907522,50102657525940226,50102644641038338,50102648936005634,50102945288749058,50102876569272322,50102627461169154,50102902339076098,50102898044108802,50102631756136450,50102880864239618,50384364430295042,50384119617159170,50384420264869890,50384342955458562,50384381610164226,50384098142322690,50384089560907776,50384403085000706,50384347258683392,50384106732257282,50384373020229634,50384158271864834,50384132502061058,50384351545393154,50384162566832130,50384368725262338,50384355840360450,50384111027224578,50384411674935298,50384398798618624,50384115322191874,50384338660491266,50384085265874944,50384102437289986,50384325775589378,50384128207093762,50384093847355394,50384394495066114,50384149681930242,50384123912126466,50384377315196930,50384136797028354,50384360135327746,50384145386962946,50384166861799426,50384330070556674,50384141091995650,50384390207569920,50384385905131522,50384407379968002,50384080971825152,50384153976897538,50665701968969728,50666251727405057,50666230247849985,50665689083805696,50666041269747713,50665684789624832,50665723443609600,50665525875572736,50665671903674368,50665693379166208,50665521578049536,50665508693475328,50666320446619649,50665706261381120,50665530167918592,50665710558838784,50666079928778753,50665680492756992,50665714851643392,50665719147855872,50665538759491584,50666067039748097,50665697673609216,50666118596263937,50666032683876353,50665676198707200,50665899534974976,50666036974518273,50665727737069568,50666054158778369,50947335859077122,50947039506333698,50947327269142530,50947030925246464,50947357333913602,50947301499338754,50947361628880898,50947275729534978,50947348752039936,50947288614436866,50947331564109826,50947116815745026,50947086750973954,50947048096268290,50947091045941250,50947322974175234,50947340160991232,50947353038946306,50947310089273346,50947108225810434,50947103930843138,50947112520777730,50947052391235586,50947078161039362,50947370218815490,50947297212104704,50947073866072066,50947065276137474,50947069571104770,50947060981170178,50947035211366402,50947305794306050,50947314384240642,50947099635875842,50947318679207938,50947095340908546,50947280024502274,50947056686202882,50947344449011714,50947082456006658,50947292909404162,50947043801300994,51228587497029634,51228797950427138,51228574612127746,51228772188815360,51228570317160450,51228819425263618,51228776475590658,51228561727225858,51228544547356674,51228767885656066,51228548842323970,51228836605132802,51228832310165506,51228557432258562,51228518777552898,51228510196006912,51228566022193154,51228845195067394,51228823728750592,51228514491039744,51228828015198210,51228540252389378,51228789360492546,51228535957422082,51228591791996930,51228523072520194,51228815137701888,51228810835329026,51228806540361730,51228505901957120,51228527367487490,51228780770557954,51228802245394434,51228755000754178,51228583202062338,51228763590688770,51228553137291266,51228750705786882,51228531662454786,51228578907095042,51228793655459842,51228785065525250,51510320172367874,51509998049820674,51510015229689858,51510002344787970,51510036704526338,51510019524657154,51510045294460930,51510225683087362,51510281517662210,51510010934722562,51510006639755266,51510264337793026,51510066769297410,51510272927727618,51509993754853378,51510049589428226,51510238567989250,51510260042825730,51510311582433282,51509989459886082,51510062474330114,51510277222694914,51510251452891138,51510255747858434,51510307287465986,51510028114591746,51510032409559042,51510268632760322,51509980878667776,51510040999493634,51510058179362818,51510023819624450,51510053884395522,51510294402564098,51510229978054658,51510290114412544,51509985164918786,51510302992498690,51510285812629506,51510247165526016,51510242862956546,51510298705461248,51791400015364096,51791816627847168,51791782267912192,51791460145233920,51791709253206016,51791704957976576,51791906834022401,51791790858240000,51791464440594432,51792100094836737,51791812333010944,51791803742879744,51791773677584384,51791808038240256,51791735022944256,51791417195626496,51791820922683392,51791786562682880,51791546044121088,51791434376019968,52073708228378625,52073201422172160,52073175643127810,52354925507117057,52354757991989248,52636125605986304,52917600573128706,53199075550560258,53199101320364034,53480554818240512,53480670782947328,53480636422946816,53480623537848320,53480657898504192,53480584883208192,53480395904385024,53480314300858368,53480632128176128,53480249875628032,53480756694614017,53480267055890432,53480284236283904,53480640718503936,53480662193274880,53480310005497856,53480653603143680,53480666488111104,53480559113469952,53480949955100673,53762051273850882,53762025504047106,54043929968377857,54043500479119362,54043423164137472,54043951447932929,54043388804333568,54043912800698369,54043736695046145,54043221298577408,54043225596100608,54043414572171264,54043380213284864,54043779649306625,54043247068643328,54043410279366656,54043732404404225,54043753886973953,54043599255502848,54043393099694080,54043766760275969,54043371624202240,54043427457597440,54043375919235072,54043418868383744,54043405981908992,54043238480019456,54043749597773825,54043740990275585,54043397394137088,54044020167147521,54043401689497600,54043208414003200,54043229888446464,54043384510152704,54324975455698946,54325074239946754,54324885261385730,54324876671451138,54324902441254914,54324704872759298,54324898146287618,54324868081516546,54324872376483842,54324859491581954,54324683397922818,54324889556353026,54324855196614658,54324722052628482,54324713462693890,54324880966418434,54324850901647362,54324700577792002,54324863786549250,54324846606680066,54324696282824706,54324893851320322,54606343058161666,54606171259469826,54606373122932738,54606360238030850,54606355943063554,54606338763194370,54606179849404418,54606188439339010,54606325878292482,54606364532998146,54606197029273602,54606158374567938,54606549216591874,54606321583325186,54606450432344066,54606334468227074,54606368827965442,54606377417900034,54606347353128962,54606175554437122,54606351648096258,54606330173259778,54888432226009089,54887959764467712,54887955484901376,54888028490760194,54888187413004289,54887998425989122,54888208887775233,54888217462308865,54888019898138626,54888475160477697,54888436521172993,55169400396906496,55450733630980098,55450901134704642,55450776580653058,55450750810849282,55450755105816578,55450587602092034,55450626256797698,55450737925947394,55450759400783874,55450742220914690,55450802350456834,55450746515881986,55450948379344898,55450763695751170,55450767990718466,55450909724639234,55450785170587650,55450604781961218,55450978444115970,55450725041045506,55450798055489538,55450772285685762,55450583307124738,55450579012157442,55450969854181378,55450613371895810,55450974149148674,55450793760522242,55450789465554946,55450617666863106,55450939789410306,55450952674312194,55450729336012802,55450596192026626,55450780875620354,55450600486993922,55732444830826498,55732200017690626,55732247262330882,55732277327101954,55732264442200066,55732242967363586,55732230082461698,55732204312657922,55732088348540930,55732273032134658,55732053988802562,55732268737167362,55732449125793794,55732255852265474,55732260147232770,55732376111349762,55732075463639042,55732079758606338,55732423355990018,55732384701284354,55732212902592514,55732221492527106,55732427650957314,55732251557298178,55732238672396290,55732225787494402,55732234377428994,55732414766055426,55732062578737154,55732058283769858,55732101233442818,55732453420761090,55732217197559810,55732071168671746,55732208607625218,55732092643508226,56013915508899840,56013833903865856,56013941278507008,56013911213342720,56013945573343232,56013829608636416,56013559026679808,56013541846286336,56013584795893760,56013589091254272,56014224745496577,56013859673604096,56014031485534209,56013936983670784,56013898328244224,56013928393539584,56013524666023936,56013906918572032,56013932688900096,56013670694780928,56295326073749504,56295300299816962,56295914484203521,56576831111495682,56576796751757314,56576839701430274,56858370512584706,56858357627682818,56857983965528066,56858258843435010,56858336152846338,56858014030299138,56858361922650114,56858331857879042,56858340447813634,56858245958533122,56858095634677762,56858254548467714,56858009735331842,56858284613238786,56857949605789698,56858323267944450,56858353332715522,56857966785658882,56858366217617410,57139828313358336,57421045578334208,57421273211797504,57420933910233088,57421286096896000,57420959679447040,57421599629049857,57421406357291009,57421234557157376,57421307572453376,57421208787419136,57421316162060288,57421320456896512,57421535218368513,57421195904024576,57420916729839616,57421303277092864,57421281802125312,57421204492189696,57420963974807552,57421290392453120,57421311867224064,57420899549577216,57702731022270464,57702739605913600,57703113274425345,57702696656502784,57984175929753602,57984150159949826,58265354539106304,58265552108257280,58265504863944704,58265483388911616,58265333064663040,58265547814797312,58265582192230400,58265711027027968,58265560717262848,58265539222831104,58265723906162688,58265534930026496,58265968739483649,58265590782951424,58265577896738816,58265586487590912,58265852756361217,58266071800348673,58265595076476928,58265388904939520,58265998804779009,58265745387028480,58265526340157440,58265345949237248,58265865640935425,58265496274862080,58265891410935809,58266037441593345,58265470508466176,58266046030151681,58265839890530305,58265728220725248,58265573601705984,58265363130679296,58265522044796928,58265985919811585,58265831296991233,58265371719303168,58266093293862913,58265384609579008,58265719627972610,58265337360351232,58265341659971584,58265977330073601,58265556422885376,58266054619037697,58265599371640832,58265620834353152,58265517750353920,58265513454993408,58266106175029249,58265509160812544,58266067523272705,58265350246760448,58265500569894912,58265994509221889,58265904296493057,58265861345705985,58265603667132416,58265706732257280,58265741092192256,58265736797356032,58266114748907521,58265487685648384,58265543519043584,58266024559181825,58265358840365056,58265633717551104,58265732502585344,58265625141837824,58265565012164608,58265328771072000,58265857050476545,58266050326626305,58265659487289344,58265990215041025,58265698141929472,58265474800615424,58265324479709184,58265715322585088,58265491981008896,58266088998699009,58265479094009856,58265629422321664,58265844172521473,58266260796735489,58265376015450112,58265973034844161,58265367426760704,58265530632568832,58547173121589248,58547383587504129,58547125880750082,58547203187998722,58547649857716225,58547430819364865,58547164531326976,58547392177373185,58547134461706240,58547177420357634,58547422242275329,58828652397264898,58828600866308096,59110075834236930,59110127373844482,59391602359402496,59673025796636672,59673575552385025,59673077326872578,59673571257548801,59954552303386626,59954500763779074,60235842595913730,60235816826109954,60235808236175362,60236044459376642,60235692272058370,60235834005979138,60235859775782914,60235825416044546,60235662207287298,60235821121077250,60235855480815618,60235687977091074,60235975739899906,60235675092189186,60235868365717506,60235812531142658,60235829711011842,60235670797221890,60236027279507458,60235657912320002,60235838300946434,60236014394605570,60235803941208066,60235864070750210,60236022984540162,60235700861992962,60235872660684802,60235799646240770,60235876955652098,60235945675128834,60235851185848322,60236005804670978,60236048754343938,60235846890881026,60235980034867202,60235696567025666,60235679387156482,60235653617352706,60517502266507264,60798942871945216,60798938575929344,60798693763317760,60798934282862592,60798680879595520,60798663699202048,60798981526913024,60798676584890368,60798985820831744,60798947165732864,60798960050962432,60798698059202560,60798728124104704,60798917101551616,60798715237433344,60798702353121280,60798667993579520,60798951461486592,60798723827892224,60798710943514624,60798685172596736,60798968653348864,60798655110119424,60798972936912896,60798912806912000,60798706649071616,60798904218288128,60798732418482176,60798921396977664,60798736713973760,60798964345864192,60798659404169216,60798672288022528,60798719533318144,60798689469595648,60798741009268736,60798955757436928,61080284706308098,61080495159705602,61080134382452738,61080460799967234,61080074252910594,61080447915065346,61080443620098050,61080465094934530,61080220281798658,61080456504999938,61080477979836418,61080486569771010,61080383490555906,61080280411340802,61080138677420034,61080379195588610,61080091432779778,61080482274803714,61080490864738306,61080233166700546,61080095727747074,61080409260359682,61080082842845186,61080108612648962,61361952951042048,61361609353396224,61361918606966784,61361957246402560,61361884247162880,61361566403788800,61361708153634816,61362056045789185,61361854166138880,61361931476074496,61361613648756736,61361935770845184,61361583584182272,61361549223526400,61361970130845696,61362249302999041,61361922885746688,61361940066402304,61361965836009472,61361961541173248,61361858461368320,61361695252283392,61643410753519618,61643234650554368,61643415048486914,61643427933388802,61643333444108290,61643440818290690,61643445113257986,61643058566201346,61643041386332162,61643183120252930,61643084336005122,61643604037206017,61643406458552322,61643432228356098,61643436523323394,61643045677301760,61643170235351042,61643230353096704,61643024206462978,61643088630972418,61643329149140994,61643393573650434,61643397868617730,61643359213912066,61643032785190912,61924872839168000,61925199256420353,61924834184527872,61924516357210112,61924533537603584,61925362474090497,61924915789430784,61925096193916929,61924709627265024,61924920084267008,61924808414789632,61924507761901568,61924520654012416,61924559306817536,61924499176947712,61924911494594560,61924563602178048,61924885724266496,61924890019823616,61924902904463360,61925079006117889,61924705329807360,61925005999538177,61924881429495808,61924907199823872,61924804119560192,61924645205704704,62206480965697537,62206382176534528,62206356406206464,62206008514314240,62206360700977152,62206377881174016,62206395060977664,62206038578888704,62206674233131009,62205974153658368,62206343537426432,62206034283528192,62206386471305216,62206390766141440,62205991333920768,62206120182415360,62206364996534272,62206283391500288,62206279096270848,62206309161238528,62206347815878656,62487659588747266,62487616639074306,62487620934041602,62487650998812674,62487492085022722,62487844272340994,62487655293779970,62487457725284354,62487625229008898,62487633818943490,62487612344107010,62487676768616450,62487646703845378,62487642408878082,62487487790055426,62487827092471810,62487500674957314,62487663883714562,62487805617635330,62487608049139714,62487745488093186,62487672473649154,62487453430317058,62487479200120834,62487603754172418,62487779847831554,62487474905153538,62487668178681858,62487814207569922,62487470610186242,62487775552864258,62487496379990018,62487629523976194,62487462020251650,62487848567308290,62487638113910786,62487599459205122,62487822797504514,62769138860359682,62768932701929474,62769078730817538,62769289184215042,62768954176765954,62769143155326978,62769087320752130,62768945586831362,62769113090555906,62769074435850242,62769134565392386,62768936996896770,62769297774149634,62769147450294274,62768967061667842,62768928406962178,62769220464738306,62769100205654018,62768962766700546,62769091615719426,62769083025784834,62768971356635138,62769302069116930,62768949881798658,62769323543953410,62769125975457794,62769280594280450,62769250529509378,62768975651602434,62769104500621314,62769121680490498,62769319248986114,62769095910686722,62769130270425090,62769151745261570,62769108795588610,62769254824476674,62769117385523202,63050467807264768,63050738389614592,63050476398575616,63050510757199872,63050768467623936,63050764159549440,63050484986281984,63050746979418112,63050489283280896,63050527937789952,63050497872887808,63050515051118592,63050532232167424,63050463512887296,63050480693280768,63050493577003008,63050721210662912,63050523641577472,63050519347003392,63050472101707776,63050459217854464,63050540822953984,63050502166806528,63050759864647680,63050751275171840,63050536527659008,63050734096547840,63050755571122176,63050712620597248,63050742685630464,63050716915236864,63050772750598144,63050506462756864,63050785634516992,63050704031973376,63050454923804672,63050781340598272,63332277795291138,63332243435552770,63332282090258434,63332020097253378,63331934197907458,63332294975160322,63332032991068160,63332264910389250,63332247730520066,63332256320454658,63331874068365314,63332290680193026,63332209075814402,63332260615421954,63331938492874754,63332767430410241,63331908428103682,63332183306010626,63332179011043330,63331891248234498,63332286385225730,63613761354858496,63613495065968640,63613731289759744,63613684044791808,63613757060087808,63613653979824128,63613718421241856,63614049116684289,63613735584530432,63613769944530944,63613349037211648,63613722699431936,63613739880087552,63613752764727296,63613413462441984,63613855849250817,63613409167081472,63613658275053568,63613366217474048,63613383397867520,63613765649694720,63894970050478082,63895159029039106,63895197683744770,63895030180020226,63895236338450434,63895227748515842,63894845496426498,63895244928385026,63895713089060865,63894824021590018,63894884151132162,63895034474987522,63894858381328386,63895214863613954,63894841201459202,63894888446099458,63894832611524610,63895133259235330,63895206273679362,63895128964268034,63895240633417730,63895210568646658,63895232043483138,64176625415684098,64176676955291650,64176664070389762,64176672660324354,64176629710651394,64457932876546048,64458504106672129,64457778258706432,64458340898570241,64457795436871680,64458306538110977,64458383861022721,64457950057529344,64457782552297472,64457928581644288,64457958648446976,64457962942627840,64457804026740736,64457816914395136,64457980120203264,64457967237988352,64458173393797120,64457799734394880,64458310833340417,64457997302431744,64457825503084544,64457971532431360,64457937173282816,64457945762496512,64457975827791872,64457786847985664,64457924288249856,64458641558994945,64458521287983105,64458302243995649,64458315128569857,64458495517786113,64457993006678016,64458293666381825,64458353784127489,64457812618313728,64457988710465536,64458151941439488,64458001595891712,64457941468643328,64458564236541953,64458375279804417,64458499814260737,64457984417660928,64457954351579136,64739665556537344,64739459394371584,64739270421118976,64739622606274560,64739661261701120,64739455096913920,64739618328608768,64739309073924096,64739266124316672,64739407875145728,64739631196602368,64739283304710144,64739583968673792,64739755767300097,64739656966930432,64739845961744385,64739553886666752,64739257529008128,64739558181896192,64739635491373056,64739248944054272,64739652671569920,64739394972811264,64739669851373568,64739313369284608,64739828773224449,64740112241197057,64739949023526913,64739639786930176,65021097592291328,65021101885292546,65021050345684994,65021054640652290,65021089002422272,65302576872030208,65584047545253890,65584051840221186,65584038955319298,65584004595580930,65584000300613634,65865526825517056,66146731199365122,66146726904397826,66146744084267010,66146950242697218,66147010378334208,66146714019495938,66146735494332418,66146954537664514,66146958840365056,66147001782304770,66146924472893442,66146679667621888,66146984602435586,66146928767860738,66146739789299714,66146701142392832,66146937357795330,66146722609430530,66146941652762626,66146688256704512,66146997494415360,66146696845524992,66146988903366656,66146705437097984,66146692551081984,66146709724528642,66146761264136194,66146683961671680,66146963133431808,66146980307468290,66146971723235328,66146752674201602,66146756969168898,66147006084415488,66146993192370178,66146967429447680,66146718314463234,66146748379234306,66147018962173954,66146945954480128,66146765559103490,66146976018989056,66428189003808768,66428425220194306,66428403752501248,66428214771646464,66428180413808640,66428429515161602,66428171822235648,66428197593415680,66428459585175552,66428219067531264,66428468169867266,66428167527792640,66428399450390530,66428206183284736,66428236248186880,66428193297530880,66428154644332544,66428223362105344,66428481061126144,66428240543481856,66428446699945984,66428412341125120,66428455291650048,66428416635764736,66428485355044864,66428463880077312,66428433817075712,66428158938382336,66428476759801858,66428472471126016,66428493939671042,66428442406158336,66428227658317824,66428184706809856,66428420931190784,66428450995699712,66428176119103488,66428231952695296,66428210477727744,66428438110142464,66428201887334400,66428163233415168,66709681152524290,66709917382868992,66709715512262658,66709706922328066,66709900195856386,66709711217295362,66709960331755520,66709633915092992,66709943145529346,66709947447836672,66709651087753218,66709956037836800,66709930260627458,66709913086853120,66709925965660162,66709895907901440,66709689742458882,66709694037426178,66709668267622402,66709642504503296,66709891605921794,66709887310954498,66709659677687810,66709874426052610,66709672562589698,66709663972655106,66709938856787968,66709951735463938,66709878721019906,66709698332393474,66709655382720514,66709934555594754,66709685447491586,66709968915333122,66709921670692866,66709646798946304,66709676857556994,66709702627360770,66709629621043200,66709904490823682,66709908793786368,66709638210125824,66991426732425216,67272635400519682,67272588163547136,67272643990454274,67272665465290754,67272880213655554,67272910278426626,67272901688492034,67272652580388866,67272631105552386,67272893098557442,67272824379080706,67272596745814018,67272583868514304,67272609630715906,67272845861322752,67272618220650498,67272867328753666,67272905983459330,67272888810209280,67272841558949890,67272875918688258,67272858738819074,67272648285421570,67272579574464512,67272918868361218,67272592450846722,67272897401257984,67272850148884482,67272661170323458,67272837263982594,67272601040781314,67272656875356162,67272884508622850,67272613925683202,67272626810585090,67272605335748610,67272863033786370,67272871623720962,67272622515617794,67272854443851778,67272828674048002,67272639695486978,67554084607754242,67554329420890114,67554123262459906,67554376665530370,67554316535988226,67554110377558018,67554380967968768,67554127557427202,67554368075595778,67554355190693890,67554136147361794,67554346600759298,67554080312786946,67554385261887488,67554071722852354,67554118967492610,67554088902721538,67554372377968640,67554054551175168,67554101787623426,67554333723918336,67554067427885058,67554303651086338,67554076017819650,67554359485661186,67554325125922818,67554114672525314,67554312241020930,67554363786919936,67554320838033408,67554093197688834,67554393845399554,67554140442329090,67554063140257792,67554299356119042,67554350895726594,67554106082590722,67554131852394498,67554097492656130,67554058845224960,67554342313000960,67554338016985088,67835585361281024,67835855944679424,67835821583499264,67835812993695744,67835551002656768,67835787224678400,67835817289711616,67835538116968448,67835860238598144,67835615427035136,67835843072688128,67835834468728832,67835606836248576,67835563887362048,67835546705788928,67835559590363136,67835581066838016,67835611131740160,67835589655199744,67835847354679296,67835542411345920,67835576770887680,67835795814744064,67835778636054528,67835598245658624,67835791519318016,67835529527885824,67835568181084160,67835555297361920,67835593951084544,67835533821935616,67835572476968960,67835602541871104,67835808700628992,67835830175203328,67835838763630592,67835825879252992,68117322331389952,68117313740341248,68117021682499584,68117330921390080,68117296560209920,68117030274072576,68117262201389056,68117266496028672,68117300855963648,68117047453679616,68117043157794816,68117309445439488,68117335215308800,68117025979367424,68117013093679104,68117283677339648,68117077518581760,68117064631910400,68117279394758656,68117056043548672,68117004504596480,68117081812959232,68117073222369280,68117017388056576,68117008798646272,68117038864072704,68117051747598336,68117292266422272,68117060337991680,68117287970406400,68117090403745792,68117034567073792,68117305151913984,68117253612765184,68117068927795200,68117270791454720,68117086108450816,68398535307558914,68398728581087234,68398762947117056,68398775825727490,68398724286119938,68398771530760194,68398797308100608,68398488070389760,68398767243132928,68398556782395394,68398531012591618,68398522422657026,68398780120694786,68398509537755138,68398479481307136,68398565372329986,68398810185465858,68398548192460802,68398492357885954,68398513832722434,68398518127689730,68398805890498562,68398505242787842,68398526717624322,68398788717051904,68398784415662082,68398750055923714,68398801595531266,68398741465989122,68398483775356928,68398745768165376,68398758654050304,68398754350891010,68398818775400450,68398552487428098,68398543897493506,68398737171021826,68398539602526210,68398500947820546,68398561077362690,68398793005596674,68398496652853250,68679993111216128,68680267983683586,68679988817494016,68680014585331712,68680225034010626,68679958752067584,68680233630760960,68680285168730112,68680212154810368,68680272284811264,68680023175790592,68680255105335296,68680242219843584,68680276573618178,68680216449449984,68680263693762560,68680229328977922,68680199264206850,68680031766380544,68679997407100928,68679975932788736,68680001701019648,68680036061872128,68679963047100416,68680259398860800,68680010291412992,68680250809384960,68679980227493888,68680293753487362,68679971635920896,68680237923827712,68680220744876032,68679984520495104,68680018881216512,68680027472003072,68679954458017792,68680280874811392,68679967341477888,68680005996969984,68680246513631232,68680203566186496,68680040357167104,68961738670473216,68961446612631552,68961463794204672,68961747261521920,68961498152501248,68961760145440768,68961511038582784,68961734375571456,68961712900538368,68961493857927168,68961459497205760,68961455204204544,68961438023811072,68961485268123648,68961695721586688,68961755851522048,68961742960066562,68961450909499392,68961721490341888,68961751550001154,68961708607471616,68961700010393602,68961502448713728,68961691426160640,68961429434728448,68961515333877760,68961717196554240,68961725786095616,68961674240589826,68961704305360898,68961730082045952,68961678542897152,68961476677730304,68961506743091200,68961768729870338,68961468087926784,68961489562042368,68961687131521024,68961433728778240,68961480973680640,68961472383811584,68961442318188544,69242938770915328,69243243706187778,69243226526318594,69242925886210048,69242904411439104,69242951648411650,69243192173264896,69243235122151424,69243166396776450,69243217936384002,69243179281678338,69242943058477058,69242930180915200,69242968828280834,69242977418215426,69243209346449410,69243213647183872,69243174986711042,69243230828232704,69242947353444354,69242934473916416,69243200762806272,69243183584182272,69242981713182722,69242913000521728,69242973123248130,69242964533313538,69242921589342208,69243153519607808,69243222238232576,69242990303117314,69243196467052544,69242955943378946,69242908705488896,69242960238346242,69243162101809154,69242917294899200,69242986008150018,69243170698297344,69243205051482114,69243149216907266,69243187877249024,69524379388149760,69524452395057154,69524387977232384,69524418035318786,69524705804943360,69524443805122562,69524439510155266,69524624193748994,69524688623894528,69524383682199552,69524413747625984,69524710098862080,69524641379581952,69524435215187970,69524671443763200,69524692913225730,69524637084942336,69524675739516928,69524667149975552,69524422330286082,69524680028323842,69524697214943232,69524400862920704,69524701503160322,69524658560892928,69524628496318464,69524718683029506,69524456690024450,69524396566052864,69524684323291138,69524649963552770,69524409450627072,69524448100089858,69524654258520066,69524430920220674,69524662853959680,69524405157625856,69524426625253378,69524460984991746,69524465279959042,69524645675008000,69524392271609856,69805871536472066,69806193659019266,69806133537603584,69805862953943040,69805931666014210,69805905896210434,69806124939542530,69805854364860416,69805875831439362,69805858658910208,69806155004313602,69805918781112322,69805940255948802,69805888716341250,69806185075572736,69805884421373954,69806176479150082,69806146414379010,69805897306275842,69806163600605184,69806112054640642,69805880126406658,69805901601243138,69806172191653888,69806142126686208,69806099169738754,69806180781654016,69805914486145026,69805923076079618,69805927371046914,69806167889215490,69806159299280898,69805910191177730,69806129234509826,69805893011308546,69806150709346306,69805867241504770,69806120651718656,69805935960981506,69806137830670336,69806116349607938,69806103464706050,70087372283183106,70087363693248514,70087346519474176,70087342225031168,70087376578150402,70087642866122754,70087393758019586,70087337930653696,70087629981220866,70087415232856066,70087599916449794,70087595628429312,70087647168364544,70087612807380992,70087591326515202,70087608514314240,70087578441613314,70087367988215810,70087634276188162,70087604211417090,70087402347954178,70087406642921474,70087668635926530,70087574146646018,70087385168084994,70087638577315840,70087621391286274,70087617103396864,70087660052283392,70087389463052290,70087380873117698,70087350808346626,70087329341571072,70087587031547906,70087651456057346,70087355103313922,70087359398281218,70087410937888770,70087625686253570,70087333635620864,70087655758364672,70087398052986882,70368881626644480,70369070605139968,70368851561283584,70368890217431040,70368825793052672,70369096373895168,70369126433816578,70369117843881986,70368834380759040,70368808612331520,70368821496184832,70368873036054528,70369053426450432,70369074894209026,70369092080107520,70369109259124736,70369066309713920,70368877332267008,70368868741480448,70368830087757824,70369049124405250,70368838677757952,70368804318281728,70368860151676928,70368864445595648,70369083491024896,70368855857233920,70369122145075200,70369130735075328,70368847267364864,70369087784091648,70369113554026496,70369079189176322,70368817201741824,70368885922136064,70368812907364352,70369100669648896,70369062015074304,70369135028994048,70369104965599232,70369143613685762,70368842971480064,70650330826997762,70650575646359552,70650339416932354,70650528403161088,70650322237063170,70650352301834242,70650300769763328,70650348006866946,70650597121785856,70650309357469696,70650610005704704,70650592820002818,70650279294992384,70650524100526082,70650579935100930,70650562760802304,70650571350605824,70650584230068226,70650283589042176,70650545581850624,70650601409937410,70650618589806594,70650287884075008,70650292178452480,70650335121965058,70650356596801538,70650360891768834,70650541286424576,70650567056818176,70650296472895488,70650365186736130,70650326532030466,70650558467735552,70650588530737152,70650536985427970,70650554165297154,70650549870329858,70650313654468608,70650305064468480,70650317942095874,70650343711899650,70650605711785984,70932050623070208,70931792924901376,70931999077695490,70931754271703040,70932084982415360,70931788631179264,70931767155163136,70932080688496640,70932042033528832,70932020558561280,70932076387106818,70931810105098240,70932067797172226,70932033444446208,70931771449606144,70932011968495616,70932063507447808,70932054919020544,70931835875557376,70932059212546048,70932037737512960,70931814399016960,70931840170852352,70931758565752832,70931801514704896,70932024847499266,70932003379871744,70931827285688320,70931805810655232,70931822989475840,70932093566976002,70931831580065792,70931762860785664,70931784334180352,70931775746473984,70932029142466562,70931780041179136,70931797220786176,70932016263135232,70932046327316480,70932072098496512,70931818694901760,71213559950868482,71213267893092354,71213229238386690,71213293662896130,71213508411260930,71213242123288578,71213302252830722,71213495526359042,71213297957863426,71213542770999298,71213272188059650,71213310842765314,71213504116293634,71213521296162818,71213491231391746,71213315137732610,71213263598125058,71213237828321282,71213512706228226,71213555655901186,71213499821326338,71213517001195522,71213276483026946,71213280777994242,71213538476032002,71213246418255874,71213306547798018,71213289367928834,71213478346489858,71213233533353986,71213486936424450,71213568540803074,71213547065966594,71213529886097410,71213534181064706,71213259303157762,71213525591130114,71213255008190466,71213285072961538,71213250713223170,71213474051522562,71213551360933890,71494987690934272,71495017750921218,71495013460869120,71495009165967360,71494979096215554,71494974801248258,71494777239109632,71494721403027456,71494966216556544,71495004872441856,71494708519174144,71494772942897152,71494991986950144,71494755764076544,71495000576491520,71494768648323072,71494764352438272,71494717108584448,71495022051917824,71494953333293056,71494961921916928,71494725699895296,71494996280737792,71494781533487104,71494760058519552,71494751468126208,71494734287601664,71495043520724994,71494742878322688,71495034935836672,71494712814206976,71495030641917952,71494738584600576,71494747174207488,71494704225124352,71494785828978688,71494949031444482,71495026340855810,71494970511982592,71494983397867520,71494729994600448,71494790124273664,71776243617890306,71776505610895362,71776509905862658,71776192078282754,71776428301484034,71776484136058882,71776196373250050,71776501315928066,71776466956189698,71776235027955714,71776213553119234,71776265092726786,71776179201835008,71776247912857602,71776441186385922,71776187790917632,71776497028628480,71776458366255106,71776239322923010,71776488437579776,71776449776320514,71776260797759490,71776518495797250,71776226438021122,71776471251156994,71776424006516738,71776217848086530,71776475546124290,71776222143053826,71776209258151938,71776256502792194,71776445488693248,71776230732988418,71776462661222402,71776454071287810,71776183495884800,71776479841091586,71776252207824898,71776200668217346,71776492725993474,71776436891418626,71776204963184642,72057963414290432,72057933351288832,72057946234159104,72057903286714368,72057911875338240,72057740077694976,72057697127628800,72057993471393794,72057972005339136,72057701421547520,72057658472595456,72057662767628288,72057976291524610,72057984889257984,72057980595339264,72057722896318464,72057684241022976,72057924751917058,72057959119388672,72057920465403904,72057718601744384,72057735782400000,72057710011940864,72057950529912832,72057954825863168,72057692831744000,72057675653316608,72057705717497856,72057714305859584,72057727192530944,72057671356448768,72057916169977856,72057667062005760,72057731486908416,72057679948021760,72057688538021888,72057937644355584,72057654178545664,72057941940371456,72339206454509570,72339133440065538,72339459857580034,72339159209869314,72339386843136002,72339438382743554,72339391138103298,72339215044444162,72339412612939778,72339180684705794,72339137735032834,72339429792808962,72339167799803906,72339176389738498,72339446972678146,72339425497841666,72339421202874370,72339378253201410,72339197864574978,72339142030000130,72339193569607682,72339451267645442,72339154914902018,72339150619934722,72339373958234114,72339416907907074,72339202159542274,72339163504836610,72339184979673090,72339434087776258,72339468447514626,72339129145098242,72339455562612738,72339404023005186,72339408317972482,72339442677710850,72339395433070594,72339210749476866,72339172094771202,72339189274640386,72339399728037890,72339146324967426,72620926245076994,72620874727227392,72620943424946178,72902401243611136,73183639976345602,73183579846803458,73183871912181760,73183614206541826,73183566961901570,73183609911574530,73183824659939330,73183867609612290,73183816070004738,73183828954906626,73183584141770754,73183635681378306,73183601321639938,73183554085388288,73183837551198208,73183880494514178,73183798890135554,73183841847214080,73183592731705346,73183622796476418,73183811775037442,73183571256868866,73183558379438080,73183588436738050,73183627091443714,73183854724710402,73183605616607234,73183562674470912,73183884789481474,73183631386411010,73183575551836162,73183863321133056,73183846134775810,73183893379416066,73183876199546882,73183833258131456,73183597026672642,73183850429743106,73183618501509122,73183859019677698,73183803185102850,73183820372246528,73465278170267648,73465273868025858,73465076305100800,73465286758891520,73465355478892544,73465037651181568,73465063421575168,73465303932796930,73465308234842112,73465359772811264,73465059124576256,73465312527908864,73465325413466112,73465029062098944,73465291053531136,73465338297843712,73465054831575040,73465316823924736,73465033356148736,73465041945559040,73465334002941952,73465050536869888,73465080601051136,73465093485297664,73465299637829634,73465110665953280,73465089189412864,73465102076084224,73465321117712384,73465097779871744,73465346888892416,73465342587502594,73465329709416448,73465084895494144,73465114961248256,73465046240002048,73465295348957184,73465067715297280,73465351177437186,73465106370461696,73465368357306370,73465072011182080,73746564160880642,73746817563951106,73746830455603200,73746529808285696,73746546981011458,73746538398285824,73746770325667840,73746826153885698,73746796094423040,73746791800635392,73746512627892224,73746761735602176,73746542692007936,73746804679049218,73746568455847938,73746581340749826,73746521216712704,73746585635717122,73746800390176768,73746748844474370,73746753146978304,73746572750815234,73746774614278146,73746766030241792,73746808974016514,73746504038809600,73746778909245442,73746516922269696,73746559865913346,73746589930684418,73746783211552768,73746525513580544,73746551275978754,73746821865603072,73746834749521920,73746508332859392,73746534101286912,73746577045782530,73746843333754882,73746555570946050,73746813274554368,73746787504619520,74028288251265024,74028064914669568,74027987604602880,74028228123688960,74028266777346048,74028309726232576,74028258188263424,74028043438718976,74028249591709698,74028236712312832,74028000490291200,74028026258522112,74027996193423360,74028034848915456,74027979015520256,74028017668718592,74028009077997568,74028021964603392,74028030554472448,74028283956363264,74028292541382658,74028275366887424,74028013374996480,74028262481330176,74028318311186434,74028056323883008,74028253886676994,74028296842313728,74028279662837760,74028305432313856,74027991898980352,74028047733293056,74028241006952448,74028060619374592,74028271071133696,74028052029505536,74028223821905922,74028301131317250,74028039142834176,74028245302378496,74028004784996352,74027983309570048,74309703100399616,74309780409024512,74309458286280704,74309518415429632,74309724568289282,74309711689023488,74309505531183104,74309793287766018,74309767517962242,74309514119544832,74309522710003712,74309776107896834,74309484054708224,74309698798485506,74309509825626112,74309733164974080,74309758933073920,74309763227975680,74309466875691008,74309535596085248,74309527006216192,74309488351707136,74309471170134016,74309728863256578,74309492645429248,74309462581313536,74309720279089152,74309531300593664,74309496941314048,74309737458040832,74309746047844352,74309771819024384,74309784702943232,74309754639548416,74309741754056704,74309750343598080,74309501235232768,74309479761707008,74309475467001856,74309715983663104,74309539891380224,74309453992230912,74591203839508482,74591195255799808,74591259679653888,74591242494214146,74591208141684736,74591246795735040,74591216730767360,74591255385735168,74590946146844672,74590980507893760,74591229616259072,74591238204686336,74591233909784576,74590997686714368,74590989096255488,74591268264017922,74591212434751488,74590984802336768,74591199544541186,74591001982926848,74590954738417664,74590959031418880,74591221024555008,74590967622139904,74591225320308736,74590993392140288,74590928968941568,74591178077110272,74591251084148738,74591010572795904,74591186665734144,74591014868090880,74591006277304320,74590950443712512,74591173774737410,74590941852401664,74591190960373760,74590963328417792,74590937558024192,74590976211943424,74590933262991360,74590971918024704,74872476952166402,74872691707478016,74872434002493442,74872403945652224,74872713181396992,74872485542100994,74872429707526146,74872472657199106,74872408239702016,74872730362445824,74872459772297218,74872481247133698,74872464067264514,74872442592428034,74872446887395330,74872489837068290,74872455477329922,74872700290465794,74872451182362626,74872721772445696,74872704585433090,74872695995498498,74872425412558850,74872708880400386,74872687411462144,74872726060269570,74872412534734848,74872665930727426,74872661635760130,74872670232510464,74872416829112320,74872648750858242,74872421123555328,74872734656364544,74872468362231810,74872678815629314,74872717470334978,74872674520662018,74872438297460738,74872683118395392,74872743240138754,74872653045825538,75154145209221120,75153939044106242,75153956223975426,75154201037111298,75154183857242114,75154192447176706,75153960518942722,75153891805822976,75154166684188672,75153930454171650,75154205339156480,75154149497503746,75153878922362880,75153913274302466,75153883216412672,75154158095106048,75154175273730048,75154128022667266,75153887511445504,75154209633075200,75153900397133824,75154170977976320,75153908979335170,75154136612601858,75153921864237058,75154188158107648,75153904691838976,75153964813910018,75153947634040834,75154123727699970,75153917569269762,75154196749156352,75154153792471042,75153934749138946,75153943339073538,75154140907569154,75154179562274818,75153951929008130,75153926159204354,75154162388172800,75153896100265984,75154218216980482,75435667425001474,75435641660899328,75435611595866112,75435628770295810,75435624475328514,75435435502927872,75435680315867136,75435409732468736,75435426913058816,75435401142075392,75435676014936066,75435396848156672,75435663134818304,75435598705524738,75435603007242240,75435671725867008,75435654546391040,75435439798222848,75435615890505728,75435422616846336,75435375373844480,75435633071816704,75435405438025728,75435358193123328,75435418322272256,75435388258549760,75435414026387456,75435431207436288,75435383961550848,75435371076976640,75435693194805250,75435645954686976,75435684609785856,75435650250440704,75435353899073536,75435362488156160,75435658839916544,75435379668549632,75435637364883456,75435620185931776,75435392552271872,75435366782533632,75717116630007810,75716901881643010,75716914766544898,75716910471577602,75716880406806530,75716863226937346,75717155284713474,75716854637002754,75717103745105922,75717095162642432,75717138111528960,75716828875784192,75716850342035458,75717099450138626,75717120924975106,75716858931970050,75716897586675714,75717073680334850,75716837464866816,75717112335040514,75716871816871938,75717129514909698,75716846047068162,75716833169833984,75716884701773826,75716876111839234,75717142399811586,75717146702577664,75717125219942402,75717168169615362,75716888996741122,75716906176610306,75717086565236738,75717133809876994,75717108040073218,75717150989746178,75717159579680770,75717077975302146,75716893291708418,75717090860204034,75716841752100866,75716867521904642,75998342499205122,75998608787177474,75998561542537218,75998595902275586,75998570139353088,75998329614303234,75998368269008898,75998643146915842,75998604492210178,75998565837504514,75998600197242882,75998587318304768,75998333909270530,75998591614320640,75998625967046658,75998325319335938,75998385448878082,75998359679074306,75998381153910786,75998321030397952,75998617377112066,75998363974041602,75998574427439106,75998634563207168,75998578722406402,75998552952602626,75998312441577472,75998376858943490,75998621679288320,75998372563976194,75998613088239616,75998583025238016,75998316735954944,75998351089139714,75998346794172418,75998548657635330,75998303852494848,75998338204237826,75998630269288448,75998389743845378,75998308146544640,75998355384107010,76279800294080514,76279834653818882,76280053697150978,76280057992118274,76279847538720770,76280092351856642,76280109531725826,76280023632379906,76279783114211330,76279851833688066,76280066582052866,76280027927347202,76279795999113218,76279856128655362,76280083761922050,76279860423622658,76280118121660418,76279830358851586,76280096646823938,76280040812249090,76279813178982402,76280049402183682,76280062287085570,76280036517281794,76280079466954754,76279826063884290,76279808884015106,76279778819244034,76280105236758530,76279787409178626,76280070877020162,76280045107216386,76279821768916994,76280088056889346,76279864718589954,76279791704145922,76279838948786178,76279804589047810,76279843243753474,76280100941791234,76280075171987458,76279817473949698,76561283868393472,76561558740860930,76561580222709760,76561262394998784,76561253805916160,76561563041660928,76561498611318786,76561322517659650,76561541567741952,76561313927725058,76561575920730114,76561266689376256,76561502906286082,76561326812626946,76561318222692354,76561584516628480,76561545861529600,76561309632757762,76561532978659328,76561567330795522,76561571632709632,76561524381122562,76561331107594242,76561593100599298,76561550157283328,76561335402561538,76561275280687104,76561288165392384,76561296747855874,76561520092774400,76561528676089858,76561279575392256,76561305337790466,76561339697528834,76561515791187970,76561258099965952,76561511496220674,76561537271726080,76561270983819264,76561554445893634,76561292452888578,76561301042823170,76843050917625856,77124263878197250,77124465741660162,77124474331594754,77124517281267714,77124259583229954,77124216633556994,77124504396365826,77124233813426178,77124238108393474,77124281058066434,77124470036627458,77124229518458882,77124448561790978,77124487216496642,77124272468131842,77124242403360770,77124208043622402,77124268173164546,77124289648001026,77124276763099138,77124203748655106,77124500101398530,77124482921529346,77124543051071490,77124491511463938,77124255288262658,77124452856758274,77124521576235010,77124530166169602,77124225223491586,77124495806431234,77124220928524290,77124512986300418,77124285353033730,77124212338589698,77124461446692866,77124246698328066,77124508691333122,77124534461136898,77124250993295362,77124478626562050,77124525871202306,77405622896033792,77405927838646272,77406035213680640,77405768924790784,77405996558254080,77406129720131585,77405919266799616,77405932133875712,77405657256689664,77405957903613952,77406013738909696,77406005148581888,77406030918909952,77405683025903616,77406026623549440,77406039508516864,77406009443352576,77406043803353088,77406322975506433,77405687321264128,77405640076296192,77687475847954432,77968701703454720,77968684522864640,77968933630312448,77968937925214208,77968671638552576,77968667342667776,77968894976327680,77968641572929536,77968680228421632,77968675932471296,77968650164240384,77968946516262912,77968654458945536,77968637278552064,77968693112668160,77968907862212608,77968925040836608,77968955106263040,77968632983519232,77968697407242240,77968886386262016,77968688816783360,77968658751946752,77968710293323776,77968912155279360,77968890680901632,77968714588618752,77968929336786944,77968916451295232,77968663048945664,77968920745082880,77968705997832192,77968628689469440,77968959400181760,77968877797638144,77968645867372544,77968899285123072,78250348477284354,78531823468806144,78813298430967810,78813324200771586,79094644558266370,79094657443168258,79094511414280194,79094631673364482,79094837831794690,79094623083429890,79094477054541826,79094502824345602,79094799177089026,79094648853233666,79094666033102850,79094661738135554,79094850716696578,79094876486500354,79094524299182082,79094481349509122,79094807767023618,79094803472056322,79094678918004738,79094700392841218,79094635968331778,79094640263299074,79094670328070146,79094691802906626,79094494234411010,79094687507939330,79094627378397186,79094867896565762,79094846421729282,79094498529378306,79094515709247490,79094696097873922,79094653148200962,79094674623037442,79094485644476418,79094872191533058,79094683212972034,79376076587008000,79376020750925824,79376291334848512,79376248384520194,79376274154323970,79376304220340224,79376295628636160,79376287038832640,79376050816024576,79376269859880960,79376080881385472,79376046522105856,79376299924389888,79376282745765888,79376055111974912,79376265564454912,79376089472172032,79376312808767488,79376308513865728,79376252681191424,79376085176877056,79376007867072512,79376025047793664,79376063700336640,79376261269815296,79376321399816192,79376067996221440,79376072290795520,79376029342498816,79376042226221056,79376334283735040,79376012162105344,79376016456482816,79376037932498944,79376059406417920,79376033635500032,79376003573022720,79376329989816320,79657469956653058,79657598805671938,79657594510704642,79657611690573826,79657633165410306,79657650345279490,79657620280508418,79657452776783874,79657822143971330,79657628870443010,79657641755344898,79657723359723522,79657624575475714,79657607395606530,79657615985541122,79657431301947394,79657603100639234,79657448481816578,79657461366718466,79657444186849282,79657646050312194,79657637460377602,79939292825452546,79939224122228736,80220767803080706,80220699083603970,80220703393972224,80502174059200514,80502242778677250,80783717771968512,81065184140591104,81065106831114240,81065201320787968,81064857723142144,81065304417894401,81064943622029312,81064862018502656,81065214205755392,81065179845820416,81065102535884800,81065218500591616,81065132600852480,81064831953928192,81065188436148224,81064797593272320,81065497672744961,81064814773534720,81065171255492608,81065205616148480,81065209910919168,81346598989070338,81346676298481666,81346491614887938,81346444370247682,81346474435018754,81346427190378498,81346431485345794,81346302636326914,81346465845084162,81346637643776002,81346324111163394,81346646233710594,81346650528677890,81346452960182274,81346422895411202,81346500204822530,81346461550116866,81346276866523138,81346483024953346,81346448665214978,81346495909855234,81346478729986050,81346435780313090,81346603284037634,81346487319920642,81346672003514370,81346281161490434,81346607579004930,81346315521228802,81346440075280386,81346667708547074,81346285456457730,81346298341359618,81346470140051458,81346311226261506,81346294046392322,81346457255149570,81628134097420288,81627876400693248,81627842039906304,81627867809906688,81627824861478912,81627850629709824,81627872104480768,81627863514021888,81627846335791104,81627820564611072,81628104034025472,81627884990562304,81628069673566208,81628095442321408,81628091148533760,81627803386707968,81627880695070720,81628116932427776,81627811975790592,81627833449185280,81628121213501440,81627816270168064,81628112622452736,81627829156184064,81627854925660160,81627859220103168,81628129803501568,81628061083500544,81627807680757760,81628065378140160,81628086852517888,81628052494876672,81628082559451136,81627889285857280,81628108327550976,81628099738075136,81627837746184192,81909523189727232,82191109826543618,82191114121510914,82191002452361218,82191088351707138,82191105531576322,82190998157262850,82191616630849537,82190697509683202,82191620925882369,82191079761772546,82190993862426626,82191062579740672,82191006747328514,82191019630329856,82190761934192642,82191084056739842,82191101236609026,82191118416478210,82191436242026497,82191032517132290,82190714689552386,82190843538571266,82190731869421570,82191071171837954,82191453433036801,82190757639225346,82191414767255553,82472494609596418,82472528969334786,82472537559269378,82753948110946306,82753973880750082,83035508987199490,83035457447591938,83035427382820866,83035496102297602,83035431677788162,83035156799881218,83035418792886274,83035186864652290,83035539051970562,83035534757003266,83035513282166786,83035526167068674,83035182569684994,83035543346937858,83035122440142850,83035504692232194,83035268469030914,83035139620012034,83035530462035970,83316962489008130,83316953899073538,83316919539335170,83598467539402752,83879921041342464,84161396018118656,84442892469731328,84724032414416898,84724324472193026,84724028119449602,84724307292323842,84724083954024450,84724367421865986,84724045299318786,84724337357094914,84724114018795522,84724071069122562,84724333062127618,84724101133893634,84724105428860930,84724058184220674,84724088248991746,84724036709384194,84724294407421954,84724092543959042,84724062479187970,84724290112454658,84724298702389250,84724109723828226,84724345947029506,84724354536964098,84724075364089858,84724049594286082,84724358831931394,84724328767160322,84724320177225730,84724315882258434,84724277227552770,84724066774155266,84724053889253378,84724096838926338,84724303021998080,84724079659057154,84724041004351490,84724285817487362,84724311587291138,85005842423283712,85287321686900738,85287308801998850,85286948024745986,85286943729778690,85287334571802626,85287330276835330,85287094053634050,85287128413372418,85287158478143490,85287304507031554,85287154183176194,85287145593241602,85286935139844098,85287231492587522,85287325981868034,85286982384484354,85287119823437826,85287201427816450,85287098348601346,85287338866769922,85287179952979970,85287188542914562,85287137003307010,85287175658012674,85286965204615170,85287218607685634,85286930844876802,85287068283830274,85287257262391298,85287197132849154,85286960909647874,85287111233503234,85287227197620226,85286956614680578,85287343161737218,85287072578797570,85287124118405122,85287222902652930,85287081168732162,85287149888208898,85286952319713282,85287106938535938,85286922254942210,85286969499582466,85286986679451650,85287313096966146,85286939434811394,85287295917096962,85287089758666754,85287184247947266,85287115528470530,85287171363045378,85287317391933442,85287162773110786,85287132708339714,85286926549909506,85287192837881858,85287076873764866,85287102643568642,85287141298274306,85286973794549762,85287085463699458,85568770901934080,85850202929037312,86131527573766146,86132309257814018,86131738027163650,86131510393896962,86131570523439106,86131493214027778,86131750912065538,86131656422785026,86131566228471810,86131398724747266,86131647832850434,86131729437229058,86131622063046658,86131596293242882,86131531868733442,86131755207032834,86131604883177474,86131759502000130,86131626358013954,86131557638537218,86131579113373698,86131587703308290,86131544753635330,86131394429779970,86131561933504514,86131600588210178,86131523278798850,86131514688864258,86131613473112066,86131768091934722,86131501803962370,86131549048602626,86131617768079362,86131643537883138,86131763796967426,86131591998275586,86131518983831554,86131360070041602,86131368659976194,86131347185139714,86131364365008898,86131411609649154,86131733732196354,86131506098929666,86131553343569922,86131652127817730,86131385839845378,86131351480107010,86131377249910786,86131372954943490,86131772386902018,86131682192588802,86131574818406402,86131355775074306,86131540458668034,86131407314681858,86131583408340994,86131536163700738,86131746617098242,86131720847294466,86131381544878082,86131497508995074,86131742322130946,86131390134812674,86131609178144770,86413084158656512,86413157158354944,86413097042706432,86413238763257856,86413131388616704,86413118505418752,86413590964928513,86413054093950976,86413522230247425,86413328968056833,86413243058094080,86413483590877185,86412882280644608,86413079863296000,86413230173650944,86413603846094849,86413212993650688,86413088454017024,86412822150774784,86412968179531776,86413475001139201,86413208698093568,86413217299038210,86413195812995072,86413586669764609,86413466415136769,86413127093387264,86413492180287489,86413470705909761,86413058388328448,86413496475844609,86412839331037184,86412886576005120,86413075567804416,86413071272771584,86413204403322880,86413062683230208,86413092747542528,86412856511430656,86413101338198016,86413758467801089,86413487886106625,86413234468421632,86413225891790848,86694709445132288,86694443156242432,86694803944767489,86694718034804736,86694331488141312,86694297127485440,86694357257355264,86694997206958081,86694713739968512,86695065945964545,86694683674804224,86694632135065600,86695078822805505,86694606365327360,86694670789705728,86694361552715776,86695061646475265,86694700855001088,86694687970361344,86694602070097920,86694679380033536,86694314307747840,86694692283875328,86694705150361600,86976012632981506,86976175841738754,86976158661869570,86976180136706050,86975789294682114,86976167251804162,86976072762523650,86976038402785282,86976188726640642,86975939618537474,86975772114812930,86975982568210434,86975956798406658,86976081352458242,86976051287687170,86975986863177730,86975965388341250,86976016927948802,86975931028602882,86975999748079618,86975948208472066,86975926733635586,86975784999714818,86976029812850690,86975961093373954,86976145776967682,86976004043046914,86976171546771458,86976184431673346,86976042697752578,86975978273243138,86975780704747522,86975806474551298,86976107122262018,86975815064485890,86975793589649410,86975973978275842,86975823654420482,86976193021607938,86975836539322370,86975922438668290,86975991158145026,86975797884616706,86975819359453186,86975935323570178,86975802179584002,86976046992719874,86975832244355074,86976034107817986,86975918143700994,86975943913504770,86976162956836866,86975969683308546,86975995453112322,86975776409780226,86976025517883394,86976077057490946,86975952503439362,86976008338014210,86976154366902274,86976021222916098,86976068467556354,86975810769518594,87257418890805250,87257646524071938,87257427480739842,87257281451851778,87257483315314690,87257513380085762,87257307221655554,87257526264987650,87257487610281986,87257259977015298,87257311516622850,87257294336753666,87257543444856834,87257448955576322,87257264271982594,87257268566949890,87257474725380098,87257633639170050,87257410300870658,87257423185772546,87257521970020354,87257667998908418,87257397415968770,87257298631720962,87257457545510914,87257255682048002,87257556329758722,87257285746819074,87257436070674434,87257444660609026,87257655114006530,87257247092113410,87257517675053058,87257440365641730,87257251387080706,87257466135445506,87257552034791426,87257461840478210,87257642229104642,87257620754268162,87257272861917186,87257582099562498,87257277156884482,87257500495183874,87257547739824130,87257406005903362,87257504790151170,87257629344202754,87257650819039234,87257414595837954,87257509085118466,87257453250543618,87257496200216578,87257663703941122,87257470430412802,87257479020347394,87257637934137346,87257431775707138,87257659408973826,87257393121001474,87257290041786370,87257401710936066,87538756428496898,87538876687581186,87538898162417666,87538902457384962,87539057076207618,87538971176861698,87538782198300674,87538958291959810,87539001241632770,87539095730913282,87538919637254146,87539027011436546,87538752133529602,87538868097646594,87539142975553538,87538941112090626,87538936817123330,87538769313398786,87539125795684354,87539134385618946,87538953996992514,87539022716469250,87538730658693122,87538872392613890,87538949702025218,87538747838562306,87538773608366082,87538726363725826,87538928227188738,87538988356730882,87538889572483074,87538885277515778,87539117205749762,87538975471828994,87538915342286850,87538786493267970,87539112910782466,87538765018431490,87538760723464194,87538893867450370,87539121500717058,87538923932221442,87539018421501954,87539130090651650,87539031306403842,87538906752352258,87539138680586242,87538945407057922,87538880982548482,87538962586927106,87538984061763586,87538739248627714,87538979766796290,87538743543595010,87538722068758530,87538911047319554,87538932522156034,87538992651698178,87539108615815170,87538996946665474,87539104320847874,87538734953660418,87820592170139650,87820574990270466,88102045692657664,88383207117619200,88383550715265024,88383559305396224,88383481995329536,88383451930361856,88383520649969664,88383456225591296,88383146987749376,88383567895068672,88383563600232448,88383211412979712,88383847067222017,88383529240297472,88383653813420033,88383293016506368,88383181348405248,88383533535068160,88383537830625280,88383164168011776,88383555010625536,88665017112788994,88946307404922882,88946273045184514,88946268750217218,88946264455249922,88946247275380738,88946157081067522,88946139901198338,88946148491132930,88946513563353090,88946333174726658,88946281635119106,88946483498582018,88946376124399618,88946114131394562,88946517858320386,88946161376034818,88946367534465026,88946509268385794,88946298814988290,88946496383483906,88946492088516610,88946127016296450,88946363239497730,88946242980413442,88946401894203394,88946277340151810,88946354649563138,88946294520020994,88946320289824770,88946290225053698,88946470613680130,88946122721329154,88946324584792066,88946346059628546,88946341764661250,88946096951525378,88946315994857474,88946500678451202,88946397599236098,88946135606231042,88946371829432322,88946118426361858,88946303109955586,88946285930086402,88946431958974466,88946479203614722,88946358944530434,88946251570348034,88946255865315330,88946350354595842,88946260160282626,88946504973418498,88946406189170690,88946487793549314,88946337469693954,88946311699890178,88946101246492674,88946328879759362,88946144196165634,88946105541459970,88946109836427266,88946393304268802,88946131311263746,89227786676731906,89227765201895426,89227851101241346,89227825331437570,89227601993138178,89227876871045122,89227756611960834,89227760906928130,89227610583072770,89227967065358338,89227821036470274,89227752316993538,89227632057909250,89227619173007362,89227906935816194,89227988540194818,89227722252222466,89227773791830018,89227597698170882,89227816741502978,89227580518301698,89227979950260226,89227962770391042,89227881166012418,89227868281110530,89227739432091650,89227829626404866,89227971360325634,89227846806274050,89227782381764610,89227992835162114,89227584813268994,89227795266666498,89227636352876546,89227790971699202,89227606288105474,89227576223334402,89227954180456450,89227975655292930,89227748022026242,89227812446535682,89227623467974658,89227803856601090,89227730842157058,89227799561633794,89227717957255170,89227614878040066,89227808151568386,89227945590521858,89227984245227522,89227589108236290,89227958475423746,89227571928367106,89227593403203586,89227838216339458,89227726547189762,89227872576077826,89227769496862722,89227735137124354,89227833921372162,89227842511306754,89227778086797314,89227743727058946,89509265948606466,89509321783181314,89509214408998914,89509072675078146,89509304603312130,89509068380110850,89509222998933506,89509450632200194,89509081265012738,89509261653639170,89509051200241666,89509437747298306,89509356142919682,89509454927167490,89509064085143554,89509240178802690,89509201524097026,89509296013377538,89509283128475650,89509347552985090,89509467812069378,89509278833508354,89509094149914626,89509192934162434,89509381912723458,89509235883835394,89509257358671874,89509210114031618,89509059790176258,89509244473769986,89509287423442946,89509270243573762,89509107034816514,89509420567429122,89509463517102082,89509446337232898,89509429157363714,89509253063704578,89509291718410242,89509317488214018,89509351847952386,89509085559980034,89509313193246722,89509274538541058,89509343258017794,89509098444881922,89509326078148610,89509089854947330,89509433452331010,89509227293900802,89509046905274370,89509076970045442,89509218703966210,89509205819064322,89509248768737282,89509300308344834,89509459222134786,89509111329783810,89509442042265602,89509055495208962,89509197229129730,89509231588868098,89509308898279426,89790925617823744,90072155772223490,90072387700457474,90072211606798338,90072413470261250,90072301801111554,90072306096078850,90072404880326658,90072370520588290,90072250261504002,90072417765228546,90072039808106498,90072400585359362,90072379110522882,90072267441373186,90072220196732930,90072198721896450,90072276031307778,90072233081634818,90072190131961858,90072061282942978,90072391995424770,90072203016863746,90071996858433538,90072258851438594,90072001153400834,90072293211176962,90072168657125378,90072164362158082,90072185836994562,90072237376602114,90072035513139202,90072207311831042,90072056987975682,90072383405490178,90072271736340482,90072026923204610,90072241671569410,90072048398041090,90072245966536706,90072014038302722,90072409175293954,90072044103073794,90072031218171906,90072142887321602,90072263146405890,90072022628237314,90072224491700226,90072172952092674,90072181542027266,90072297506144258,90072331865882626,90072228786667522,90072160067190786,90072215901765634,90072254556471298,90072009743335426,90072194426929154,90072018333270018,90072396290392066,90072151477256194,90072147182288898,90072005448368130,90072177247059970,90353476130242562,90353493310111746,90353673698738178,90353892742070274,90353510489980930,90353639338999810,90353733828280322,90353656518868994,90353647928934402,90353768188018690,90353862677299202,90353866972266498,90353742418214914,90353875562201090,90353514784948226,90353523374882818,90353652223901698,90353712353443842,90353471835275266,90353682288672770,90353484720177154,90353716648411138,90353871267233794,90353738123247618,90353781072920578,90353690878607362,90353708058476546,90353772482985986,90353536259784706,90353806842724354,90353703763509250,90353630749065218,90353884152135682,90353776777953282,90353677993705474,90353879857168386,90353501900046338,90353622159130626,90353531964817410,90353506195013634,90353695173574658,90353888447102978,90353751008149506,90353720943378434,90353489015144450,90353699468541954,90353665108803586,90353497605079042,90353480425209858,90353635044032514,90353660813836290,90353626454097922,90353519079915522,90353858382331906,90353643633967106,90353854087364610,90353725238345730,90353746713182210,90353686583640066,90353669403770882,90353729533313026,90353845497430018,90353617864163330,90635273226223618,90635578171129857,90635350533079042,90635311876341760,90635324765831170,90635320466604032,90916748202344450,90916799741952002,91198274718728194,91198223179120642,91479775478153216,91760885368553474,91760868188684290,91761246145806338,91761220376002562,91760859598749698,91761039987376130,91760889663520770,91761048577310722,91761173131362306,91761070052147202,91761052872278018,91761057167245314,91761031397441538,91761211786067970,91760997037703170,91761018512539650,91761224670969858,91761177426329602,91761074347114498,91760851008815106,91760893958488066,91761241850839042,91760898253455362,91761044282343426,91760876778618882,91760872483651586,91761035692408834,91761203196133378,91761022807506946,91761005627637762,91760855303782402,91761061462212610,91761001332670466,91761143066591234,91761009922605058,91761014217572354,91761027102474242,91761065757179906,92042699648729090,92323972751884288,92323835312668672,92323951275999232,92323985636982784,92324376478482433,92324324938350593,92324522508615681,92324196088152064,92324329232465921,92323818131226624,92324088739266560,92324015701032960,92323998522146816,92323959867637760,92324333527695361,92323989932343296,92323968456851456,92323994226786304,92323800953061376,92324316360736769,92324337822924801,92324024290246656,92323946982604800,92324586930896897,92323977045934080,92323822428749824,92324543982338049,92323955570900992,92324406566780929,92323981342801920,92324363592925185,92323848197439488,92324518212141057,92324526801027073,92324011404820480,92324002814558208,92323809542340608,92324019996786688,92323839608750080,92323826721095680,92323805246652416,92323964162998272,92324007112015872,92605649602084866,92887146052714498,92886927009382402,92886759505657858,92887073038270466,92886914124480514,92886948484218882,92886935599316994,92886785275461634,92886952779186178,92886905534545922,92886965664088066,92886768095592450,92887103103041538,92886922714415106,92886974254022658,92886918419447810,92886798160363522,92886931304349698,92886793865396226,92886750915723266,92887077333237762,92887124577878018,92886772390559746,92886901239578626,92886789570428930,92887141757747202,92887111692976130,92886957074153474,92886969959055362,92886939894284290,92886961369120770,92886944189251586,92886909829513218,92886776685527042,92887042973499394,92886896944611330,92887120282910722,92886755210690562,93168251662106626,93168586669555714,93168401985961986,93168389101060098,93168247367139330,93168552309817346,93168273136943106,93168230187270146,93168393396027394,93168578079621122,93168243072172034,93168599554457602,93168384806092802,93168423460798466,93168264547008514,93168376216158210,93168419165831170,93168449230602242,93168371921190914,93168380511125506,93168616734326786,93168595259490306,93168444935634946,93168406280929282,93168436345700354,93168397690994690,93168410575896578,93168225892302850,93168234482237442,93168414870863874,93168427755765762,93168268841975810,93168621029294082,93168517950078978,93168432050733058,93168440640667650,93168548014850050,93168260252041218,93450053055873024,93449769586458624,93449782471032832,93449760997638144,93450048759922688,93449786768031744,93449756702605312,93449816831754240,93449808241950720,93449795357638656,93449773883326464,93449812535869440,93450057349398528,93450031581298688,93450083119267840,93449834012409856,93450061644300288,93449825422540800,93450078825349120,93450010105348096,93449778178031616,93450014399987712,93449752408555520,93450065955586048,93449803947507712,93449829716918272,93450001516724224,93449799651557376,93449765292015616,93449838307704832,93449821126328320,93450040170381312,93450035874365440,93450018695413760,93449791061753856,93450044464168960,93450070235348992,93731545207472128,93731588157734912,93731558092570624,93731871624724481,93731678357291009,93731506552832000,93731476487864320,93731562388127744,93731480783093760,93731188725514240,93731540932362240,93731317574008832,93731592452571136,93731583862898688,93731171545251840,93731231675121664,93731575272767488,93731579568128000,93731553797799936,93731205905907712,93731235970482176,94012668002238466,94012848390864898,94012839800930306,94012685182107650,94012650822369282,94012805441191938,94012655117336578,94012972944916482,94012831210995714,94012814031126530,94012865570734082,94012852685832194,94012835505963010,94012822621061122,94012844095897602,94012672297205762,94012659412303874,94013003009687554,94012676592173058,94012977239883778,94013011599622146,94013041664393218,94012818326093826,94013020189556738,94012698067009538,94012869865701378,94012856980799490,94013024484524034,94012861275766786,94013045959360514,94012874160668674,94012809736159234,94012826916028418,94012689477074946,94012801146224642,94012693772042242,94012942880145410,94012796851257346,94294503751221248,94294542405992448,94294138678935552,94294155859329024,94294512341549056,94294426441285632,94294821578145793,94294456506253312,94294181628542976,94294185923903488,94294538111156224,94294495160893440,94294529521549312,94294525226188800,94294430736515072,94294267527430144,94294533816320000,94294628324802561,94294121498673152,94294508045991936,94575978733633538,94575931488993282,94575660906053634,94575742510432258,94575806934941698,94575605071478786,94575970143698946,94575965848731650,94575656611086338,94576008798404610,94576000208470018,94575596481544194,94575901424222210,94576017388339202,94576004503437314,94575987323568130,94575802639974402,94575983028600834,94575905719189506,94576013093371906,94575617956380674,94575613661413378,94575755395334146,94575630841282562,94857127292108800,94857153061584896,94857432232951808,94857410757918720,94857453708902400,94857406464851968,94857157354586112,94857187419422720,94857213191258112,94857204600471552,94857165945307136,94857161651585024,94857170241191936,94857389283540992,94857191715307520,94857174535110656,94857458002821120,94857178831060992,94857393578967040,94857419347722240,94857200306094080,94857423643475968,94857131586158592,94857384988901376,94857183125504000,94857415053934592,94857427939426304,94857148766879744,94857436527853568,94857440839335936,94857144470011904,94857208895963136,94857376400277504,94857445118902272,94857135881191424,94857140175568896,94857196009881600,95138954451681280,95138963041288192,95138855666647040,95138928681353216,95138851371417600,95138958746451968,95138692457562112,95138967336124416,95138563609067520,95139053255065601,95138580789460992,95138937271681024,95138610854035456,95138920091025408,95138881436385280,95138546428805120,95138950156320768,95139246508277761,95138606558674944,95138932976123904,95420218979057666,95420249043828738,95420042885398530,95420223274024962,95420386482782210,95420227568992258,95420176029384706,95420184619319298,95420068655202306,95420197504221186,95420060065267714,95420399367684098,95420214684090370,95420231863959554,95420051475333122,95420030000496642,95420395072716802,95420347828076546,95420317763305474,95420377892847618,95420171734417410,95420201799188482,95420244748861442,95420240453894146,95420420842520578,95420206094155778,95420180324352002,95420236158926850,95420072950169602,95420188914286594,95420416547553282,95420193209253890,95420047180365826,95420034295463938,95420210389123074,95420064360235010,95420352123043842,95420025705529346,95701870052573186,95701827102900226,95701874347540482,95701861462638594,95701822807932930,95983387971420160,95983362201812992,95983340734119938,95983357906255872,95983005719592960,95983353611485184,95983276301549568,95983280596779008,95983375086452736,95982988539199488,95983379381813248,95983031488806912,95983117387694080,95983671438409729,95983383676583936,95983306366517248,95983478185328641,95982971358937088,95983035784167424,95983392266256384,95983345021157376,95983869027287041,96264463523446786,96264828595666946,96264751286255618,96264781351026690,96264592372465666,96264820005732354,96264832890634242,96264510768087042,96264506473119746,96264755581222914,96264815710765058,96264867250372610,96264862955405314,96264850070503426,96264446343577602,96264854365470722,96264837185601538,96264480703315970,96264858660438018,96546299277082626,96546286392180738,96546252032442370,96546247737475074,96546294982115330,96827701231681536,96827804311945216,96827778541617152,96827782836387840,96827769951289344,96827456418938880,96827800016584704,96827808606715904,96827903115526145,96827787131944960,96827731296649216,96827976130035713,96827602441928704,96827542317826048,96827417766133760,96827460714299392,96827817196388352,96827404874022912,96827705526910976,96827812901552128,96828096368541697,96827430649724928,96827413469331456,96827606739386368,96827396289069056,97109249231945730,97109244936978434,97109236347043842,97109201987305474,97109197692338178,97390724220059648,97672182000058368,97671945776988160,97672139050647552,97671885648297984,97672143346073600,97671937186529280,97671928598167552,97671898533986304,97671920008298496,97671958663069696,97672160525025280,97672126167384064,97671877059215360,97671924302217216,97671941482414080,97671954367578112,97672134756007936,97672194886008832,97671894237118464,97671950073200640,97671881353265152,97672164821041152,97672190606901248,97672173410582528,97672156231958528,97671915712413696,97671889942675456,97671962958364672,97671911418691584,97671932892610560,97672169114828800,97672203476008960,97672177706532864,97672207769927680,97671902828691456,97672186294960128,97671907121692672,97953631203491840,97953717103230976,97953996275384321,97953665583677440,97953704218787840,97953712808394752,97953330556567552,97953699923427328,97953356325781504,97953313376174080,97953296195911680,97953708513558528,97953669858131968,97953442224668672,97953601138524160,97953682743230464,97953803007950849,97953605433753600,97953687038787584,97953678448459776,97953360621142016,98235174908133378,98234930107187200,98235183498067970,98235076123885570,98235153433296898,98235106188656642,98234788361076738,98235140560519168,98235187793035266,98234835605716994,98235080418852866,98235192088002562,98235157728264194,98235677431365633,98234917210095618,98234831310749698,98234771181207554,98235144843362306,98234805540945922,98235179203100674,98235162023231490,98516267632558082,98516667064516610,98516649884647426,98516632704778242,98516619819876354,98516662769549314,98516254747656194,98516636999745538,98516581165170690,98516555395366914,98516452316151810,98516658474582018,98516551100399618,98516654179614722,98516263337590786,98516628409810946,98517148113305601,98516392186609666,98516246157721602,98516306287263746,98516310582231042,98516456611119106,98516280517459970,98798094796455938,98798047551815682,98798051846782978,98798099091423234,98798086206521346,99079574068854786,99079569773887490,99079522529247234,99079561183952898,99079526824214530,99360997504450562,99361044749090818,99361036159156226,99361001799417858,99361049044058114,99642541214072832,99923685452611586,99923698337513474,99923706927448066,99923728402284546,99923749877121026,99923938855682050,99923943150649346,99923719812349954,99923689747578882,99923702632480770,99923711222415362,99923956035551234,99923994690256898,99923986100322306,99923964625485826,99923762762022914,99923977510387714,99923947445616642,99923681157644290,99923754172088322,99924007575158786,99923758467055618,99923960330518530,99923715517382658,99923736992219138,99923921675812866,99923741287186434,99923973215420418,99923990395289602,99923998985224194,99923951740583938,99923934560714754,99923732697251842,99923745582153730,99923925970780162,99924003280191490,99923694042546178,99923676862676994,99924016165093378,99923968920453122,99923981805355010,99923724107317250,100205242038353920,100205160434827264,100205482556915712,100205508327243776,100205400952209408,100205796089069569,100205478262145024,100205486852472832,100205499737112576,100205405247438848,100205602836709377,100205516916916224,100205512622080000,100205431017177088,100205469671817216,100205156139466752,100205504032473088,100205113189859328,100205096009596928,100205130370252800,100486987598790656,100486570986307584,100486979009183744,100486717015064576,100486961829183488,100486974713823232,100486905993887744,100486631116177408,100486983303954432,100487077813485569,100486957533626368,100486588166569984,100486944648527872,100487271065780225,100486635411537920,100486875928920064,100486605346963456,100486880224149504,100486953238855680,100486991893626880,100768127562743810,100768411030585346,100768149037580290,100768398145683458,100768136152678402,100768441095356418,100768161922482178,100768123267776514,100768415325552642,100768153332547586,100768406735618050,100768140447645698,100768131857711106,100768346606075906,100768157627514882,100768179102351362,100768166217449474,100768101792940034,100768402440650754,100768106087907330,100768380965814274,100768376670846978,100768144742612994,100768187692285954,100768183397318658,100768118972809218,100768368080912386,100768174807384066,100768389555748866,100768170512416770,100768372375879682,100768393850716162,100768423915487234,100768385260781570,100768114677841922,100768363785945090,100768359490977794,100768350901043202,100768419620519938,100768432505421826,100768110382874626,100768428210454530,101049555300384768,101049873123311618,101049868828344322,101049602540371970,101049520939728896,101049933257375744,101049911782604800,101049628310175746,101049821583704066,101049538119991296,101049611130306562,101049662669914114,101049903188082690,101049851648475138,101049898893115394,101049834468605954,101049619720241154,101049615425273858,101049632605143042,101049817310494720,101049937552211968,101049864533377026,101049890303180802,101049825878671362,101049636900110338,101049847353507842,101049941847048192,101049916072984578,101049830177570816,101049860238409730,101049589655470082,101049649785012226,101050027763826689,101049654079979522,101049581065535490,101049645490044930,101049924667244544,101049881713246210,101050221019201537,101049593950437378,101049907483049986,101049658374946818,101049843058540546,101049838763573250,101049886008213506,101049855943442434,101049928962605056,101049598245404674,101049624015208450,101049576770568194,101049666968485888,101049641195077634,101049606835339266,101049877418278914,101049894598148098,101049585360502786,101331068927672322,101331360985448450,101331077517606914,101331116172312578,101331318043312128,101331348100546562,101331330920677378,101331051756453888,101331098992443394,101331133352181762,101331129057214466,101331081812574210,101331094697476098,101331369575383042,101331111877345282,101331120467279874,101331103287410690,101331296560939010,101331382460284930,101331060337737730,101331378165317634,101331086107541506,101331335215644674,101331107582377986,101331124762247170,101331343805579266,101331137647149058,101331309445840898,101331356690481154,101331339510611970,101331300855906306,101331056042770434,101331090402508802,101331365280415746,101331326625710082,101331352395513858,101331073222639618,101331373870350338,101331313740808194,101331391050219522,101331064632705026,101331322330742786,101613110864379905,101894298053509122,101894079010177026,101894070420242434,101894280873639938,101894328118280194,101894319528345602,101894323823312898,101894246513901570,101894285168607234,101894332413247490,101894272283705346,101894053240373250,101894302348476418,101894066125275138,101894293758541826,101894005995732994,101894306643443714,101894315233378306,101894031765536770,101894014585667586,101894023175602178,101894276578672642,101894040355471362,101894010290700290,101894341003182082,101894267988738050,101894083305144322,101894044650438658,101894310938411010,101894061830307842,101894074715209730,101894289463574530,101894001700765698,101894250808868866,101894036060504066,101894259398803458,101894263693770754,101894048945405954,101894057535340546,101894087600111618,101894027470569474,101894018880634882,102175626999431168,102175450905968640,102175657090940928,102175596936757248,102175631296888832,102175429431525376,102175957712568321,102176172465455105,102175592641724416,102175601230807040,102175644181659648,102175953421926401,102175622707019776,102175459497541632,102175648475119616,102176129537540097,102175446613622784,102175442316099584,102175605527674880,102175639885905920,102175635589693440,102175820273025024,102175618411659264,102176241184669697,102175614117216256,102175609821855744,102176000666828801,102175987777798145,102176193961918465,102175974896828417,102176039343161345,102175962007797761,102176150985900033,102457050445578242,102457273783877634,102457093395251202,102457084805316610,102457119165054978,102456908711657474,102456904416690178,102457101985185794,102456900121722882,102457076215382018,102457226539237378,102456925891526658,102457123460022274,102456947366363138,102457097690218498,102457054740545538,102457059035512834,102457295258714114,102457067625447426,102456921596559362,102457269488910338,102457260898975746,102457230834204674,102457046150610946,102457222244270082,102457299553681410,102456938776428546,102456934481461250,102457106280153090,102457063330480130,102457114870087682,102457089100283906,102457110575120386,102457080510349314,102457290963746818,102456917301592066,102457071920414722,102738774531571714,102738933462138881,102738954928586753,102738705805279232,102738701525712896,102739221201289217,102738744466800642,102738963503120385,103019905906573312,103020262389186560,103020253799579648,103020232324022272,103019845776703488,103019880137359360,103020150719315968,103020545856176129,103020180784283648,103020258094350336,103019991805460480,103020219438923776,103020228029251584,103020155014545408,103019862956965888,103020249504219136,103020266684022784,103019910201933824,103020236619579392,103020352604340225,103301509734072322,103301522618974210,103301368000151554,103301346525315074,103301492554203138,103301621403222018,103301505439105026,103301496849170434,103301514029039618,103301329345445890,103301359410216962,103301535503876098,103301548388777986,103301342230347778,103301501144137730,103301531208908802,103301518324006914,103301350820282370,103301720187469826,103301539798843394,103301544093810690,103301526913941506,103582873044910080,103582937469288448,103582851570139136,103582928878501888,103583143625752576,103583160805883904,103582933173993472,103583147921506304,103583139331964928,103582877339615232,103582915993337856,103582920287911936,103582924584124416,103582898813140992,103582894519222272,103583169396932608,103582855864188928,103583109266931712,103582881632616448,103583177986932736,103583130742882304,103583152217456640,103582860159221760,103582911697453056,103582885929615360,103582864453599232,103583122150653954,103583113561571328,103583190870130690,103583135035949056,103583117856997376,103582907403534336,103582903109091328,103582890223337472,103583100678307840,103583182280851456,103583156510982144,103582868748042240,103864592839540738,103864627199279106,103864635789213698,104146046340759554,104146072110563330,104146140830040066,104427521317273602,104427547087077378,104708730008961026,104708850268045314,104708940462358530,104708760073732098,104708876037849090,104708949052293122,104708841678110722,104708918987522050,104708867447914498,104708725713993730,104708906102620162,104708699944189954,104708734303928322,104708931872423938,104708747188830210,104708944757325826,104708957642227714,104709086491246594,104708966232162306,104709107966083074,104708893217718274,104709069311377410,104709116556017666,104708742893862914,104708854563012610,104708936167391234,104708738598895618,104708858857979906,104708914692554754,104708992001966082,104709030656671746,104708863152947202,104709004886867970,104708880332816386,104709082196279298,104708708534124546,104708721419026434,104708704239157250,104708695649222658,104708755778764802,104709099376148482,104708712829091842,104708953347260418,104708884627783682,104709090786213890,104708845973078018,104708717124059138,104708970527129602,104708888922750978,104708927577456642,104708974822096898,104709103671115778,104708871742881794,104708961937195010,104708910397587458,104708996296933378,104708897512685570,104708901807652866,104709000591900674,104709077901312002,104709095081181186,104708923282489346,104709112261050370,104990952308998145,104990574341193728,104990557160996864,104990235038908416,104990870693150721,104990552866226176,104990544275898368,104990677430960129,104990939434385409,104990505621258240,104990578636554240,104990230743547904,104990582931324928,104990479851520000,104990170613678080,104990204974333952,104990591520997376,104990316642435072,104990187793940480,104990935132667905,104990587226161152,104990475556290560,104990561456553984,105271705720258560,105272410109378561,105272019252609024,105272345669861377,105271662770651136,105272057908035584,105271980597968896,105272152407670785,105272027842936832,105271710015619072,105271791619145728,105271954828230656,105272032137707520,105272036433264640,105272414411161601,105272053613264896,105271679951044608,105272049317904384,105272427285708801,105272066497708032,105271950533001216,105272062202871808,105271645590388736,105553305263013890,105553322442883074,105553399752294402,105553369687523330,105553318147915778,105553524306345986,105553129169354754,105553391162359810,105553348212686850,105553343917719554,105553300968046594,105553172119027714,105553361097588738,105553455586869250,105553520011378690,105553494241574914,105553283788177410,105553386867392514,105553382572425218,105553296673079298,105553154939158530,105553133464322050,105553309557981186,105553180708962306,105553288083144706,105553270903275522,105553532896280578,105553335327784962,105553502831509506,105553124874387458,105553416932163586,105553313852948482,105553150644191234,105553507126476802,105553137759289346,105553429817065474,105553528601313282,105553279493210114,105553266608308226,105553365392556034,105553425522098178,105553185003929602,105553326737850370,105553120579420162,105553537191247874,105553167824060418,105553356802621442,105553373982490626,105553275198242818,105553142054256642,105553163529093122,105553292378112002,105553339622752258,105553378277457922,105553511421444098,105553331032817666,105553146349223938,105553421227130882,105553515716411394,105553541486215170,105553159234125826,105553395457327106,105553352507654146,105834930551390208,105835256983912449,105834891898454016,105834866140577792,105834595543810048,105835261279141889,105835360062799873,105834827486986240,105834741572567040,105835248394174465,105834999284826112,105835364357963777,105834831781363712,105834861847052288,105834853256331264,105834659969040384,105835377239130113,105834612724072448,105834874731233280,105834844665806848,105834986386685952,105834900486422528,105834857551691776,105835007861456896,105834977796358144,105835239810596865,105835016451129344,105835102361092097,105834969206030336,105835265573322753,105835269868879873,105834870435741696,105834982091128832,105834848960839680,105835531860836353,105835012156293120,105834904781651968,105834990692073474,105834836076265472,105834655673679872,105835244098945025,105835003566686208,105834629904465920,105835295623282689,106116366884667394,106116134956433410,106116461373947906,106116298165190658,106116405539373058,106116491438718978,106116276690354178,106116117776564226,106116482848784386,106116487143751682,106116379769569282,106116233740681218,106116336819896322,106116092006760450,106116259510484994,106116452784013314,106116371179634690,106116113481596930,106116311050092546,106116087711793154,106116341114863618,106116263805452290,106116349704798210,106116469963882498,106116216560812034,106116074826891266,106116122071531522,106116474258849794,106116478553817090,106116280985321474,106116444194078722,106116070531923970,106116104891662338,106116302460157954,106116323934994434,106116328229961730,106116130661466114,106116109186629634,106116293870223362,106116285280288770,106116448489046018,106116375474601986,106116079121858562,106116225150746626,106116306755125250,106116220855779330,106116229445713922,106116289575256066,106116268100419586,106116242330615810,106116315345059842,106116246625583106,106116332524929026,106116100596695042,106116255215517698,106116083416825858,106116465668915202,106116345409830914,106116096301727746,106116457078980610,106116250920550402,106116319640027138,106116238035648514,106116272395386882,106397949224747008,106397691525988352,106398314318135297,106397936340107264,106397957814878208,106397545497231360,106397919159451648,106397854735073280,106397562677493760,106397962109714432,106397609922461696,106397927749779456,106397880504811520,106397579857887232,106398310016221185,106398327192551425,106398052314513409,106397932044550144,106397850439843840,106398245576704001,106397966404550656,106397605627101184,106397953520107520,106679295365873664,106679355481522176,106679686209273857,106679802169262081,106679037654204416,106679084899172352,106679527291224065,106679720553414657,106679694799011841,106679664740859905,106679286777184256,106679329711783936,106679299661365248,106679261006397440,106679394136162304,106679252417118208,106679316828585984,106679325416554496,106679441381261312,106679956790968321,106679080603811840,106679415622205442,106679673324306433,106679407021260800,106679437086425088,106679402726490112,106679020473942016,106679789288095745,106679291070709760,106679690503454721,106679269595938816,106679681914044417,106679273890971648,106679424214958080,106679256711495680,106679669029076993,106679428496818176,106679054834597888,106679166502699008,106679411316817920,106679432791588864,106679784992931841,106679278186463232,106679282481823744,106960748875612160,107242365586309120,107523750359138306,107523819078615042,107523677344694274,107523655869857794,107523496956067842,107523621510119426,107523849143386114,107523715999399938,107523449711427586,107523664459792386,107523634395021314,107523462596329474,107523694524563458,107523866323255298,107523479776198658,107523668754759682,107523685934628866,107523703114498050,107523707409465346,107523509840969730,107523780423909378,107523642984955906,107523711704432642,107523720294367234,107523475481231362,107523630100054018,107523724589334530,107523827668549634,107523595740315650,107523638689988610,107523617215152130,107523840553451522,107523505546002434,107523471186264066,107523681639661570,107523831963516930,107523698819530754,107523836258484226,107523673049726978,107523625805086722,107523488366133250,107523604330250242,107523844848418818,107523600035282946,107523591445348354,107523651574890498,107523690229596162,107523484071165954,107523612920184834,107523741769203714,107523445416460290,107523853438353410,107523454006394882,107523466891296770,107523754654105602,107523458301362178,107523660164825090,107523746064171010,107523608625217538,107523647279923202,107523862028288002,107523492661100546,107523857733320706,107805581827768321,107805633342668801,107804937561047040,107805113651429376,107805487312011265,107805315529048066,107804967620378624,107805650520113153,107805620460257281,107804924672147456,107805092175937536,107805641931227137,107805083586723840,107805135123906560,107805461542010881,107805130831101952,107805311223660544,107805100765020160,107804959031754752,107805646227701761,107805689194938369,107805319807238144,107805066409541632,107804933261426688,107805117945872384,107805324108300288,107805306928103424,107804928965738496,107804971916525568,107805856697810945,107805294043004928,107805143715872768,107805070701690880,107804950440181760,107805096470970368,107805452951552001,107805126533644288,107805332698431488,107805500197568513,107805667701424129,107804946147835904,107805255388364800,107805122241232896,107804963327836160,107805079289987072,107805457246781441,107805109356068864,107805336993267712,107805710649982977,107805341288103936,107805148009332736,107804980510654464,107805139420119040,107805328403660800,107805087882084352,107805074995085312,107805302633332736,107805702076104705,107805427198066689,107804941850312704,107804920380784640,107805105061888000,107805684899774465,107805448657436673,107805440073596929,107805435798945793,107805225323397120,107804954741440512,107805229618626560,107804984806014976,108086498440511488,108086734663319552,108086511324823552,108086515620708352,108086747548876800,108086485556985856,108086451197509632,108086708894302208,108086717484367872,108086781908221952,108086502736461824,108086489850707968,108086519915282432,108086751844827136,108086743253123072,108086507030904832,108086777614303232,108086537096658944,108086455491559424,108086494146592768,108086476966985728,108086726092128256,108086730370252800,108086769024303104,108086472672280576,108086760433254400,108086459786592256,108086468375412736,108086481259986944,108086700305678336,108086756138352640,108086464080969728,108086532801363968,108086713188941824,108086524211494912,108086738959335424,108086528505872384,108368265493413888,108649723274985474,108649671735377922,108931146711498754,108931198251106306,109212673227882498,109494169678315522,109493813196029954,109493980699754498,109493808901062658,109493821785964546,109493920570212354,109493946340016130,109493989289689090,109493954929950722,109493933455114242,109494096663871490,109493993584656386,109493950634983426,109493791721193474,109493783131258882,109493967814852610,109493959224918018,109493976404787202,109494165383348226,109493796016160770,109493774541324290,109493924865179650,109493972109819906,109494066599100418,109494143908511746,109493963519885314,109494135318577154,109493778836291586,109494100958838786,109494148203479042,109493984994721794,109493800311128066,109493817490997250,109493929160146946,109493937750081538,109494126728642562,109493997879623682,109493942045048834,109775610295222274,109775399841824770,109775283877707778,109775408431759362,109775275287773186,109775425611628546,109775455676399618,109775253812936706,109775429906595842,109775421316661250,109775412726726658,109775288172675074,109775438496530434,109775468561301506,109775644654960642,109775249517969410,109775434201563138,109775472856268802,109775395546857474,109775541575745538,109775623180124162,109775447086465026,109775459971366914,109775417021693954,109775451381432322,109775442791497730,109775266697838594,109775575935483906,109775258107904002,109775571640516610,109775464266334210,109775270992805890,109775640359993346,109775404136792066,109775618885156866,109775296762609666,109775292467642370,109775601705287682,110056797509255168,110056827573436416,110056806096961536,110056823277486080,110056831867879424,110057089583939584,110057055207227392,110056857638338560,110056814687682560,110056780328534016,110057093861277696,110057059500294144,110056810393960448,110056801803960320,110056849048469504,110056788917944320,110056793212387328,110056776034484224,110056818983567360,110057076681801728,110057063796310016,110056861933633536,110056853342846976,110057080975327232,110056784623566848,110057072385851392,110057106745196544,110056844752257024,110057102451277824,110057085270228992,110057033731276800,110057025142652928,110057068090097664,110057042321342464,110056836161798144,110057038025916416,110056840457682944,110338392744853506,110338422809624578,110338414219689986,110338560248578050,110338203766292482,110338238126030850,110338354090147842,110338388449886210,110338208061259778,110338358385115138,110338216651194370,110338409924722690,110338375564984322,110338525888839682,110338345500213250,110338362680082434,110338521593872386,110338401334788098,110338594608316418,110338405629755394,110338418514657282,110338568838512642,110338349795180546,110338379859951618,110338220946161666,110338371270017026,110338366975049730,110338246715965442,110338384154918914,110338225241128962,110338491529101314,110338233831063554,110338551658643458,110338573133479938,110338590313349122,110338199471325186,110338397039820802,110338242420998146,110619760347381760,110619730281955328,110619786115219456,110620005160648704,110619983684698112,110619738871365632,110619734576988160,110619807591759872,110620013749731328,110619803296268288,110619992274763776,110619777526857728,110619773230907392,110620030928748544,110619794705678336,110620026635223040,110619811887054848,110619747462676480,110619768936988672,110620056698617856,110620018043518976,110620035223650304,110619743165808640,110619764641103872,110620022339272704,110619756050382848,110620009453715456,110620052404699136,110619975096074240,110620039537426432,110619790411104256,110619781821300736,110619725987905536,110619751757381632,110619987979337728,110619799001890816,110620043814699008,110901514514202624,111182675941326848,111182993768120320,111182744659099648,111182740364525568,111182748955312128,111182680235376640,111182718890409984,111182757545181184,111182684530409472,111182989476560898,111182710300803072,111182688824786944,111182727480279040,111182753249689600,111182955114070016,111182701710802944,111182937932759040,111182731774722048,111182967996940288,111182942228185088,111182706003804160,111183002358120448,111182963703152640,111183006652039168,111182697416097792,111182976588644352,111182933638119424,111182761840476160,111182736068640768,111182714594525184,111182925049495552,111182959407136768,111182980882169856,111182972292694016,111182985177071616,111182693119229952,111182723184328704,111464215341236224,111464189571235840,111464447269404672,111464163801497600,111464408614830080,111464481628749824,111464477334831104,111464417204895744,111464211045351424,111464198161039360,111464185277513728,111464202456989696,111464155212087296,111464172392808448,111464400026206208,111464159507120128,111464219635810304,111464206751432704,111464228226400256,111464468744830976,111464412909469696,111464451565355008,111464168095940608,111464430090780672,111464223932022784,111464460153782272,111464464467689472,111464232521891840,111464193867120640,111464442973650944,111464434383847424,111464150918037504,111464236817186816,111464438679863296,111464455858880512,111464180980514816,111464176687513600,111745879300112386,111745570062467074,111745960904491010,111745986674294786,111745604422205442,111745990969262082,111745952314556418,111745875005145090,111745780515864578,111745943724621826,111745587242336258,111745982379327490,111745978084360194,111745630192009218,111745956609523714,111745634486976514,111745905069916162,111745716091355138,111745776220897282,111745591537303554,111745973789392898,111745578652401666,112027418702708738,112027371458068482,112027410112774146,112027422997676034,112027375753035778,112308850729484290,112308897974124546,112308893679157250,112308846434516994,112308885089222658,112590368655343618,112590325705670658,112590321410703362,112590372950310914,112590360065409026,112871886574059520,112871530091446272,112871890868895744,112871779199418368,112871860804452352,112871856508895232,112871852214124544,112871487141838848,112871976790261761,112871504322232320,112871882279223296,112871774904188928,112871615990333440,112871877984452608,112871804969156608,112871469961576448,112871534386806784,112871873689092096,112871843623796736,112872170041049089,113153271364583426,113153310019289090,113153275659550722,113153322904190978,113153318609223682,113434419923648514,113434840830443522,113434724866326530,113434565952536578,113434484348157954,113434437103517698,113434810765672450,113434729161293826,113434454283386882,113434806470705154,113434480053190658,113434836535476226,113434793585803266,113434754931097602,113434827945541634,113434832240508930,113434802175737858,113434823650574338,113715959316938752,113716199834320896,113715916368773120,113716311504191488,113715955021578240,113716277144256512,113716594971181057,113716229899288576,113716101044568064,113716040920465408,113715912071970816,113716105342025728,113716268553928704,113716315799027712,113716302914584576,113716285734584320,113716474734968833,113716281439027200,113716307209355264,113715929252364288,113715894891708416,113716298619224064,113715903476662272,113716401720459265,113716204129550336,113997412828381186,113997597511974914,113997649051582466,113997537382432770,113997571742171138,113997640461647874,113997666231451650,113997395648512002,113997679116353538,113997636166680578,113997417123348482,113997584627073026,113997404238446594,113997387058577410,113997369878708226,113997533087465474,113997524497530882,113997743540862978,113998331951382530,113997627576745986,113997408533413890,113997576037138434,113997618986811394,113997756425764866,113997554562301954,113997541677400066,113997399943479298,113997782195568642,113997704886157314,113997670526418946,113997434303217666,113997593217007618,113997765015699458,113997631871713282,113997795080470530,113997588922040322,113997606101909506,113997563152236546,113997421418315778,113997515907596290,113997773605634050,113997391353544706,113997610396876802,113997558857269250,113997752130797570,113997580332105730,113997567447203842,113997623281778690,113997790785503234,113997528792498178,113997520202563586,113997378468642818,113997786490535938,113997760720732162,113997769310666754,113997545972367362,113997601806942210,113997550267334658,113997644756615170,113997430008250370,113997382763610114,113997674821386242,113997374173675522,113997777900601346,114278965102247938,114278947922378754,114278960807280642,114278986577084418,114279214210351106,114278930747621376,114278969397215234,114279218511937536,114278913568604160,114279166972002304,114279158381936640,114279197036511232,114279201325449218,114278917863047168,114278943634227200,114279222800285698,114278909274226688,114279227101937664,114279184150953984,114278926454620160,114278982282117122,114278977987149826,114279192740757504,114279231395856384,114279175555645442,114279171260678146,114278952217346050,114278922159915008,114279162676576256,114279205625987072,114278935044620288,114278973692182530,114279239980154882,114279188446969856,114279209920888832,114279179857887232,114278900685144064,114278904979193856,114278956512313346,114279149793312768,114279145490874370,114278939338342400,114560418610937856,114560388545314816,114560680602697728,114560457265709056,114560384250937344,114560405724332032,114560440085053440,114560427200806912,114560379955904512,114560633358647296,114560461561004032,114560410021330944,114560392839757824,114560448675840000,114560435789168640,114560646235291650,114560641948712960,114560706372567040,114560452970217472,114560663423680512,114560702078648320,114560414315053056,114560431495249920,114560401431330816,114560624770023424,114560676309172224,114560684897599488,114560693488648192,114560422904856576,114560667717468160,114560697774899202,114560672013221888,114560444379627520,114560397136625664,114560375661854720,114560659127664640,114560654834597888,114560637653286912,114560714954768386,114842121238872064,114842095441936386,114842572210372609,115123600510615552,115405122732097536,115405071192424448,115686550464233472,115968072657403906,115968021117796354,116249496101519362,116249564820996098,116530717676732416,116530713382289408,116530971079409666,116530734858305536,116531005439672320,116530726268305408,116530700498829312,116530786397978624,116530747741831168,116530773512814592,116530752037781504,116531039798886402,116530756332224512,116531018325622784,116530777807192064,116530739152027648,116530983964639232,116530966785687552,116530730561306624,116530988260655104,116530704792879104,116531026915622912,116530996850196480,116530962490261504,116530992554442752,116531009734574080,116530979671572480,116530958195621888,116530709087911936,116530743447912448,116531001146146816,116530760626143232,116530721973600256,116530782102683648,116530764922028032,116530769216602112,116531031209541632,116530949606998016,116812497615781888,117093972592558080,117375460441718786,117375134024204290,117375370247405570,117375262873223170,117375323002765314,117375314412830722,117375241398386690,117375348772569090,117375340182634498,117375464736686082,117375082484596738,117375129729236994,117375224218517506,117375095369498626,117375374542372866,117375271463157762,117375443261849602,117375121139302402,117375086779564034,117375473326620674,117375099664465922,117375267168190466,117375249988321282,117375456146751490,117375404607143938,117375275758125058,117375245693353986,117375116844335106,117375078189629442,117375103959433218,117375069599694850,117375344477601794,117375318707798018,117375327297732610,117375284348059650,117375228513484802,117375305822896130,117375469031653378,117375219923550210,117375481916555266,117375486211522562,117375237103419394,117375108254400514,117375288643026946,117375301527928834,117375258578255874,117375310117863426,117375112549367810,117375477621587970,117375280053092354,117375451851784194,117375335887667202,117375232808452098,117375297232961538,117375215628582914,117375073894662146,117375091074531330,117375331592699906,117375254283288578,117375378837340162,117375365952438274,117375490506489858,117375292937994242,117656922546044928,117938431870107650,117938401805336578,117938019553247234,117938315905990658,117938242891546626,117938281546252290,117938028143181826,117938255776448514,117938208531808258,117938423280173058,117938053912985602,117938165582135298,117938277251284994,117938182762004482,117938071092854786,117938298726121474,117938393215401986,117938191351939074,117938238596579330,117938418985205762,117938066797887490,117938169877102594,117938354560696322,117938187056971778,117938217121742850,117938264366383106,117938178467037186,117938221416710146,117938083977756674,117938049618018306,117938204236840962,117938212826775554,117938268661350402,117938251481481218,117938036733116418,117938247186513922,117938225711677442,117938440460042242,117938195646906370,117938079682789378,117938290136186882,117938285841219586,117938272956317698,117938427575140354,117938062502920194,117938174172069890,117938058207952898,117938406100303874,117938032438149122,117938045323051010,117938230006644738,117938260071415810,117938041028083714,117938324495925250,117938023848214530,117938320200957954,117938414690238466,117938410395271170,117938234301612034,117938199941873666,117938294431154178,117938436165074946,117938328790892546,118219868204564480,118501381825101826,118501214321377282,118501119832096770,118501033932750850,118501016752881666,118501390415036418,118501115537129474,118501240091181058,118501021047848962,118500999573012482,118500982393143298,118501145601900546,118501351760330754,118501188551573506,118501003867979778,118501162781769730,118501356055298050,118501231501246466,118500969508241410,118501171371704322,118500973803208706,118501248681115650,118501360350265346,118501184256606210,118501368940199938,118501197141508098,118501012457914370,118501364645232642,118501137011965954,118500995278045186,118501222911311874,118501227206279170,118501373235167234,118501158486802434,118501201436475394,118500986688110594,118501154191835138,118501192846540802,118501149896867842,118501167076737026,118501244386148354,118501377530134530,118501124127064066,118501128422031362,118501274450919426,118501218616344578,118501179961638914,118501278745886722,118501132716998658,118501270155952130,118501235796213762,118501386120069122,118501205731442690,118501210026409986,118501304515690498,118501008162947074,118501265860984834,118501029637783554,118501175666671618,118501343170396162,118501141306933250,118500978098176002,118500990983077890,118782856790147072,118782826725048320,118782478833156096,118782835315376128,118782444472500224,118783105920860161,118782590501257216,118782461652762624,118783208991490049,118782848200015872,118782865379819520,118783380789526529,118782508897730560,118782504602370048,118782839620763650,118783226167820289,118782749415112704,118782818134720512,118782779480080384,118783213286653953,118782753710342144,118782951289782273,118782831019819008,118782852495376384,118782861084983296,118783144551972865,119064331766857728,119064619528683521,119064683968200705,119064065477967872,119064701144530945,119063953809866752,119064855766237185,119064336061693952,119064688263364609,119064254456791040,119064293111431168,119064305996529664,119063979579080704,119064301701758976,119063983874441216,119064314597474306,119063919449210880,119064228687052800,119064224391823360,119064580897636353,119064426266492929,119064327472087040,119064323176726528,119063936629473280,119064310292086784,119064340356530176,119346060161253377,119345729433501696,119345785268797440,119346042981056513,119345630663475200,119345540454678528,119345690780565504,119345780973240320,119346038694543361,119345802448797696,119345626369097728,119345665022689280,119346055866023937,119345652138442752,119346047276285953,119345815333240832,119345634958376960,119346163240075265,119345411606183936,119345643547918336,119345811038404608,119345656433803264,119346094505394177,119345703663763456,119345669317853184,119346064455434241,119345394425921536,119345454555791360,119346068750991361,119346158944911361,119345673613344768,119345806743568384,119345789574184962,119345458851151872,119346330742947841,119345699368534016,119345660729163776,119345428786577408,119345647842951168,119345798166937600,119345776678469632,119345901243203585,119345768088141824,119346176121241601,119627264551813122,119627281731682306,119627079868219394,119627092753121282,119626929544364034,119627088458153986,119627148587696130,119627101343055874,119626899479592962,119626882299723778,119627135702794242,119627174357499906,119627165767565314,119627127112859650,119627028328611842,119627084163186690,119627170062532610,119627066983317506,119627041213513730,119626916659462146,119626908069527554,119627071278284802,119627243076976642,119626873709789186,119627049803448322,119627032623579138,119626903774560258,119627277436715010,119627286026649602,119627273141747714,119627062688350210,119627019738677250,119627268846780418,119626869414821890,119627045508481026,119626895184625666,119627097048088578,119626912364494850,119627122817892354,119626920954429442,119627054098415618,119627114227957762,119626890889658370,119627139997761538,119627075573252098,119627204422270978,119627178652467202,119627036918546434,119627144292728834,119627255961878530,119627260256845826,119627131407826946,119626886594691074,119627118522925058,119627105638023170,119627290321616898,119627251666911234,119626878004756482,119627109932990466,119627058393382914,119626933839331330,119627024033644546,119627015443709954,119908550543147010,119908572017983490,119908503298506754,119908533363277826,119908559133081602,119908520478375938,119908348679684098,119908365859553282,119908499003539458,119908494708572162,119908670802231298,119908554838114306,119908511888441346,119908383039422466,119908374449487874,119908387334389762,119908722341838850,119908718046871554,119908537658245122,119908541953212418,119908563428048898,119908567723016194,119908395924324354,119908640737460226,119908739521708034,119908357269618690,119908743816675330,119908546248179714,119908516183408642,119908700867002370,119908709456936962,119908529068310530,119908507593474050,119908524773343234,119908352974651394,119908370154520578,119908675097198594,119908391629357058,120189827951099906,120190184433385474,120190218793123842,120190046994432002,120190021224628226,120190029814562818,120189866605805570,120189832246067202,120189991159857154,120189999749791746,120189978274955266,120189982569922562,120189840836001794,120189986864889858,120190145778679810,120190038404497410,120190042699464706,120189849425936386,120189870900772866,120189858015870978,120190025519595522,120190197318287362,120190214498156546,120189969685020674,120189995454824450,120190150073647106,120190115713908738,120189823656132610,120190034109530114,120190175843450882,120189973979987970,120189845130969090,120190016929660930,120190008339726338,120190193023320066,120190004044759042,120190012634693634,120189862310838274,120471620758405122,120471659413110786,120471668003045378,120471672298012674,120471625053372418,120753134389493762,120753095734788098,120753100029755394,120753147274395650,120753142979428354,121034592181813248,121034600773517312,121034321600970752,121034308715282432,121034368843972608,121034373140185088,121034609361944576,121034549234368512,121034587888025600,121034583592009728,121034343075282944,121034355959595008,121034613676965888,121034325895675904,121034626542993408,121034360253513728,121034347369201664,121034364549398528,121034579298942976,121034386025349120,121034562117632000,121034566413058048,121034304420249600,121034605067042816,121034334485676032,121034377434562560,121034300126199808,121034338779398144,121034617952993280,121034317304102912,121034596477566976,121034330188677120,121034351665152000,121034381730054144,121034313009659904,121034630836912128,121034557822992384,121316105813622784,121315856706764800,121316062864736256,121315800872386560,121315822345912320,121316054275653632,121316071454277632,121315787986370560,121315826641862656,121316101519704064,121315843820683264,121315792280813568,121316037094342656,121315835230224384,121315818051993600,121315796577681408,121315779396960256,121315848116895744,121315830936305664,121315861002059776,121316041389768704,121315805165387776,121316075750227968,121316092929703936,121315775102910464,121316084338655232,121315813756108800,121315809462386688,121316024211079168,121316080043753472,121315783691993088,121316058568720384,121315839526109184,121316067158523904,121316088653742080,121316032799703040,121315852411273216,121597228607799298,121597529255510018,121597404701458434,121597567910215682,121597400406491138,121597215722897410,121597499190738946,121597585090084866,121597194248060930,121597610859888642,121597202837995522,121597580795117570,121597254377603074,121597258672570370,121597211427930114,121597602269954050,121597615154855938,121597576500150274,121597597974986754,121597503485706242,121597340276948994,121597606564921346,121878969887752192,122160444836478978,122442022897254400,122442001422286848,122441653530394624,122442319249211393,122442027192614912,122441679299608576,122441683594969088,122441992831959040,122442125999669249,122442031487385600,122442010012614656,122441636350001152,122442035782221824,122441765198495744,122442005717057536,122441954177318912,122441928407580672,122441924112351232,122442040077058048,122441619169738752,122723845765332993,122723317481537536,122723274530684928,122723287417094144,122723631012446209,122723673966706689,122723278827552768,122723283121733632,122723635307675649,122723124205846528,122723296006897664,122723291711537152,122723661077676033,122723824285777921,122723132797419520,122723313185783808,122723300299309056,122723270236635136,122723648196706305,122723802839908353,122723321774997504,122723265941602304,122723493572902912,122723626721804289,122723914484547585,122723330390818816,122723712643039233,122723102731403264,122723308889571328,122723304596766720,122723119913500672,122723115615977472,123004676492361730,123004942780334082,123004964255170562,123004917010530306,123004667902427138,123004895535693826,123004633542688770,123004934190399490,123004680787329026,123004921305497602,123004637837656066,123004624952754178,123004702262165506,123004891240726530,123004642132623362,123004908420595714,123004904125628418,123004951370268674,123004938485366786,123004929895432194,123004697967198210,123004650722557954,123004685082296322,123004869765890050,123004899830661122,123004882650791938,123004659312492546,123004646427590658,123004710852100098,123004947075301378,123004672197394434,123004886945759234,123004629247721474,123004955665235970,123004655017525250,123004874060857346,123004925600464898,123004689377263618,123004912715563010,123004706557132802,123004663607459842,123004693672230914,123286434942746624,123286108525101056,123286447827386368,123286379107450880,123286349042483200,123286044099870720,123286061280133120,123286417762091008,123286550929932289,123286465007190016,123286456417517568,123286104229740544,123286430647189504,123286078460526592,123286190128627712,123286452122746880,123286353337712640,123286460712353792,123286744179343361,123286426352418816,123567751019757568,123567922817597440,123567798264004608,123567776789102592,123567935689064448,123567854084161536,123567824019193856,123567772493611008,123567665105338368,123567536256843776,123567931394228224,123567828314423296,123567583501811712,123567892738801664,123567785379823616,123568300771901441,123567759609036800,123568189106094081,123567927099457536,123568167631716353,123567579206451200,123568180516683777,123568163345661953,123568193401651201,123567815431225344,123567768198578176,123568287890735105,123568455393607681,123568025893863425,123567781084463104,123567939983900672,123567519076581376,123567793968513024,123567914224844802,123567553437237248,123567755314135040,123568184811913217,123567789673349120,123567905623900160,123567901329129472,123568283595571201,123567909919457280,123568219156054017,123568171926945793,123849397794308096,123849402076168192,123849659788623873,123849054183161856,123849410665775104,123849251765813248,123849646903656449,123849058478522368,123849230290845696,123849243175288832,123849329060872192,123849664082804737,123849225996468224,123849028413947904,123849290407936000,123849930370318337,123849638322438145,123849694132764673,123849303291133952,123849642608427009,123849234585747456,123849389201555458,123849268945223680,123849256061173760,123849500870574081,123849668378361857,123849758572281857,123849367715512320,123849414960611328,123849775748612097,123849376305840128,123849655493394433,123849260356534272,123848994053292032,123849264650059776,123849273240715264,123849247470321664,123849406370938880,123849011233554432,123849298995904512,123849380600610816,123849762867445761,123849384896167936,123849140082049024,124131237844156417,124130709562458112,124130872771018752,124131121880367105,124131233548992513,124130722447032320,124130859872878592,124130469030002688,124131139059515393,124131130470105089,124131143355072513,124131117585137665,124130778267844608,124130739626770432,124130881347649536,124130529159872512,124130718151999488,124130748217425920,124130615058759680,124130864178266114,124131250725322753,124130731037884416,124131113299214337,124130700973178880,124131169109475329,124130877052878848,124130726742523904,124131405347028993,124130533455233024,124130804037582848,124130855577321472,124130851282550784,124130705267556352,124130889937321984,124130503390658560,124131134765334529,124130885642485760,124130773972615168,124130975847284737,124130765384646656,124130735333244928,124130486210265088,124130842692222976,124130743921934336,124412712830042113,124411961186975744,124412279014293504,124412356324360192,124412253244555264,124412334849589248,124412330554032128,124411978367369216,124412352029589504,124412644086185985,124411944006713344,124412708525703169,124412090035470336,124412450823995393,124412360619196416,124412008431943680,124412326259261440,124412004136583168,124412725702033409,124412317668933632,124412248949325824,124412364914032640,124412347734228992,124694200678744065,124694359605575681,124693723926036480,124693728221265920,124693453344079872,124693436163686400,124693796952342530,124693839890743296,124693801235972096,124693418983424000,124693809826299904,124693827006300160,124693753991004160,124693831301070848,124694183502413825,124694119062896641,124694187806818305,124693565012180992,124693835595907072,124693822710939648,124693925800706049,124693483408654336,124693805530742784,124693792645644288,124693479113293824,124975276212682752,124975301983010816,124975198902747136,124974928320790528,124975267622354944,124975039988891648,124975838877384705,124975271929249794,124974893960134656,124975280507453440,124975228967714816,124975675655454721,124975662783660033,124975310572617728,124974911140397056,124975658479124481,124975400777416705,124974958385364992,124975314867453952,124975203197976576,124975594039607297,124975284803010560,124975306277781504,124975297687650304,124974954090004480,125256605170860034,125256368947658754,125256781264519170,125256673890336770,125256785559486466,125256377537593346,125256411897331714,125256420487266306,125256665300402178,125256519271514114,125256776969551874,125256399012429826,125256626645696514,125256545041317890,125256630940663810,125256618055761922,125256381832560642,125256768379617282,125256433372168194,125256429077200898,125256789854453762,125256759789682690,125256540746350594,125256536451383298,125256532156416002,125256596580925442,125256648120532994,125256514976546818,125256755494715394,125256742609813506,125256703955107842,125256562221187074,125256592285958146,125256669595369474,125256643825565698,125256678185304066,125256622350729218,125256523566481410,125256394717462530,125256772674584578,125256373242626050,125256600875892738,125256570811121666,125256751199748098,125256549336285186,125256407602364418,125256575106088962,125256764084649986,125256635235631106,125256579401056258,125256557926219778,125256583696023554,125256403307397122,125256416192299010,125256609465827330,125256613760794626,125256566516154370,125256390422495234,125256587990990850,125256386127527938,125256527861448706,125256553631252482,125256639530598402,125538208994492418,125538170339786754,125538221879394306,125538217584427010,125538174634754050,125819649611268098,125819645316300802,125819696855908354,125819683971006466,125819692560941058,126100927006769154,126100858287292418,126101141755133954,126101146050101250,126100866877227010,126100931301736450,126100879762128898,126101154640035842,126101133165199362,126101111690362882,126100849697357826,126101107395395586,126100901236965378,126101128870232066,126100862582259714,126101167524937730,126101188999774210,126100871172194306,126101124575264770,126100892647030786,126101171819905026,126101180409839618,126100922711801858,126101158935003138,126101094510493698,126101176114872322,126101120280297474,126101098805460994,126100918416834562,126100875467161602,126100935596703746,126100884057096194,126100896941998082,126100905531932674,126101150345068546,126101163229970434,126101115985330178,126100909826899970,126101137460166658,126100914121867266,126100888352063490,126100853992325122,126382363336900608,126382573791870976,126382410582851584,126382595256352770,126382646795960322,126382590970560512,126382651100495872,126382324683702272,126382384811016192,126382406287556608,126382341861605376,126382367632785408,126382371926704128,126382354746179584,126382582380494848,126382333272784896,126382633919447040,126382621035069440,126382655394414592,126382629624545280,126382625331019776,126382393401475072,126382401992065024,126382603856445440,126382586675134464,126382608149512192,126382616739315712,126382612445528064,126382359043178496,126382389106900992,126382380517097472,126382337567162368,126382376222654464,126382346158473216,126382328977752064,126382642510495744,126382350453178368,126382397697687552,126664070232866818,126664121772474370,126945545209708546,126945326176075776,126945300406599680,126945579577966592,126945330470518784,126945562398949376,126945356240977920,126945351945486336,126945296111894528,126945343354896384,126945274637123584,126945321880125440,126945523745292288,126945313290321920,126945558102933504,126945575284441088,126945536628555776,126945532333916160,126945339060322304,126945583872868352,126945283226206208,126945601053917184,126945592463917056,126945308996599808,126945287520583680,126945596749316098,126945304699600896,126945347651108864,126945317586206720,126945570988490752,126945566692737024,126945291815026688,126945553809866752,126945334764437504,126945360536272896,126945605347835904,126945278931173376,126945540923981824,127227067447574530,127226878469013506,127227106102280194,127226994433130498,127226869879078914,127227093217378306,127226874174046210,127226839814307842,127226964368359426,127226728145158146,127226968663326722,127226698080387074,127226753914961922,127226904238817282,127226895648882690,127226882763980802,127227110397247490,127226912828751874,127227088922411010,127226741030060034,127226887058948098,127226998728097794,127226723850190850,127226865584111618,127226938598555650,127226925713653762,127226852699209730,127226848404242434,127226715260256258,127226745325027330,127227101807312898,127226908533784578,127226955778424834,127226844109275138,127227097512345602,127226706670321666,127226947188490242,127226942893522946,127227084627443714,127226990138163202,127226736735092738,127226861289144322,127227003023065090,127227076037509122,127227080332476418,127226930008621058,127226702375354370,127226972958294018,127226856994177026,127226951483457538,127226891353915394,127226917123719170,127226934303588354,127226719555223554,127226960073392130,127226899943849986,127226710965288962,127227028792868866,127227114692214786,127226693785419778,127226758209929218,127226732440125442,127226921418686466,127508469409906690,127508357740756994,127508168762195970,127508185942065154,127508340560887810,127508177352130562,127508194531999746,127508344855855106,127508190237032450,127508207416901634,127508349150822402,127508477999841282,127508374920626178,127508173057163266,127508430755201026,127508211711868930,127508220301803522,127508392100495362,127508422165266434,127508362035724290,127508465114939394,127508216006836226,127508327675985922,127508331970953218,127508542424350722,127508409280364546,127508353445789698,127508400690429954,127508473704873986,127508439345135618,127508396395462658,127508443640102914,127508228891738114,127508581079056386,127508417870299138,127508370625658882,127508383510560770,127508379215593474,127508426460233730,127508181647097858,127508585374023682,127508435050168322,127508404985397250,127508233186705410,127508336265920514,127508589668990978,127508323381018626,127508551014285314,127508568194154498,127508319086051330,127508503769645058,127508555309252610,127508203121934338,127508559604219906,127508572489121794,127508563899187202,127508576784089090,127508314791084034,127508447935070210,127508366330691586,127508387805528066,127508198826967042,127508413575331842,127789811242434562,127789815537401858,127789849897140226,127789789767598082,127789884256878594,127789944386420738,127789914321649666,127789940091453442,127789871371976706,127789978746159106,127789948681388034,127789678098448386,127790051760603138,127789862782042114,127789905731715074,127789858487074818,127789682393415682,127789690983350274,127790060350537730,127789824127336450,127789695278317570,127789794062565378,127789656623611906,127789952976355330,127789875666944002,127789643738710018,127789652328644610,127790017400864770,127789901436747778,127789798357532674,127789665213546498,127789879961911298,127789648033677314,127789669508513794,127789806947467266,127789660918579202,127789892846813186,127789703868252162,127789918616616962,127789802652499970,127789910026682370,127789888551845890,127790038875701250,127790030285766658,127789832717271042,127789845602172930,127789854192107522,127790025990799362,127789922911584258,127790034580733954,127789837012238338,127789897141780482,127790047465635842,127789673803481090,127789708163219458,127789841307205634,127789819832369154,127789686688382978,127789867077009410,127789828422303746,127790064645505026,127790056055570434,127790043170668546,128071496685649920,128352971649646594,128634446639136768,128915921603264514,129197396592623616,129479142142640129,129479159322836993,129478914494824448,129478755595386880,129478553717374976,129479262401658881,129479275282825217,129478905905152000,129478880134823936,129478768479436800,129478910199988224,129478867249725440,129478884430381056,129478897328521216,129478734119960576,129478725530681344,129478527948161024,129478798530117632,129478510767767552,129478875840053248,129478729825058816,129478764184272896,129478772774928384,129479146437869569,129479137857372161,129478888735768578,129479429904531457,129478901610381312,129479258106494977,129479000404787201,129478828595085312,129478747004534784,129479163617017857,129478802825347072,129478789942149120,129478742709501952,129479193666977793,129478558012735488,129479167912574977,129478759890747392,129479155027607553,129478751300026368,129478639616262144,129478493587505152,129760363726045184,130041692662923264,130041718432858112,130041825793474560,130041696957956096,130042379857952769,130042087810924545,130041834383802368,130041851563802624,130041830088245248,130041855858573312,130041709844168704,130041507966156800,130041950358208513,130042225236246529,130041675484102656,130041714137694208,130041460721188864,130042143620399105,130041864448245760,130041847281942528,130041684073381888,130041701253447680,130041838689189890,130041679778480128,130042104981028865,130041739895570432,130042096391290881,130041748483538944,130042109276258305,130041705548808192,130041722728349696,130042113570439169,130042208059916289,130041503670796288,130041752778768384,130042092096061441,130041778548506624,130041477901582336,130042212355080193,130041443540926464,130042117865996289,130041860153409536,130041817203146752,130041589569683456,130323253525217280,130323683036626945,130323189114404864,130323197705060352,130323579957739521,130323335130120192,130323292179857408,130323562787700737,130323184820879360,130323592842706945,130323150460813312,130323305064955904,130323223460249600,130322952878292992,130323618597109761,130323176230158336,130323854834663425,130323584252968961,130323571368001537,130323309360513024,130323167639633920,130323687331790849,130323313665900546,130323180525518848,130323159050092544,130323330835283968,130322935697899520,130323064546394112,130323214872281088,130322978647506944,130323588547149825,130322918517637120,130323193409568768,130323567072772097,130323700212957185,130323322258653184,130323425334919169,130323227755479040,130322982942867456,130323339424956416,130323326540513280,130323300770185216,130323154755190784,130323171934666752,130604603959279618,130604655498887170,130604621139148802,130604552419672066,130604539534770178,130604445045489666,130604543829737474,130604612549214210,130604797232807938,130604792937840642,130604672678756354,130604784347906050,130604548124704770,130604814412677122,130604616844181506,130604629729083394,130604651203919874,130604419275685890,130604810117709826,130604625434116098,130604646908952578,130604582484443138,130604453635424258,130604402095816706,130604780052938754,130604432160587778,130604595369345026,130604423570653186,130604436455555074,130604414980718594,130604767168036866,130604689858625538,130604775757971458,130604694153592834,130604406390784002,130604728513331202,130604457930391554,130604561009606658,130604638319017986,130604578189475842,130604397800849410,130604698448560130,130604565304573954,130604393505882114,130604634024050690,130604801527775234,130604599664312322,130604586779410434,130604427865620482,130604668383789058,130604591074377730,130604659793854466,130604440750522370,130604664088821762,130604608254246914,130604573894508546,130604702743527426,130604569599541250,130604642613985282,130604556714639362,130604788642873346,130604410685751298,130604805822742530,130885894252593154,130885911432462338,130886031691546626,130885877072723970,130886117590892546,130885889957625858,130885907137495042,130885898547560450,130885881367691266,130886289389584386,130886070346252290,130886066051284994,130886259324813314,130886078936186882,130886087526121474,130886100411023362,130886143360696322,130886040281481218,130886255029846018,130886035986513922,130886242144944130,130885932907298818,130886250734878722,130886014511677442,130885885662658562,130886169130500098,130885902842527746,130886057461350402,130886027396579330,130885915727429634,130886130475794434,130886091821088770,130886267914747906,130886177720434690,130886276504682498,130886272209715202,130885872777756674,130886023101612034,130886263619780610,130885868482789378,130886164835532802,130886203490238466,130886096116056066,130885928612331522,130886044576448514,130886109000957954,130886173425467394,130886139065729026,130886113295925250,130886104705990658,130886134770761730,130886018806644738,130886083231154178,130886280799649794,130886285094617090,130885920022396930,130886053166383106,130886074641219586,130886048871415810,130886121885859842,130886061756317698,130886126180827138,130886147655663618,131167596862767106,131167734301720578,131167347754663938,131167562503028738,131167571092963330,131167644107407362,131167523848323074,131167601157734402,131167360639565826,131167678467145730,131167725711785986,131167614042636290,131167549618126850,131167369229500418,131167747186622466,131167541028192258,131167588272832514,131167390704336898,131167558208061442,131167364934533122,131167545323159554,131167592567799810,131167622632570882,131167639812440066,131167579682897922,131167502373486594,131167382114402306,131167536733224962,131167751481589762,131167652697341954,131167717121851394,131167618337603586,131167609747668994,131167506668453890,131167738596687874,131167532438257666,131167403589238786,131167515258388482,131167760071524354,131167356344598530,131167648402374658,131167343459696642,131167742891655170,131167377819435010,131167489488584706,131167755776557058,131167583977865218,131167605452701698,131167528143290370,131167730006753282,131167575387930626,131167394999304194,131167352049631234,131167764366491650,131167566797996034,131167553913094146,131167510963421186,131167519553355778,131167493783552002,131167407884206082,131167386409369602,131167498078519298,131167373524467714,131448973055426562,131449007415164930,131449076134641666,131448857091309570,131449046069870594,131448878566146050,131448998825230338,131449119084314626,131448990235295746,131448852796342274,131449235048431618,131449089019543554,131449080429608962,131448865681244162,131449011710132226,131449204983660546,131449024595034114,131448977350393858,131449037479936002,131448848501374978,131449067544707074,131448835616473090,131449192098758658,131449041774903298,131448844206407682,131448968760459266,131449230753464322,131449114789347330,131449222163529730,131448869976211458,131449058954772482,131449239343398914,131448981645361154,131449213573595138,131449200688693250,131449153444052994,131449217868562434,131448985940328450,131448822731571202,131448994530263042,131449226458497026,131448882861113346,131449020300066818,131448818436603906,131449054659805186,131449050364837890,131449084724576258,131448827026538498,131448839911440386,131449097609478146,131449003120197634,131449063249739778,131449028890001410,131449033184968706,131448831321505794,131448964465491970,131449127674249218,131449016005099522,131449209278627842,131449123379281922,131449071839674370,131448861386276866,131449093314510850,];


fn _semaction_rule_0_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  expression::ID(_item0_) }

fn _semaction_rule_1_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<i32>::default()};  expression::Iconst(_item0_) }

fn _semaction_rule_2_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_7(_x_7)=parser.popstack().value { _x_7 } else {<f64>::default()};  expression::Fconst(_item0_) }

fn _semaction_rule_3_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  expression::Econst(_item0_) }

fn _semaction_rule_4_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  expression::Stringlit(_item0_) }

fn _semaction_rule_5_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::funcname }

fn _semaction_rule_6_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::expression_6(parser.lbx(1,_item1_)) }

fn _semaction_rule_7_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<generic_selection<'lt>>::default()};  expression::expression_7(parser.lbx(0,_item0_)) }

fn _semaction_rule_8_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<generic_association<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<generic_association<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_9_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<generic_association<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<generic_association<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_90(_x_90)=parser.popstack().value { _x_90 } else {<Vec<LBox<generic_association<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_10_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_selection<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_90(_x_90)=parser.popstack().value { _x_90 } else {<Vec<LBox<generic_association<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  generic_selection(parser.lbx(2,_item2_), _item4_,) }

fn _semaction_rule_11_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_association<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<type_name<'lt>>::default()};  generic_association::generic_association_11(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_12_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_association<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  generic_association::DEFAULT_12(parser.lbx(2,_item2_)) }

fn _semaction_rule_13_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_13(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_14_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_14(parser.lbx(0,_item0_)) }

fn _semaction_rule_15_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_88(_x_88)=parser.popstack().value { _x_88 } else {<expression_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_15(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_16_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_16(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_17_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_17(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_18_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_18(parser.lbx(0,_item0_)) }

fn _semaction_rule_19_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_19(parser.lbx(0,_item0_)) }

fn _semaction_rule_20_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_21_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_22_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<initializer_list<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<type_name<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::expression_22(parser.lbx(1,_item1_),_item4_) }

fn _semaction_rule_23_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_24_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<expression<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_91(_x_91)=parser.popstack().value { _x_91 } else {<Vec<LBox<expression<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_25_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_91(_x_91)=parser.popstack().value { _x_91 } else {<Vec<LBox<expression<'lt>>>>::default()};  expression_list(_item0_,) }

fn _semaction_rule_26_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::INC_OP_26(parser.lbx(1,_item1_)) }

fn _semaction_rule_27_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::DEC_OP_27(parser.lbx(1,_item1_)) }

fn _semaction_rule_28_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::SIZEOF_28(parser.lbx(1,_item1_)) }

fn _semaction_rule_29_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::SIZEOF_29(parser.lbx(2,_item2_)) }

fn _semaction_rule_30_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::ALIGNOF_30(parser.lbx(2,_item2_)) }

fn _semaction_rule_31_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::Not(parser.lbx(1,_item1_)) }

fn _semaction_rule_32_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::Ref(parser.lbx(1,_item1_)) }

fn _semaction_rule_33_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::Ustar(parser.lbx(1,_item1_)) }

fn _semaction_rule_34_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::Uplus(parser.lbx(1,_item1_)) }

fn _semaction_rule_35_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::Uminus(parser.lbx(1,_item1_)) }

fn _semaction_rule_36_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::Comp(parser.lbx(1,_item1_)) }

fn _semaction_rule_37_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<type_name<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression::expression_37(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_38_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_38(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_39_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_39(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_40_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_40(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_41_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_41(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_42_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_42(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_43_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_43(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_44_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_44(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_45(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_46(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_47_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_47(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_48_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_48(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_49_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_49(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_50(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_51_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Band(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_52_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Xor(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_53_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Bor(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_54_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::And(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_55_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Or(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_56_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_56(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_57_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Assign(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_58_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Teq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_59_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Deq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_60_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Meq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_61_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Aeq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_62_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Subeq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_63_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Leq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_64_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Req(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_65_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Andeq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_66_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Xeq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_67_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::Oreq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_68_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expressionS<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_88(_x_88)=parser.popstack().value { _x_88 } else {<expression_list<'lt>>::default()};  expressionS(_item0_,) }

fn _semaction_rule_69_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  declaration::DecSpec(_item0_) }

fn _semaction_rule_70_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<init_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<init_declarator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_71_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<init_declarator<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<init_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_92(_x_92)=parser.popstack().value { _x_92 } else {<Vec<LBox<init_declarator<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_72_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut il = if let RetTypeEnum::Enumvariant_92(_x_92)=parser.popstack().value { _x_92 } else {<Vec<LBox<init_declarator<'lt>>>>::default()}; let mut ds = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()}; if let (declaration_specifiers{_item0_:tdl}, ils) = (&ds,&il)  {
     if let storage(typedeff) = &*tdl[0] {
      if let TYPEDEF = &**typedeff {
       if let init_declarator {declarator:nplid, initializer} = &*ils[0] {
        match &**nplid {
          no_pointer(lid) | with_pointer(_,lid) => {
             if let IDENTIFIER(id) = &**lid {
               parser.shared_state.borrow_mut().insert(id);
             }
          },
          _ => {},
        }
    }}}}    declaration::DecSpecList(ds,il) }

fn _semaction_rule_73_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<static_assert_declaration<'lt>>::default()};  declaration::Statassert(_item0_) }

fn _semaction_rule_74_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<storage_class_specifier<'lt>>::default()};  declaration_specifier::storage(_item0_) }

fn _semaction_rule_75_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<type_specifier<'lt>>::default()};  declaration_specifier::typespec(parser.lbx(0,_item0_)) }

fn _semaction_rule_76_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<type_qualifier<'lt>>::default()};  declaration_specifier::typequal(_item0_) }

fn _semaction_rule_77_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<function_specifier<'lt>>::default()};  declaration_specifier::funcspec(_item0_) }

fn _semaction_rule_78_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_79(_x_79)=parser.popstack().value { _x_79 } else {<alignment_specifier<'lt>>::default()};  declaration_specifier::alignspec(parser.lbx(0,_item0_)) }

fn _semaction_rule_79_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration_specifier<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_84(_x_84)=parser.popstack().value { _x_84 } else {<declaration_specifier<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_80_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration_specifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_84(_x_84)=parser.popstack().value { _x_84 } else {<declaration_specifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_93(_x_93)=parser.popstack().value { _x_93 } else {<Vec<LBox<declaration_specifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_81_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_93(_x_93)=parser.popstack().value { _x_93 } else {<Vec<LBox<declaration_specifier<'lt>>>>::default()};  declaration_specifiers(_item0_,) }

fn _semaction_rule_82_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<initializer<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  _item1_ }

fn _semaction_rule_83_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<initializer<'lt>>> {
 None }

fn _semaction_rule_84_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<initializer<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<initializer<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_85_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> init_declarator<'lt> {
let mut initializer = if let RetTypeEnum::Enumvariant_94(_x_94)=parser.popstack().value { _x_94 } else {<Option<LBox<initializer<'lt>>>>::default()}; let mut declarator = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<declarator<'lt>>::default()};  init_declarator {declarator,initializer,} }

fn _semaction_rule_86_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::EXTERN }

fn _semaction_rule_87_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::STATIC }

fn _semaction_rule_88_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::AUTO }

fn _semaction_rule_89_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::REGISTER }

fn _semaction_rule_90_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::THREAD_LOCAL }

fn _semaction_rule_91_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::TYPEDEF }

fn _semaction_rule_92_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  type_specifier::Typename(_item0_) }

fn _semaction_rule_93_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::VOID }

fn _semaction_rule_94_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::CHAR }

fn _semaction_rule_95_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::SHORT }

fn _semaction_rule_96_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::INT }

fn _semaction_rule_97_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::LONG }

fn _semaction_rule_98_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::FLOAT }

fn _semaction_rule_99_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::DOUBLE }

fn _semaction_rule_100_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::SIGNED }

fn _semaction_rule_101_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::UNSIGNED }

fn _semaction_rule_102_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::BOOL }

fn _semaction_rule_103_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::COMPLEX }

fn _semaction_rule_104_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::IMAGINARY }

fn _semaction_rule_105_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<struct_or_union_specifier<'lt>>::default()};  type_specifier::type_specifier_105(parser.lbx(0,_item0_)) }

fn _semaction_rule_106_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_42(_x_42)=parser.popstack().value { _x_42 } else {<enum_specifier<'lt>>::default()};  type_specifier::type_specifier_106(parser.lbx(0,_item0_)) }

fn _semaction_rule_107_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_80(_x_80)=parser.popstack().value { _x_80 } else {<atomic_type_specifier<'lt>>::default()};  type_specifier::type_specifier_107(parser.lbx(0,_item0_)) }

fn _semaction_rule_108_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<&'lt str>> {
 None }

fn _semaction_rule_109_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<&'lt str>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_110_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union_specifier<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<struct_declaration_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_95(_x_95)=parser.popstack().value { _x_95 } else {<Option<LBox<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_36(_x_36)=parser.popstack().value { _x_36 } else {<struct_or_union<'lt>>::default()};  struct_or_union_specifier::struct_or_union_specifier_110(_item0_,_item1_,parser.lbx(3,_item3_)) }

fn _semaction_rule_111_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union_specifier<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_36(_x_36)=parser.popstack().value { _x_36 } else {<struct_or_union<'lt>>::default()};  struct_or_union_specifier::struct_or_union_specifier_111(_item0_,_item1_) }

fn _semaction_rule_112_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union<'lt> {
let mut x = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  struct_or_union::STRUCT(x) }

fn _semaction_rule_113_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union<'lt> {
let mut x = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  struct_or_union::UNION(x) }

fn _semaction_rule_114_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_41(_x_41)=parser.popstack().value { _x_41 } else {<struct_declarator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_115_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_41(_x_41)=parser.popstack().value { _x_41 } else {<struct_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_96(_x_96)=parser.popstack().value { _x_96 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_116_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
 vec![] }

fn _semaction_rule_117_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_96(_x_96)=parser.popstack().value { _x_96 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()}; _item0_ }

fn _semaction_rule_118_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declaration<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_96(_x_96)=parser.popstack().value { _x_96 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_39(_x_39)=parser.popstack().value { _x_39 } else {<specifier_qualifier_list<'lt>>::default()};  struct_declaration::struct_declaration_118(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_119_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<static_assert_declaration<'lt>>::default()};  struct_declaration::struct_declaration_119(parser.lbx(0,_item0_)) }

fn _semaction_rule_120_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declaration<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_38(_x_38)=parser.popstack().value { _x_38 } else {<struct_declaration<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_121_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declaration<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_38(_x_38)=parser.popstack().value { _x_38 } else {<struct_declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_97(_x_97)=parser.popstack().value { _x_97 } else {<Vec<LBox<struct_declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_122_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declaration_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_97(_x_97)=parser.popstack().value { _x_97 } else {<Vec<LBox<struct_declaration<'lt>>>>::default()};  struct_declaration_list(_item0_,) }

fn _semaction_rule_123_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<type_specifier<'lt>>::default()};  specifier_qualifier::specifier_qualifier_123(parser.lbx(0,_item0_)) }

fn _semaction_rule_124_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<type_qualifier<'lt>>::default()};  specifier_qualifier::specifier_qualifier_124(_item0_) }

fn _semaction_rule_125_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<specifier_qualifier<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_85(_x_85)=parser.popstack().value { _x_85 } else {<specifier_qualifier<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_126_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<specifier_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_85(_x_85)=parser.popstack().value { _x_85 } else {<specifier_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_98(_x_98)=parser.popstack().value { _x_98 } else {<Vec<LBox<specifier_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_127_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_98(_x_98)=parser.popstack().value { _x_98 } else {<Vec<LBox<specifier_qualifier<'lt>>>>::default()};  specifier_qualifier_list(_item0_,) }

fn _semaction_rule_128_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_41(_x_41)=parser.popstack().value { _x_41 } else {<struct_declarator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_129_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_41(_x_41)=parser.popstack().value { _x_41 } else {<struct_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_96(_x_96)=parser.popstack().value { _x_96 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_130_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_96(_x_96)=parser.popstack().value { _x_96 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()};  struct_declarator_list(_item0_,) }

fn _semaction_rule_131_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<declarator<'lt>>::default()};  struct_declarator::struct_declarator_131(parser.lbx(0,_item0_)) }

fn _semaction_rule_132_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  struct_declarator::Colon_132(parser.lbx(1,_item1_)) }

fn _semaction_rule_133_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<declarator<'lt>>::default()};  struct_declarator::struct_declarator_133(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_134_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_135_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_136_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enum_specifier<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<enumerator_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  enum_specifier::ENUM_136(parser.lbx(2,_item2_)) }

fn _semaction_rule_137_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_138_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_139_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enum_specifier<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<enumerator_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  enum_specifier::ENUM_139(_item1_,parser.lbx(3,_item3_)) }

fn _semaction_rule_140_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enum_specifier<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  enum_specifier::ENUM_140(_item1_) }

fn _semaction_rule_141_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<enumerator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<enumerator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_142_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<enumerator<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<enumerator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_99(_x_99)=parser.popstack().value { _x_99 } else {<Vec<LBox<enumerator<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_143_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enumerator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_99(_x_99)=parser.popstack().value { _x_99 } else {<Vec<LBox<enumerator<'lt>>>>::default()};  enumerator_list(_item0_,) }

fn _semaction_rule_144_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  _item1_ }

fn _semaction_rule_145_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
 None }

fn _semaction_rule_146_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_147_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enumerator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_100(_x_100)=parser.popstack().value { _x_100 } else {<Option<LBox<expression<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  enumerator(_item0_,_item1_,) }

fn _semaction_rule_148_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> atomic_type_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  atomic_type_specifier(parser.lbx(2,_item2_), ) }

fn _semaction_rule_149_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::CONST }

fn _semaction_rule_150_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::VOLATILE }

fn _semaction_rule_151_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::ATOMIC }

fn _semaction_rule_152_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::RESTRICT }

fn _semaction_rule_153_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> function_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  function_specifier::INLINE }

fn _semaction_rule_154_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> function_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  function_specifier::NORETURN }

fn _semaction_rule_155_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> alignment_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  alignment_specifier::ALIGNAS_155(parser.lbx(2,_item2_)) }

fn _semaction_rule_156_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> alignment_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  alignment_specifier::ALIGNAS_156(parser.lbx(2,_item2_)) }

fn _semaction_rule_157_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<pointer<'lt>>> {
 None }

fn _semaction_rule_158_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<pointer<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<pointer<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_159_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declarator<'lt> {
let mut direct_dec = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()}; let mut ptropt = if let RetTypeEnum::Enumvariant_101(_x_101)=parser.popstack().value { _x_101 } else {<Option<LBox<pointer<'lt>>>>::default()};  declarator {ptropt,direct_dec:parser.lbx(1,direct_dec), } }

fn _semaction_rule_160_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  direct_declarator::IDENTIFIER(_item0_) }

fn _semaction_rule_161_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_declarator::direct_declarator_161(parser.lbx(1,_item1_)) }

fn _semaction_rule_162_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_162(parser.lbx(0,_item0_)) }

fn _semaction_rule_163_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_163(parser.lbx(0,_item0_)) }

fn _semaction_rule_164_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<type_qualifier_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_164(parser.lbx(0,_item0_),_item3_,parser.lbx(4,_item4_)) }

fn _semaction_rule_165_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_165(parser.lbx(0,_item0_),parser.lbx(3,_item3_)) }

fn _semaction_rule_166_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_166(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_167_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_167(parser.lbx(0,_item0_),_item2_,parser.lbx(3,_item3_)) }

fn _semaction_rule_168_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_168(parser.lbx(0,_item0_),_item2_,parser.lbx(4,_item4_)) }

fn _semaction_rule_169_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_169(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_170_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_170(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_171_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<parameter_type_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_171(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_172_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_53(_x_53)=parser.popstack().value { _x_53 } else {<identifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_172(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_173_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_173(parser.lbx(0,_item0_)) }

fn _semaction_rule_174_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
 Vec::new() }

fn _semaction_rule_175_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_176_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<pointer<'lt>>> {
 None }

fn _semaction_rule_177_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<pointer<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<pointer<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_178_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> pointer<'lt> {
let mut ptr = if let RetTypeEnum::Enumvariant_101(_x_101)=parser.popstack().value { _x_101 } else {<Option<LBox<pointer<'lt>>>>::default()}; let mut tql = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  pointer {tql,ptr,} }

fn _semaction_rule_179_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<type_qualifier<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_180_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_181_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  type_qualifier_list(_item0_,) }

fn _semaction_rule_182_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<parameter_declaration<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<parameter_declaration<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_183_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<parameter_declaration<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<parameter_declaration<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_103(_x_103)=parser.popstack().value { _x_103 } else {<Vec<LBox<parameter_declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_184_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> NEWSEQNT_184_1<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  NEWSEQNT_184_1 {phantom:PhantomData,} }

fn _semaction_rule_185_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<NEWSEQNT_184_1<'lt>>> {
 None }

fn _semaction_rule_186_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<NEWSEQNT_184_1<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_104(_x_104)=parser.popstack().value { _x_104 } else {<NEWSEQNT_184_1<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_187_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_type_list<'lt> {
let mut ellipsis = if let RetTypeEnum::Enumvariant_105(_x_105)=parser.popstack().value { _x_105 } else {<Option<LBox<NEWSEQNT_184_1<'lt>>>>::default()}; let mut parameters = if let RetTypeEnum::Enumvariant_103(_x_103)=parser.popstack().value { _x_103 } else {<Vec<LBox<parameter_declaration<'lt>>>>::default()};  parameter_type_list {parameters,ellipsis,} }

fn _semaction_rule_188_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  parameter_declaration::parameter_declaration_188(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_189_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  parameter_declaration::parameter_declaration_189(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_190_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  parameter_declaration::parameter_declaration_190(parser.lbx(0,_item0_)) }

fn _semaction_rule_191_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<&'lt str>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_192_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<&'lt str>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_106(_x_106)=parser.popstack().value { _x_106 } else {<Vec<LBox<&'lt str>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_193_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> identifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_106(_x_106)=parser.popstack().value { _x_106 } else {<Vec<LBox<&'lt str>>>::default()};  identifier_list(_item0_,) }

fn _semaction_rule_194_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<abstract_declarator<'lt>>> {
 None }

fn _semaction_rule_195_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<abstract_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<abstract_declarator<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_196_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_name<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_107(_x_107)=parser.popstack().value { _x_107 } else {<Option<LBox<abstract_declarator<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_39(_x_39)=parser.popstack().value { _x_39 } else {<specifier_qualifier_list<'lt>>::default()};  type_name(parser.lbx(0,_item0_), _item1_,) }

fn _semaction_rule_197_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> abstract_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<pointer<'lt>>::default()};  abstract_declarator::abstract_declarator_197(_item0_) }

fn _semaction_rule_198_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> abstract_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  abstract_declarator::abstract_declarator_198(parser.lbx(0,_item0_)) }

fn _semaction_rule_199_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<pointer<'lt>>::default()};  abstract_declarator::abstract_declarator_199(_item0_,parser.lbx(1,_item1_)) }

fn _semaction_rule_200_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_200(parser.lbx(1,_item1_)) }

fn _semaction_rule_201_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_201 }

fn _semaction_rule_202_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_202 }

fn _semaction_rule_203_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
 Vec::new() }

fn _semaction_rule_204_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_205_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_205(_item2_,parser.lbx(3,_item3_)) }

fn _semaction_rule_206_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
 None }

fn _semaction_rule_207_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  Some(_item0_) }

fn _semaction_rule_208_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
 None }

fn _semaction_rule_209_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_210_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_100(_x_100)=parser.popstack().value { _x_100 } else {<Option<LBox<expression<'lt>>>>::default()}; let mut s = if let RetTypeEnum::Enumvariant_108(_x_108)=parser.popstack().value { _x_108 } else {<Option<()>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<type_qualifier_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_210(_item1_,s,_item3_) }

fn _semaction_rule_211_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_211(parser.lbx(1,_item1_)) }

fn _semaction_rule_212_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_212(parser.lbx(0,_item0_)) }

fn _semaction_rule_213_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_213(parser.lbx(0,_item0_)) }

fn _semaction_rule_214_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
 Vec::new() }

fn _semaction_rule_215_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_216_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_216(parser.lbx(0,_item0_),_item3_,parser.lbx(4,_item4_)) }

fn _semaction_rule_217_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
 None }

fn _semaction_rule_218_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  Some(_item0_) }

fn _semaction_rule_219_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut s = if let RetTypeEnum::Enumvariant_108(_x_108)=parser.popstack().value { _x_108 } else {<Option<()>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_219(parser.lbx(0,_item0_),_item2_,s,parser.lbx(4,_item4_)) }

fn _semaction_rule_220_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_220(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_221_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_221(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_222_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_222 }

fn _semaction_rule_223_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<parameter_type_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_223(parser.lbx(1,_item1_)) }

fn _semaction_rule_224_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_224(parser.lbx(0,_item0_)) }

fn _semaction_rule_225_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<parameter_type_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_225(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_226_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  initializer::initializer_226(_item0_) }

fn _semaction_rule_227_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<initializer_designation<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_86(_x_86)=parser.popstack().value { _x_86 } else {<initializer_designation<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_228_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<initializer_designation<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_86(_x_86)=parser.popstack().value { _x_86 } else {<initializer_designation<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_109(_x_109)=parser.popstack().value { _x_109 } else {<Vec<LBox<initializer_designation<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_229_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_230_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_231_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_109(_x_109)=parser.popstack().value { _x_109 } else {<Vec<LBox<initializer_designation<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  initializer::Lbrace_231(_item1_) }

fn _semaction_rule_232_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<designation<'lt>>> {
 None }

fn _semaction_rule_233_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<designation<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<designation<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_234_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer_designation<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<initializer<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_110(_x_110)=parser.popstack().value { _x_110 } else {<Option<LBox<designation<'lt>>>>::default()};  initializer_designation(_item0_,parser.lbx(1,_item1_), ) }

fn _semaction_rule_235_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_82(_x_82)=parser.popstack().value { _x_82 } else {<designator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_236_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_82(_x_82)=parser.popstack().value { _x_82 } else {<designator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_111(_x_111)=parser.popstack().value { _x_111 } else {<Vec<LBox<designator<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_237_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designation<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_111(_x_111)=parser.popstack().value { _x_111 } else {<Vec<LBox<designator<'lt>>>>::default()};  designation(_item0_,) }

fn _semaction_rule_238_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_82(_x_82)=parser.popstack().value { _x_82 } else {<designator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_239_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_82(_x_82)=parser.popstack().value { _x_82 } else {<designator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_111(_x_111)=parser.popstack().value { _x_111 } else {<Vec<LBox<designator<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_240_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_111(_x_111)=parser.popstack().value { _x_111 } else {<Vec<LBox<designator<'lt>>>>::default()};  designator_list(_item0_,) }

fn _semaction_rule_241_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  designator::designator_241(_item1_) }

fn _semaction_rule_242_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  designator::Dot_242(_item1_) }

fn _semaction_rule_243_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> static_assert_declaration<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  static_assert_declaration(parser.lbx(2,_item2_), _item4_,) }

fn _semaction_rule_244_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<labeled_statement<'lt>>::default()};  statement::statement_244(parser.lbx(0,_item0_)) }

fn _semaction_rule_245_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<compound_statement<'lt>>::default()};  statement::statement_245(parser.lbx(0,_item0_)) }

fn _semaction_rule_246_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<expression_statement<'lt>>::default()};  statement::statement_246(_item0_) }

fn _semaction_rule_247_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_65(_x_65)=parser.popstack().value { _x_65 } else {<selection_statement<'lt>>::default()};  statement::statement_247(parser.lbx(0,_item0_)) }

fn _semaction_rule_248_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<iteration_statement<'lt>>::default()};  statement::statement_248(parser.lbx(0,_item0_)) }

fn _semaction_rule_249_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<jump_statement<'lt>>::default()};  statement::statement_249(_item0_) }

fn _semaction_rule_250_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> labeled_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  labeled_statement::IDENTIFIER_250(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_251_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> labeled_statement<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  labeled_statement::CASE_251(_item1_,parser.lbx(3,_item3_)) }

fn _semaction_rule_252_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> labeled_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  labeled_statement::DEFAULT_252(parser.lbx(2,_item2_)) }

fn _semaction_rule_253_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<block_item<'lt>>> {
 Vec::new() }

fn _semaction_rule_254_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<block_item<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_83(_x_83)=parser.popstack().value { _x_83 } else {<block_item<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_112(_x_112)=parser.popstack().value { _x_112 } else {<Vec<LBox<block_item<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_255_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> compound_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut statements = if let RetTypeEnum::Enumvariant_112(_x_112)=parser.popstack().value { _x_112 } else {<Vec<LBox<block_item<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  compound_statement {statements,} }

fn _semaction_rule_256_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> block_item<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<declaration<'lt>>::default()};  block_item::Declaration(_item0_) }

fn _semaction_rule_257_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> block_item<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()};  block_item::Statement(parser.lbx(0,_item0_)) }

fn _semaction_rule_258_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expressionS<'lt>>> {
 None }

fn _semaction_rule_259_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expressionS<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<expressionS<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_260_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_113(_x_113)=parser.popstack().value { _x_113 } else {<Option<LBox<expressionS<'lt>>>>::default()};  expression_statement(_item0_,) }

fn _semaction_rule_261_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> selection_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<expressionS<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  selection_statement::IF_261(_item2_,parser.lbx(4,_item4_)) }

fn _semaction_rule_262_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> selection_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<expressionS<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  selection_statement::IF_262(_item2_,parser.lbx(4,_item4_),parser.lbx(6,_item6_)) }

fn _semaction_rule_263_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> selection_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<expressionS<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  selection_statement::SWITCH_263(_item2_,parser.lbx(4,_item4_)) }

fn _semaction_rule_264_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<expressionS<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::WHILE_264(_item2_,parser.lbx(4,_item4_)) }

fn _semaction_rule_265_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<expressionS<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::DO_265(parser.lbx(1,_item1_),_item4_) }

fn _semaction_rule_266_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expressionS<'lt>>> {
 None }

fn _semaction_rule_267_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expressionS<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<expressionS<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_268_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_113(_x_113)=parser.popstack().value { _x_113 } else {<Option<LBox<expressionS<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<expression_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<expression_statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::FOR_268(_item2_,_item3_,_item4_,parser.lbx(6,_item6_)) }

fn _semaction_rule_269_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expressionS<'lt>>> {
 None }

fn _semaction_rule_270_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expressionS<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<expressionS<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_271_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_113(_x_113)=parser.popstack().value { _x_113 } else {<Option<LBox<expressionS<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<expression_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<declaration<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::FOR_271(_item2_,_item3_,_item4_,parser.lbx(6,_item6_)) }

fn _semaction_rule_272_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::GOTO_272(_item1_) }

fn _semaction_rule_273_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::CONTINUE_273 }

fn _semaction_rule_274_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::BREAK_274 }

fn _semaction_rule_275_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::RETURN_275 }

fn _semaction_rule_276_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<expressionS<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::RETURN_276(_item1_) }

fn _semaction_rule_277_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<external_declaration<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<external_declaration<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_278_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<external_declaration<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<external_declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_114(_x_114)=parser.popstack().value { _x_114 } else {<Vec<LBox<external_declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_279_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> translation_unit<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_114(_x_114)=parser.popstack().value { _x_114 } else {<Vec<LBox<external_declaration<'lt>>>>::default()};  translation_unit(_item0_,) }

fn _semaction_rule_280_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<function_definition<'lt>>::default()};  external_declaration::external_declaration_280(_item0_) }

fn _semaction_rule_281_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<declaration<'lt>>::default()};  external_declaration::external_declaration_281(_item0_) }

fn _semaction_rule_282_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  external_declaration::directive(_item0_) }

fn _semaction_rule_283_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration<'lt>>> {
 Vec::new() }

fn _semaction_rule_284_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_115(_x_115)=parser.popstack().value { _x_115 } else {<Vec<LBox<declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_285_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> function_definition<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<compound_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_115(_x_115)=parser.popstack().value { _x_115 } else {<Vec<LBox<declaration<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  function_definition(_item0_,_item1_,_item2_,_item3_,) }

fn _semaction_rule_286_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> translation_unit<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<translation_unit<'lt>>::default()};  _item0_ }

pub fn make_parser<'lt>() -> ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>
{
 let mut parser1:ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>> = ZCParser::new(287,468);
 let mut rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_8_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_90(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_8_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_90(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_selection");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_association");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_association");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_20_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_20_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_23_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_91(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_23_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_91(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expressionS");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_89(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_70_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_92(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_70_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_92(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_72_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_73_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_84(_semaction_rule_74_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_84(_semaction_rule_75_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_84(_semaction_rule_76_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_84(_semaction_rule_77_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_84(_semaction_rule_78_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_79_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_93(_semaction_rule_79_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_79_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_93(_semaction_rule_80_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_81_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEQNT_82_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_58(_semaction_rule_82_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_83_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_94(_semaction_rule_83_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_83_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_94(_semaction_rule_84_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("init_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_32(_semaction_rule_85_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_86_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_87_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_88_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_89_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_90_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_91_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_92_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_93_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_94_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_95_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_96_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_97_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_98_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_99_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_100_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_101_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_102_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_103_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_104_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_105_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_106_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_107_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_108_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_95(_semaction_rule_108_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_108_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_95(_semaction_rule_109_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_110_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_111_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_112_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_113_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_114_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_114_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_114_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_115_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT2_116_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_116_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT2_116_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_117_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_38(_semaction_rule_118_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_38(_semaction_rule_119_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_120_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_120_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_120_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_121_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declaration_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_122_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_85(_semaction_rule_123_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_85(_semaction_rule_124_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_125_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_98(_semaction_rule_125_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_125_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_98(_semaction_rule_126_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_39(_semaction_rule_127_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_128_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_128_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_128_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_129_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_40(_semaction_rule_130_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_41(_semaction_rule_131_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_41(_semaction_rule_132_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_41(_semaction_rule_133_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_134_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_134_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_134_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_135_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_42(_semaction_rule_136_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_137_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_137_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_137_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_138_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_42(_semaction_rule_139_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_42(_semaction_rule_140_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_141_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_99(_semaction_rule_141_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_141_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_99(_semaction_rule_142_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enumerator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_43(_semaction_rule_143_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEQNT_144_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_144_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_145_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_100(_semaction_rule_145_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_145_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_100(_semaction_rule_146_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enumerator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_44(_semaction_rule_147_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("atomic_type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_80(_semaction_rule_148_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_149_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_150_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_151_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_152_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("function_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_153_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("function_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_154_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("alignment_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_79(_semaction_rule_155_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("alignment_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_79(_semaction_rule_156_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_157_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_101(_semaction_rule_157_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_157_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_101(_semaction_rule_158_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_159_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_160_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_161_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_162_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_163_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_164_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_165_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_166_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_167_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_168_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_169_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_170_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_171_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_172_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_173_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_174_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_174_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_174_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_175_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_176_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_101(_semaction_rule_176_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_176_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_101(_semaction_rule_177_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("pointer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_178_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_179_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_179_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_179_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_180_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_181_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_182_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_103(_semaction_rule_182_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_182_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_103(_semaction_rule_183_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEQNT_184_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_104(_semaction_rule_184_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_185_2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_105(_semaction_rule_185_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_185_2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_105(_semaction_rule_186_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_type_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_50(_semaction_rule_187_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_52(_semaction_rule_188_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_52(_semaction_rule_189_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_52(_semaction_rule_190_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_191_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_106(_semaction_rule_191_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_191_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_106(_semaction_rule_192_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("identifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_53(_semaction_rule_193_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_194_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_107(_semaction_rule_194_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_194_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_107(_semaction_rule_195_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_name");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_196_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_197_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_198_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_199_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_200_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_201_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_202_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_203_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_203_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_203_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_204_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_205_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_206_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_108(_semaction_rule_206_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_206_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_108(_semaction_rule_207_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_208_2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_100(_semaction_rule_208_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_208_2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_100(_semaction_rule_209_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_210_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_211_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_212_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_213_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_214_3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_214_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_214_3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_215_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_216_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_217_4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_108(_semaction_rule_217_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_217_4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_108(_semaction_rule_218_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_219_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_220_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_221_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_222_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_223_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_224_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_225_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_58(_semaction_rule_226_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_227_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_109(_semaction_rule_227_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_227_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_109(_semaction_rule_228_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_229_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_229_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_229_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_230_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_58(_semaction_rule_231_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_232_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_110(_semaction_rule_232_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_232_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_110(_semaction_rule_233_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer_designation");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_86(_semaction_rule_234_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_235_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_111(_semaction_rule_235_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_235_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_111(_semaction_rule_236_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designation");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_77(_semaction_rule_237_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_238_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_111(_semaction_rule_238_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_238_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_111(_semaction_rule_239_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_81(_semaction_rule_240_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_82(_semaction_rule_241_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_82(_semaction_rule_242_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("static_assert_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_243_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_244_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_245_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_246_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_247_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_248_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_249_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_250_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_251_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_252_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_253_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_112(_semaction_rule_253_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_253_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_112(_semaction_rule_254_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("compound_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_255_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("block_item");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_83(_semaction_rule_256_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("block_item");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_83(_semaction_rule_257_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_258_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_258_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_258_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_259_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_260_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_65(_semaction_rule_261_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_65(_semaction_rule_262_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_65(_semaction_rule_263_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_264_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_265_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_266_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_266_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_266_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_267_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_268_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_269_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_269_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_269_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_270_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_271_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_272_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_273_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_274_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_275_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_276_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_277_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_114(_semaction_rule_277_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_277_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_114(_semaction_rule_278_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("translation_unit");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_279_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_280_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_281_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_282_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_283_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_115(_semaction_rule_283_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_283_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_115(_semaction_rule_284_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("function_definition");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_285_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_286_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";

 for i in 0..11959 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>, lexer:&mut c11dlexer<'lt>) -> Result<translation_unit<'lt>,translation_unit<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse(lexer) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<translation_unit<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>, lexer:&mut c11dlexer<'lt>, parserpath:&str) -> Result<translation_unit<'lt>,translation_unit<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(lexer,parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<translation_unit<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_73(generic_selection<'lt>),
  Enumvariant_40(struct_declarator_list<'lt>),
  Enumvariant_19(relational_expression<'lt>),
  Enumvariant_112(Vec<LBox<block_item<'lt>>>),
  Enumvariant_34(type_specifier<'lt>),
  Enumvariant_97(Vec<LBox<struct_declaration<'lt>>>),
  Enumvariant_111(Vec<LBox<designator<'lt>>>),
  Enumvariant_27(assignment_expression<'lt>),
  Enumvariant_93(Vec<LBox<declaration_specifier<'lt>>>),
  Enumvariant_28(expression<'lt>),
  Enumvariant_85(specifier_qualifier<'lt>),
  Enumvariant_21(and_expression<'lt>),
  Enumvariant_37(struct_declaration_list<'lt>),
  Enumvariant_52(parameter_declaration<'lt>),
  Enumvariant_61(labeled_statement<'lt>),
  Enumvariant_89(expressionS<'lt>),
  Enumvariant_101(Option<LBox<pointer<'lt>>>),
  Enumvariant_48(pointer<'lt>),
  Enumvariant_12(argument_expression_list<'lt>),
  Enumvariant_50(parameter_type_list<'lt>),
  Enumvariant_60(statement<'lt>),
  Enumvariant_96(Vec<LBox<struct_declarator<'lt>>>),
  Enumvariant_16(multiplicative_expression<'lt>),
  Enumvariant_84(declaration_specifier<'lt>),
  Enumvariant_100(Option<LBox<expression<'lt>>>),
  Enumvariant_104(NEWSEQNT_184_1<'lt>),
  Enumvariant_2((usize,usize)),
  Enumvariant_78(function_specifier<'lt>),
  Enumvariant_35(struct_or_union_specifier<'lt>),
  Enumvariant_31(declaration_specifiers<'lt>),
  Enumvariant_81(designator_list<'lt>),
  Enumvariant_10(primary_expression<'lt>),
  Enumvariant_90(Vec<LBox<generic_association<'lt>>>),
  Enumvariant_17(additive_expression<'lt>),
  Enumvariant_25(logical_or_expression<'lt>),
  Enumvariant_66(iteration_statement<'lt>),
  Enumvariant_94(Option<LBox<initializer<'lt>>>),
  Enumvariant_114(Vec<LBox<external_declaration<'lt>>>),
  Enumvariant_18(shift_expression<'lt>),
  Enumvariant_23(inclusive_or_expression<'lt>),
  Enumvariant_58(initializer<'lt>),
  Enumvariant_36(struct_or_union<'lt>),
  Enumvariant_59(initializer_list<'lt>),
  Enumvariant_54(type_name<'lt>),
  Enumvariant_82(designator<'lt>),
  Enumvariant_49(type_qualifier_list<'lt>),
  Enumvariant_115(Vec<LBox<declaration<'lt>>>),
  Enumvariant_6(i32),
  Enumvariant_51(parameter_list<'lt>),
  Enumvariant_7(f64),
  Enumvariant_62(compound_statement<'lt>),
  Enumvariant_14(unary_operator<'lt>),
  Enumvariant_33(storage_class_specifier<'lt>),
  Enumvariant_0(translation_unit<'lt>),
  Enumvariant_70(function_definition<'lt>),
  Enumvariant_9(&'lt str),
  Enumvariant_20(equality_expression<'lt>),
  Enumvariant_46(declarator<'lt>),
  Enumvariant_71(constant<'lt>),
  Enumvariant_72(stringnt<'lt>),
  Enumvariant_74(assignment_operator<'lt>),
  Enumvariant_76(static_assert_declaration<'lt>),
  Enumvariant_53(identifier_list<'lt>),
  Enumvariant_63(statement_list<'lt>),
  Enumvariant_77(designation<'lt>),
  Enumvariant_80(atomic_type_specifier<'lt>),
  Enumvariant_42(enum_specifier<'lt>),
  Enumvariant_91(Vec<LBox<expression<'lt>>>),
  Enumvariant_99(Vec<LBox<enumerator<'lt>>>),
  Enumvariant_26(conditional_expression<'lt>),
  Enumvariant_107(Option<LBox<abstract_declarator<'lt>>>),
  Enumvariant_15(cast_expression<'lt>),
  Enumvariant_45(type_qualifier<'lt>),
  Enumvariant_24(logical_and_expression<'lt>),
  Enumvariant_39(specifier_qualifier_list<'lt>),
  Enumvariant_95(Option<LBox<&'lt str>>),
  Enumvariant_102(Vec<LBox<type_qualifier<'lt>>>),
  Enumvariant_83(block_item<'lt>),
  Enumvariant_105(Option<LBox<NEWSEQNT_184_1<'lt>>>),
  Enumvariant_86(initializer_designation<'lt>),
  Enumvariant_1(()),
  Enumvariant_79(alignment_specifier<'lt>),
  Enumvariant_108(Option<()>),
  Enumvariant_98(Vec<LBox<specifier_qualifier<'lt>>>),
  Enumvariant_11(postfix_expression<'lt>),
  Enumvariant_22(exclusive_or_expression<'lt>),
  Enumvariant_57(direct_abstract_declarator<'lt>),
  Enumvariant_56(declaration_list<'lt>),
  Enumvariant_55(abstract_declarator<'lt>),
  Enumvariant_41(struct_declarator<'lt>),
  Enumvariant_29(constant_expression<'lt>),
  Enumvariant_64(expression_statement<'lt>),
  Enumvariant_65(selection_statement<'lt>),
  Enumvariant_75(generic_association<'lt>),
  Enumvariant_87(compiler_directive<'lt>),
  Enumvariant_106(Vec<LBox<&'lt str>>),
  Enumvariant_43(enumerator_list<'lt>),
  Enumvariant_30(declaration<'lt>),
  Enumvariant_47(direct_declarator<'lt>),
  Enumvariant_92(Vec<LBox<init_declarator<'lt>>>),
  Enumvariant_13(unary_expression<'lt>),
  Enumvariant_38(struct_declaration<'lt>),
  Enumvariant_44(enumerator<'lt>),
  Enumvariant_103(Vec<LBox<parameter_declaration<'lt>>>),
  Enumvariant_67(jump_statement<'lt>),
  Enumvariant_109(Vec<LBox<initializer_designation<'lt>>>),
  Enumvariant_110(Option<LBox<designation<'lt>>>),
  Enumvariant_113(Option<LBox<expressionS<'lt>>>),
  Enumvariant_88(expression_list<'lt>),
  Enumvariant_32(init_declarator<'lt>),
  Enumvariant_69(external_declaration<'lt>),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<translation_unit<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct c11dlexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<HashSet<&'lt str>>>,
}
impl<'lt> c11dlexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> c11dlexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> c11dlexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> c11dlexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<HashSet<&'lt str>>::default()));
    for kw in ["if","enum","define","__func__","while","case","continue","void","float","static","include","return","break","const","do","signed","_Generic","union","inline","_Complex","char","_Atomic","long","goto","auto","volatile","extern","_WILDCARD_TOKEN_","unsigned","double","_Bool","short","_Imaginary","else","typedef","int","_Noreturn","register","for","_Thread_local","sizeof","default","switch","restrict","_Alignas","_Alignof","struct","_Static_assert",] {keywords.insert(kw);}
    for c in ['[',']','(',')','+','-','~',';',':',',','<','}','.','!','?','=','*','%','/','&','>','^','{','|',] {stk.add_single(c);}
    for d in ["+=","*=","--",">>","||","/=","!=","|=","%=","<<","&=","->","&&","-=","^=","<=","==",">=","++",] {stk.add_double(d);}
    for d in [">>=","...","<<=",] {stk.add_triple(d);}
    for (k,v) in [(r":","Colon"),(r"+=","ADD_ASSIGN"),(r"else","ELSE"),(r"*=","MUL_ASSIGN"),(r"switch","SWITCH"),(r"long","LONG"),(r"_Alignof","ALIGNOF"),(r"--","DEC_OP"),(r">>","RIGHT_OP"),(r"if","IF"),(r"goto","GOTO"),(r",","Comma"),(r"<","Lt"),(r"_Noreturn","NORETURN"),(r"||","OR_OP"),(r"enum","ENUM"),(r"float","FLOAT"),(r"for","FOR"),(r"}","Rbrace"),(r"/=","DIV_ASSIGN"),(r".","Dot"),(r"!=","NE_OP"),(r"void","VOID"),(r"!","Bang"),(r"register","REGISTER"),(r"extern","EXTERN"),(r"return","RETURN"),(r"unsigned","UNSIGNED"),(r"?","Quest"),(r"=","ASSIGN"),(r"_Bool","BOOL"),(r"static","STATIC"),(r"double","DOUBLE"),(r"break","BREAK"),(r"*","Star"),(r"%","Percent"),(r"|=","OR_ASSIGN"),(r"case","CASE"),(r"%=","MOD_ASSIGN"),(r"__func__","FUNC_NAME"),(r"_Static_assert","STATIC_ASSERT"),(r"<<","LEFT_OP"),(r"typedef","TYPEDEF"),(r"char","CHAR"),(r"continue","CONTINUE"),(r">>=","RIGHT_ASSIGN"),(r"_Thread_local","THREAD_LOCAL"),(r"&=","AND_ASSIGN"),(r"->","PTR_OP"),(r"...","ELLIPSIS"),(r"short","SHORT"),(r"&&","AND_OP"),(r"-=","SUB_ASSIGN"),(r"default","DEFAULT"),(r"include","INCLUDE"),(r"restrict","RESTRICT"),(r"^=","XOR_ASSIGN"),(r"/","Div"),(r"_Complex","COMPLEX"),(r"inline","INLINE"),(r"_Generic","GENERIC"),(r"define","DEFINE"),(r"&","Amp"),(r">","Gt"),(r"<=","LE_OP"),(r"_Atomic","ATOMIC"),(r"==","EQ_OP"),(r"_Alignas","ALIGNAS"),(r">=","GE_OP"),(r"sizeof","SIZEOF"),(r"signed","SIGNED"),(r"int","INT"),(r"++","INC_OP"),(r"const","CONST"),(r"struct","STRUCT"),(r"<<=","LEFT_ASSIGN"),(r"union","UNION"),(r"^","Hat"),(r"auto","AUTO"),(r"while","WHILE"),(r"do","DO"),(r"{","Lbrace"),(r"_Imaginary","IMAGINARY"),(r"volatile","VOLATILE"),(r"|","Bar"),] {lexnames.insert(k,v);}
    stk.add_custom("directive",r"^(?m)^#.*$");
    c11dlexer {stk,keywords,lexnames,shared_state}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for c11dlexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Alphanum(n) if self.shared_state.borrow().contains(n) => Some(TerminalToken::from_raw(token,"TYPEDEF_NAME",RetTypeEnum::Enumvariant_9( n
))),
      RawToken:: Alphanum(n) => Some(TerminalToken::from_raw(token,"IDENTIFIER",RetTypeEnum::Enumvariant_9( n
))),
      RawToken:: Alphanum(n) => Some(TerminalToken::from_raw(token,"ENUMERATION_CONSTANT",RetTypeEnum::Enumvariant_9( n
))),
      RawToken:: Num(n) => Some(TerminalToken::from_raw(token,"I_CONSTANT",RetTypeEnum::Enumvariant_6( (n as i32)
))),
      RawToken:: Float(n) => Some(TerminalToken::from_raw(token,"F_CONSTANT",RetTypeEnum::Enumvariant_7( n
))),
      RawToken:: Strlit(s) => Some(TerminalToken::from_raw(token,"STRING_LITERAL",RetTypeEnum::Enumvariant_9( s
))),
      RawToken:: Custom("directive",d) => Some(TerminalToken::from_raw(token,"COMPILER_DIRECTIVE",RetTypeEnum::Enumvariant_9( d
))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_2((self.stk.previous_position(),self.stk.current_position())),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>)
{
}//end of load_extras: don't change this line as it affects augmentation
