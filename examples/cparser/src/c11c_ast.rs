//Abstract syntax types generated by rustlr for grammar c11c
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(dead_code)]
extern crate rustlr;
use rustlr::LBox;
use crate::c11_ast::declarator::*;
use crate::c11_ast::declaration::*;
use crate::c11_ast::direct_declarator::*;
use crate::c11_ast::declaration_specifier::*;
use crate::c11_ast::storage_class_specifier::*;


#[derive(Default,Debug)]
pub struct identifier_list<'lt>(pub Vec<LBox<&'lt str>>,);

#[derive(Debug)]
pub enum relational_expression {
  relational_expression_Nothing,
}
impl Default for relational_expression { fn default()->Self { relational_expression::relational_expression_Nothing } }

#[derive(Debug)]
pub enum inclusive_or_expression {
  inclusive_or_expression_Nothing,
}
impl Default for inclusive_or_expression { fn default()->Self { inclusive_or_expression::inclusive_or_expression_Nothing } }

#[derive(Default,Debug)]
pub struct expression_statement<'lt>(pub Option<LBox<expressionS<'lt>>>,);

#[derive(Default,Debug)]
pub struct static_assert_declaration<'lt>(pub LBox<expression<'lt>>,pub &'lt str,);

#[derive(Debug)]
pub enum jump_statement<'lt> {
  GOTO_251(&'lt str),
  CONTINUE_252,
  RETURN_255(expressionS<'lt>),
  BREAK_253,
  RETURN_254,
  jump_statement_Nothing,
}
impl<'lt> Default for jump_statement<'lt> { fn default()->Self { jump_statement::jump_statement_Nothing } }

#[derive(Default,Debug)]
pub struct compound_statement<'lt> {
  pub statements:Vec<LBox<block_item<'lt>>>,
}

#[derive(Debug)]
pub enum logical_or_expression {
  logical_or_expression_Nothing,
}
impl Default for logical_or_expression { fn default()->Self { logical_or_expression::logical_or_expression_Nothing } }

#[derive(Default,Debug)]
pub struct NEWSEQNT_177_1();

#[derive(Debug)]
pub enum struct_declaration<'lt> {
  struct_declaration_119(LBox<static_assert_declaration<'lt>>),
  struct_declaration_118(LBox<specifier_qualifier_list<'lt>>,Vec<LBox<struct_declarator<'lt>>>),
  struct_declaration_Nothing,
}
impl<'lt> Default for struct_declaration<'lt> { fn default()->Self { struct_declaration::struct_declaration_Nothing } }

#[derive(Debug)]
pub enum declaration<'lt> {
  DecSpecList(declaration_specifiers<'lt>,Vec<LBox<init_declarator<'lt>>>),
  Statassert(static_assert_declaration<'lt>),
  DecSpec(declaration_specifiers<'lt>),
  declaration_Nothing,
}
impl<'lt> Default for declaration<'lt> { fn default()->Self { declaration::declaration_Nothing } }

#[derive(Debug)]
pub enum additive_expression {
  additive_expression_Nothing,
}
impl Default for additive_expression { fn default()->Self { additive_expression::additive_expression_Nothing } }

#[derive(Debug)]
pub enum generic_association<'lt> {
  generic_association_11(LBox<type_name<'lt>>,LBox<expression<'lt>>),
  DEFAULT_12(LBox<expression<'lt>>),
  generic_association_Nothing,
}
impl<'lt> Default for generic_association<'lt> { fn default()->Self { generic_association::generic_association_Nothing } }

#[derive(Default,Debug)]
pub struct atomic_type_specifier<'lt>(pub LBox<type_name<'lt>>,);

#[derive(Debug)]
pub enum expression<'lt> {
  Comp(LBox<expression<'lt>>),
  Subeq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_39(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Uminus(LBox<expression<'lt>>),
  expression_50(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_14(LBox<expression<'lt>>),
  expression_43(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_16(LBox<expression<'lt>>,&'lt str),
  ID(&'lt str),
  ALIGNOF_30(LBox<type_name<'lt>>),
  expression_44(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_49(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Or(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_46(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_47(LBox<expression<'lt>>,LBox<expression<'lt>>),
  DEC_OP_27(LBox<expression<'lt>>),
  expression_13(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_56(LBox<expression<'lt>>,LBox<expression<'lt>>,LBox<expression<'lt>>),
  SIZEOF_29(LBox<type_name<'lt>>),
  Aeq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Fconst(f64),
  And(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_19(LBox<expression<'lt>>),
  SIZEOF_28(LBox<expression<'lt>>),
  expression_38(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_41(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Band(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Not(LBox<expression<'lt>>),
  Oreq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Stringlit(&'lt str),
  expression_45(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_17(LBox<expression<'lt>>,&'lt str),
  expression_42(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Uplus(LBox<expression<'lt>>),
  expression_40(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Bor(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Econst(&'lt str),
  Meq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_6(LBox<expression<'lt>>),
  Ref(LBox<expression<'lt>>),
  Ustar(LBox<expression<'lt>>),
  Req(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_18(LBox<expression<'lt>>),
  expression_15(LBox<expression<'lt>>,LBox<expression_list<'lt>>),
  Assign(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Andeq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_48(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Xeq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  INC_OP_26(LBox<expression<'lt>>),
  expression_22(LBox<type_name<'lt>>,initializer_list),
  Deq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Iconst(i32),
  expression_37(LBox<type_name<'lt>>,LBox<expression<'lt>>),
  Teq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  Leq(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_7(LBox<generic_selection<'lt>>),
  funcname,
  Xor(LBox<expression<'lt>>,LBox<expression<'lt>>),
  expression_Nothing,
}
impl<'lt> Default for expression<'lt> { fn default()->Self { expression::expression_Nothing } }

#[derive(Debug)]
pub enum declaration_specifier<'lt> {
  storage(storage_class_specifier),
  typespec(LBox<type_specifier<'lt>>),
  typequal(type_qualifier),
  funcspec(function_specifier),
  alignspec(LBox<alignment_specifier<'lt>>),
  declaration_specifier_Nothing,
}
impl<'lt> Default for declaration_specifier<'lt> { fn default()->Self { declaration_specifier::declaration_specifier_Nothing } }

#[derive(Debug)]
pub enum type_specifier<'lt> {
  FLOAT,
  INT,
  BOOL,
  LONG,
  IMAGINARY,
  VOID,
  COMPLEX,
  UNSIGNED,
  SHORT,
  type_specifier_106(LBox<enum_specifier<'lt>>),
  CHAR,
  type_specifier_105(LBox<struct_or_union_specifier<'lt>>),
  Typename(&'lt str),
  SIGNED,
  DOUBLE,
  type_specifier_107(LBox<atomic_type_specifier<'lt>>),
  type_specifier_Nothing,
}
impl<'lt> Default for type_specifier<'lt> { fn default()->Self { type_specifier::type_specifier_Nothing } }

#[derive(Debug)]
pub enum and_expression {
  and_expression_Nothing,
}
impl Default for and_expression { fn default()->Self { and_expression::and_expression_Nothing } }

#[derive(Default,Debug)]
pub struct function_definition<'lt>(pub declaration_specifiers<'lt>,pub declarator<'lt>,pub Vec<LBox<declaration<'lt>>>,pub compound_statement<'lt>,);

#[derive(Debug)]
pub enum postfix_expression {
  postfix_expression_Nothing,
}
impl Default for postfix_expression { fn default()->Self { postfix_expression::postfix_expression_Nothing } }

#[derive(Default,Debug)]
pub struct type_qualifier_list(pub Vec<LBox<type_qualifier>>,);

#[derive(Default,Debug)]
pub struct designation<'lt>(pub Vec<LBox<designator<'lt>>>,);

#[derive(Debug)]
pub enum abstract_declarator<'lt> {
  abstract_declarator_192(pointer,LBox<direct_abstract_declarator<'lt>>),
  abstract_declarator_190(pointer),
  abstract_declarator_191(LBox<direct_abstract_declarator<'lt>>),
  abstract_declarator_Nothing,
}
impl<'lt> Default for abstract_declarator<'lt> { fn default()->Self { abstract_declarator::abstract_declarator_Nothing } }

#[derive(Debug)]
pub enum direct_declarator<'lt> {
  direct_declarator_159(LBox<direct_declarator<'lt>>,type_qualifier_list),
  IDENTIFIER(&'lt str),
  direct_declarator_161(LBox<direct_declarator<'lt>>,type_qualifier_list,LBox<expression<'lt>>),
  direct_declarator_154(LBox<declarator<'lt>>),
  direct_declarator_165(LBox<direct_declarator<'lt>>,identifier_list<'lt>),
  direct_declarator_157(LBox<direct_declarator<'lt>>,type_qualifier_list,LBox<expression<'lt>>),
  direct_declarator_160(LBox<direct_declarator<'lt>>,type_qualifier_list,LBox<expression<'lt>>),
  direct_declarator_156(LBox<direct_declarator<'lt>>),
  direct_declarator_155(LBox<direct_declarator<'lt>>),
  direct_declarator_158(LBox<direct_declarator<'lt>>,LBox<expression<'lt>>),
  direct_declarator_162(LBox<direct_declarator<'lt>>,type_qualifier_list),
  direct_declarator_163(LBox<direct_declarator<'lt>>,LBox<expression<'lt>>),
  direct_declarator_164(LBox<direct_declarator<'lt>>,LBox<parameter_type_list<'lt>>),
  direct_declarator_166(LBox<direct_declarator<'lt>>),
  direct_declarator_Nothing,
}
impl<'lt> Default for direct_declarator<'lt> { fn default()->Self { direct_declarator::direct_declarator_Nothing } }

#[derive(Default,Debug)]
pub struct enumerator<'lt>(pub &'lt str,pub Option<LBox<expression<'lt>>>,);

#[derive(Debug)]
pub enum struct_declarator<'lt> {
  struct_declarator_129(LBox<declarator<'lt>>),
  Colon_130(LBox<expression<'lt>>),
  struct_declarator_131(LBox<declarator<'lt>>,LBox<expression<'lt>>),
  struct_declarator_Nothing,
}
impl<'lt> Default for struct_declarator<'lt> { fn default()->Self { struct_declarator::struct_declarator_Nothing } }

#[derive(Debug)]
pub enum selection_statement<'lt> {
  IF_244(expressionS<'lt>,LBox<statement<'lt>>),
  IF_245(expressionS<'lt>,LBox<statement<'lt>>,LBox<statement<'lt>>),
  SWITCH_246(expressionS<'lt>,LBox<statement<'lt>>),
  selection_statement_Nothing,
}
impl<'lt> Default for selection_statement<'lt> { fn default()->Self { selection_statement::selection_statement_Nothing } }

#[derive(Debug)]
pub enum declaration_list {
  declaration_list_Nothing,
}
impl Default for declaration_list { fn default()->Self { declaration_list::declaration_list_Nothing } }

#[derive(Debug)]
pub enum conditional_expression {
  conditional_expression_Nothing,
}
impl Default for conditional_expression { fn default()->Self { conditional_expression::conditional_expression_Nothing } }

#[derive(Debug)]
pub enum external_declaration<'lt> {
  directive(&'lt str),
  external_declaration_260(declaration<'lt>),
  external_declaration_259(function_definition<'lt>),
  external_declaration_Nothing,
}
impl<'lt> Default for external_declaration<'lt> { fn default()->Self { external_declaration::external_declaration_Nothing } }

#[derive(Debug)]
pub enum unary_operator {
  unary_operator_Nothing,
}
impl Default for unary_operator { fn default()->Self { unary_operator::unary_operator_Nothing } }

#[derive(Debug)]
pub enum compiler_directive {
  compiler_directive_Nothing,
}
impl Default for compiler_directive { fn default()->Self { compiler_directive::compiler_directive_Nothing } }

#[derive(Debug)]
pub enum statement_list {
  statement_list_Nothing,
}
impl Default for statement_list { fn default()->Self { statement_list::statement_list_Nothing } }

#[derive(Debug)]
pub enum assignment_operator {
  assignment_operator_Nothing,
}
impl Default for assignment_operator { fn default()->Self { assignment_operator::assignment_operator_Nothing } }

#[derive(Default,Debug)]
pub struct enumerator_list<'lt>(pub Vec<LBox<enumerator<'lt>>>,);

#[derive(Default,Debug)]
pub struct specifier_qualifier_list<'lt>(pub Vec<LBox<specifier_qualifier<'lt>>>,);

#[derive(Debug)]
pub enum cast_expression {
  cast_expression_Nothing,
}
impl Default for cast_expression { fn default()->Self { cast_expression::cast_expression_Nothing } }

#[derive(Debug)]
pub enum specifier_qualifier<'lt> {
  specifier_qualifier_123(LBox<type_specifier<'lt>>),
  specifier_qualifier_124(type_qualifier),
  specifier_qualifier_Nothing,
}
impl<'lt> Default for specifier_qualifier<'lt> { fn default()->Self { specifier_qualifier::specifier_qualifier_Nothing } }

#[derive(Debug)]
pub enum designator<'lt> {
  designator_224(expression<'lt>),
  Dot_225(&'lt str),
  designator_Nothing,
}
impl<'lt> Default for designator<'lt> { fn default()->Self { designator::designator_Nothing } }

#[derive(Default,Debug)]
pub struct declaration_specifiers<'lt>(pub Vec<LBox<declaration_specifier<'lt>>>,);

#[derive(Debug)]
pub enum enum_specifier<'lt> {
  ENUM_133(&'lt str,LBox<enumerator_list<'lt>>),
  ENUM_134(&'lt str),
  ENUM_132(LBox<enumerator_list<'lt>>),
  enum_specifier_Nothing,
}
impl<'lt> Default for enum_specifier<'lt> { fn default()->Self { enum_specifier::enum_specifier_Nothing } }

#[derive(Default,Debug)]
pub struct struct_declaration_list<'lt>(pub Vec<LBox<struct_declaration<'lt>>>,);

#[derive(Debug)]
pub enum type_qualifier {
  CONST,
  VOLATILE,
  RESTRICT,
  ATOMIC,
  type_qualifier_Nothing,
}
impl Default for type_qualifier { fn default()->Self { type_qualifier::type_qualifier_Nothing } }

#[derive(Default,Debug)]
pub struct type_name<'lt>(pub LBox<specifier_qualifier_list<'lt>>,pub Option<LBox<abstract_declarator<'lt>>>,);

#[derive(Debug)]
pub enum function_specifier {
  INLINE,
  NORETURN,
  function_specifier_Nothing,
}
impl Default for function_specifier { fn default()->Self { function_specifier::function_specifier_Nothing } }

#[derive(Debug)]
pub enum primary_expression {
  primary_expression_Nothing,
}
impl Default for primary_expression { fn default()->Self { primary_expression::primary_expression_Nothing } }

#[derive(Debug)]
pub enum direct_abstract_declarator<'lt> {
  direct_abstract_declarator_202(LBox<expression<'lt>>),
  direct_abstract_declarator_211(LBox<direct_abstract_declarator<'lt>>),
  direct_abstract_declarator_196(Vec<LBox<type_qualifier>>,LBox<expression<'lt>>),
  direct_abstract_declarator_195,
  direct_abstract_declarator_209,
  direct_abstract_declarator_193(LBox<abstract_declarator<'lt>>),
  direct_abstract_declarator_207(LBox<direct_abstract_declarator<'lt>>,type_qualifier_list),
  direct_abstract_declarator_205(LBox<direct_abstract_declarator<'lt>>,Vec<LBox<type_qualifier>>,LBox<expression<'lt>>),
  direct_abstract_declarator_212(LBox<direct_abstract_declarator<'lt>>,LBox<parameter_type_list<'lt>>),
  direct_abstract_declarator_206(LBox<direct_abstract_declarator<'lt>>,type_qualifier_list,Option<()>,LBox<expression<'lt>>),
  direct_abstract_declarator_203(LBox<direct_abstract_declarator<'lt>>),
  direct_abstract_declarator_204(LBox<direct_abstract_declarator<'lt>>),
  direct_abstract_declarator_194,
  direct_abstract_declarator_201(type_qualifier_list,Option<()>,Option<LBox<expression<'lt>>>),
  direct_abstract_declarator_210(LBox<parameter_type_list<'lt>>),
  direct_abstract_declarator_208(LBox<direct_abstract_declarator<'lt>>,LBox<expression<'lt>>),
  direct_abstract_declarator_Nothing,
}
impl<'lt> Default for direct_abstract_declarator<'lt> { fn default()->Self { direct_abstract_declarator::direct_abstract_declarator_Nothing } }

#[derive(Debug)]
pub enum parameter_list {
  parameter_list_Nothing,
}
impl Default for parameter_list { fn default()->Self { parameter_list::parameter_list_Nothing } }

#[derive(Debug)]
pub enum struct_or_union_specifier<'lt> {
  struct_or_union_specifier_111(struct_or_union,&'lt str),
  struct_or_union_specifier_110(struct_or_union,Option<LBox<&'lt str>>,LBox<struct_declaration_list<'lt>>),
  struct_or_union_specifier_Nothing,
}
impl<'lt> Default for struct_or_union_specifier<'lt> { fn default()->Self { struct_or_union_specifier::struct_or_union_specifier_Nothing } }

#[derive(Debug)]
pub enum statement<'lt> {
  statement_227(LBox<labeled_statement<'lt>>),
  statement_228(LBox<compound_statement<'lt>>),
  statement_230(LBox<selection_statement<'lt>>),
  statement_229(expression_statement<'lt>),
  statement_231(LBox<iteration_statement<'lt>>),
  statement_232(jump_statement<'lt>),
  statement_Nothing,
}
impl<'lt> Default for statement<'lt> { fn default()->Self { statement::statement_Nothing } }

#[derive(Debug)]
pub enum parameter_declaration<'lt> {
  parameter_declaration_182(LBox<declaration_specifiers<'lt>>,LBox<abstract_declarator<'lt>>),
  parameter_declaration_183(LBox<declaration_specifiers<'lt>>),
  parameter_declaration_181(LBox<declaration_specifiers<'lt>>,LBox<declarator<'lt>>),
  parameter_declaration_Nothing,
}
impl<'lt> Default for parameter_declaration<'lt> { fn default()->Self { parameter_declaration::parameter_declaration_Nothing } }

#[derive(Debug)]
pub enum stringnt {
  stringnt_Nothing,
}
impl Default for stringnt { fn default()->Self { stringnt::stringnt_Nothing } }

#[derive(Debug)]
pub enum multiplicative_expression {
  multiplicative_expression_Nothing,
}
impl Default for multiplicative_expression { fn default()->Self { multiplicative_expression::multiplicative_expression_Nothing } }

#[derive(Debug)]
pub enum assignment_expression {
  assignment_expression_Nothing,
}
impl Default for assignment_expression { fn default()->Self { assignment_expression::assignment_expression_Nothing } }

#[derive(Debug)]
pub enum declarator<'lt> {
  with_pointer(pointer,LBox<direct_declarator<'lt>>),
  no_pointer(LBox<direct_declarator<'lt>>),
  declarator_Nothing,
}
impl<'lt> Default for declarator<'lt> { fn default()->Self { declarator::declarator_Nothing } }

#[derive(Debug)]
pub enum logical_and_expression {
  logical_and_expression_Nothing,
}
impl Default for logical_and_expression { fn default()->Self { logical_and_expression::logical_and_expression_Nothing } }

#[derive(Default,Debug)]
pub struct expressionS<'lt>(pub expression_list<'lt>,);

#[derive(Debug)]
pub enum unary_expression {
  unary_expression_Nothing,
}
impl Default for unary_expression { fn default()->Self { unary_expression::unary_expression_Nothing } }

#[derive(Debug)]
pub enum constant {
  constant_Nothing,
}
impl Default for constant { fn default()->Self { constant::constant_Nothing } }

#[derive(Debug)]
pub enum initializer<'lt> {
  initializer_213(expression<'lt>),
  Lbrace_216(Vec<LBox<initializer_designation<'lt>>>),
  initializer_Nothing,
}
impl<'lt> Default for initializer<'lt> { fn default()->Self { initializer::initializer_Nothing } }

#[derive(Default,Debug)]
pub struct generic_selection<'lt>(pub LBox<expression<'lt>>,pub Vec<LBox<generic_association<'lt>>>,);

#[derive(Debug)]
pub enum argument_expression_list {
  argument_expression_list_Nothing,
}
impl Default for argument_expression_list { fn default()->Self { argument_expression_list::argument_expression_list_Nothing } }

#[derive(Debug)]
pub enum initializer_list {
  initializer_list_Nothing,
}
impl Default for initializer_list { fn default()->Self { initializer_list::initializer_list_Nothing } }

#[derive(Debug)]
pub enum alignment_specifier<'lt> {
  ALIGNAS_150(LBox<expression<'lt>>),
  ALIGNAS_149(LBox<type_name<'lt>>),
  alignment_specifier_Nothing,
}
impl<'lt> Default for alignment_specifier<'lt> { fn default()->Self { alignment_specifier::alignment_specifier_Nothing } }

#[derive(Debug)]
pub enum struct_or_union {
  STRUCT(()),
  UNION(()),
  struct_or_union_Nothing,
}
impl Default for struct_or_union { fn default()->Self { struct_or_union::struct_or_union_Nothing } }

#[derive(Default,Debug)]
pub struct init_declarator<'lt> {
  pub declarator:declarator<'lt>,
  pub initializer:Option<LBox<initializer<'lt>>>,
}

#[derive(Default,Debug)]
pub struct designator_list<'lt>(pub Vec<LBox<designator<'lt>>>,);

#[derive(Default,Debug)]
pub struct translation_unit<'lt>(pub Vec<LBox<external_declaration<'lt>>>,);

#[derive(Debug)]
pub enum exclusive_or_expression {
  exclusive_or_expression_Nothing,
}
impl Default for exclusive_or_expression { fn default()->Self { exclusive_or_expression::exclusive_or_expression_Nothing } }

#[derive(Debug)]
pub enum storage_class_specifier {
  AUTO,
  STATIC,
  THREAD_LOCAL,
  TYPEDEF,
  EXTERN,
  REGISTER,
  storage_class_specifier_Nothing,
}
impl Default for storage_class_specifier { fn default()->Self { storage_class_specifier::storage_class_specifier_Nothing } }

#[derive(Default,Debug)]
pub struct struct_declarator_list<'lt>(pub Vec<LBox<struct_declarator<'lt>>>,);

#[derive(Default,Debug)]
pub struct expression_list<'lt>(pub Vec<LBox<expression<'lt>>>,);

#[derive(Default,Debug)]
pub struct pointer {
  pub tql:Vec<LBox<type_qualifier>>,
  pub ptr:Option<LBox<pointer>>,
}

#[derive(Debug)]
pub enum shift_expression {
  shift_expression_Nothing,
}
impl Default for shift_expression { fn default()->Self { shift_expression::shift_expression_Nothing } }

#[derive(Default,Debug)]
pub struct initializer_designation<'lt>(pub Option<LBox<designation<'lt>>>,pub LBox<initializer<'lt>>,);

#[derive(Debug)]
pub enum labeled_statement<'lt> {
  DEFAULT_235(LBox<statement<'lt>>),
  CASE_234(expression<'lt>,LBox<statement<'lt>>),
  IDENTIFIER_233(&'lt str,LBox<statement<'lt>>),
  labeled_statement_Nothing,
}
impl<'lt> Default for labeled_statement<'lt> { fn default()->Self { labeled_statement::labeled_statement_Nothing } }

#[derive(Debug)]
pub enum equality_expression {
  equality_expression_Nothing,
}
impl Default for equality_expression { fn default()->Self { equality_expression::equality_expression_Nothing } }

#[derive(Debug)]
pub enum iteration_statement<'lt> {
  FOR_249(expression_statement<'lt>,expression_statement<'lt>,Option<LBox<expressionS<'lt>>>,LBox<statement<'lt>>),
  DO_248(LBox<statement<'lt>>,expressionS<'lt>),
  FOR_250(declaration<'lt>,expression_statement<'lt>,Option<LBox<expressionS<'lt>>>,LBox<statement<'lt>>),
  WHILE_247(expressionS<'lt>,LBox<statement<'lt>>),
  iteration_statement_Nothing,
}
impl<'lt> Default for iteration_statement<'lt> { fn default()->Self { iteration_statement::iteration_statement_Nothing } }

#[derive(Default,Debug)]
pub struct parameter_type_list<'lt> {
  pub parameters:Vec<LBox<parameter_declaration<'lt>>>,
  pub ellipsis:Option<LBox<NEWSEQNT_177_1>>,
}

#[derive(Debug)]
pub enum block_item<'lt> {
  Statement(LBox<statement<'lt>>),
  Declaration(declaration<'lt>),
  block_item_Nothing,
}
impl<'lt> Default for block_item<'lt> { fn default()->Self { block_item::block_item_Nothing } }

#[derive(Debug)]
pub enum constant_expression {
  constant_expression_Nothing,
}
impl Default for constant_expression { fn default()->Self { constant_expression::constant_expression_Nothing } }

