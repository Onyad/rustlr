//Parser generated by rustlr for grammar c11b
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::marker::PhantomData;
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use crate::cauto_ast::declaration_specifiers::*;
use crate::cauto_ast::storage_class_specifier::*;
use crate::cauto_ast::init_declarator::*;
use crate::cauto_ast::init_declarator_list::*;
use crate::cauto_ast::declarator::*;
use crate::cauto_ast::declaration::*;
use crate::cauto_ast::direct_declarator::*;
use rustlr::LBox;
use crate::c11b_ast;
use crate::c11b_ast::*;

static SYMBOLS:[&'static str;227] = ["_WILDCARD_TOKEN_","FUNC_NAME","INLINE","RESTRICT","ALIGNAS","ALIGNOF","ATOMIC","BOOL","COMPLEX","GENERIC","IMAGINARY","NORETURN","STATIC_ASSERT","THREAD_LOCAL","PTR_OP","INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","SIZEOF","TYPEDEF","EXTERN","STATIC","AUTO","REGISTER","CHAR","SHORT","INT","LONG","SIGNED","UNSIGNED","FLOAT","DOUBLE","CONST","VOLATILE","VOID","STRUCT","UNION","ENUM","CASE","DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE","BREAK","RETURN","INCLUDE","DEFINE","ELLIPSIS","Lbrace","Rbrace","Amp","Bang","Bar","Hat","Dot","Comma","Colon","Star","Div","Percent","Lt","Gt","Eq1","Quest","[","]","(",")","+","-","~",";","TYPEDEF_NAME","ENUMERATION_CONSTANT","IDENTIFIER","I_CONSTANT","F_CONSTANT","STRING_LITERAL","COMPILER_DIRECTIVE","primary_expression","postfix_expression","argument_expression_list","unary_expression","unary_operator","cast_expression","multiplicative_expression","additive_expression","shift_expression","relational_expression","equality_expression","and_expression","exclusive_or_expression","inclusive_or_expression","logical_and_expression","logical_or_expression","conditional_expression","assignment_expression","assignment_operator","expression","constant_expression","declaration","declaration_specifiers","init_declarator_list","init_declarator","storage_class_specifier","type_specifier","struct_or_union_specifier","struct_or_union","struct_declaration_list","struct_declaration","specifier_qualifier_list","struct_declarator_list","struct_declarator","enum_specifier","enumerator_list","enumerator","type_qualifier","declarator","direct_declarator","pointer","type_qualifier_list","parameter_type_list","parameter_list","parameter_declaration","identifier_list","type_name","abstract_declarator","declaration_list","direct_abstract_declarator","initializer","initializer_list","statement","labeled_statement","compound_statement","statement_list","expression_statement","selection_statement","iteration_statement","jump_statement","translation_unit","external_declaration","function_definition","constant","stringnt","generic_selection","generic_assoc_list","generic_association","static_assert_declaration","designation","function_specifier","alignment_specifier","atomic_type_specifier","designator_list","designator","block_item","declaration_specifier","specifier_qualifier","initializer_designation","compiler_directive","expression_list","NEWSEPNT_10_0","NEWNT_23_0","NEWSEPNT_26_0","NEWSEPNT_87_0","NEWNT_99_0","NEWSEPNT_102_0","SEQNT_105_0","NEWNT_106_1","NEWNT_131_0","NEWSEPNT_137_0","NEWSEPNT2_139_1","NEWNT_143_0","NEWNT_148_0","NEWSEPNT_151_0","NEWSEPNT_157_0","NEWNT_159_0","NEWNT_162_0","SEQNT_168_0","NEWNT_169_1","NEWNT_197_0","NEWNT_199_0","NEWNT_202_0","NEWSEPNT_205_0","SEQNT_207_0","NEWNT_208_1","NEWSEPNT_214_0","NEWNT_217_0","NEWNT_226_0","NEWNT_229_0","NEWNT_231_0","NEWNT_237_0","NEWNT_240_0","NEWSEPNT_250_0","NEWNT_252_0","NEWNT_255_0","NEWNT_258_0","NEWNT_261_0","NEWNT_276_0","NEWNT_281_0","NEWNT_289_0","NEWNT_292_0","NEWNT_300_0","NEWNT_306_0","START","EOF"];

static TABLE:[u64;11574] = [760209408001,528281567233,214749347840,176094511104,171800068096,193274314752,523987058689,403729547264,691492683777,201863725056,554051502081,549758369793,12887719936,743031635969,34362818560,167505362944,592706994177,210455363584,957780131841,219043397632,429497974784,17180524544,734440980481,47246540800,163210985472,223340789760,188981248000,798866931713,725850914817,42952425472,231928627200,158915493888,55836737536,184684118016,25771900928,51540787200,180390395904,197568823296,738734505985,695785619457,206159740928,227636477952,545461305345,30067916800,700080783361,541168238593,8591769600,579823468545,154620854272,281689732677634,281852941434882,281530818887682,281844351500290,281642488037378,281672552808450,281492164182018,281706912546818,281668257841154,281500754116610,281629603135490,281663962873858,281694027644930,281878711238658,281809991761922,281698322612226,281681142743042,281646783004674,281638193070082,281509344051202,281659667906562,281655372939266,281887301173250,281685437710338,281676847775746,281483574247426,281857236402178,281633898102786,281517933985794,281505049083906,281522228953090,281487869214722,281874416271362,281651077971970,281702617579522,281805696794626,281814286729218,563319327031298,562967139713026,563177593110530,563169003175938,562997204484098,563280672325634,563121758535682,562984319582210,563104578666498,562962844745730,563173298143234,563134643437570,562958549778434,563151823306754,563160413241346,563005794418690,563362276704258,563349391802370,563164708208642,563138938404866,563147528339458,563156118274050,563353686769666,563181888077826,563332211933186,562992909516802,563143233372162,563117463568386,563130348470274,563113168601090,563126053502978,563327916965890,563289262260226,562975729647618,562980024614914,563108873633794,844596735311874,844588145377282,844631095050242,844764239036418,844802893742082,844459296358402,844455001391106,844622505115650,844437821521922,844807188709378,844635390017538,844609620213762,844618210148354,844467886292994,844480771194882,844442116489218,844837253480450,844794303807490,844433526554626,844652569886722,844601030279170,844824368578562,844450706423810,844639684984834,844592440344578,844648274919426,844656864854018,844472181260290,844643979952130,844605325246466,844583850409986,844828663545858,844755649101826,844613915181058,844579555442690,844626800082946,1125929979543554,1126080303398914,1126230627254274,1126123253071874,1126131843006466,1126303641698306,1126106073202690,1125908504707074,1126277871894530,1126127548039170,1126282166861826,1125925684576258,1126312231632898,1126110368169986,1126071713464322,1126239217188866,1125947159412738,1125955749347330,1126054533595138,1126093188300802,1125942864445442,1126063123529730,1126101778235394,1125934274510850,1126114663137282,1126234922221570,1126076008431618,1126269281959938,1126058828562434,1126084598366210,1126088893333506,1125912799674370,1126299346731010,1125917094641666,1126067418497026,1126118958104578,1126097483268098,1407422136320002,1407430726254594,1407404956450818,1407581050109954,1407744258867202,1407774323638274,1407542395404290,1407529510502402,1407533805469698,1407538100436994,1407593935011842,1407787208540162,1407585345077250,1407568165208066,1407598229979138,1407400661483522,1407757143769090,1407550985338882,1407383481614338,1407606819913730,1407752848801794,1407714194096130,1407709899128834,1407602524946434,1407387776581634,1407563870240770,1407409251418114,1407705604161538,1407417841352706,1407778618605570,1407559575273474,1407572460175362,1407576755142658,1407546690371586,1407589640044546,1407555280306178,1407392071548930,1689150511316992,1689262180401152,1970488051957762,1970350613004290,1970737160060930,1970548181499906,1970483756990466,1970505231826946,1970500936859650,1970367792873474,1970531001630722,1970372087840770,1970702800322562,1970526706663426,1970513821761538,1970539591565314,1970724275159042,1970496641892354,1970535296598018,1970380677775362,1970556771434498,1970655555682306,1970694210387970,1970664145616898,1970333433135106,1970354907971586,1970707095289858,1970522411696130,1970728570126338,1970509526794242,1970518116728834,1970359202938882,1970552476467202,1970479462023170,1970543886532610,1970492346925058,1970342023069698,1970337728102402,2251834181222402,2251997389979650,2252212138344450,2252010274881538,2251855656058882,2252169188671490,2251847066124290,2251988800045058,2252023159783426,2251958735273986,2252203548409858,2251829886255106,2251954440306690,2252005979914242,2251984505077762,2251967325208578,2252031749718018,2252182073573378,2251825591287810,2251971620175874,2252001684946946,2251993095012354,2252199253442562,2251980210110466,2252130533965826,2251812706385922,2251963030241282,2251817001353218,2252027454750722,2251975915143170,2252018864816130,2252134828933122,2252177778606082,2251808411418626,2252139123900418,2251842771156994,2252014569848834,2533674226089984,2533807370010625,2533871794651137,2533811665305601,2533880384323585,2533687110729728,2533652751122432,2533876089225217,2534077953212417,2533614096678912,2815127728291840,3096525400113154,3096637064806400,3097040791797761,3377712613490690,3378099160547330,3377708318523394,3377734088327170,3377854347411458,3377871527280642,3377888707149826,3377905887019010,3377884412182530,3378030441070594,3378112045449218,3377862937346050,3378103455514626,3377914476953602,3377931656822786,3377901592051714,3377923066888194,3377880117215234,3377742678261762,3377893002117122,3378039031005186,3377725498392578,3378081980678146,3377729793359874,3377875822247938,3377927361855490,3377746973229058,3377867232313346,3377897297084418,3377918771920898,3378069095776258,3378034736037890,3377716908457986,3378077685710850,3377755563163650,3377858642378754,3377910181986306,3659209064644610,3659363683467266,3659578431832066,3659221949546498,3659230539481090,3659333618696194,3659380863336450,3659514007322626,3659337913663490,3659587021766658,3659342208630786,3659393748238338,3659398043205634,3659376568369154,3659355093532674,3659544072093698,3659346503598082,3659385158303746,3659372273401858,3659552662028290,3659367978434562,3659183294840834,3659191884775426,3659389453271042,3659505417388034,3659359388499970,3659187589808130,3659556956995586,3659350798565378,3659204769677314,3659406633140226,3659402338172930,3659329323728898,3659217654579202,3659574136864770,3659509712355330,3659200474710018,3940684053348354,3940842967138306,3940864441974786,3940701233217538,3940821492301826,3940830082236418,3940838672171010,3940868736942082,3941053420535810,3940804312432642,3940817197334530,3940847262105602,3940808607399938,3940812902367234,3940825787269122,3941620356218882,3940877326876674,3940855852040194,3940834377203714,3940873031909378,3940662578511874,3940675463413762,3940860147007490,3940679758381058,3940692643282946,3940705528184834,3940696938250242,3940666873479170,3941079190339586,3940851557072898,3940881621843970,3940658283544578,4222305050689538,4222335115460610,4222343705395202,4222545568858114,4222133251997698,4222502619185154,4222279280885762,4222159021801474,4222330820493314,4222283575853058,4222532683956226,4222171906703362,4222128957030402,4222506914152450,4222326525526018,4222438194675714,4222524094021634,4222137546964994,4222511209119746,4222549863825410,4222519799054338,4222348000362498,4222463964479490,4222536978923522,4222189086572546,4222150431866882,4222146136899586,4222433899708418,4222154726834178,4222292165787650,4222287870820354,4222541273890818,4222498324217858,4222356590297090,4222193381539842,4222352295329794,4222309345656834,4222163316768770,4222317935591426,4222459669512194,4222296460754946,4222515504087042,4222455374544898,4222322230558722,4222274985918466,4222141841932290,4222167611736066,4222300755722242,4222180496637954,4222339410427906,4222528388988930,4222494029250562,4222313640624130,4503801510756354,4503616827162626,4503651186900994,4503608237228034,4503612532195330,4503822985592834,4503629712064514,4503762856050690,4503818690625538,4503827280560130,4503814395658242,4504029144023042,4503625417097218,4503655481868290,4503771445985282,4503788625854466,4503775740952578,4503797215789058,4503642596966402,4503810100690946,4503792920821762,4503758561083394,4503767151017986,4503646891933698,4504570309902338,4503754266116098,4504003374219266,4503831575527426,4503634007031810,4503784330887170,4503805805723650,4503780035919874,4785242127663106,4785237832695810,4785121868578818,4785083213873154,4786045286547458,4785267897466882,4785126163546114,4785087508840450,4785250717597698,4785289372303362,4785504120668162,4785306552172546,4785272192434178,4785285077336066,4785280782368770,4785276487401474,4785091803807746,4785297962237954,4785302257205250,4785117573611522,4785233537728514,4785293667270658,4785478350864386,4785108983676930,4785130458513410,4785263602499586,4785259307532290,4785104688709634,4785246422630402,4785255012564994,4785229242761218,4785100393742338,5066927542173696,5348428304416770,5348179196313602,5348033167425538,5348041757360130,5348076117098498,5348243620823042,5348235030888450,5348037462392834,5348217851019266,5348230735921154,5348239325855746,5348071822131202,5348183491280898,5348226440953858,5348080412065794,5348222145986562,5348256505724930,5348200671150082,5348196376182786,5348054642262018,5348213556051970,5348247915790338,5348204966117378,5348058937229314,5348995240099842,5348187786248194,5348067527163906,5348454074220546,5348192081215490,5348050347294722,5348209261084674,5348252210757634,5629705700638722,5629877499330562,5629911859068930,5629701405671426,5629508132143106,5629529606979586,5629555376783362,5629903269134338,5629697110704130,5629692815736834,5629658455998466,5629881794297858,5629671340900354,5629525312012290,5629684225802242,5629709995606018,5629546786848770,5629667045933058,5629727175475202,5629838844624898,5629722880507906,5629516722077698,5629731470442498,5629830254690306,5629675635867650,5629834549657602,5629654161031170,5629868909395970,5629714290573314,5629542491881474,5629533901946882,5629718585540610,5629662750965762,5629688520769538,5629898974167042,5629679930834946,5629512427110402,5911142021988354,5911030352838658,5911180676694018,5911167791792130,5911343885451266,5911206446497794,5911356770353154,5911172086759426,5911133432053762,5911137727021058,5911159201857538,5911146316955650,5910991698132994,5911352475385858,5911202151530498,5911017467936770,5911008878002178,5911193561595906,5911305230745602,5911000288067586,5911313820680194,5911373950222338,5911197856563202,5911154906890242,5911163496824834,5911004583034882,5911386835124226,5911129137086466,5911150611922946,5910987403165698,5911176381726722,5910983108198402,5911378245189634,5911184971661314,5911189266628610,5911021762904066,6192518213206018,6192616997453826,6192505328304130,6192659947126786,6192625587388418,6192728666603522,6192694306865154,6192492443402242,6192608407519234,6192651357192194,6192681421963266,6192479558500354,6192634177323010,6192754436407298,6192496738369538,6192853220655106,6192664242094082,6192840335753218,6192513918238722,6192870400524290,6192453788696578,6192758731374594,6192707191767042,6193420156338178,6192788796145666,6192702896799746,6192750141440002,6192690011897858,6192715781701634,6192462378631170,6192621292421122,6192857515622402,6192711486734338,6192724371636226,6192878990458882,6192861810589698,6192720076668930,6192827450851330,6192612702486530,6192672832028674,6192599817584642,6192483853467650,6192848925687810,6192629882355714,6192866105556994,6192488148434946,6192647062224898,6192655652159490,6192642767257602,6192501033336834,6192638472290306,6192458083663874,6192874695491586,6192668537061378,6192470968565762,6192466673598466,6192604112551938,6192732961570818,6192685716930562,6192844630720514,6192763026341890,6192475263533058,6192677126995970,6192836040785922,6474336787496962,6474126334099458,6474130629066754,6474147808935938,6473950240440322,6473980305211394,6474323902595074,6474100564295682,6473958830374914,6474109154230274,6474293837824002,6473941650505730,6474134924034050,6474328197562370,6473967420309506,6474143513968642,6474096269328386,6474104859262978,6474156398870530,6474122039132162,6474306722725890,6474302427758594,6473971715276802,6474091974361090,6474079089459202,6473933060571138,6474087679393794,6474255183118338,6473937355538434,6474113449197570,6474152103903234,6474139219001346,6473954535407618,6474263773052930,6474083384426498,6474117744164866,6755618490744834,6755588425973762,6755627080679426,6755609900810242,6755738749829122,6755455281987586,6755803174338562,6755412332314626,6755622785712130,6755614195777538,6755592720941058,6755433807151106,6755597015908354,6755777404534786,6755730159894530,6755601310875650,6755442397085698,6755768814600194,6755605605842946,6755429512183810,6755566951137282,6755584131006466,6755631375646722,6755446692052994,6755811764273154,6755798879371266,6755579836039170,6755554066235394,6755562656169986,6755408037347330,6755781699502082,6755571246104578,6755416627281922,6755558361202690,6755425217216514,6755575541071874,7037029043863554,7037278151966722,7036883014975490,7036917374713858,7036904489811970,7037059108634626,7037243792228354,7036908784779266,7037063403601922,7037046223732738,7036921669681154,7037033338830850,7037089173405698,7037071993536514,7037102058307586,7037041928765442,7037084878438402,7037205137522690,7037097763340290,7037080583471106,7037273856999426,7037067698569218,7036930259615746,7036887309942786,7036900194844674,7037256677130242,7037054813667330,7037106353274882,7037050518700034,7037093468372994,7037252382162946,7037037633798146,7037076288503810,7037286741901314,7037213727457282,7036891604910082,7318538380181506,7318568444952578,7318551265083394,7318581329854466,7318546970116098,7318379466391554,7318366581489666,7318555560050690,7318534085214210,7318529790246914,7318559855017986,7318362286522370,7318405236195330,7318396646260738,7318512610377730,7318383761358850,7318564149985282,7318727358742530,7318761718480898,7318577034887170,7318357991555074,7318516905345026,7318572739919874,7318504020443138,7318508315410434,7318688704036866,7318392351293442,7318731653709826,7318521200312322,7318718768807938,7318753128546306,7318680114102274,7318748833579010,7318525495279618,7318375171424258,7318542675148802,7599978997743618,7600159386370050,7599832968855554,7599983292710914,7599850148724738,7600017652449282,7599880213495810,7600236695781378,7599841558790146,7599858738659330,7600052012187650,7599837263822850,7600056307154946,7600047717220354,7600026242383874,7599996177612802,7600013357481986,7600155091402754,7600193746108418,7600000472580098,7600223810879490,7599871623561218,7599867328593922,7600030537351170,7600034832318466,7600004767547394,7600206631010306,7600021947416578,7600163681337346,7599987587678210,7600228105846786,7600039127285762,7600043422253058,7599854443692034,7600202336043010,7599991882645506,7600009062514690,7881346604138498,7881316539367426,7881312244400130,7881458273288194,7881496927993858,7881501222961154,7881466863222786,7881453978320898,7881711676358658,7881522697797634,7881514107863042,7881355194073090,7881484043091970,7881518402830338,7881505517928450,7881531287732226,7881475453157378,7881307949432834,7881509812895746,7881526992764930,7881333719236610,7881698791456770,7881703086424066,7881462568255490,7881630071980034,7881325129302018,7881488338059266,7881329424269314,7881638661914626,7881681611587586,7881342309171202,7881668726685698,7881479748124674,7881492633026562,7881471158190082,7881677316620290,8163156588363778,8162800106078210,8162937545031682,8163113638690818,8162821580914690,8162989084639234,8163178063200258,8162946134966274,8162954724900866,8162993379606530,8162817285947394,8163152293396482,8162950429933570,8162980494704642,8162787221176322,8162976199737346,8162971904770050,8162782926209026,8162984789671938,8163186653134850,8162941839998978,8163006264508418,8163143703461890,8162928955097090,8163105048756226,8163173768232962,8162967609802754,8162808696012802,8162791516143618,8162804401045506,8163001969541122,8162830170849282,8162933250064386,8162959019868162,8162963314835458,8162997674573826,8444408226447362,8444425406316546,8444627269779458,8444275082461186,8444421111349250,8444262197559298,8444584320106498,8444442586185730,8444472650956802,8444305147232258,8444481240891394,8444464061022210,8444635859714050,8444631564746754,8444588615073794,8444283672395778,8444562845270018,8444399636512770,8444468355989506,8444476945924098,8444433996251138,8444296557297666,8444446881153026,8444429701283842,8444670219452418,8444640154681346,8444665924485122,8444622974812162,8444279377428482,8444455471087618,8444438291218434,8444318032134146,8444313737166850,8444459766054914,8444657334550530,8444270787493890,8444558550302722,8444580025139202,8444266492526594,8444451176120322,8444661629517826,8444292262330370,8444253607624706,8444648744615938,8444257902592002,8444416816381954,8444403931480066,8444674514419714,8444653039583234,8444618679844866,8444287967363074,8444644449648642,8444412521414658,8725758645239810,8725951918768130,8726093652688898,8725943328833538,8725956213735426,8725900379160578,8725891789225986,8725917559029762,8726102242623490,8725767235174402,8725750055305218,8725754350272514,8725741465370626,8725771530141698,8725913264062466,8725921853997058,8726123717459970,8725732875436034,8725883199291394,8725887494258690,8725947623800834,8725737170403330,8725896084193282,8725878904324098,8725926148964354,8726063587917826,8726054997983234,8725930443931650,8726106537590786,8725908969095170,8725939033866242,8725904674127874,8726136602361858,8726128012427266,8725780120076290,8725934738898946,9007611583070210,9007568633397250,9007362474967042,9007414014574594,9007529978691586,9007246510850050,9007212151111682,9007375359868930,9007401129672706,9007405424640002,9007418309541890,9007366769934338,9007598698168322,9007422604509186,9007426899476482,9007577216188416,9007216446078978,9007392539738114,9007371064901634,9007396834705410,9007379654836226,9007207856144386,9007431194443778,9007229330980866,9007388244770818,9007255100784642,9007538568626178,9007358179999746,9007242215882754,9007534273658882,9007409719607298,9007383949803522,9007581518299138,9007233625948162,9007353885032450,9007225036013570,9007602993135618,9288833152647170,9288850332516354,9288691418726402,9288880397287426,9288884692254722,9288867512385538,9288846037549058,9288897577156610,9288858922450946,9288682828791810,9288854627483650,9288863217418242,9289086555717634,9288717188530178,9288828857679874,9288901872123906,9289052195979266,9289077965783042,9288700008660994,9288721483497474,9288687123759106,9289056490946562,9288704303628290,9288730073432066,9288888987222018,9289004951339010,9288841742581762,9289043606044674,9289013541273602,9288708598595586,9288837447614466,9289073670815746,9288876102320130,9288906167091202,9288893282189314,9288871807352834,9570192165044226,9570531467460610,9570166395240450,9570174985175042,9570355373801474,9570205049946114,9570346783866882,9570179280142338,9570308129161218,9570527172493314,9570359668768770,9570381143605250,9570312424128514,9570325309030402,9570548647329794,9570342488899586,9570518582558722,9570183575109634,9570561532231682,9570162100273154,9570351078834178,9570363963736066,9570552942297090,9570479927853058,9570376848637954,9570372553670658,9570316719095810,9570333898964994,9570329603997698,9570368258703362,9570488517787650,9570303834193922,9570157805305858,9570338193932290,9570196460011522,9570321014063106,9851838941757442,9851993560580098,9851954905874434,9851671438032898,9851804582019074,9851654258163714,9851959200841730,9851843236724738,9852036510253058,9851658553131010,9851847531692034,9851826056855554,9852023625351170,9851632783327234,9851649963196418,9851808876986370,9851817466920962,9851800287051778,9851667143065602,9851783107182594,9851795992084482,9851821761888258,9851856121626626,9851834646790146,9852002150514690,9851851826659330,9851791697117186,9851641373261826,9851830351822850,9851637078294530,9852027920318466,9852006445481986,9851778812215298,9851787402149890,9851680027967490,9851963495809026,9851813171953666,10133296736239618,10133283851337730,10133326801010690,10133142117416962,10133288146305026,10133477124866050,10133107757678594,10133322506043394,10133146412384258,10133511484604418,10133498599702530,10133438470160386,10133318211076098,10133116347613186,10133309621141506,10133266671468546,10133275261403138,10133305326174210,10133124937547778,10133112052645890,10133270966435842,10133253786566658,10133292441272322,10133481419833346,10133502894669826,10133155002318850,10133279556370434,10133258081533954,10133129232515074,10133313916108802,10133331095977986,10133468534931458,10133262376501250,10133429880225794,10133301031206914,10133133527482370,10414582730063872,10414604206211072,10415269927387137,10414621384835072,10415128189796353,10414758822412288,10414797479084032,10414737349279744,10414629975031808,10414625679081472,10414780298035200,10415119599599617,10415299989209089,10414776002019328,10415102419861505,10414767412609024,10414617090719744,10414587026014208,10414591318818816,10415373005225985,10415153961762817,10414745938362368,10414754528690176,10414977867841536,10414750232805376,10414806066921472,10414763119542272,10414771707117568,10414788887642112,10415274219077633,10414728759148544,10414793181691904,10415317169930241,10415123896664065,10414741643657216,10415308579274753,10415334347702273,10415544820695042,10414784593657856,10415003636269056,10415115306532865,10415098125352961,10415312872800257,10414599910195200,10414801774772224,10414733053788160,10415166845288449,10414608501112832,10696461440712706,10696349771563010,10977730258534402,10977713078665218,10977734553501698,10977743143436290,10977893467291650,10977717373632514,10977532690038786,10977756028338178,10977579934679042,10977927827030018,10977854812585986,10977695898796034,10977708783697922,10977721668599810,10977567049777154,10977678718926850,10977700193763330,10977725963567106,10977923532062722,10977738848468994,10977902057226242,10977536985006082,10977687308861442,10977863402520578,10977558459842562,10977704488730626,10977936416964610,10977683013894146,10977859107553282,10977691603828738,10977571344744450,10977554164875266,10977541279973378,10977751733370882,10977906352193538,10977747438403586,10977549869907970,11259196644458498,11259398507921410,11259153694785538,11259209529360386,11259054910537730,11259033435701250,11259222414262274,11259183759556610,11259188054523906,11259024845766658,11259166579687426,11259205234393090,11259377033084930,11259338378379266,11259200939425794,11259402802888706,11259231004196866,11259226709229570,11259162284720130,11259046320603138,11259213824327682,11259007665897474,11259170874654722,11259157989752834,11259329788444674,11259179464589314,11259042025635842,11259029140733954,11259411392823298,11259011960864770,11259016255832066,11259368443150338,11259381328052226,11259334083411970,11259175169622018,11259192349491202,11259218119294978,11540663031562242,11540675916464130,11540654441627650,11540688801366018,11540499822804994,11540641556725762,11540886369861634,11540667326529538,11540508412739586,11540856305090562,11540637261758466,11540517002674178,11540705981235202,11540809060450306,11540504117772290,11540650146660354,11540671621496834,11540693096333314,11540680211431426,11540491232870402,11540701686267906,11540482642935810,11540852010123266,11540873484959746,11540658736594946,11540877779927042,11540645851693058,11540684506398722,11540529887576066,11540632966791170,11540813355417602,11540521297641474,11540804765483010,11540843420188674,11540628671823874,11540486937903106,11540697391300610,11822326987292674,11822107943960578,11822138008731650,11821974799974402,11822284037619714,11821957620105218,11822318397358082,11822159483568130,11821991979843586,11821983389908994,11822120828862466,11822176663437314,11822004864745474,11822129418797058,11822133713764354,11822103648993282,11822172368470018,11822288332587010,11822142303698946,11822125123829762,11822348462129154,11822180958404610,11821996274810882,11822168073502722,11822331282259970,11822150893633538,11822116533895170,11822279742652418,11822163778535426,11822112238927874,11821979094941698,11821966210039810,11822155188600834,11822361347031042,11822352757096450,11821961915072514,11822146598666242,12103793377280002,12103488434601986,12103617283620866,12103647348391938,12103608693686274,12103759017541634,12103638758457346,12103827737018370,12103466959765506,12103844916887554,12103651643359234,12103763312508930,12103591513817090,12103733247737858,12103445484929026,12103462664798210,12103578628915202,12103604398718978,12103436894994434,12103801967214594,12103737542705154,12103806262181890,12103587218849794,12103814852116482,12103849211854850,12103832031985666,12103819147083778,12103634463490050,12103797672247298,12103810557149186,12103432600027138,12103655938326530,12103643053424642,12103449779896322,12103625873555458,12103630168522754,12103823442051074,12103492729569282,12103471254732802,12103479844667394,12103612988653570,12103840621920258,12103621578588162,12103454074863618,12103595808784386,12103836326952962,12103428305059842,12103600103751682,12103441189961730,12103582923882498,12103458369830914,12103754722574338,12103574333947906,12384924753526786,12385229696204802,12385062192480258,12384954818297858,12385066487447554,12385105142153218,12385276940845058,12385298415681538,12385238286139394,12385268350910466,12385126616989698,12385053602545666,12384946228363266,12384907573657602,12385087962284034,12385070782414850,12385122322022402,12385281235812354,12385100847185922,12384911868624898,12384941933395970,12385096552218626,12384933343461378,12385083667316738,12385092257251330,12385079372349442,12385118027055106,12384929048494082,12384916163592194,12385057897512962,12385075077382146,12385311300583426,12385113732087810,12385302710648834,12385233991172098,12385109437120514,12385130911956994,12667344614588419,12948037909938176,12947861816410112,12947891881115648,12947874700591104,12947896175230976,12948046497513472,12948025023201280,12948248367267842,12947866109214720,12948016434053120,12948226892431362,12948428752158721,12948587663196161,12947878996606976,12948591960326145,12948441635684353,12948252658237440,12948050792415232,12948042203004928,12947857520459776,12947883291508736,12948076565168128,12948179647791106,12948067972087808,12947904765427712,12948033612808192,12948398687059969,12948218302496770,12948080857317376,12948402980192257,12948390096928769,12948020728758272,12948188237725698,12948063678038016,12948394389995521,12948012139675648,12948072269479936,12948003549544448,12948055088431104,12948059384053760,12948609142358017,12948007844184064,12948231187398658,12948583369670657,12948261252169730,12948029319086080,13229663216074754,13229371158298626,13229366863331330,13229530072088578,13229542956990466,13229353978429442,13229727640584194,13229508597252098,13229478532481026,13229547251957762,13229500007317506,13229358273396738,13229551546925058,13229512892219394,13229693280845826,13229525777121282,13229504302284802,13229723345616898,13229487122415618,13229379748233218,13229517187186690,13229349683462146,13229654626140162,13229706165747714,13229701870780418,13229332503592962,13229658921107458,13229538662023170,13229482827448322,13229555841892354,13229534367055874,13229341093527554,13229495712350210,13229521482153986,13229491417382914,13229336798560258,13229736230518786,13511198322262018,13510846134943746,13511133897752578,13511030818537474,13511168257490946,13511013638668290,13510987868864514,13510824660107266,13510974983962626,13511211207163906,13511022228602882,13510992163831810,13510816070172674,13510970688995330,13510957804093442,13510966394028034,13510962099060738,13510811775205378,13510983573897218,13511129602785282,13510807480238082,13511202617229314,13510979278929922,13511138192719874,13511181142392834,13511017933635586,13511000753766402,13510854724878338,13510828955074562,13511009343700994,13511005048733698,13510996458799106,13510953509126146,13510841839976450,13511176847425538,13511026523570178,13510833250041858,13792686184595458,13792574515445762,14073937824907266,14073980774580226,14073766026215426,14074131098435586,14073929234972674,14074152573272066,14073774616150018,14073942119874562,14073950709809154,14073912055103490,14073804680921090,14073757436280834,14073778911117314,14073967889678338,14073959299743746,14074148278304770,14074083853795330,14073783206084610,14073761731248130,14073791796019202,14073903465168898,14074118213533698,14073916350070786,14073924940005378,14073972184645634,14073907760136194,14073955004776450,14073933529939970,14073946414841858,14074049487765504,14073920645038082,14074126803468290,14074088148762626,14073976479612930,14073963594711042,14073796090986498,14074079558828034,14074161163206658,14355631838855168,14356065630420993,14355812227416065,14637098232840194,14636904959311874,14636728865652738,14636715980750850,14636883484475394,14637033808330754,14636909254279170,14636926434148354,14636711685783554,14637102527807490,14636913549246466,14637081052971010,14636874894540802,14636750340489218,14636707390816258,14636917844213762,14636999448592386,14636879189508098,14636922139181058,14637059578134530,14636724570685442,14636862009638914,14636741750554626,14636870599573506,14636896369377282,14636754635456514,14636892074409986,14636900664344578,14636866304606210,14636930729115650,14636853419704322,14636887779442690,14636857714671618,14637076750860288,14637068160991232,14636746045521922,14636733160620034,14637029513363458,14918341281382402,14918401410924546,14918332691447810,14918186662559746,14918573209616386,14918345576349698,14918229612232706,14918379936088066,14918556029747202,14918388526022658,14918358461251586,14918504490139650,14918182367592450,14918190957527042,14918199547461634,14918216727330818,14918328396480514,14918221022298114,14918474425368578,14918208137396226,14918577504583682,14918405705891842,14918392820989954,14918551734779906,14918225317265410,14918371346153474,14918543144845314,14918336986415106,14918397115957250,14918375641120770,14918349871316994,14918384231055362,14918354166284290,14918203842428930,14918534554910722,14918367051186178,14918508785106946,14918362756218882,15200250042712065,15200061062709248,15200026703101952,15481725017915393,15481729313013761,15481501679812608,15481463025369088,15481536039419904,15481720724520961,15762998132801536,16044412980887554,16044275541934082,16044284131868674,16044224002326530,16044090858340354,16044357146312706,16044241182195714,16044108038209538,16044258362064898,16044339966443522,16044378621149186,16044262657032194,16044382916116482,16044335671476226,16044387211083778,16044099448274946,16044254067097602,16044348556378114,16044468815462402,16044232592261122,16044301311737858,16044120923111426,16044503175200770,16045044341080066,16044266951999490,16044249772130306,16044451635593218,16044309901672450,16044490290298882,16044314196639746,16044077973438466,16044125218078722,16044477405396994,16044112333176834,16044082268405762,16044129513046018,16044086563373058,16044279836901378,16044352851345410,16044331376508930,16044481700364290,16044288426835970,16044464520495106,16044344261410818,16044236887228418,16044485995331586,16044498880233474,16044473110429698,16044095153307650,16044116628144130,16044103743242242,16044228297293826,16044305606705154,16044292721803266,16044297016770562,16044494585266178,16044327081541634,16044374326181890,16044142397947906,16044460225527810,16044271246966786,16044245477163010,16044318491607042,16044138102980610,16325600208879618,16325948088123394,16325720467963906,16325879368646658,16326360403345409,16325565849141250,16325561554173954,16325780597506050,16325574439075842,16325952396197890,16325557259206658,16325776302538754,16326510727004161,16325711878029314,16325703288094722,16325724762931202,16325746237767682,16325909431713792,16325849316982786,16325767712604162,16325604503846914,16326356108247041,16325754827702274,16325578734043138,16325763417636866,16325759122669570,16325741942800386,16325737647833090,16325772007571458,16325595913912322,16325733352865794,16325750532734978,16325729057898498,16325583029010434,16325707583062018,16325591618945026,16325716172996610,16607401595961346,16607435955699714,16607238387204098,16607234092236802,16607886919729153,16607362941255682,16607393006026754,16607049408643074,16607036523741186,16607405890928642,16607354351321090,16607358646288386,16888829320560640,16888898041413634,17170304298516482,17170373017993218,17451938190458881,17451624650571776,17451757801570304,17451921008951297,17451835110391808,17451946778689537,17452213066137601,17451663305408512,17451886648229889,17451762094374912,17451908123525121,17452041267838977,17451903829606401,17451860878753792,17451865175031808,17451512986206208,17451882355097601,17452015498100737,17451646124883968,17451895240130561,17452152938299393,17451676192538624,17452002607562753,17451925304639489,17451968253329409,17452161528299521,17451873765359616,17452191587696641,17452157232414721,17451680484687872,17451650419785728,17451994025164801,17451843701374976,17451633240178688,17451787865554944,17451856585752576,17451667599458304,17451487218761728,17451482918879232,17451912418623489,17451998314430465,17451869468884992,17451474327961600,17451470036664320,17451452857974784,17451826520064000,17451491508486144,17452281786531841,17451654715801600,17451951074967553,17451942485229569,17451899535032321,17452079922872321,17451478623977472,17452028379529217,17451916714180609,17451461443780608,17451929598951425,17451598885486592,17451933895426049,17451641830375424,17451671896850432,17451852285607936,17451517281697792,17451637537308672,17451839406276608,17451628946456576,17451659011424256,17733327268478978,17733142584885250,17733224189132802,17732966491226114,17732932131487746,17733301498675202,17732936426455042,17733262843969538,17733258549002242,17733091045277698,17733138289917954,17733082455343106,17732957901291522,17733335858413570,17733108225146882,17732970786193410,17733155469787138,17733121110048770,17733129699983362,17733086750310402,17733322973511682,17733103930179586,17733099635212290,17732940721422338,17733254254034946,17733305793642498,17733151174819842,17733095340244994,17733292908740610,17732949311356930,17733146879852546,17733078160375810,17733125405016066,17733133994950658,17732953606324226,17733112520114178,17732979376128002,17733116815081474,18014699165581312,18296376005099521,18296333053657089,18296290105163776,18296285808885760,18295894966796288,18295912148893696,18296393185689601,18296363120590849,18296212795686912,18296187024506880,18296586458431489,18295877788106752,18296367415361537,18295942211829760,18296294399016960,18296182731702272,18296311578361857,18296320170262529,18296264336408576,18296268631506944,18296281515884544,18296298695491584,18296354529083393,18296324465164289,18295937916338176,18296371708821505,18296328759738369,18296341644312577,18296307285229569,18296023815618560,18296577868431361,18296582162546689,18296251450195968,18296345939083265,18296350234771457,18296260040523776,18296337348755457,18296358825558017,18578181693374465,18577571803693056,18577928286371841,18577752192450560,18577391415328768,18577558918266880,18577902514405377,18577563212251136,18577567506300928,18577533147021312,18578091494539265,18577554622644224,18578112972980225,18577893932007425,18577550326628352,18577524557414400,18577378530820096,18577546031726592,18577979831615489,18577537444151296,18577941174681601,18577915404943361,18577576099381248,18577361350623232,18577374234804224,18577898221273089,18577580391530496,18577382825721856,18577541737218048,18577528853299200,18859794121949186,18859029617770498,18858879293915138,18858840639209474,18859051092606978,18859012437901314,18858874998947842,18859033912737794,18858978078162946,18858999552999426,18858990963064834,18858982373130242,18859055387574274,18858870703980546,18859021027835906,18858986668097538,18859227186266114,18859038207705090,18859252956069890,18858866409013250,18859042502672386,18858836344242178,18858853524111362,18859008142934018,18858857819078658,18858849229144066,18859016732868610,18859046797639682,18859003847966722,18858995258032130,18858832049274882,18859025322803202,19140530351112194,19140508876275714,19140517466210306,19140457336668162,19140332782616578,19140453041700866,19140526056144898,19140315602747394,19140465926602754,19140324192681986,19140311307780098,19140521761177602,19140495991373826,19140307012812802,19140504581308418,19140702149804034,19140483106471938,19140491696406530,19140667790065666,19140341372551170,19140500286341122,19140328487649282,19140487401439234,19140637725294594,19140345667518466,19140697854836738,19140461631635458,19140513171243010,19140470221570050,19140478811504642,19140354257453058,19140710739738626,19140676380000258,19140474516537346,19140680674967554,19140629135360002,19422361812205569,19422181419646976,19422357517172737,19703579091009536,19703553322844162,19704094487019521,19985028299423746,19985054069227522,20267057325604865,20266503276920834,20266529046724610,20266559109267456,20267053030572033,20547716252303360,20548549482315777,20547900936355840,20547690480402432,20547707662696448,20548201590161409,20547888049225728,20548416331513857,20547729136615424,20548085626109952,20547832215371776,20548407740858369,20548562367545345,20548214468116481,20547879459618816,20547905228505088,20548433509285889,20547681891647488,20548218761183233,20548223058247681,20548077029425152,20548300374343681,20548266006872065,20547686187597824,20547892343275520,20547875163602944,20548227351379969,20547870868701184,20548055561011200,20547896640667648,20547853690273792,20547840805240832,20547866574192640,20548472166809601,20547836510863360,20547720546418688,20547857983995904,20547703367794688,20547699071778816,20547845099945984,20548296079638529,20547827920732160,20547849394388992,20547883755241472,20547862281125888,20548253123346433,20548412034383873,20548287489376257,20829487588835328,20829461814902784,20829217002225664,20829174056484864,20829298606014464,20829212706734080,20829569189412864,20829599255560193,20829740992036865,20829186939289600,20829607844052993,20829363025936384,20829642205757441,20829620729479169,20829633615953921,20829758171578369,20829358731952128,20829625025167361,20829152578502656,20829543421902848,20829612139151361,20829556306280448,20829646499217409,20829526240591872,20829521948770304,20829582075625473,20829534830919680,20829637910986753,20829573485887488,20829457522098176,20829616434708481,20830020164845569,20829560599281664,20829311495110656,20829564895559680,20829629319479297,20829852658827265,20829169757192192,20829655092428801,20829603550134273,20829161164308480,20829650797920257,20829586368757761,20829861248827393,20829539126804480,20829594962755585,20829856952942593,21110992625336320,21110790768885762,21110649034964994,21110803653787650,21111005517250562,21110670509801474,21110812243722242,21110807948754946,21110640445030402,21110846603460610,21110833718558722,21110984042414082,21110679099736066,21110786473918466,21110666214834178,21110777883983874,21110958272610306,21110636150063106,21110825128624130,21110631855095810,21110842308493314,21110782178951170,21110923912871938,21110829423591426,21110838013526018,21110657624899586,21110816538689538,21110674804768770,21110953977643010,21110850898427906,21110653329932290,21110795063853058,21110855193395202,21111001215205376,21111022697119746,21110820833656834,21110799358820354,21111026992087042,21392480492322816,21673736421507074,21673783666147330,21673968349741058,21673762191310850,21673994119544834,21673749306408962,21673805140983810,21673620457390082,21673796551049218,21673740716474370,21673598982553602,21673792256081922,21673624752357378,21673594687586306,21673959759806466,21674002709479426,21673964054773762,21673981234642946,21673637637259266,21673882450395138,21673581802684418,21673852385624066,21673727831572482,21673813730918402,21673779371180034,21673830910787586,21673787961114626,21673972644708354,21673603277520898,21673753601376258,21673590392619010,21673976939675650,21673611867455490,21673873860460546,21673775076212738,21673856680591362,21673616162422786,21673843795689474,21673998414512130,21673839500722178,21673826615820290,21673732126539778,21673985529610242,21673770781245442,21673629047324674,21673745011441666,21673577507717122,21673818025885698,21673586097651714,21674543875358722,21673951169871874,21673989824577538,21673835205754882,21673878155427842,21673641932226562,21673607572488194,21673912515166210,21673723536605186,21673766486278146,21673848090656770,21673757896343554,21673800846016514,21673886745362434,21673809435951106,21955262932779008,21955237164679168,21955245752254464,21955228573827072,21955280112058368,21955250047156224,21955258638794752,21955597941800961,21955104020168704,21955808392839169,21955786917937153,21955078251347968,21955099724218368,21955267226828800,21955847050362881,21955782624411649,21955211394416640,21955576474763265,21955061071151104,21955232867549184,21955215688794112,21955254343172096,21955791215067137,21955241457745920,21955091135856640,21955593644736513,21955219983499264,21955713913651201,21955451912978432,21955271524220928,21955602234933249,21955207098925056,21955224277942272,21955202804285440,21955640890425345,21955056775200768,21955275819909120,21955348841627648,21955589351669761,21955065363955712,21955073955332096,21955572179861505,21955774034345985,21955082546249728,21955628006899713,21955095429971968,22236853879635970,22236922599112706,22518148466278400,22518311675166720,22518706813206529,22518711109091329,22518019617456128,22518646687465473,22518449115824129,22518410459545600,22518388987068416,22518492066021377,22518337446346752,22518487771250689,22518002438766592,22518444823019521,22518504953675777,22518453410398209,22518483476217857,22518307382362112,22518423346151424,22518436229021697,22518431935889409,22518414755823616,22518419049676800,22518500658184193,22518496359481345,22518470589743105,22518298795180032,22518376100855808,22518466294972417,22518461999415297,22518062566998016,22518702519091201,22518066862489600,22518457704316929,22518384691183616,22518474885431297,22518479179743233,22518036799553536,22518406166544384,22518393282166784,22799872552599554,22799803833122818,23081360420175874,23081158545637376,23081162839621632,23081317470502914,23081278815797250,23080960977993728,23081326060437506,23080973870170112,23081815684415489,23081287396556800,23081283110764546,23081553691541505,23081330355404802,23081540806574081,23363020078383105,23362835387318272,23363024365813761,23363028660912129,23362801027710976,23362762373267456,23362959948906497,23643975355006978,23644267422220288,23644014009712642,23644254527881218,23643979649974274,23644001124810754,23644271707750402,23644288887619586,23644233053044738,23643958184378368,23644280297684994,23644215873175554,23644031189581826,23644250232913922,23644245937946626,23644026894614530,23643996829843458,23643988239908866,23644297477554178,23644009714745346,23644237348012034,23643966774247424,23644018304679938,23644228758077442,23644224472612864,23643983944941570,23644241642979330,23644035484549122,23644284592652290,23643992534876162,23644022599647234,23644276012023808,23644207283240962,23643962479476736,23643971060039682,23644220168142850,23644005419778050,23644044074483714,23644263117815810,23644202988273666,23644039779516418,23644258822848514,23925798229704704,23926077402644481,23925768165720064,23925523349831680,23925394501009408,23926081696759809,23925806819442689,23925819708538881,23925793933230080,23925377322319872,23925789639376896,23925411683106816,23925763870621696,23925811112574977,23925785343098880,23925759574736896,23925823999377409,23925682265915392,23925686558720000,23925441746042880,23926085992644609,23925437450551296,23925712329900032,23925781050097664,23925750988996608,24207264616087552,24207556673470465,24207238847332352,24207298976088065,24207243142430720,24206852299030528,24207294685315073,24207157242626048,24206912427261952,24207256026808320,24207234551447552,24207187306610688,24207225965903872,24207552379355137,24206869477720064,24206916722753536,24207273206415360,24207281796153345,24206998326542336,24207260319809536,24206886659817472,24207161535430656,24207268909940736,24207286089285633,24207560969355265,24488735293177858,24488636508930050,24488327271284738,24488718113308674,24488739588145154,24488748178079746,24488473300172802,24488632213962754,24488713818341378,24488387400826882,24488344451153922,24488700933439490,24488391695794178,24488709523374082,24488743883112450,24488730998210562,24488662278733826,24488361631023106,24770175919390720,25051659474305026,25051595049795586,25051590754828290,25051650884370434,25051397481299970,25051612229664770,25051388891365378,25051603639730178,25051633704501250,25051642294435842,25051646589403138,25051629409533954,25051363121561602,25051616524632066,25051358826594306,25051418956136450,25051406071234562,25051607934697474,25051637999468546,25051625114566658,25051376006463490,25051414661169154,25051410366201858,25051354531627010,25051337351757826,25051672359206914,25051401776267266,25051345941692418,25051341646725122,25051582164893698,25051393186332674,25051655179337730,25051380301430786,25051384596398082,25051577869926402,25051371711496194,25051333056790530,25051620819599362,25051367416528898,25051350236659714,25051599344762882,25051663769272322,25333160230518786,25332782273396738,25333125870780418,25332941187186690,25332966956990466,25332924007317506,25332760798560258,25332975546925058,25333087216074754,25332979841892354,25333130165747714,25332773683462146,25332949777121282,25332954072088578,25333151640584194,25332928302284802,25333082921107458,25333117280845826,25332945482153986,25332958367055874,25332936892219394,25332777978429442,25332932597252098,25333147345616898,25332971251957762,25332962662023170,25332790863331330,25614609430872066,25614308783161346,25614605135904770,25614575071133698,25614553596297218,25614596545970178,25614527826493442,25614300193226754,25614545006362626,25614613725839362,25614566489915392,25614622315773954,25614532121460738,25614587956035586,25614313078128642,25614562194882560,25614579366100994,25614570784948224,25614295898259458,25614317373095938,25614540711395330,25614325963030530,25614304488194050,25614557891264514,25614321668063234,25895822411825154,25895766577250306,25896007095418882,25895792347054082,25895809526923266,25896088699797506,25895757987315714,25896015685353474,25896062929993730,25895839591694338,25896075814895618,25896050045091842,25895788052086786,25896041455157250,25895796642021378,25895775167184898,25895805231955970,25895831001759746,25896019980320770,25896028570255362,25895826706792450,25896097289732098,25896080109862914,25896002800451586,25896071519928322,25895818116857858,25896045750124546,25896037160189954,25895779462152194,25895835296727042,25896054340059138,25895800936988674,25895783757119490,25895843886661634,25896084404830210,25896058635026434,25895770872217602,25895813821890562,25896067224961026,25896024275288066,25895762282283010,25896032865222658,26177258736779266,26177537909653506,26177503549915138,26177245851877378,26177267326713858,26177529319718914,26177546499588098,26177275916648450,26177482075078658,26177263031746562,26177572269391874,26177494959980546,26177507844882434,26177254441811970,26177271621681154,26177563688173568,26177477780111362,26177525024751618,26177555089522690,26177490665013250,26177559393140736,26177250146844674,26459094499524609,26459352193040385,26458716536438784,26458798140227584,26458987120295936,26458686473502720,26459081609838593,26459064429772800,26458652112715776,26459055840493568,26459085902970881,26459038661017600,26458712240947200,26458669291405312,26459042956115968,26459098789773313,26458957056311296,26459360783040513,26459068723625984,26459060133494784,26459356487155713,26459025779589120,26459034365132800,26459073020100608,26458961349115904,26740505051791360,27021821112156162,27021975730978818,27021623543660546,27021816817188866,27021773867515906,27021782457450498,27021812522221570,27021799637319682,27021632133595138,27021829702090754,27021997205815298,27021825407123458,27021937076273154,27022001500782594,27021778162483202,27021808227254274,27021640723529730,27021791047385090,27021786752417794,27022010090717186,27021932781305858,27021610658758658,27021967141044226,27021803932286978,27021627838627842,27021980025946114,27021795342352386,27303966106517505,27303407762604034,27303455007244290,27303450710376448,27303678343774209,27303442120638464,27303716998283265,27303412047216640,27303708408676353,27584650809507840,27584912802578432,27584852665040898,27584921384517634,27584947154321410,27584878434844674,27584929974452226,27584882729811970,27866121482469378,27866125777436674,27866353410703362,27866422130180098,27866327640899586,27866340525801474,27866117187502082,27866108606611456,27866396360376322,27866387770441730,27866331935866882,27866344820768770,27866379189485568,27866404950310914,27866104311709696,27866374894452736,27866112892534786,27866357705670658,28147802617937922,28147819797807106,28147596459507714,28147832682708994,28147897107218434,28147879927349250,28147815502839810,28147871337414658,28147600754475010,28147828387741698,28147862747480066,28147806921752576,28429354912972800,28710550707240962,28710546412273666,28710524947136512,28710533527371778,28710769750573058,28710529232404482,28710829880115202,28710799815344130,28710812700246018,28710804110311426,28710778340507650,28710537822339074,28710782635474946,28710752570703874,28710821290180610,28710847059984386,28710765455605762,28710756865671170,28710542117306370,28710520652103680,28991999910739970,28992047155380226,28992296263483394,28992025680543746,28992322033287170,28992034270478338,28992008500674562,28992231838973954,28992253313810434,28992029975511042,28992279083614210,28992227544006658,28992313443352578,28992257608777730,28992266198712322,28992051450347522,28992270493679618,28992038565445634,28992240428908546,28992287673548802,28992060040282114,28992055745314818,28992017090609154,28992042860412930,28991982730870786,28991995615772674,28992304853417986,28992064335249410,28992261903745026,28992021385576450,28992291968516098,28991991320805378,28992249018843138,28992309148385282,28992244723875842,28992004205707266,28992283378581506,28991987025838082,28992068630216706,28992274788646914,28992012795641858,28992300558450690,29273990289686529,29273603737649152,29273629506535424,29273951629410305,29273612327256064,29273427645825024,29273809904599042,29273797019697154,29273595146731520,29273801307455488,29273779839827970,29273732595187714,29273620918697984,29273943047012353,29274162095390721,29273616621305856,29273947336278017,29273423349809152,29273590852222976,29274140609544193,29273573672419328,29273625214386176,29273586559156224,29273577968304128,29273440530333696,29273977401376769,29273431940726784,29273599441633280,29273582262026240,29273410465628160,29273736890155010,29273775544860674,29273766954926082,29273608033271808,29555095895408640,29555289173590016,29554885442338816,29554898326519808,29555345007509505,29554936984764416,29555306353655809,29554911217319936,29555422312988673,29555439496658945,29555048649129984,29555319240785921,29555310646788097,29555705785090049,29555332122083329,29555065828933632,29555576936857601,29555052945014784,29555100191096832,29555581230972929,29555091598016512,29555323533590529,29555503928246273,29555070123442176,29554876856532992,29554941280256000,29555366483787777,29554915507044352,29555061535866880,29555379374260225,29555452378087425,29555357893984257,29555387964063745,29555375075950593,29555276284166144,29555083009982464,29555327828164609,29555667137134593,29555186092933120,29555263404834816,29555465266397185,29555297763917824,29555280584310784,29555370777247745,29555293467443200,29555104483246080,29555057238736896,29555349303197697,29555087303966720,29555267699933184,29555615586254849,29555585526857729,29555353597509633,29554894035222528,29555637064695809,29555259108950016,29555336417181697,29555418023723009,29555181800128512,29555074418343936,29555362189017089,29554906917437440,29555340712738817,29555250518622208,29555211864113152,29555284877312000,29555022884044800,29555078714359808,29554902622535680,29555426606120961,29836446316167170,29836665359499266,29836708309172226,29836437726232578,29836463496036354,29836721194074114,29836420546363394,29836411956428802,29836652474597378,29836493560807426,29836472085970946,29836686834335746,29836729784008706,29836424841330690,29836480675905538,29836454906101762,29836489265840130,29836699719237634,29836656769564674,29836484970872834,29836669654466562,29836416251396098,29836433431265282,29836746963877890,29836442021199874,29836695424270338,29836712604139522,29836704014204930,29836734078976002,29836450611134466,29836476380938242,29836407661461506,29836716899106818,29836682539368450,29836691129303042,29836429136297986,29836738373943298,29836467791003650,29836725489041410,29836678244401154,29836459201069058,29836673949433858,30118187583143938,30117904115302402,30117917000204290,30117908410269698,30118196173078530,30118174698242050,30118170403274754,30118213352947714,30118166108307458,30118131748569090,30118178993209346,30118140338503682,30118153223405570,30117912705236994,30117925590138882,30118144633470978,30117921295171586,30117895525367810,30118157518372866,30118221942882306,30118209057980418,30118127453601794,30117899820335106,30118204763013122,30118161813340162,30399722688937986,30399318962012162,30399636789592066,30399709804036098,30399675444297730,30399705509068802,30399692624166914,30399361911685122,30399611019788290,30399447811031042,30399301782142978,30399714099003394,30399718393970690,30399366206652418,30399606724820994,30399688329199618,30399336141881346,30399684034232322,30681128944074754,30680845476233218,30680918490677250,30680884130938882,30681098879303682,30680862656102402,30681154713878530,30680914195709954,30681107469238274,30681137534009346,30681116059172866,30681146123943938,30681150418911234,30680892720873474,30680858361135106,30681124649107458,30681077404467202,30680879835971586,30680905605775362,30680888425906178,30681120354140162,30680832591331330,30680841181265922,30680909900742658,30680866951069698,30680854066167810,30681094584336386,30681103174270978,30681159008845826,30681141828976642,30680849771200514,30681163303813122,30680836886298626,30681090289369090,30681081699434498,30681111764205570,30680901310808066,30680871246036994,30681133239042050,30680897015840770,30680875541004290,30681171893747714,30962578154717186,30962565269815298,30962646874193922,30962341941084160,30962337646182400,30962556679880706,30962350521450498,30962552384913410,30962612514455554,30962629694324738,30962582449684482,30962346226483202,30962569564782594,30962621104390146,31244130439331842,31244108964495362,31244031655084034,31243761072144386,31243872741294082,31244147619201026,31244035950051330,31244117554429954,31244139029266434,31244061719855106,31243743892275202,31244143324233730,31244113259462658,31243726712406018,31243791136915458,31244134734299138,31243786841948162,31244100374560770,31525540989960194,31525257522118658,31525296176824322,31525278996955138,31525579644665858,31525549579894786,31525330536562690,31525571054731266,31525515220156418,31525317651660802,31525558169829378,31525313356693506,31525266112053250,31525326241595394,31525343421464578,31525566759763970,31525291881857026,31525532400025602,31525528105058306,31525274701987842,31525270407020546,31525304766758914,31525588234600450,31525287586889730,31525536694992898,31525321946628098,31525519515123714,31525334831529986,31525309061726210,31525300471791618,31525596824535042,31525553874862082,31525506630221826,31525575349698562,31525283291922434,31525562464796674,31525339126497282,31525261817085954,31525502335254530,31525545284927490,31525523810091010,31525583939633154,31807050332307456,31806736798449664,31806985906618368,31807106167341057,31806981613813760,31806822697730048,31807110460473345,31807385340542977,31807127648600065,31807080397996032,31807119052374017,31807063218520064,31807093281128448,31807058922635264,31807084690997248,31806693848907776,31807381044658177,31807097577603072,31807123347275777,31807088987275264,31807376750542849,31806741093941248,31807011677798400,31807067513618432,31806711031005184,31806676670218240,32088224657178626,32088233247113218,32088521009922050,32088490945150978,32088259016916994,32088241837047810,32088482355216386,32088237542080514,32088512419987458,32088503830052866,32088284786720770,32088228952145922,32088495240118274,32088246132015106,32088546779725826,32088254721949698,32088508125020162,32088267606851586,32088533894823938,32088486650183682,32088280491753474,32088263311884290,32088469470314498,32088220362211330,32088250426982402,32088499535085570,32088452290445314,32088293376655362,32088276196786178,32088529599856642,32088538189791234,32088478060249090,32088456585412610,32088465175347202,32088271901818882,32088289081688066,32369768351137794,32369738286366722,32369699631661058,32369751171268610,32370004574339074,32369746876301314,32369729696432130,32369686746759170,32369764056170498,32370013164273666,32369721106497538,32369695336693762,32369957329698818,32369991689437186,32369978804535298,32369725401464834,32369755466235906,32369983099502594,32369995984404482,32369940149829634,32369691041726466,32369974509568002,32369733991399426,32369944444796930,32369961624666114,32369742581334018,32369965919633410,32370000279371778,32369948739764226,32369716811530242,32369927264927746,32370008869306370,32369953034731522,32369970214600706,32370021754208258,32369987394469890,32369759761203202,32369931559895042,32369703926628354,32369712516562946,32369708221595650,32369682451791874,32651226147520514,32651419421048834,32651178902880258,32651445190852610,32651234737455106,32651196082749442,32651453780787202,32651191787782146,32651221852553218,32651243327389698,32651161723011074,32651462370721794,32651217557585922,32651239032422402,32651187492814850,32651423716016130,32651204672684034,32651475255623682,32651213262618626,32651406536146946,32651200377716738,32651428010983426,32651432305950722,32651436600918018,32651157428043778,32651488140525570,32651174607912962,32651230442487810,32651470960656386,32651402241179650,32651449485819906,32651496730460162,32651166017978370,32651170312945666,32651208967651330,32651183197847554,32651440895885314,32651479550590978,32651415126081538,32651466665689090,32651483845558274,32651458075754498,32932894397956098,32932653879787522,32932920167759874,32932683944558594,32932945937563650,32932902987890690,32932907282857986,32932679649591298,32932928757694466,32932645289852930,32932696829460482,32932933052661762,32932898692923394,32932705419395074,32932640994885634,32932924462727170,32932877218086914,32932701124427778,32932963117432834,32932911577825282,32932688239525890,32932941642596354,32932671059656706,32932971707367426,32932937347629058,32932958822465538,32932662469722114,32932632404951042,32932709714362370,32932675354624002,32932718304296962,32932950232530946,32932890102988802,32932636699918338,32932658174754818,32932881513054210,32932915872792578,32932692534493186,32932666764689410,32932954527498242,32932649584820226,32932714009329666,33214420919910402,33214352200433666,33214446689714178,33214377970237442,33214429509844994,33214382265204738,33495616718307330,33495625308241922,33495870121377794,33495827171704834,33495595243470850,33495603833405442,33495878711312386,33495646783078402,33495852941508610,33495590948503554,33495844351574018,33495883006279682,33495904481116162,33495642488111106,33495874416345090,33495599538438146,33495913071050754,33495668257914882,33495586653536258,33495900186148866,33495663962947586,33495582358568962,33495887301246978,33495921660985346,33495608128372738,33495895891181570,33495655373012994,33495840056606722,33495638193143810,33495848646541314,33495629603209218,33495857236475906,33495908776083458,33495861531443202,33495831466672130,33495659667980290,33495612423340034,33495621013274626,33495891596214274,33495633898176514,33495651078045698,33495865826410498,33777409524498434,33777413819465730,33777422409400322,33777418114433026,33777018682474498,33777310740250626,33777147531493378,33777405229531138,33777375164760066,33777061632147458,33777065927114754,33777383754694658,33777388049661954,33777035862343682,33777306445283330,33777392344629250,33777336510054402,33777001502605314,34058570980065280,34058777129254914,34058575265792002,34058871618535426,34058802899058690,34058807194025986,34058837258797058,34058854438666242,34058845848731650,34340325129715712,34621727082414082,34621752852217858,34621795801890818,34621804391825410,34621787211956226,34621757147185154,34621821571694594,34621525218951170,34621744271917056,34621520923983874,34621739967315970,34903262188797954,34903000195792898,34902995900825602,34903232124026882,34903296548536322,34903202059255810,34903227829059586,34903279368667138,34903214953725952,34903270778732546,35184797293215746,35184767228444674,35184436515962882,35184440810930178,35184685624066050,35184792998248450,35184410746159106,35184681329098754,35184711393869826,35184784408313858,35184758638510082,35184762933477378,35184750048575490,35184376386420738,35184780113346562,35184393566289922,35184788703281154,35184522415308802,35466031758704642,35466057528508418,35466182082560002,35466225032232962,35466074708377602,35466061823475714,35465872844914690,35466246507069442,35466259391971330,35466027463737346,35466250802036738,35466070413410306,35465890024783874,35465881434849282,35466053233541122,35466048938573826,35466216442298370,35465859960012802,35466023168770050,35466044643606530,35466229327200258,35466036053671938,35465877139881986,35466040348639234,35466079003344898,35466186377527298,35466066118443010,35747360699645954,35747631282585602,35747734361800706,35747343519776770,35747386469449730,35747730066833410,35747700002062338,35747738656768002,35747747246702594,35747712886964226,35747326339907586,35747390764417026,35747717181931522,35747635577552898,35747472368795650,35747708591996930,35747661347356674,35747742951735298,36029003178704896,36029200748511232,36029561529040897,36029011768311808,36029363968868353,36028827086880768,36028822790864896,36029007474327552,36028831381782528,36029359673769985,36029540050599937,36029342488068097,36029020359753728,36029346777333761,36028986000211968,36028973113475072,36028981703081984,36028848559751168,36028994587787264,36029355378999297,36029351070466049,36029630249435137,36029522882789377,36028977409359872,36028809906683904,36029625961807873,36029376842432513,36029016062361600,36028839971389440,36029389730742273,36029024655441920,36029028947591168,36028990293278720,36028998882689024,36310602722574336,36592129238958080,36873552676192256,36874072367169537,36873526902390786,37155001879363586,37155027649167362,37436476859875328,37718235304493057,37718054905839616,37717951832391682,37999529885630464,37999461165432832,37999834828177409,37999577129484289,37999620078567425,37999512706154496,37999568540008449,37999590014058497,37999534178631680,37999611490336769,37999517001252864,37999126157852672,37999190581575680,37999435394252800,37999826238177281,37999547065237504,37999581423403009,37999186286084096,37999598604517377,37999538474909696,37999602898829313,37999559948107777,37999615785107457,37999607195303937,37999160518639616,37999572834910209,37999143336542208,37999594308829185,37999431101448192,37999499819941888,37999641561792513,37999585718501377,37999542768762880,37999830532292609,37999508410269696,37999272185364480,37999555654975489,37999624374845441,38280901786468354,38280927556272130,38562402533048322,38562376763244546,38843778727149570,38843718597607426,38843770137214978,38843705712705538,38843752957345794,38843710007672834,38843946230874114,38843572568719362,38843847446626306,38843576863686658,38843881806364674,38843602633490434,38843950525841410,38843877511397378,38843581158653954,38843722892574722,38843735777476610,38843924756037634,38843748662378498,38843740072443906,38843727187542018,38843555388850178,38843598338523138,38843907576168450,38843765842247682,38843701417738242,38843774432182274,38843757252313090,38843929051004930,38843589748588546,38843731482509314,38843594043555842,38843559683817474,38843916166103042,38843714302640130,38843744367411202,38843563978784770,38843761547280386,39125352490139648,39125906541051905,39125404028502018,39125902246019073,39406879006654464,39688353983430656,39970043708768257,39969859013246976,39970090950262785,39970082363342849,39969785999196160,39969816072617984,39970052298637313,39969824665239552,39969777419354114,39969828958961666,39970047991742465,40251252396130306,40251303935737858,40532727374282752,40532778912579586,40814253888569346,40814202348961794,41095703084793858,41095698789826562,41095668725055490,41095458284961792,41095737444532226,41095664430088194,41095449681723394,41095466874961920,41095651545186306,41095484054634496,41095436796821506,41095681609957378,41095728854597634,41095733149564930,41095479759929344,41095655840153602,41095685904924674,41095707392802816,41095432501854210,41095475464503296,41095711674728450,41095441091788802,41095690199891970,41095488349339648,41095857717116929,41095694494859266,41095462579863552,41095445386756098,41095677314990082,41095471169404928,41095428206886914,41095423911919618,41095746034466818,41095453989470208,41095419616952322,41095720264663042,41095492644503552,41377242489290752,41377208130797568,41376825878380544,41377130821976064,41377534548705281,41377268262633473,41377233899159552,41377229606158336,41377525958705153,41377216721780736,41377294029357057,41377135114780672,41377298325045249,41377160895266816,41377199540469760,41377306915831809,41376890302103552,41377289734586369,41377328399122433,41377324097798145,41377246785765376,41376984801542144,41377319799095297,41377315505635329,41377302619357185,41377259668635649,41377311210864641,41377285439029249,41377530252820481,41377255375503361,41376971905892352,41376843057070080,41377272555438081,41377195255070720,41377212426682368,41377281143930881,41376860239167488,41376886006611968,41377238195437568,41377276850012161,41658670231912448,41940231097352193,41940364245336065,41940218216054785,41940274051219457,41940080775397376,41939840255524864,41940209622056961,41940265459056641,41940235392450561,41939775831801856,41940252572778497,41940484502126593,41940248278466561,41940183852580864,41939981985251328,41940269752516609,41940110839382016,41940085068201984,41940278352674817,41940162380103680,41940643418144769,41940256869253121,41939797309784064,41939835960033280,41939784417607680,41940261164285953,41940475912126465,41939986279235584,41939810192588800,41940196739186688,41940192442712064,41940158084218880,41939793010491392,41940239688007681,41940149493891072,41940222508859393,41940381431955457,41940480206241793,41940179559579648,41940166675202048,41939921859313664,41940226803433473,41940243982778369,41940188148858880,41940205328924673,42221624466145282,42221663120850946,42221560041635842,42221555746668546,42221658825883650,42221267983859714,42221641646014466,42221620185530368,42221654530916354,42221667415818242,42221310933532674,42221671710785538,42221633056079874,42221396832878594,42221250803990530,42221637351047170,42221315228499970,42221585811439618,42221285163728898,42502760151384066,42503146698440706,42502725791645698,42503129518571522,42502936232656896,42503112338702338,42502884705435650,42502871820533762,42503142403473410,42502785921187842,42502747263205376,42503314205638657,42503095158833154,42503035029291010,42502734371028992,42503133813538818,42503138108506114,42502931938672640,42503116633669634,42503099453800450,42503108043735042,42503030734323714,42502790216155138,42503060799094786,42502742971514882,42784200768225282,42784222243061762,42784505710903298,42784535775674370,42784570135412738,42784260897767426,42784411221622786,42784617380052994,42784235127963650,42784359682015234,42784591610249218,42784587315281922,42784583020314626,42784346797113346,42784209358159874,42784621675020290,42784574430380034,42784608790118402,42784510005870594,42784613085085698,42784604495151106,42784265192734722,42784217948094466,42784406926655490,43065838952579074,43065851837480962,43065680038789122,43065697218658306,43065688628723714,43066032226107394,43065727283429378,43065899082121218,43065873312317442,43065705808592898,43065972096565250,43065684333756418,43065722988462082,43066075175780354,43065843247546370,43066040816041986,43065869017350146,43065714398527490,43065830362644482,43065701513625602,43065834657611778,43066053700943874,43065847542513666,43066006456303618,43065886197219330,43065826067677186,43066002161336322,43066070880813058,43065903377088514,43065881902252034,43065890492186626,43065856132448258,43065894787153922,43065877607284738,43065718693494786,43065860427415554,43065864722382850,43066049405976578,43347541561901058,43347477137391618,43347309633667074,43347558741770242,43347515792097282,43347361173274626,43347296748765186,43347563036737538,43347520087064578,43347567331704834,43347537266933762,43347172194713602,43347554446802946,43347210849419266,43347528676999170,43347524382031874,43347356878307330,43347485727326210,43347159309811714,43347455662555138,43347215144386562,43347459957522434,43347481432358914,43347571626672130,43347150719877122,43347532971966466,43347167899746306,43347185079615490,43628926337679362,43628952107483138,43628956402450434,43629003647090690,43628995057156098,43629020826959874,43910495810879490,43910130738659330,43910109263822850,43910281062514690,43910500105846786,43910315422253058,43910289652449282,43910113558790146,43910474336043010,43910478631010306,43910104968855554,43910250997743618,43910397026631682,43910457156173826,43910263882645506,43910152213495810,43910328307154946,43910285357481986,43910255292710914,43910465746108418,43910431386370050,43910122148724738,43910306832318466,43910147918528514,43910298242383874,43910126443692034,43910143623561218,43910139328593922,43910276767547394,43910259587678210,43910268177612802,43910272472580098,43910324012187650,43910427091402754,43910311127285762,43910293947416578,43910302537351170,43910319717220354,44191730277548034,44191743162449922,44191614313431042,44191605723496450,44191760342319106,44191584248659970,44191786112122882,44191622903365634,44191588543627266,44191773227220994,44191601428529154,44192000860487682,44191597133561858,44191579953692674,44191734572515330,44191768932253698,44191794702057474,44191803291992066,44191790407090178,44191798997024770,44191756047351810,44191975090683906,44191781817155586,44191764637286402,44191747457417218,44191738867482626,44191627198332930,44191618608398338,44191777522188290,44191751752384514,44191725982580738,44192542026366978,44473849483100161,44473424281010176,44473651914211329,44473578899898369,44473583195193345,44473647619112961,44473385626566656,44473643331682305,44473458640617472,44473445755977728,44754736065478658,44754568561754114,44754697410772994,44754706000707586,44754684525871106,44754572856721410,44754693115805698,44754753245347842,44754718885609474,44754534202015746,44754555676852226,44754821964824578,44754577151688706,44754710295674882,44754551381884930,44754547086917634,44754701705740290,44754744655413250,44754925044039682,44754688820838402,44754675935936514,44754714590642178,44754740360445954,44754538496983042,44754680230903810,44754731770511362,44754748950380546,44754723180576770,44754564266786818,44754727475544066,44754529907048450,45036013471662082,45036198155255810,45036395723751426,45036271169699842,45036026356563970,45036193860288514,45036232514994178,45036009176694786,45036146615648258,45036301234470914,45036168090484738,45036211040157698,45036382838849538,45036039241465858,45036043536433154,45036236809961474,45036412903620610,45036034946498562,45036228220026882,45036159500550146,45036189565321218,45036017766629378,45036052126367746,45036155205582850,45036176680419330,45036335594209282,45036249694863362,45036241104928770,45036000586760194,45036004881727490,45036180975386626,45036296939503618,45036279759634434,45036223925059586,45036185270353922,45036309824405506,45036030651531266,45036172385452034,45036404313686018,45036215335124994,45036387133816834,45036400018718722,45036417198587906,45036253989830658,45036258284797954,45036936888451073,45036408608653314,45036202450223106,45036266874732546,45036047831400450,45036275464667138,45036391428784130,45036374248914946,45036163795517442,45036060716302338,45036219630092290,45036022061596674,45036305529438210,45036421493555202,45036262579765250,45036206745190402,45036150910615554,45036065011269634,45317870689255426,45317801969778690,45599358560698370,45599255481483266,45599246891548674,45599337085861890,45599865367363585,45599354265731074,45599324200960002,45599341380829186,45599010668347394,45599873957429249,45599715043573761,45599096567693314,45599259776450562,45599878252199937,45598950538805250,45599332790894594,45598984898543618,45599371445600258,45599272662073344,45599697863376897,45599285546254338,45599362855665666,45599676388671489,45599315611353088,45599014963314690,45598967718674434,45599367150632962,45880751932637186,45880726162833410,45880820652113922,46162308510580738,46162265560907778,46162274150842370,46162231201169410,46162278445809666,46162226906202114,46443384055136258,46443706177683458,46443581623631874,46443749127356418,46443701882716162,46443753422323714,46443585918599170,46443783487094786,46443740537421826,46443710472650754,46443396940038146,46725176859557890,46725215514263554,46725258463936514,46725224104198146,46725228399165442,46725181154525186,47007132864806913,47006651830108162,47007128569708545,47006720549584898,47006681893175296,47288126806622210,47288195526098946,47569644727697410,47569610367959042,47569597483057154,47569614662926338,47569356964888578,47569404209528834,47569623252860930,47569374144757762,47569601778024450,47569395619594242,47569378439725058,47569670497501186,47569348374953986,47569331195084802,47569408504496130,47569339785019394,47569593188089858,47569352669921282,47569387029659650,47569369849790466,47569653317632002,47569640432730114,47569391324626946,47569661907566594,47569636137762818,47569580303187970,47569417094430722,47569618957893634,47569335490052098,47569344079986690,47569649022664706,47569631842795522,47569361259855874,47569365554823170,47569382734692354,47569657612599298,47569399914561538,47569588893122562,47569412799463426,47569606072991746,47569576008220674,47569627547828226,47851158375170048,48132225319436288,48132603287175168,48132637636493312,48132693470412801,48132702060412929,48132719240151041,48132929693876225,48132616162836480,48132663416782849,48132285447667712,48132659109691393,48132710651920385,48132242498125824,48132641930346496,48132727841357825,48132530263031808,48132706356887553,48132629047214080,48132633340215296,48132560327016448,48132646226821120,48132598981525504,48132684880084993,48132534555836416,48132667703689217,48132611867738112,48132723538853889,48132925399760897,48133011309264897,48132933989761025,48132697766100993,48132654816559105,48132671996493825,48132371346948096,48132714946691073,48132289743159296,48132676291067905,48132680584986625,48132607571853312,48132259680223232,48132689175642113,48414061067829250,48413807664758786,48413794779856898,48413790484889602,48413820549660674,48414056772861954,48413764715085826,48413756125151234,48414082542665730,48413816254693378,48414043887960066,48414026708090882,48413829139595266,48413837729529858,48414073952731138,48414078247698434,48413773305020418,48414018118156290,48413760420118530,48413786189922306,48413833434562562,48413824844627970,48413769010053122,48414069657763842,48413842024497154,48414013823188994,48413803369791490,48414031003058178,48414022413123586,48413781894955010,48413777599987714,48414035298025474,48413799074824194,48413811959726082,48414086837633026,48414052477894658,48414065362796546,48414000938287106,48414039592992770,48414005233254402,48414095427567618,48414048182927362,48695209633644544,48695566116257792,48695510280437760,48695626244489217,48695548934946816,48695883943182337,48695609063112705,48695596180242432,48695321300369408,48695484509257728,48695669193572353,48695617657110529,48695660605341697,48695634833506305,48695656310308865,48695879647297537,48695604769980417,48695579000635392,48695643423834113,48695686384844801,48695647719522305,48695557525274624,48695673492275201,48695561821159424,48695175272857600,48695652013834241,48695621949915137,48695480216453120,48695875353182209,48695965553459201,48695591883767808,48695583293636608,48695630538407937,48695587589914624,48695664900112385,48695239696580608,48695639129063425,48695192451547136,48695235401089024,48695677790584833,48977058282405888,49258344265154560,49258954154835969,49258155287183360,49258687866404865,49258674975866881,49258271253790720,49258666393468929,49258833896603649,49258352852992000,49258619146993665,49258606263730177,49258614853533697,49258627744006145,49258314198679552,49258825306603521,49258559016534017,49258533247057920,49258554723401729,49258327084105728,49258885434441729,49258593377255425,49258335673712640,49258159587065856,49258670682734593,49258498888368128,49258580491829249,49258546133663744,49258125226278912,49258528954056704,49258150992281600,49258829600718849,49258516069679104,49258623445696513,49258434462679040,49258524653912064,49258636333809665,49258584786927617,49258700747833345,49258601967255553,49258322788089856,49258752302514177,49258460233859072,49258301314760704,49258297018875904,49258863956000769,49258133812084736,49258189650001920,49258305608482816,49258567610531841,49258589082484737,49258537543335936,49258185354510336,49258142404968448,49258571903336449,49258348560842752,49258146696265728,49258339967762432,49258541837189120,49258576197910529,49258597672943617,49258318493188096,49258713636143105,49258309905612800,49258331379728384,49258507478695936,49258511774580736,49258430169874432,49258915506880513,49258163876790272,49258610558763009,49539900845916162,49539677507616770,49539737637158914,49539926615719938,49539694687485954,49539681802584066,49539716162322434,49539935205654530,49539948090556418,49539707572387842,49539733342191618,49539711867355138,49539703277420546,49539698982453250,49539913730818050,49539741932126210,49539673212649474,49539943795589122,49539720457289730,49539918025785346,49539969565392898,49539905140883458,49539724752257026,49539952385523714,49539978155327490,49539982450294786,49539930910687234,49539960975458306,49539939500621826,49539668917682178,49539686097551362,49539729047224322,49539690392518658,49539995335196674,49539956680491010,49539986745262082,49821410182168578,49821393002299394,49821457426808834,49821156779098114,49821195433803778,49821191138836482,49821148189163522,49821186843869186,49821423067070466,49821405887201282,49821380117397506,49821414477135874,49821169664000002,49821161074065410,49821165369032706,49821173958967298,49821199728771074,49821461721776130,49821143894196226,49821427362037762,49821401592233986,49821152484130818,49821375822430210,49821182548901890,49821204023738370,49821453131841538,49821208318705666,49821388707332098,49821431657005058,49821216908640258,49821470311710722,49821178253934594,49821435951972354,49821444541906946,49821418772103170,49821212613672962,50102726244892672,50102885163991040,50102580217315328,50102696183922688,50103138566275073,50102764897894400,50103340437012481,50102958177189888,50102610284642304,50102756309860352,50103048375828481,50103379084967937,50103001128042497,50102575922413568,50102571626397696,50102936704712704,50102614580133888,50103250236735489,50102940999811072,50103005421961217,50102721949007872,50103258826735617,50102773490974720,50103044077125633,50103254530850817,50102855100006400,50102962473467904,50102992540663809,50102979653533697,50103099905998849,50102567335100416,50102953884188672,50103022603075585,50103288886132737,50103031193862145,50102949584044032,50102550156410880,50102588806922240,50102584517197824,50102983946665985,50102777783123968,50103112796536833,50103061263941633,50103095612866561,50102966767321088,50102932408827904,50103052674138113,50102752014237696,50102558742216704,50102769195286528,50103091323600897,50103035488894977,50102859392811008,50103177232711681,50102743423320064,50103014012616705,50103009717059585,50103125677965313,50102923818500096,50103039783665665,50102739128811520,50102734835744768,50103310364573697,50102747718221824,50103026897387521,50102996833468417,50102971063795712,50102760603844608,50102730538614784,50103018307387393,50384196925718528,50384600654675969,50384218400030720,50384205515325440,50384046603108352,50384570589577217,50384587773247489,50384222694932480,50384566300311553,50384033718927360,50384652209487873,50384252759834624,50384239874605056,50384763862843393,50384424560754688,50384209812455424,50384785341284353,50384854061678593,50384235580555264,50384231286571008,50384574882709505,50384050899124224,50384063783632896,50384201221603328,50384244171997184,50384226990948352,50384055194025984,50384248467685376,50384214105522176,50384613542985729,50665560238063616,50665882362249216,50666200190156801,50665903837609984,50665564533555200,50665908130611200,50665912426889216,50665886658134016,50665835117412352,50665517288521728,50665916720742400,50665946786889729,50665805053427712,50665890953232384,50666204484272129,50665921017217024,50666208780156929,50665646137344000,50665500109832192,50665933900087297,50665873771921408,50665809346232320,50665929606955009,50665942491987969,50665534470619136,50665951092604929,50947348748632064,50947391697453056,50947417468698625,50947310094123008,50947675166867457,50947361634844672,50947035214774272,50947421763600385,50947009447329792,50947378814320640,50946992265232384,50947426069381121,50947404583665665,50947365929943040,50947383107321856,50947121114054656,50947679460982785,50947357338959872,50946975086542848,50947387403599872,50947683756867585,50947395993927680,50947284322942976,50947280030138368,50947039510265856,50947408876797953,51228832315670528,51228853791031296,51228785070833664,51228862380310528,51228901046157313,51228467241943040,51228858084032512,51228823725342720,51228883853508609,51228896740311041,51229158733578241,51228450063253504,51228866674163712,51228836611555328,51229150143578113,51228484424040448,51228759299653632,51228510191484928,51228840906653696,51228596090765312,51229154437693441,51228879560376321,51228755006849024,51228870970638336,51228514486976512,51228892445409281,51510354537086977,51510629414404097,51510345947348992,51510311588265984,51509959400751104,51510234276364288,51510376011595777,51510260047544320,51510298702053376,51510328767741952,51510307292381184,51509942218653696,51510380317900801,51510633710288897,51510358830219265,51509989463687168,51510367422119937,51510341650874368,51510229983559680,51510371717021697,51510625120288769,51510315883364352,51510071067475968,51509925039964160,51509985168195584,51510333060743168,51510337357021184,51791829513797633,51791460144906240,51791786564976640,51791850988306433,51791812333731840,51791803744452608,51792100096999425,51791773678764032,51791855294676993,51791434377461760,51791546044186624,51792108686999553,51791842398830593,51791846693732353,51791790860075008,51791400016674816,51791782269091840,51792104391114753,51791833806929921,51791816627585024,51791820924059648,51791735024254976,51791417195364352,51791464440397824,51791808037453824,51791704960270336,51791709253074944,52073252945592322,52073257240559618,52072995247554562,52072990952587266,52073231470755842,52073016722391042,52072978067685378,52073235765723138,52073179931148290,52073244355657730,52073214290886658,52072973772718082,52073218585853954,52073261535526914,52072965182783490,52072948002914306,52073270125461506,52073008132456450,52073205700952066,52072956592848898,52072999542521858,52072960887816194,52072969477750786,52073003837489154,52073175636180994,52073209995919362,52073201405984770,52073227175788546,52073012427423746,52072986657619970,52073192816050178,52072943707947010,52072952297881602,52073188521082882,52073222880821250,52072982362652674,52354534658539522,52354543248474114,52354547543441410,52354676392460290,52354715047165954,52354684982394882,52354530363572226,52354727932067842,52354749406904322,52354401514553346,52354745111937026,52354388629651458,52354508888735746,52354517478670338,52354362859847682,52354556133376002,52354723637100546,52354392924618754,52354513183703042,52354538953506818,52354573313245186,52354500298801154,52354371449782274,52354526068604930,52354551838408706,52354569018277890,52354560428343298,52354354269913090,52354375744749570,52354577608212482,52354757996838914,52354358564880386,52354380039716866,52354521773637634,52354564723310594,52354504593768450,52636202911465474,52636198620561408,52636151371857922,52636190030561280,52636155666825218,52917351458340864,52917841082908673,52918030062583809,52917939878952961,52917931295375361,52917634927886336,52917523258081280,52917308509323264,52917484602851328,52917454537097216,52917836789841921,52917312802127872,52917888328597505,52917665001308160,52917901224443905,52917342868144128,52917849673105409,52917329984421888,52917325689520128,52917480305721344,52917304213372928,52917845379973121,52918034356109313,52917471716114432,52917467421671424,52917673591046144,52917510370951168,52918094488535041,52918171804041217,52917514665000960,52917918401363969,52917338574028800,52917497485328384,52917488895918080,52917823911886849,52917699351150592,52917527550230528,52917875445071873,52917463126966272,52917909820669953,52917518962393088,52917506076966912,52917677892370432,52917493190426624,52917458832588800,52918038653239297,52917321393504256,52917476011999232,52918055831011329,52917450242457600,52917501781344256,53199152864755714,53199105620115458,53480614954729472,53480623544467456,53480580596891650,53480889838927873,53480627841531906,53762188709855233,53761733439455232,53762034090049536,53761870881161216,53762184414298113,53761935301083136,53762132874428416,53762227376816129,53762145761034240,53761789277372416,53762094232895488,53762214480904193,53762223073067009,53762137170706432,53762059873026048,53762111401951232,53762158643904513,53762098515738624,53762128581427200,53762141464559616,53761759214436352,53761784981880832,53762115697049600,53761724853649408,53762107106066432,53761931007098880,53762201594626049,53762154350772225,53762171530706945,53762193004625921,53762592439992321,53762210186133505,53762218774364161,53762175825281025,53762313267183617,53762197300314113,53761883779629056,53762029797244928,53761742032338944,53762167237902337,53762205891100673,53762330456162305,53762429228089345,53761746331631616,53762433523974145,53762424933974017,53762180119199745,54043530550181890,54043577794822146,54325130072621057,54325121484128257,54325155844521985,54325125778702337,54324820834582528,54325087124127744,54325117189226497,54324739230793728,54325383477395457,54325065650470912,54325160139554817,54325048469159936,54324709167857664,54324984043470848,54324979750666240,54324734935302144,54325379181510657,54324691985760256,54325057059487744,54325142958047233,54324674807070720,54325104304193537,54325061355372544,54325147253735425,54325078534848512,54325164445597697,54325374887395329,54325095714455552,54325134367719425,54325151548047361,54325138663276545,54325009814650880,54325091417980928,54325082827849728,54325108597325825,54606484791361536,54606630821232641,54606648003198977,54606854158221313,54606605049331713,54606536332083200,54606566394691584,54606643704496129,54606849864105985,54606149783781376,54606596460838913,54606617934757889,54606459020181504,54606209912012800,54606166962470912,54606600755412993,54606454727376896,54606626524758017,54606557804560384,54606660897210369,54606622230446081,54606639411036161,54606579280904193,54606553511559168,54606613639987201,54606532036198400,54606295811293184,54606858454106113,54606592168034305,54606609344430081,54606570691166208,54606562100838400,54606635116265473,54606652301508609,54606214207504384,54606540627181568,54606583574036481,54606184144568320,54606523445870592,54606940064382977,54888054257614849,54888007012909056,54888067142647809,54888028488269824,54887641939181568,54887933996892160,54888041371402240,54888088629346305,54888075732123649,54888324840816641,54888329134931969,54887624760492032,54888032781271040,54888015603892224,54888045667876864,54888080026042369,54888071437549569,54887929704087552,54887659121278976,54888011308793856,54888058550747137,54887689184215040,54888084321140737,54888037077549056,54887998422581248,54887684888723456,54888333430816769,54887770788003840,54887959768072192,55169099737202688,55169434744782848,55169808407527425,55169804111642625,55169546414260225,55169542119358465,55169559297851393,55169245764714496,55169529234325505,55169116915892224,55169520644587520,55169164160925696,55169503464980480,55169512054259712,55169159865434112,55169404680798208,55169563606122497,55169490580602880,55169507757981696,55169516348112896,55169481989619712,55169408973602816,55169555002753025,55169486285504512,55169550708834305,55169473399291904,55169533527457793,55169134097989632,55169799817527297,55450574713913344,55450879657508864,55450720741425152,55451004211036161,55450982734692352,55450948376002560,55450978441691136,55451034274562049,55451038582898689,55451279088353281,55450987030970368,55451274794237953,55450591892602880,55450609074700288,55450634842144768,55450639137636352,55450961262215168,55451008504168449,55451025685544961,55450883950313472,55450995621298176,55450956966330368,55450909721493504,55451283384238081,55451029979463681,55450965557313536,55451017096069121,55450991324823552,55451021390970881,55732453418401792,55732066869313536,55732483480879105,55732749770948609,55732431943041024,55732114114347008,55732354634219520,55732509251272705,55732084051410944,55732462007681024,55732492072779777,55732470598008832,55732358927024128,55732504956174337,55732195718135808,55732109818855424,55732436238925824,55732423352713216,55732466301534208,55732513559674881,55732049690624000,55732440534024192,55732479187746817,55732384698204160,55732457711403008,55732758360948737,55732754065063937,55732500662255617,55732496367681537,56013906919751680,56013833903734784,56013958457589761,56013945574719488,56014233337659393,56013829610930176,56013541846024192,56013941278244864,56013915510734848,56013975638966273,56013979932884993,56013589091057664,56013984227983361,56013997126385665,56013936984391680,56013967049490433,56013584795566080,56013932688113664,56013859674914816,56013898329423872,56013559028121600,56014229041774593,56013954164457473,56013911215636480,56013988523540481,56013524667334656,56013971344392193,56013670694846464,56013928395112448,56014224747659265,56013992818311169,56295180037455874,56295171447521282,56295158562619394,56295218692161538,56295210102226946,56295197217325058,56295334656278530,56295154267652098,56295175742488578,56295394785820674,56295042598502402,56295205807259650,56295222987128834,56295407670722562,56295167152553986,56295162857586690,56295029713600514,56295008238764034,56295021123665922,56295201512292354,56295149972684802,56295326066343938,56295038303535106,56295399080787970,56295003943796738,56295051188436994,56295377605951490,56295214397194242,56295192922357762,56295012533731330,56295373310984194,56295227282096130,56295188627390466,56295184332423170,56295364721049602,56295025418633218,56576783857156096,56576891231666176,56576848282845184,56576474620755968,56576508981542912,56576934194970625,56577174701080577,56576491799445504,56576779564351488,56576929886306305,56576539044478976,56576904117878785,56576921297813505,56576865464156160,56576620648267776,56576856873172992,56577178995195905,56577183291080705,56576534748987392,56576886937812992,56576917002911745,56576908411011073,56576925592387585,56576861169057792,56576882641534976,56576878348533760,56576895528140800,56576809628336128,56858353325244416,56858357618245632,56858258833866752,56858396274524161,56857983958253568,56858095624978432,56858009725698048,56858653971906561,56858383387721729,56858014021189632,56858323259555840,56858391979622401,56858404863016961,56858379094589441,56858254541062144,56858370504851456,56858336145768448,56858658267791361,56858366208376832,56858284605046784,56858361914523648,56858340440866816,56858649677791233,56858400569098241,56858409171746817,56858331849883648,56857966776156160,56857949597466624,57139643620327426,57139609260589058,57139652210262018,57139463231700994,57139832598888450,57139755289477122,57139450346799106,57139759584444418,57139600670654466,57139647915294722,57139635030392834,57139617850523650,57139454641766402,57139639325360130,57139789649215490,57139630735425538,57139798239150082,57139433166929922,57139622145490946,57139824008953858,57139446051831810,57139604965621762,57139819713986562,57139626440458242,57139613555556354,57139802534117378,57139596375687170,57421277520855040,57702752497631232,57984227460186114,57984175920578562,57984218870251522,57984180215545858,57984244640055298,58265650911510528,58265693847093250,58265702437027842,58265655192387586,58265719616897026,58547233247985665,58547259018379265,58547250429362177,58547108694130688,58547216068640768,58546799457730560,58547263313936385,58547503832170497,58547254723280897,58547181710147584,58547220365115392,58547203185508352,58546859585961984,58546945485242368,58546816636420096,58546833818517504,58547246134788097,58547228954853377,58547499538055169,58547267622207489,58547134465310720,58547211774787584,58547241839886337,58547508128055297,58547207478509568,58547190301130752,58546863881453568,58547104401326080,58547186006032384,58547173119819776,58828338858164224,58828721111498753,58828274434441216,58828695341826048,58828609442021376,58828691045351424,58828686751498240,58828682455220224,58828725406072833,58828738290647041,58828334562672640,58828308795228160,58828579378036736,58828660982743040,58828656686858240,58828703931564033,58828291613130752,58828583670841344,58828716816596993,58828978808881153,58828729699991553,58828983104765953,58828648096530432,58828420461953024,58828665277841408,58828742598983681,58828678162219008,58828733995089921,58828708224696321,58828974514765825,59109839600615426,59110131658391554,59110084413751298,59109886845255682,59110110183555074,59109826715713538,59110062938914818,59109891140222978,59110135953358850,59110118773489666,59110144543293442,59110101593620482,59110097298653186,59109865370419202,59110054348980226,59109869665386498,59109835305648130,59110075823816706,59109818125778946,59110127363424258,59110067233882114,59109831010680834,59109848190550018,59109878255321090,59109852485517314,59109882550288386,59110080118784002,59109822420746242,59110093003685890,59109873960353794,59110050054012930,59110088708718594,59109843895582722,59109861075451906,59110105888587778,59109856780484610,59391632408641536,59391529331458048,59391666770018305,59391658178117633,59391615231262720,59391928762302465,59391692538839041,59391709732339713,59391924468187137,59391671064920065,59391533624262656,59391640998772736,59391933058187265,59391598049951744,59391284516093952,59391628115640320,59391370415374336,59391701128839169,59391610936164352,59391696834527233,59391645295247360,59391606640279552,59391241566552064,59391683948511233,59391636704919552,59391679653412865,59391653884985345,59391688244068353,59391258748649472,59391224387862528,59391288811585536,59391559395442688,59391705425313793,59391675359494145,59673103092350976,59673146041630721,59673176105549825,59673184697057281,59672759492804608,59673115975483392,59673133154828289,59673171811237889,59673403739013121,59673399444897793,59672716543262720,59673163220779009,59673197583990785,59672763788296192,59673188991827969,59673180402024449,59672733725360128,59673081616990208,59673150336204801,59673408034897921,59673141748826113,59672699364573184,59673201888985089,59672845392084992,59673120271958016,59673154630123521,59673167515549697,59673158925221889,59673004308168704,59673034372153344,59673193285287937,59673107385352192,59673085912875008,59673128861696001,59673111681630208,59673008600973312,59673090207973376,59673073026662400,59954582362062848,59954590952194048,59954320368795648,59954874421608449,59954234469515264,59954578069061632,59954208702070784,59954878715723777,59954642492260353,59954238765006848,59954586658340864,59954191519973376,59954595248668672,59954174341283840,59954565184684032,59954560889585664,59954616723439617,59954621018341377,59954556593700864,59954629606834177,59954603838406657,59954479284879360,59954625312915457,59954633901932545,59954883011608577,59954651095957505,59954509348864000,59954638197489665,59954483577683968,59954608131538945,59954646787948545,59954548003373056,60235954261590016,60236353692434433,60236022980083712,60235795345506304,60236035866296320,60235713741717504,60236121764659201,60235984325574656,60236130367700993,60235683678781440,60236126058971137,60235649317994496,60236083108249601,60235958554394624,60236065928904704,60236031570411520,60236357988319233,60236108878643201,60236053045772288,60236349398319105,60236117468971009,60236070225379328,60236057338773504,60236095995052033,60236091700150273,60236113174200321,60236100289626113,60236061635051520,60236078815117313,60236040161394688,60235666496684032,60235709446225920,60236104583544833,60517313275691010,60517300390789122,60517343340462082,60517132887064578,60517308980723714,60517424944840706,60517171541770242,60517321865625602,60517326160592898,60517334750527490,60517150066933762,60517523729088514,60517351930396674,60517330455560194,60517317570658306,60517145771966466,60517304685756418,60517339045494786,60517154361901058,60517347635429378,60517296095821826,60517162951835650,60798796833226752,60798620741402624,60798998699048960,60798783950749696,60799428199972865,60799338001137665,60799174792970241,60798629332320256,60798625037418496,60799157630599169,60798801129242624,60798818310291456,60799161919406081,60798779653619712,60798646510288896,60798809718849536,60799359479578625,60798826898128896,60799187681280001,60799140438605825,60799320833327105,60799149021003777,60798775359897600,60799144727871489,60798771064012800,60798792538324992,60798822605979648,60798637921927168,60798805424865280,60798899921682434,60798788243816448,60798607857221632,60798814012899328,61080447906938880,61080404974174208,61080482266546176,61080645492408321,61080894600380417,61080671245041665,61080890305675265,61080675540140033,61080469387280386,61080409252495360,61080666967310337,61361849886375936,61643230362337282,61643423635865602,61643208887500802,61643200297566210,61643196002598914,61643234657304578,61643324851617794,61643217477435394,61643213182468098,61643049973710850,61643226067369986,61643062858612738,61643054268678146,61643238952271874,61643204592533506,61643045678743554,61643243247239170,61643247542206466,61643032793841666,61643071448547330,61643251837173762,61643221772402690,61924920098947072,62206382181187586,62206145957986306,62206373591252994,62206012814000130,62206309166743554,62206128778117122,62205987044196354,62206025698902018,62206141663019010,62206197497593858,62206163137855490,62205995634130946,62206167432822786,62206124483149826,62206201792561154,62206352116416514,62206004224065538,62206137368051714,62206339231514626,62206188907659266,62206171727790082,62206369296285698,62206017108967426,62206180317724674,62206347821449218,62206158842888194,62206133073084418,62206184612691970,62206154547920898,62205982749229058,62206304871776258,62206300576808962,62206193202626562,62206150252953602,62205978454261762,62206176022757378,62205999929098242,62487749793349632,62769508237967361,62769224759836674,62769327833088000,63050579477331970,63050622427004930,63050626721972226,63050596657201154,63050772750860290,63050403383672834,63050777045827586,63050562297462786,63050725506220034,63050549412560898,63050583772299266,63050798520664066,63050592362233858,63050613837070338,63050609542103042,63050794225696770,63050407678640130,63050729801187330,63050570887397378,63050807110598658,63050618132037634,63050734096154626,63050605247135746,63050600952168450,63050411973607426,63050558002495490,63050442038378498,63050429153476610,63050450628313090,63050437743411202,63050588067266562,63050575182364674,63050764160925698,63050566592430082,63050424858509314,63050553707528194,63050420563542018,63332174712930306,63332200482734082,63613675460100098,63613649690296322,63895030168682496,63895562744954881,63894974334173184,63895223442866176,63894875550056448,63895047349796864,63894982924304384,63895369471688705,63894832601038848,63895116087164928,63894987218681856,63895038756716544,63894828305088512,63895412420313089,63894862665744384,63895000103714816,63895008694566912,63895043054108672,63895021577043968,63895554154299393,63895579922726913,63895442504613889,63895012987633664,63894995807830016,63894854076137472,63895618580250625,63894991513387008,63895017282142208,63894866959859712,63895399536787457,63895025873059840,63894845485219840,63895360881557505,63895558447824897,63894849781235712,63895365174624257,63895051641946112,63895034462666752,63895004397436928,63894836893843456,63895348003602433,63894978628812800,63895373764820993,64176676955815938,64458151932592130,64739291900805122,64739626908254210,64739412159889410,64739463699496962,64739437929693186,64739476584398850,64739403569954818,64739442224660482,64739644088123394,64739450814595074,64739416454856706,64739545303875586,64739446519627778,64739253246099458,64739420749824002,64739270425968642,64739429339758594,64739467994464258,64739622613286914,64739425044791298,64739279015903234,64739575368646658,64739579663613954,64739614023352322,64739648383090690,64739261836034050,64739472289431554,64739433634725890,64739287605837826,64739407864922114,64739300490739714,64739459404529666,64739605433417730,64739399274987522,64739296195772418,64739274720935938,64739257541066754,64739455109562370,65020728222875650,65020878546731010,65020762582614018,65020874251763714,65021123359866882,65021050345422850,65020895726600194,65020934381305858,65020925791371266,65020917201436674,65020930086338562,65020900021567490,65020887136665602,65020947266207746,65021054640390146,65020891431632898,65020921496403970,65020775467515906,65021089000128514,65020942971240450,65020732517842946,65021020280651778,65020771172548610,65020745402744834,65020736812810242,65020908611502082,65021101885030402,65020753992679426,65020766877581314,65020882841698306,65020938676273154,65021097590063106,65020749697712130,65021119064899586,65021080410193922,65020912906469378,65020951561175042,65020904316534786,65302379280990208,65302250433609728,65302993463803905,65303070779310081,65302241843412992,65302392165695488,65302203188641792,65302211777396736,65302722887155713,65302400756613120,65302409346220032,65302349217726464,65302220368773120,65302374987268096,65302740058177537,65302774420340737,65302817376632833,65302735765110785,65302791602307073,65302795895701505,65302787303866369,65302228959690752,65302387871186944,65302748648374273,65302800202596353,65302396460597248,65302808795938817,65302744355241985,65302370691383296,65302366396940288,65302572569198592,65302422233350144,65302933331378177,65302417937661952,65302362102235136,65302929037852673,65302224664788992,65302413640269824,65302954806280193,65302598326419456,65302606917206016,65302838854221825,65302207484592128,65302426525499392,65302576867639296,65302533903155200,65302937628508161,65302405052235776,65302383578120192,65302563976577024,65302357807857664,65302353512366080,65302237549297664,65302830270644225,65584000299958274,65584051839565826,65865556870627328,65865513929998336,65865788814196737,65865526816800770,65865475277193218,65865522522619904,65865745850630145,66147001792921602,66146950253314050,66428506841743360,66709990392266754,66709608140177410,66709977507364866,66709573780439042,66709638204948482,66709878723117058,66709908787888130,66709719809327106,66709981802332162,66709947442593794,66709883018084354,66709960327495682,66709994687234050,66709633909981186,66709956032528386,66709590960308226,66709986097299458,66709964622462978,66991083117150210,66991113181921282,66991465369239554,66991456779304962,66991065937281026,66991461074272258,66991469664206850,66991357995057154,66991439599435778,66991108886953986,66991353700089858,66991048757411842,66991435304468482,66991452484337666,66991383764860930,66991431009501186,66991422419566594,66991194786299906,67272558094123010,67272523734384642,67272931756277762,67272897396539394,67272910281441282,67272905986473986,67272588158894082,67272828677062658,67272583863926786,67272540914253826,67272936051245058,67272669763272706,67272858741833730,67272914576408578,67272944641179650,67272940346212354,67272927461310466,67272832972029954,67554385257955330,67554015890767874,67554406732791810,67554144739786754,67554063135408130,67554307948544002,67554419617693698,67554389552922626,67554058840440834,67553998710898690,67554402437824514,67554303653576706,67554380962988034,67554411027759106,67554372373053442,67554333718347778,67554033070637058,67554415322726402,67835619716104194,67835860234272770,67835886004076546,67835473687216130,67835808694665218,67835881709109250,67835533816758274,67835877414141954,67835864529240066,67835508046954498,67835782924861442,67835890299043842,67835538111725570,67835490867085314,67835847349370882,67835778629894146,67835855939305474,67835894594011138,68117356686475266,68117283672031234,68116948664582146,68117352391507970,68117257902227458,68117335211638786,68117008794124290,68117369571377154,68117094693470210,68117330916671490,68117339506606082,68117365276409858,68117322326736898,68117253607260162,68116983024320514,68117360981442562,68117013089091586,68116965844451330,68398840252989442,68398805893251074,68398835958022146,68398810188218370,68398483770703874,68398797303316482,68398458000900098,68398728583839746,68398814483185666,68398440821030914,68398827368087554,68398831663054850,68398569670049794,68398423641161730,68398844547956738,68398758648610818,68398732878807042,68398488065671170,68680302344470530,68680207855190018,68680285164601346,68680280869634050,68680044646432770,68680289459568642,68680306639437826,68679963042054146,68680315229372418,68679958747086850,68679932977283074,68680310934405122,68679915797413890,68679898617544706,68680203560222722,68680272279699458,68680319524339714,68680233624993794,68961760141246466,68961708601638914,68961785911050242,68961373594189826,68961777321115650,68961438018699266,68961678536867842,68961407953928194,68961747256344578,68961682831835138,68961764436213762,68961794500984834,68961390774059010,68961755846279170,68961433723731970,68961790206017538,68961519623077890,68961781616082946,69242848571031554,69243222233186306,69243153513709570,69242865750900738,69242882930769922,69242912995540994,69243157808676866,69243260887891970,69243256592924674,69243239413055490,69243265182859266,69242994599919618,69243235118088194,69242908700573698,69243183578480642,69243269477826562,69243252297957378,69243230823120898,69524628490616834,69524632785584130,69524383677480962,69524387972448258,69524323547938818,69524735864799234,69524357907677186,69524740159766530,69524658555387906,69524340727808002,69524705800028162,69524469576826882,69524710094995458,69524731569831938,69524697210093570,69524744454733826,69524727274864642,69524714389962754,69806133533736960,69806507196481537,69806232316411905,69806228023279617,69806219433541632,69806206546935808,69806288153411585,69806249497788417,69806240910409729,69806283858640897,69806245203214337,69806279563608065,69806301051617281,69806107762556928,69805944553668608,69806262382362625,69806266677133313,69806502900596737,69805832886943744,69805862949879808,69806296745574401,69806292446871553,69806172188246016,69806253791707137,69806103469752320,69805858654388224,69806215137067008,69806498606481409,69806202253934592,69806210843213824,69805798526156800,69806189369556992,69805815704846336,69806275267133441,69806185074458624,69806180778573824,69806270972821505,69806258086805505,70087745949532161,70087707293122561,70087741653843969,70087677230645248,70087582739267584,70087333631098880,70087660051169280,70087767423582209,70087754540318721,70087724474499073,70087763130122241,70087273502867456,70087758835351553,70087694410252288,70087685819924480,70087750243844097,70087776028393473,70087290681556992,70087973583192065,70087728768417793,70087771722285057,70087715887120385,70087608510447616,70087702999990273,70087419530379264,70087977877307393,70087720179924993,70087655755284480,70087307863654400,70087664346267648,70087337926590464,70087578446462976,70087733063516161,70087681523646464,70087737359073281,70087647164956672,70087690113777664,70087982173192193,70369139317080066,70368748475056130,70369169381851138,70368782834794498,70368765654925314,70369160791916546,70369117861183488,70369130727145474,70369122137210882,70369053417734146,70368812899565570,70369152201981954,70369057712701442,70369083482505218,70369165086883842,70369156496949250,70368808604598274,70369135022112770,70368894503944194,70650395260616706,70650403850551298,70650554174406658,70650601419046914,70650597124079618,70650549879439362,70650442505256962,70650618598916098,70650416735453186,70650412440485890,70650244936761346,70650378080747522,70650438210289666,70650451095191554,70650429620355074,70650275001532418,70650253526695938,70650433915322370,70650390965649410,70650232051859458,70650382375714818,70650579944210434,70650227756892162,70650262116630530,70650236346826754,70650266411597826,70650446800224258,70650588534145026,70650519814668290,70650425325387778,70650373785780226,70650421030420482,70650270706565122,70650399555584002,70650622893883394,70650249231728642,70650386670682114,70650408145518594,70932067814670336,71213216365084674,71213388163776514,71213332329201666,71213182005346306,71213383868809218,71213336624168962,71213572847370242,71213323739267074,71213568552402946,71213366688940034,71213186300313602,71213504127893506,71213529897697282,71213538487631874,71213353804038146,71213328034234370,71213194890248194,71213396753711106,71213220660051970,71213177710379010,71213469768155138,71213551372533762,71213199185215490,71213203480182786,71213392458743810,71213499832926210,71213212070117378,71213345214103554,71213349509070850,71213379573841922,71213547077566466,71213370983907330,71213358099005442,71213401048678402,71213224955019266,71213362393972738,71213340919136258,71213375278874626,71495017768157184,71776140541820928,71776539974041600,71776600104108033,71776574334763009,71776621582548993,71776557153386497,71776123363131392,71776514206531584,71776428306726912,71776827737571329,71776823443456001,71776544270516224,71776625888919553,71776505615548416,71776612990386177,71776595809796097,71776565747384321,71776157723918336,71776604400582657,71776832033456129,71776269390643200,71776535680188416,71776497025220608,71776458370711552,71776587219337217,71776608695615489,71776617283846145,71776531383910400,71776582923780097,71776591514107905,71776187786854400,71776552860254209,71776432599531520,71776570040188929,71776509911433216,71776183491362816,71776578628681729,71776527090909184,72057748668940290,72057636999790594,72057924762599426,72057624114888706,72057963417305090,72057954827370498,72057761553842178,72057929057566722,72057611229986818,72057787323645954,72057791618613250,72057641294757890,72057894697828354,72057606935019522,72057628409856002,72057976302206978,72057808798482434,72057602640052226,72057765848809474,72057752963907586,72057993482076162,72057997777043458,72057778733711362,72057813093449730,72057795913580546,72057774438744066,72057645589725186,72057817388417026,72057972007239682,72057619819921410,72057649884692482,72057804503515138,72057783028678658,72057821683384322,72057800208547842,72057757258874882,72057770143776770,72057825978351618,72339464164933634,72339137747419138,72339489934737410,72339094797746178,72339408330358786,72339494229704706,72339107682648066,72339081912844290,72339481344802818,72339485639770114,72339378265587714,72339133452451842,72339442690097154,72339477049835522,72339459869966338,72339382560555010,72339446985064450,72339279481339906,72339455574999042,72339073322909698,72339283776307202,72339232236699650,72339090502778882,72339219351797762,72620720085860352,72621033625747457,72620994970320897,72621218323628033,72620853236858880,72620934841565184,72620797416112128,72620608421494784,72621136698343425,72620788826243072,72621248373587969,72620823187095552,72620715791417344,72620943441723394,72620754446712832,72620552583118848,72620694320775168,72620763034746880,72620801711276032,72621093749719041,72620578354167808,72620741560172544,72620771627827200,72621046512680961,72621037920518145,72620767332139008,72621085159587841,72620930545680384,72621222618136577,72620698612203520,72620565471952896,72621123814817793,72621098042851329,72621020739928065,72620960610320384,72621269842264065,72621072282681345,72620556879069184,72621287022985217,72621338573864961,72620707202334720,72620814596374528,72620964904173568,72621205437939713,72620574059266048,72620982083518465,72621089452654593,72621299927875585,72620737265664000,72620599828086784,72621067999576065,72620724381745152,72620745855074304,72620956330688512,72620921955352576,72620810302128128,72621050810990593,72620848957095936,72620582654050304,72620806006505472,72620569763250176,72620732972597248,72621201143955457,72621209733824513,72620750151090176,72621003558813697,72621012149469185,72621231208792065,72620827481538560,72621256963588097,72620591237890048,72620758740697088,72621282725855233,72621304200757249,72620999264894977,72620952021041152,72621342858280961,72621007853912065,72620969200648192,72620947720896512,72621029330714625,72620844649545728,72620939136663552,72620990677516289,72621016444239873,72621059410558977,72620548293263360,72620561171873792,72620702906843136,72620775919976448,72620711496712192,72620784531537920,72620595532136448,72620780237291520,72620728675467264,72621278432329729,72620977790386177,72620857529663488,72621488905977857,72621042213978113,72621025034240001,72620883300843520,72620586943774720,72620818892193792,72620612716986368,72621252667703297,72621226914152449,72902345402482690,72902388352155650,72902379762221058,73183807483084800,73183927743807489,73183970693349377,73183880499101696,73183562670407680,73183833254264832,73183901974462464,73183498246684672,73183871908773888,73183962102890497,73183944923742209,73183906267463680,73184206917009409,73183910563741696,73183644274196480,73183949218316289,73183940628840449,73184013659013121,73184202621124609,73183889090084864,73183979284135937,73183957807333377,73183558374916096,73183953512235009,73183515425374208,73183932036939777,73183992167399425,73183983579168769,73183987873939457,73183966397661185,73183919154069504,73183803190280192,73183974987661313,73183532607471616,73183914857594880,73184198327009281,73183884794986496,73183996463677441,73465381255118850,73464990413094914,73465269585969154,73464973233225730,73465394140020738,73465007592964098,73465033362767874,73465389845053442,73465359780282370,73465346895380482,73465037657735170,73465278175903746,73465308240674818,73465282470871042,73465119262113794,73465355485315074,73465376960151554,73465364075249666,73465385550086146,73746813282418688,73746770333138944,73747195540799489,73746804698710016,74028249610780672,74028223834095618,74028842316333057,74309724580478978,74309698810675202,74591285447294976,74591336986443777,74591315514490881,74591349871214593,74591302627360769,74591375645147137,74591182366638080,74591581800562689,74591019157749760,74591276858015744,74591367050952705,74591354167689217,74591345576902657,74591573210562561,74591358462722049,74591255382654976,74590873130237952,74591169486651392,74591577504677889,74591289741148160,74591324101869569,74591517391912961,74591294037622784,74591371349655553,74591362757492737,74591208137818112,74590907491024896,74591306920493057,74591281151016960,74591319807295489,74591341281214465,74591178073833472,74590890308927488,74591263973638144,74590937553960960,74591246792327168,74591332690886657,74591328395788289,74590933258469376,74591259678539776,74872756145487872,75153930452205570,75154158085472258,75153883207565314,75154123725733890,75154166675406850,75154145200570370,75154153790504962,75154218215014402,75154128020701186,75154136610635778,75153960516976642,75153951927042050,75153947632074754,75153891797499906,75153956222009346,75153939042140162,75153900387434498,75154140905603074,75154170970374146,75153913272336386,75153934747172866,75154179560308738,75153908977369090,75154201035145218,75154192445210626,75153904682401794,75154162380439554,75154188150243330,75154196740177922,75153964811943938,75153896092467202,75153917567303682,75153943337107458,75153921862270978,75154183855276034,75154205330112514,75153878912598018,75154209625079810,75153887502532610,75153926157238274,75154149495537666,75154175265341442,75435439788457986,75435693191528450,75435602997215234,75435431198523394,75435396838785026,75435362479046658,75435680306626562,75435405428719618,75435615882117122,75435645946888194,75435633061986306,75435353889112066,75435676011659266,75435620177084418,75435598702247938,75435409723686914,75435375363948546,75435401133752322,75435414018654210,75435426903556098,75435418313621506,75435654536822786,75435658831790082,75435392543817730,75435358184079362,75435641651920898,75435379658915842,75435650241855490,75435624472051714,75435637356953602,75435628767019010,75435684601593858,75435611587149826,75435671716691970,75435663126757378,75435388248850434,75435371068981250,75435667421724674,75435435493490690,75435366774013954,75435383953883138,75435422608588802,75717151010914304,75998574426062850,75998625965670402,76280100942512130,76280049424793600,76561567351242752,76843012240637954,76842771722469378,76842733067763714,76842754542600194,76843055190310914,76842763132534786,76842737362731010,76842797492273154,76842793197305858,76842977880899586,76843020830572546,76842745952665602,76843016535605250,76843029420507138,76842780312403970,76842788902338562,76842741657698306,76842776017436674,76843025125539842,76842810377175042,76843033715474434,76842728772796418,76842767427502082,76843007945670658,76843046600376322,76843059485278210,76842806082207746,76842814672142338,76842999355736066,76842986470834178,76843042305409026,76842784607371266,76843003650703362,76843050895343618,76842973585932290,76842801787240450,76843068075212802,76842750247632898,76843038010441730,76842758837567490,76842995060768770,76842990765801474,77124525894664192,77406000871440384,77687475848216576,77968920739119106,77968877789446146,77968641566244866,77968967983759362,77968955098857474,77968942213955586,77968663041081346,77968916444151810,77968890674348034,77968912149184514,77968654451146754,77968650156179458,77968667336048642,77968933624020994,77968907854217218,77968925034086402,77968886379380738,77968950803890178,77968658746114050,77968873494478850,77968671631015938,77968903559249922,77968899264282626,77968645861212162,77968959393824770,78250361356156930,78250133722890242,78250374241058818,78250391420928002,78250400010862594,78250408600797186,78250146607792130,78250348471255042,78250430075633666,78250365651124226,78250142312824834,78250120837988354,78250434370600962,78250425780666370,78250395715895298,78250129427922946,78250417190731778,78250378536026114,78250352766222338,78250387125960706,78250138017857538,78250442960535554,78250116543021058,78250125132955650,78250382830993410,78531909347377154,78531591519797250,78531874987638786,78531883577573378,78531870692671490,78531617289601026,78531823448031234,78531608699666434,78531857807769602,78531600109731842,78531862102736898,78531866397704194,78531917937311746,78531612994633730,78531905052409858,78531853512802306,78531840627900418,78531836332933122,78531621584568322,78531604404699138,78531900757442562,78531595814764546,78531892167507970,78531849217835010,78531827742998530,78813384324218882,78813066496638978,78813079381540866,78813375734284290,78813075086573570,78813087971475458,78813302719840258,78813096561410050,78813345669513218,78813298424872962,78813328489644034,78813315604742146,78813392914153474,78813380029251586,78813083676508162,78813070791606274,78813332793196544,78813341383262208,78813367144349698,78813324194676738,78813337088229376,78813311309774850,78813358554415106,78813349964480514,78813092266442754,79094554358317058,79094842121125890,79094833531191298,79094850711060482,79094803466420226,79094545768382466,79094541473415170,79094786286551042,79094777696616450,79094820646289410,79094562948251650,79094571538186242,79094790581518338,79094816359972864,79094567243218946,79094867890929666,79094824941256706,79094859300995074,79094550063349762,79094773401649154,79094855006027778,79094799171452930,79094807769907200,79094558653284354,79094812064940032,79376317118808064,79376411590524929,79376256970719232,79376450262728705,79376338577719296,79376364345229312,79376381524574209,79376428771770369,79376012158042112,79376407294967809,79376282758938624,79375964913008640,79376321396408320,79376445953736705,79376360051376128,79376553342074881,79376647814643713,79376252677914624,79376394411376641,79376437361573889,79375947734319104,79376433066803201,79376441655033857,79376420180983809,79376106665213952,79376355755098112,79376402999869441,79375956320124928,79376398705950721,79376368641703936,79376093761830912,79376377231441921,79376334282620928,79376815320662017,79376415885295617,79376007862550528,79376390118572033,79376652108759041,79376424475295745,79376656404643841,79375969212301312,79376536147853313,79375982095106048,79376158181752832,79376153887768576,79376329986736128,79376351462096896,79657465655656448,79657800685584384,79657577324609536,79658041188876289,79657646045593600,79657628864479232,79658011116109825,79657444181016576,79657581620101120,79657972460617729,79658152850096129,79658032613883905,79657611683430400,79657946699399169,79657633158463488,79658161440751617,79657461361541120,79657448477032448,79657590209183744,79657427000885248,79657650337742848,79657959577354241,79658294591553537,79657431296835584,79657435589640192,79657637452513280,79658178618523649,79657452771934208,79657822138662912,79657607390363648,79657594503626752,79658217276047361,79657620272840704,79657573029969920,79658157143621633,79657968167485441,79657641749905408,79657624568856576,79657474245853184,79657598799511552,79657998232584193,79657603093233664,79657615977938944,79657585914478592,79657963870420993,79939275662426112,80220750630682626,80220699091075074,80220746335715330,80220737745780738,80220703386042370,80502225615912960,80783649042989058,80783696291627008,80783687701626880,80783653337956354,80783700582596610,81065132597510146,81065184137117698,81065179842150402,81064814769930242,81064797590061058,81065171252215810,81065205611954178,81065166979465216,81064831949799426,81064862014570498,81065218496856066,81064857719603202,81065201316986882,81065102532739074,81065209906921474,81065214201888770,81065188432084994,81064943618949122,81065106827706370,81346641956241408,81628125512859650,81628073973252098,81628112627957762,81628078268219394,81628121217892354,81909604784865282,81909282662318082,81909239712645122,81909596194930690,81910120190771201,81909286957285378,81909527475453954,81909557540225026,81909381456330752,81909609079832578,81909613374799874,81909643439570946,81909368561664002,81909634849636354,81909630554669058,81909591899963394,81909639144603650,81909531770421250,81909256892514306,81909222532775938,81909626259701762,82191118416084994,82190718984126466,82190761933799426,82191032516739074,82191088351313922,82191002451968002,82191590872580097,82191084056346626,82190757638832130,82190697509289986,82190706099224578,82191079761379330,82191105531183106,82190843538178050,82190714689159170,82191109826150402,82191114121117698,82191071171444738,82191101236215810,82190907962687490,82191006746935298,82190903667720194,82190731869028354,82472271260090370,82472503188324354,82472498893357058,82472473123553282,82472533253095426,82472266974298112,82472541843030018,82472550432964610,82472567612833794,82753978185351168,83035212622528514,83035195452293120,83035483205468162,83035491795402754,83035448845729794,83035470320566274,83035216917495810,83035453140697090,83035199737626626,83035517565206530,83035204032593922,83035191157260288,83035221212463106,83035440255795202,83035435960827906,83035208327561218,83035474615533570,83035423075926018,83035500385337346,83035427370893314,83316898052702210,83316928117473282,83316949592309762,83316691894272002,83316945297342466,83316975362113538,83316696189239298,83316670429003776,83316966772178946,83316910937604098,83316923822505986,83316666133970944,83316902347669506,83316958182244354,83316915232571394,83316687599304706,83316674714402818,83316683304337410,83316679009370114,83316992541982722,83598403094315010,83598385914445826,83598145405714432,83598390209413122,83598433159086082,83598171166081026,83598450338955266,83598162576146434,83598158281179138,83598149691244546,83598398799347714,83598441749020674,83598166871113730,83598373029543938,83598141110681600,83598420274184194,83598377324511234,83598424569151490,83598153986211842,83598467518824450,83879865186058242,83879942495469570,83879628962856962,83879646142726146,83879925315600386,83879620382425088,83879641847758850,83879878070960130,83879916725665794,83879624667889666,83879633257824258,83879860891090946,83879616087392256,83879895250829314,83879848006189058,83879908135731202,83879899545796610,83879637552791554,83879873775992834,83879852301156354,84161112539398144,84161353048064002,84161340163162114,84161108244496384,84161348753096706,84161116824862722,84161417472573442,84161383112835074,84161327278260226,84161121119830018,84161400292704258,84161335868194818,84161322983292930,84161391702769666,84442574620983298,84442828024053762,84442797959282690,84442596095819778,84442815139151874,84442866678759426,84442578915950594,84442875268694018,84442879572246528,84442566031048706,84442823729086466,84442583210917890,84442892448563202,84442858088824834,84442810844184578,84442845203922946,84442802254249986,84442883867279360,84442570326016002,84442587505885186,84442849498890242,84442591800852482,84724350245470210,84724320180699138,84724041007824898,84724062482661378,84724053892726786,84724303000829954,84724285820960770,84724324475666434,84724333065601026,84724358843990016,84724290115928066,84724277231026178,84724058187694082,84724045302792194,84724272936058882,84724066777628674,84724367425339394,84724298705862658,84724071072595970,84724354548957184,84724341655535618,84724049597759490,85005833808838658,85005571815833602,85005524571193346,85005588995702786,85005803744067586,85005842398773250,85005747909492738,85005829513871362,85005567520866306,85005790859165698,85005576110800898,85005528866160642,85005511686291458,85005507391324162,85005825218904066,85005580405768194,85005554635964418,85005799449100290,85005816628969474,85005563225899010,85005546046029826,85005782269231106,85005503096356866,85005773679296514,85005550340997122,85005520276226050,85005812334002178,85005533161127938,85005760794394626,85005541751062530,85005537456095234,85005786564198402,85005795154132994,85005808039034882,85005820923936770,85005515981258754,85005752204460034,85005777974263810,85005584700735490,85005765089361922,85005558930931714,85005769384329218,85287630915567617,85287330266021888,85287373234962433,85286939423932416,85287368922300417,85286986668965888,85287218616074240,85287364627398657,85287334562299904,85286956606029824,85287227188838400,85287313088643072,85287304497659904,85286982373474304,85287343152627712,85287338856153088,85287295907332096,85287626619682817,85287351742365697,85287356035497985,85287308793544704,85287231481643008,85287622325567489,85287257252823040,85287325973020672,85287068272754688,85286922245242880,85568839606206465,85568431582740480,85568826719076353,85568788065353728,85568813832863744,85568809539010560,85568706458353664,85568856782602241,85568843899011073,85568702165549056,85568899751346177,85568543249465344,85568805242732544,85569097302278145,85568895441371137,85568891142668289,85568800949731328,85568397221953536,85569101596393473,85568873962930177,85568461645676544,85568878259404801,85568414400643072,85568783770255360,85568732229533696,85568818129338368,85568852487503873,85568457350184960,85568886849208321,85568869668618241,85568831012208641,85568779474370560,85568848193585153,85568865372930049,85568882554437633,85569105892278273,85568770884042752,85568861078159361,85850190023294978,85850220096847872,85850241562902530,85849970979962882,85850185728327682,85850177138393090,85850202908196866,85850267332706306,85849953809006592,85850172843425794,85850250152837122,85849962390028290,85850232972967938,85849949514104832,85850198613229570,85849966684995586,85849958095060994,85850224391880704,86131664999940098,86131445956608002,86131437366673410,86131695073558528,86131699368591360,86131647820070914,86131652115038210,86131660704972802,86131742309351426,86131673589874690,86131707949613058,86131716539547650,86131428785717248,86131424490815488,86131725129482242,86131433071706114,86131441661640706,86131677884841986,86413135691776000,86412920933908482,86413200106782722,86413182926913538,86413122797371394,86413148567175170,86413152862142466,86413191516848130,86413217286651906,86412916638941186,86694623564595200,86976085635432450,86975870887067650,86976150059941890,86976098520334338,86976089930399746,86976077054279680,86976167239811074,86976102815301634,86975866592100354,86976072750530562,86976132880072706,86976141470007298,87257607856914434,87257577792143362,87257547727372290,87257642216652802,87257616446849026,87257625036783618,87257564916809728,87257560612274178,87257341568942082,87257573497176066,87257345863909378,87538923924881410,87538760716124162,87538730651353090,87538752126189570,87538902450044930,87538945399717890,87538949694685186,87538893860110338,87538941104750594,87538769306058754,87538898155077634,87538932514816002,87538919629914114,87538906745012226,87538743536254978,87539022709129218,87538928219848706,87538936809783298,87538747831222274,87538915334946818,87539121493377026,87538911039979522,87820592190980096,88102376386789377,88102148753326081,88102054264766464,88102007019929600,88101672012349440,88102084329406464,88102140163325953,88102122983981057,88101706373136384,88102080033128448,88102105802604545,88102157344833537,88102161639604225,88102088623259648,88101818039861248,88102153049800705,88101689191038976,88101732140580864,88102118689406977,88102101509472257,88102114394505217,88101976955944960,88102058560651264,88102380682674177,88102045674438656,88102165933064193,88102144459014145,88102372092674049,88102187426840577,88102131572998145,88102092919734272,88101981248749568,88102062855749632,88102075740127232,88102170229342209,88102127277899777,88101736436072448,88102135868555265,88383473408606210,88383542128082946,88664948386430978,88665017105907714,88664952696733696,88946492081700866,88946423378542592,89227576215928834,89227580510896130,89227730834751490,89227584805863426,89227748014620674,89227773784424450,89227735129718786,89227799554228226,89227752309587970,89227739424686082,89227786669326338,89227756604555266,89227902633443330,89227722244816898,89227769489457154,89227593395798018,89227795259260930,89227601985732610,89227979942854658,89227743719653378,89227610575667202,89227898338476034,89227597690765314,89227778079391746,89227949878083586,89227623460569090,89227782374359042,89227760899522562,89227790964293634,89227936993181698,89227945583116290,89227967057952770,89227906928410626,89227726539784194,89227765194489858,89227971352920066,89227614870634498,89509424871636992,89790929898307586,89790710854975490,89790856883863554,89790689380139010,89790564826087426,89790676495237122,89790693675106306,89790706560008194,89790852588896258,89790719444910082,89790702265040898,89790728034844674,89790551941185538,89790745214713858,89790534761316354,89790736624779266,89790723739877378,89790715149942786,89790530466349058,89790921308372994,89790672200269826,89790573416022018,89790899833536514,89790697970073602,89790886948634626,89790740919746562,89790680790204418,89790749509681154,89790526171381762,89790917013405698,89790848293928962,89790732329811970,89790543351250946,89790560531120130,89790895538569218,89790547646218242,89790685085171714,90072323270836226,90072297501032450,90353798250102786,90353849789710338,90635324766486530,90916799743721474,90916748204113922,91198223171649538,91198227466616834,91198197401845762,91198266121322498,91198291891126274,91198274711257090,91479741118742528,91761039988555778,91760885369733122,91761070053326850,91761143067770882,91761246146985986,91760898254635010,91761052873457666,91760868189863938,91761211787247618,91761035693588482,91761203197313026,91761061463392258,91760997038882818,91761014218752002,91760851009994754,91761005628817410,91761177427509250,91761009923784706,91761027103653890,91760893959667714,91761173132541954,91761065758359554,91760876779798530,91761074348294146,91761031398621186,91761018513719298,91761224672149506,91760872484831234,91760889664700418,91761001333850114,91761241852018690,91760855304962050,91761220377182210,91761057168424962,91761044283523074,91761048578490370,91760859599929346,91761022808686594,92042686764023810,92042545030103042,92042527850233858,92042472015659010,92042497785462786,92042330281738242,92042618044547074,92042373231411202,92042648109318146,92042716828794882,92042549325070338,92042493490495490,92042343166640130,92042540735135746,92042334576705538,92042476310626306,92042484900560898,92042510670364674,92042514965331970,92042325986770946,92042364641476610,92042347461607426,92042721123762178,92042489195528194,92042502080430082,92042360346509314,92042695353958402,92042506375397378,92042519260299266,92042351756574722,92042368936443906,92042699648925698,92042536440168450,92042523555266562,92042480605593602,92042652404285442,92042532145201154,92042678174089218,92323972762042370,92324196100341762,92324191805374466,92323985646944258,92323981351976962,92323805258317826,92324024301649922,92324153150668802,92323946992238594,92323843913023490,92323826733154306,92324020006682626,92323818143219714,92323848207990786,92324015711715330,92323977057009666,92323994236878850,92324002826813442,92323835323088898,92324127380865026,92323964172107778,92324007121780738,92323951287205890,92324123085897730,92323839618056194,92324161740603394,92323989941911554,92323822438187010,92323968467075074,92323800963350530,92323959877140482,92323809553285122,92323955582173186,92323998531846146,92324170330537986,92324174625505282,92324093021126658,92324011416748034,92605641025650688,92886746626981890,92886995735085058,92886905540771842,92887120289136642,92886909835739138,92886948490444802,92886922720641026,92886811051491330,92886789576654850,92887154648875010,92886892655869954,92886944195477506,92886759511883778,92886969965281282,92887012914954242,92886896950837250,92886793871622146,92887004325019650,92886772396785666,92887128879071234,92887163238809602,92887137469005826,92886961375346690,92886901245804546,92886931310575618,92886918425673730,92887150353907714,92886957080379394,92886927015608322,92886982850183170,92887167533776898,92887146058940418,92886935605542914,92887051569659906,92886785281687554,92887081634430978,92886750921949186,92886914130706434,92886939900510210,92886974260248578,92887017209921538,92886798166589442,92886978555215874,92887158943842306,92887055864627202,92886965670313986,92886806756524034,92886763806851074,92886755216916482,92887042979725314,92887141763973122,92887133174038530,92886987145150466,92887025799856130,92886780986720258,92886768101818370,92886776691752962,92886952785412098,92886991440117762,92887047274692610,92887000030052354,92887021504888834,92887008619986946,93168595274104832,93450070250881024,93731566702493696,94013020204433408,94294138690600962,94294362028900354,94294542417526786,94294185935241218,94294142985568258,94294370618834946,94294387798704130,94294374913802242,94294327669161986,94294297604390914,94294383503736834,94294280424521730,94294520942690306,94294392093671426,94294314784260098,94294130100666370,94294155870470146,94294525237657602,94294533827592194,94294508057788418,94294168755372034,94294151575502850,94294284719489026,94294538122559490,94294379208769538,94294529532624898,94294495172886530,94294173050339330,94294396388638722,94294422158442498,94294276129554434,94294366323867650,94294344849031170,94294331964129282,94294430748377090,94294310489292802,94294357733933058,94294147280535554,94294349143998466,94294426453409794,94294121510731778,94294340554063874,94294306194325506,94294417863475202,94294267539619842,94294336259096578,94294512352755714,94294164460404738,94294125805699074,94294181640273922,94294301899358210,94294134395633666,94294271834587138,94294323374194690,94294289014456322,94294400683606018,94294516647723010,94294503762821122,94294456518180866,94294353438965762,94294293309423618,94294160165437442,94294319079227394,94575927208247296,94857479494434816,95139250804555777,95139040350830593,95139048947843073,95138821323948032,95138937273516032,95139336710717441,95138812733227008,95138786963095552,95138795552964608,95138563608805376,95138980220370945,95139027467567105,95138941578575874,95138825618391040,95138928682532864,95138967337500672,95138580790902784,95138920092205056,95139207870676993,95138932978417664,95138993107173377,95138954467540992,95139044649533441,95138808438980608,95139199284346881,95138692457627648,95138881437696000,95138782668390400,95139255100440577,95138546430115840,95138950157893632,95138842786398208,95139487042830337,95138855666515968,95138988814368769,95138851373711360,95138963041026048,95139018876780545,95139036057370625,95138606558347264,95139014581092353,95139229345644545,95138610853838848,95139005990764545,95138778374144000,95139001695666177,95139246510440449,95139220754989057,95138997401747457,95138817029046272,95139010286321665,95139203574792193,95139031762599937,95138958747172864,95139057547411457,95138975927238657,95139225051004929,95139216460480513,95138799848128512,95139023171092481,95138804143357952,95420021418164226,95420261936332802,95420081547706370,95420240461496322,95420236166529026,95420060072869890,95420201806790658,95420180331954178,95420025713131522,95420064367837186,95420429440057346,95420072957771778,95420442324959234,95420274821234690,95420218986659842,95420326360842242,95420227576594434,95420433735024642,95420085842673666,95420420850122754,95420407965220866,95420244756463618,95420214691692546,95420287706136578,95420171742019586,95420356425613314,95420395080318978,95420403670253570,95420038598033410,95420047187968002,95420055777902594,95420438029991938,95420210396725250,95420292001103874,95420270526267394,95420030008098818,95420068662804482,95420193216856066,95420283411169282,95420051482935298,95420197511823362,95420257641365506,95420317770907650,95420279116201986,95420176036986882,95420206101757954,95420167447052290,95420231871561730,95420188921888770,95420425145090050,95420249051430914,95420223281627138,95420296296071170,95420412260188162,95420322065874946,95420184626921474,95420300591038466,95420416555155458,95420042893000706,95420034303066114,95420253346398210,95420330655809538,95701668193435650,95701526459514882,95701522164547586,95701891531735042,95701775567618050,95701706848141314,95701887236767746,95701698258206722,95701496394743810,95701556524285954,95701711143108610,95701655308533762,95701904416636930,95701547934351362,95701913006571522,95701801337421826,95701685373304834,95701745502846978,95701749797814274,95701766977683458,95701702553174018,95701689668272130,95701805632389122,95701715438075906,95701736912912386,95701672488402946,95701719733043202,95701676783370242,95701762682716162,95701792747487234,95701517869580290,95701539344416770,95701663898468354,95701500689711106,95701693963239426,95701560819253250,95701771272650754,95701681078337538,95701651013566466,95701724028010498,95701917301538818,95701754092781570,95701900121669634,95701728322977794,95701642423631874,95701530754482178,95701732617945090,95701908711604226,95701758387748866,95701509279645698,95701797042454530,95701659603501058,95701646718599170,95701870056898562,95701895826702338,95701882941800450,95701504984678402,95701878646833154,95701535049449474,95701543639384066,95701831402192898,95701513574612994,95983439511224321,95983761640849409,95983400857370625,95983435216453633,95983035783970816,95983345022337024,95983473877975041,95983443806912513,95983005721034752,95982988538937344,95983280596647936,95983357908549632,95983426625798145,95983675734687745,95983306367827968,95983375088025600,95983031488479232,95983448101224449,95983456692731905,95983362203648000,95983276303843328,95983452397699073,95983469579665409,95983383677304832,95983387971158016,95983460987502593,95983392267632640,95982971360247808,95983379381026816,95983117387759616,95983405150502913,95983418037305345,95983422331879425,95983671440572417,95983366516506624,95983680030572545,95983465280962561,95983482480689153,95983430920896513,95983353612664832,95983413744500737,96264742700384258,96264708340645890,96264648211103746,96264845779599362,96264867254435842,96264592376528898,96264746995351554,96264489297313794,96264695455744002,96264459232542722,96264686865809410,96264716930580482,96264639621169154,96264862959468546,96264721225547778,96264635326201858,96264850074566658,96264820009795586,96264463527510018,96264699750711298,96264609556398082,96264596671496194,96264622441299970,96264497887248386,96264506477182978,96264704045678594,96264832894697474,96264618146332674,96264446347640834,96264837189664770,96264510772150274,96264751290318850,96264450642608130,96264678275874818,96264605261430786,96264781355089922,96264682570842114,96264673980907522,96264472117444610,96264656801038338,96264841484632066,96264661096005634,96264480707379202,96264485002346498,96264626736267266,96264858664501250,96264454937575426,96264631031234562,96264613851365378,96264854369533954,96264643916136450,96264755585286146,96264669685940226,96264665390972930,96264828599730178,96264725520515074,96264652506071042,96264467822477314,96264476412411906,96264712635613186,96264600966463490,96264691160776706,96264493592281090,96545998616133634,96546243429269506,96546058745675778,96546282083975170,96545985731231746,96546252045549568,96546307853778946,96545977141297154,96546247724236802,96545994321166338,96546020090970114,96546002911100930,96546260609138690,96546011501035522,96546273494040578,96546239134302210,96546037270839298,96546269199073282,96546286378942466,96546264904105986,96546063040643074,96545990026199042,96545981436264450,96546007206068226,96546256314171394,96546054450708482,96546294968877058,96546234839334914,96546316443713538,96546277789007874,96546032975872002,96546050155741186,96546045860773890,96546303558811650,96546041565806594,96546015796002818,96546024385937410,96546028680904706,96546226249400322,96827400595963906,96827555214786562,96827692653740034,96827602459426818,96827619639296002,96827623934263298,96827731308445698,96827666883936258,96827791437987842,96827782848053250,96827413480865794,96827550919819266,96827800027922434,96827396300996610,96827649704067074,96827563804721154,96827409185898498,96827696948707330,96827645409099778,96827653999034370,96827795732955138,96827632524197890,96827422070800386,96827404890931202,96827628229230594,96827641114132482,96827434955702274,96827439250669570,96827456430538754,96827542329884674,96827430660734978,96827447840604162,96827662588968962,96827559509753858,96827812912824322,96827572394655746,96827615344328706,96827585279557634,96827460725506050,96827443545636866,96827568099688450,96827611049361410,96827589574524930,96827675473870850,96827769963151362,96827593869492226,96827546624851970,96827808617857026,96827778553085954,96827787143020546,96827671178903554,96827417775833090,96827705538641922,96827598164459522,96827426365767682,96827804322889730,96827817207791618,96827606754394114,96827636819165186,96827701243674626,96827580984590338,96827576689623042,96827658294001666,97109124681564162,97109081731891202,97109292185288706,97108922818101250,97108935703003138,97109073141956610,97109137566466050,97108879868428290,97109171926204418,97109051667120130,97108875573460994,97109244940648450,97109055962087426,97109060257054722,97109279300386818,97108914228166658,97109133271498754,97108888458362882,97109034487250946,97108931408035842,97109150451367938,97108897048297474,97109077436923906,97109064552022018,97109206285942786,97109253530583042,97109270710452226,97109120386596866,97109094616793090,97108918523133954,97109275005419522,97109266415484930,97108892753330178,97109283595354114,97109176221171714,97108901343264770,97109180516139010,97109086026858498,97109257825550338,97109047372152834,97109017307381762,97109262120517634,97109111796662274,97109167631237122,97108884163395586,97109287890321410,97109090321825794,97109043077185538,97109103206727682,97108909933199362,97109021602349058,97109030192283650,97109025897316354,97108871278493698,97109128976531458,97109068846989314,97109141861433346,97109107501694978,97109098911760386,97109038782218242,97109146156400642,97108905638232066,97390767161475074,97390732801736706,97390530938273794,97390548118142978,97390543823175682,97390616837619714,97390741391671298,97390372024483842,97390350549647362,97390496578535426,97390363434549250,97390500873502722,97390578182914050,97390505168470018,97390384909385730,97390642607423490,97390595362783234,97390582477881346,97390655492325378,97390565298012162,97390367729516546,97390522348339202,97390608247685122,97390526643306498,97390625427554306,97390728506769410,97390509463437314,97390591067815938,97390745686638594,97390573887946754,97390737096704002,97390651197358082,97390758571540482,97390621132587010,97390646902390786,97390406384222210,97390719916834818,97390393499320322,97390603952717826,97390539528208386,97390354844614658,97390586772848642,97390612542652418,97390552413110274,97390561003044866,97390359139581954,97390754276573186,97390599657750530,97390380614418434,97390749981605890,97390492283568130,97390535233241090,97390556708077570,97390762866507778,97390513758404610,97390389204353026,97390569592979458,97390518053371906,97390397794287618,97390681262129154,97390346254680066,97390376319451138,97390410679189506,97672280781160449,97672310847766529,97671885644234752,97672276486062081,97672242127896576,97672203472928768,97672224948289536,97672289371488257,97672207768813568,97672293667176449,97672194882600960,97672233537568768,97672272192143361,97672156228091904,97672302257963009,97672250717634561,97672237831421952,97672212063911936,97672306552995841,97672267897569281,97672297961488385,97672229241290752,97672255010766849,97672263602667521,97671838399201280,97671855581298688,97672336636051457,97672521300836353,97672529890836481,97672319437504513,97672130456911872,97672285076717569,97672525594951681,97671881348743168,97672315141226497,97672126164107264,97671967248023552,97671821220511744,97953669878906880,98235166330519552,98516641307295744,98798120570126338,98797751202938882,98798094800322562,98797935886532610,98797880051957762,98797918706663426,98798017490911234,98797884346925058,98797768382808066,98797759792873474,98798133455028226,98797734023069698,98797914411696130,98797875756990466,98797738318036994,98797892936859650,98797742613004290,98797785562677250,98797944476467202,98797755497906178,98797905821761538,98798000311042050,98797746907971586,98797940181499906,98797923001630722,98797978836205570,98797910116728834,98797897231826946,98797953066401794,98798124865093634,98797729728102402,98797965951303682,98797931591565314,98797987426140162,98797888641892354,98797764087840770,98798142044962818,98797957361369090,98798107685224450,98797927296598018,98798026080845826,98797725433135106,98798021785878530,98797996016074754,98797970246270978,98797781267709954,98797974541238274,98797901526794242,98798056145616898,98797871462023170,98797961656336386,98798129160060930,98798111980191746,98798116275159042,98798137749995522,98797948771434498,98798030375813122,98798103390257154,98797991721107458,98797867167055874,98797721138167810,98797772677775362,98797983131172866,99079355029127170,99079410863702018,99079234770042882,99079376503963650,99079423748603906,99079436633505794,99079591252328450,99079243359977474,99079621317099522,99079406568734722,99079578367426562,99079260539846658,99079367914029058,99079419453636610,99079389388865538,99079501058015234,99079496763047938,99079466698276866,99079612727164930,99079247654944770,99079393683832834,99079582662393858,99079449518407682,99079462403309570,99079402273767426,99079350734159874,99079209000239106,99079380798930946,99079432338538498,99079256244879362,99079226180108290,99079221885140994,99079531122786306,99079445223440386,99079458108342274,99079415158669314,99079363619061762,99079569777491970,99079617022132226,99079196115337218,99079475288211458,99079505352982530,99079586957361154,99079385093898242,99079217590173698,99079230475075586,99079346439192578,99079599842263042,99079372208996354,99079608432197634,99079342144225282,99079359324094466,99079428043571202,99079453813374978,99079604137230338,99079470993244162,99079204705271810,99079239065010178,99079595547295746,99079200410304514,99080162482978818,99079492468080642,99079213295206402,99079397978800130,99079440928473090,99361066229301250,99642515444400128,99924003296378882,99923685468798978,99924033361149954,99924037656117250,99923994706444290,99924011886313474,99923767073177602,99924007591346178,99923930281934850,99923925986967554,99923655404027906,99923638224158722,99924041951084546,99924029066182658,99923917397032962,99923681173831682,99923956051738626,99923621044289538,99924024771215362,100205461093154818,100205418143481858,100205452503220226,100486893120651264,100486605357121538,100486936069931008,100486983314243586,100486961839407106,100486880235028482,100486631126925314,100487335511588865,100486570997383170,100486875940061186,100486974724308994,100486867350126594,100486979019276290,100486588177252354,100486953249472514,100487494416007169,100486987609210882,100487498710777857,100486957544439810,100486906004832258,100487296847249409,100487318321954817,100486717026271234,100486635421892610,100486871644962818,100486991904178178,100486944659537922,100768346631897088,101049847368450050,101049821598646274,101331318050717698,101331361000390658,101331352410456066,101612810191110146,101612848845815810,101612548198105090,101612612622614530,101612565377974274,101612823076012034,101612797306208258,101612788716273666,101612582557843458,101612604032679938,101612608327647234,101612569672941570,101612531018235906,101612599737712642,101612853140783106,101612561083006978,101612793011240962,101612552493072386,101612539608170498,101612801601175554,101612831665946626,101612840255881218,101612775831371778,101612591147778050,101612818781044738,101612535313203202,101612573967908866,101612835960913922,101612805896142850,101612595442745346,101612578262876162,101612556788039682,101612526723268610,101612543903137794,101612784421306370,101612857435750402,101612827370979330,101612586852810754,101612866025684994,101612844550848514,101612814486077442,101612771536404482,101894396842803201,101894444090589185,101894645951496193,101894414022148097,101894426908622849,101894336714571776,101894439791886337,101894319533260800,101894255107571712,101894379661426689,101894409727377409,101894650245611521,101894332419473408,101894358188228608,101894280878751744,101894654541496321,101894401136721921,101894375368294401,101894250814767104,101894435498426369,101894431203655681,101894422612148225,101894091898683392,101893963049861120,101894448402268161,101894353891950592,101894392548229121,101894362482081792,101894388255424513,101894328123588608,101894405431820289,101894005999403008,101894010294894592,101894366778556416,101894418317836289,101893980231958528,101893945871171584,101894349598949376,102175536806100994,102175764439367682,102175502446362626,102175485266493442,102175794504138754,102175515331264514,102175725784662018,102175803094073346,102175721489694722,102175532511133698,102175755849433090,102175541101068290,102175528216166402,102175523921199106,102175498151395330,102175751554465794,102175562575904770,102175790209171458,102175734374596610,102175742964531202,102175785914204162,102175738669563906,102175476676558850,102175798799106050,102175545396035586,102175558280937474,102175511036297218,102175493856428034,102175519626231810,102175506741329922,102175549691002882,102175480971526146,102175781619236866,102175768734334978,102175760144400386,102175807389040642,102175747259498498,102175815978975234,102175553985970178,102175489561460738,102175773029302274,102175777324269570,102457007489024002,102457024668893186,102457200762552322,102457003194056706,102457222237388802,102457016078958594,102456998899089410,102457196467585026,102457239417257986,102457213647454210,102457278071963650,102457273776996354,102456964539351042,102457248007192578,102457256597127170,102457209352486914,102456968834318338,102457243712225282,102457020373925890,102457230827323394,102457265187061762,102457033258827778,102457192195424256,102457037553795074,102456977424252930,102457011783991298,102456973129285634,102456990309154818,102456981719220226,102457028963860482,102456986014187522,102456994604122114,102457290956865538,102457282366930946,102457252302159874,102457235122290690,102457226532356098,102738667172134912,103020189370744834,103020146421071874,103019957442510850,103020223730483202,103019940262641666,103020163600941058,103019983212314626,103020185075777538,103020159305973762,103020206550614018,103019935967674370,103020202255646722,103019966032445442,103019944557608962,103019961737478146,103019931672707074,103020240910352386,103020176485842946,103020197960679426,103019918787805186,103019927377739778,103020228025450498,103020150716039170,103020215140548610,103019987507281922,103020232320417794,103019914492837890,103019948852576258,103019974622380034,103020180780810242,103019978917347330,103019923082772482,103019953147543554,103019970327412738,103020172190875650,103020193665712130,103301329353244674,103301703015399426,103302227012812801,103301526921740290,103301320763310082,103301737375137794,103301733080170498,103301655770759170,103301707310366722,103301711605334018,103301342238146562,103301630000955394,103301625705988098,103301380892852226,103301531216707586,103301694425464834,103301724490235906,103301741670105090,103301355123048450,103301466792198146,103301385187819522,103301337943179266,103301728785203202,103583182273970178,103583203748806658,103583165118676992,103582830086651906,103583186568937474,103583130734362626,103583216633708546,103582860151422978,103583212338741250,103583177979002882,103582795726913538,103583208043773954,103583169389068290,103583199453839362,103582855856455682,103582812906782722,103583100669591554,103583104964558850,103582941755801602,103864640095453184,104146110765531138,104146076405792770,104146123650433026,104146072110825474,104146119355465730,104427628692242434,104427237850218498,104427255030087682,104427379595542528,104427637282177026,104427602922438658,104427529907994626,104427285094858754,104427525613027330,104427624397275138,104427220670349314,104427611512373250,104427632987209730,104427594332504066,104428131214884865,104427641577144322,104427366699237378,104427607217405954,104427590049071104,104427280799891458,104427555677798402,104709022065033218,104709060719738882,104709026360000514,104709073604640770,104709069309673474,104990548592492544,105272010671587330,105271976311848962,105271972016881666,105272019261521922,105272023556489218,105553494239739906,105553498534707202,105553485649805314,105553446995099650,105553451290066946,105834960625139714,105834921970434050,105834926265401346,105834969215074306,105834973510041602,106116444192374786,106116435602440194,106116448487342082,106116401242701826,106116396947734530,106397880514117634,106397850449346562,106397919168823298,106397936348692482,106397854744313858,106397605636210690,106397953528561666,106397957823528962,106397949233594370,106397579866406914,106397914873856002,106397545506668546,106397691535556610,106397562686537730,106397927758757890,106397932053725186,106397962118496258,106397609931177986,106397966413463554,106679462859505665,106679729145577473,106679424203030528,106679389850632194,106679411318652928,106679454265507841,106679037653942272,106679514395967489,106679449972375553,106679492921917441,106679922438832129,106679080603484160,106679488626229249,106679497216229377,106679325418848256,106679484331458561,106679475740803073,106679329711652864,106679471446884353,106679467152310273,106679720555577345,106679428496031744,106679441382637568,106679394137341952,106679402727669760,106679505807736833,106679523006939137,106679724849692673,106679480035901441,106679437086162944,106679054836039680,106679432792309760,106679084898975744,106679510102507521,106679501512704001,106679407023554560,106679355482832896,106679518694670337,106679020475252736,106679166502764544,106960701605412864,106960929242218497,106960963602939905,106960955012612097,106960830459543552,106960967898628097,106960916359348224,106960937836216321,106960980784447489,106960907769020416,106960997983780865,106960989372678145,106960950717513729,106960869114052608,106961204122288129,106961195532288001,106960559875686400,106960976489414657,106960882000265216,106960495451963392,106960886295363584,106960959308169217,106960641479475200,106960529812750336,106960705899397120,106960993671380993,106961199826403329,106960512630652928,106960516929945600,106960903472742400,106960985079218177,106960912062873600,106960899179741184,106960972192940033,106960877704380416,106960504037769216,106960942129020929,106960804688363520,106960555580194816,106961083883061249,106960946423595009,106960924949086209,106960800395558912,107242279665074176,107242034852397056,107242679098998785,107242447169650689,107242670508998657,107241970428674048,107242442875338753,107242438579650561,107242451466125313,107242030556905472,107242421400305665,107242464349388801,107242374156451840,107242399925796865,107242434284879873,107242417105731585,107242412810829825,107242674803113985,107242468665589761,107242391336058880,107242404218929153,107242305436254208,107242275372269568,107242455761158145,107242361272074240,107242429989322753,107242344090763264,107242352681091072,107242387039584256,107241987607363584,107242116456185856,107242356976975872,107242425694224385,107242004789460992,107242378449453056,107242460055928833,107242382745731072,107524093966221313,107805023457181698,107805233910579202,107805221025677314,107805062111887362,107805044932018178,107804989097443330,107804993392410626,107805019162214402,107805315514957826,107805053521952770,107805036342083586,107805057816920066,107805246795481090,107804997687377922,107805040637050882,107805255385415682,107805027752148994,107805289745154050,107805298335088642,107805272565284866,107805276860252162,107805302630055938,107805251090448386,107805032047116290,107805010572279810,107805259680382978,107805049226985474,107805263975350274,107805014867247106,107805238205546498,107805306925023234,107805281155219458,107805001982345218,107805006277312514,107805268270317570,107805225320644610,108086764724813826,108086721775140866,108086790494617602,108086773314748418,108086726070108162,108368411502706689,108368699264073729,108368085077000192,108368497421647873,108368269763149824,108368106579689472,108368042128113664,108368063602425856,108368609065238529,108368067897327616,108368458745380865,108367896101519360,108368647745437697,108368055014850560,108368630543679489,108368432975642625,108367878921322496,108368072193343488,108368587616092161,108367900396421120,108368059307917312,108368050717720576,108368445857071105,108368080782950400,108368420085104641,108368089374392320,108367908986028032,108368046423998464,108367891805503488,108368076488966144,108368415791972353,108368093670080512,108368097962229760,108649542883016706,108649645962231810,108649525703147522,108649383969226754,108649538588049410,108649366789357570,108649555767918594,108649375379292162,108649371084324866,108649547177984002,108649529998114818,108649517113212930,108649534293082114,108649564357853186,108649392559161346,108649353904455682,108649572947787778,108649744746479618,108649560062885890,108649551472951298,108649521408180226,108649568652820482,108931215429140482,108931146709663746,109212707582705664,109212295265648640,109212600209244160,109212604502048768,109212355393880064,109212698993426432,109212741942706177,109212776303099905,109212359689371648,109212767712313345,109212750531198977,109212754826297345,109212780598132737,109212737647804417,109212312444338176,109212716173033472,109212772006625281,109212703286427648,109212677518065664,109212759121854465,109212441293160448,109212784892903425,109212630273228800,109212810682826753,109212746237280257,109212793482641409,109212668927737856,109212763416625153,109212329626435584,109212686109048832,109212724762771457,109213003935973377,109212995345973249,109212999640088577,109212681813950464,109212789186363393,109212711876558848,109212729055903745,109494371534372865,109494362961543169,109494178260779008,109494100968407040,109494367239274497,109494143901171712,109494341494177793,109494105246728192,109775640377294848,110056728791285762,110057076683636738,110056926359781378,110056904884944898,110056745971154946,110056909179912194,110056939244683266,110056896295010306,110056900589977602,110056750266122242,110056887705075714,110056870525206530,110056934949715970,110056724496318466,110056917769846786,110056947834617858,110056758856056834,110056733086253058,110056771740958722,110056943539650562,110057016554094594,110056874820173826,110056922064814082,110057093863505922,110057119633309698,110057050913832962,110056883410108418,110056913474879490,110056767445991426,110057098158473218,110057085273571330,110056930654748674,110056763151024130,110057046618865666,110056892000043010,110056879115141122,110056741676187650,110057115338342402,110338371271458818,110338362681524226,110338225242570754,110338418516099074,110338590314790914,110338384156360706,110338349796622338,110338238127472642,110338414221131778,110338401336229890,110338405631197186,110338521595314178,110338345501655042,110338551660085250,110338397041262594,110338375566426114,110338246717407234,110338568839954434,110338525890281474,110338573134921730,110338379861393410,110338216652636162,110338208062701570,110338242422439938,110338199472766978,110338409926164482,110338388451328002,110338220947603458,110338354091589634,110338560250019842,110338358386556930,110338594609758210,110338392746295298,110338203767734274,110338233832505346,110338422811066370,110338491530543106,110338366976491522,110619670149201920,110620116826259457,110620056697503744,110620078169980928,110619687327891456,110620142595866625,110619975092797440,110620112533454849,110620146890178561,110620151186653185,110619816176713728,110620138300178433,110620460429803521,110620086760112128,110620082466258944,110620164069916673,110620099646324737,110620121120833537,110619730277433344,110620060992602112,110620043811291136,110620125414752257,110620134005407745,110620091056586752,110620129709850625,110620172666929153,110619704509988864,110620181271609345,110620168368619521,110620374523641857,110620370229526529,110620155481686017,110620052401618944,110620378819526657,110620005156782080,110620073876979712,110619979385602048,110620159776456705,110619734572924928,110620103939457025,110901450069508096,110901535969312768,110901621866889217,110901617572577281,110901630458396673,110901454362312704,110901656248385537,110901591802970113,110901480133492736,110901566033297408,110901639046627329,110901853796237313,110901179486699520,110901647643639809,110901574623035393,110901557442969600,110901613276889089,110901553146691584,110901548853690368,110901935406514177,110901145125912576,110901527378329600,110901600391462913,110901587510165505,110901578916167681,110901162304602112,110901604686561281,110901608982118401,110901561736822784,110901205254144000,110901291153424384,110901643345330177,110901849500352513,110901518788001792,110901845206237185,110901531674214400,110901209549635584,110901626163363841,110901634753167361,110901596097544193,111182929351868418,111182869222326274,111183002366312450,111182650178994178,111182920761933826,111182834862587906,111182813387751426,111182821977686018,111182894992130050,111182787617947650,111182852042457090,111182766143111170,111182645884026882,111182809092784130,111182632999124994,111183023841148930,111182826272653314,111182800502849538,111182804797816834,111182770438078466,111182663063896066,111182899287097346,111182916466966530,111182796207882242,111182830567620610,111182791912914946,111182998071345154,111182658768928770,111182817682718722,111182843452522498,111183028136116226,111183010956247042,111182955121672194,111183019546181634,111182637294092290,111182839157555202,111182779028013058,111182856337424386,111182620114223106,111183041021018114,111183036726050818,111182654473961474,111182628704157698,111182641589059586,111182684538732546,111182667358863362,111183006661279746,111182882107228162,111182873517293570,111182774733045762,111182847747489794,111182877812260866,111182624409190402,111182680243765250,111182860632391682,111182783322980354,111182864927358978,111182993776377858,111183032431083522,111183015251214338,111182671653830658,111182886402195458,111182925056901122,111182890697162754,111464524576456705,111464803749658625,111464567525998593,111464155207565312,111464597597061121,111464541756391425,111464404315734016,111464546050965505,111464129440120832,111464112258023424,111464576116785153,111464400022929408,111464159503056896,111464593298751489,111464885359935489,111464550344884225,111464563230310401,111464511690244096,111464503100112896,111464795159658497,111464498807111680,111464515986718720,111464554639982593,111464241106845696,111464481627635712,111464799453773825,111464537463586817,111464468741423104,111464095079333888,111464584706588673,111464485922734080,111464589000048641,111464558935539713,111464430086914048,111464580411817985,111464507396390912,111464477331750912,111464571820310529,111464528869588993,111464606201872385,111745827769286656,111746222912569345,111745986666954752,111746063976759297,111745716083556352,111745587234734080,111745823474057216,111746360336646145,111745810589024256,111745943718133760,111745836359155712,111745832064909312,111746278726369281,111746072573771777,111746068275462145,111746016733102081,111745630184275968,111746231496605697,111745956604346368,111746244380917761,111746046797021185,111745952308461568,111746227200720897,111745802000072704,111745879292444672,111746051093495809,111745982373101568,111746252971573249,111745866412326912,111745806294319104,111745849244319744,111746274430484481,111746059683299329,111746012440297473,111746510668759041,111746240086409217,111745965204504578,111745570056044544,111745844949876736,111745999553167361,111745960899444736,111746025321594881,111746055388528641,111745973783822336,111745874999640064,111745819178893312,111746042502709249,111745978093469696,111746248676933633,111746270136369153,111746021027676161,111745990963429376,111745604416831488,111746081173340161,111746003846299649,111746029616693249,111746038207021057,111745840654974976,111746033912250369,111745905063624704,111745634479767552,112027440191307776,112308773434163200,112590235516928002,112590403020652546,112590407315619842,112590244106862594,112590196862222338,112590162502483970,112590390135750658,112590205452156930,112590158207516674,112590055128301570,112590141027647490,112590214042091522,112590037948432386,112590046538366978,112590218337058818,112590239811895298,112590398725685250,112590149617582082,112590153912549378,112590059423268866,112590192567255042,112590016473595906,112590299941437442,112590029358497794,112590183977320450,112590188272287746,112590007883661314,112590209747124226,112590179682353154,112590377250848770,112590295646470146,112590003588694018,112590265581699074,112590033653465090,112590411610587138,112590330006208514,112589994998759426,112590269876666370,112590175387385858,112589999293726722,112590226926993410,112590261286731778,112590025063530498,112590020768563202,112590304236404738,112590248401829890,112590415905554434,112590231221960706,112590381545816066,112590201157189634,112590166797451266,112590394430717954,112590222632026114,112590252696797186,112590171092418562,112590012178628610,112590385840783362,112590042243399682,112590368660914178,112590291351502850,112590274171633666,112590256991764482,112590145322614786,112871865121570816,113153378729852929,113153421680574465,113153404500246529,113153202652839936,113153425977049089,113153417386262529,113153614969962497,113153318601687040,113153735220199425,113153224127873024,113153885552312321,113152944939597824,113153365846982656,113153602084274177,113153413090574337,113153623560486913,113153649314037761,113153361550508032,113153438860312577,113153206948462592,113153400205148161,113153241295880192,113153211242708992,113153185472577536,113153331487899648,113153249883193344,113153219833430016,113153215538528256,113153443159015425,113153357256654848,113153374436720641,113153090967109632,113153176883625984,113153194062446592,113153387323850753,113153645019922433,113153327192014848,113153597796384769,113153408795803649,113153198357610496,113153352977022976,113153395911229441,113153653609922561,113153181177872384,113152962118287360,113153335782998016,113153434566852609,113153430272081921,113153456056893441,113153009363320832,113152979300384768,113153391616655361,113153348667375616,113153005067829248,113153606380158977,113153279947177984,113153627855126529,113153340088057858,113153254175997952,113153447457325057,113153619264471041,113434750650613760,113716066685616128,113716603563343873,113716058096467968,113716629325611009,113716337277272065,113715907771629568,113716470414573569,113716328683274241,113715924953923584,113716414605950977,113716105340452864,113715933543530496,113716096750845952,113715903478824960,113716204129419264,113716375930470401,113715942131892224,113715899182874624,113715920659021824,113716418882437121,113716062391173120,113716358749224961,113716633622740993,113716311503929344,113716113931894784,113716053802090496,113716079572353024,113716315800403968,113716281441320960,113716285736419328,113716277145436160,113716835505733633,113715894893019136,113716070981500928,113715937837645824,113716444642607105,113716083865419776,113716367339683841,113716564929871873,113715929253806080,113716298620796928,113716599267459073,113716380225503233,113716268555108352,113716229900599296,113715912071708672,113716685173620737,113715959316742144,113716199836614656,113716045211959296,113716483298099201,113716397410746369,113716075275223040,113716371633995777,113716406010314753,113716307210076160,113716290041479170,113716594973343745,113716350158569473,113715955021250560,113716101046468608,113716388813733889,113716341570076673,113716324390141953,113716049506598912,113716363043995649,113716625032085505,113716436052410369,113716092454830080,113715916363005952,113716122519732224,113716109634502656,113716354453667841,113716650800513025,113716294320652288,113716384520273921,113716118227582976,113716302913798144,113716040920530944,113716345864650753,113716689458036737,113716088159928320,113716431759343617,113716616442019841,113716393112436737,113715946427842560,113716440349474817,113997430011789314,113997408536952834,113997399947018242,113997404241985538,113997618990350338,113997434306756610,113997601810481154,113997580335644674,113997782199107586,113997567450742786,113997769314205698,113997374177214466,113997558860808194,113997644760154114,113997545975906306,113997593220546562,113997649055121410,113997537385971714,113997760724271106,113997520206102530,113997631875252226,113997704889696258,113997588925579266,113997756429303810,113997382767149058,113997679119892482,113997524501069826,113997597515513858,113997666234990594,113997636170219522,113997412831920130,113997773609172994,113997387062116354,113997606105448450,113997391357083650,113997777904140290,113997576040677378,113997674824925186,113997790789042178,113997584630611970,113997640465186818,113997533091004418,113997627580284930,113997563155775490,113997554565840898,113997623285317634,113997614695383042,113997421421854722,113997752134336514,113997528796037122,113997670529957890,113997571745710082,113997610400415746,113997743544401922,113997541680939010,113997369882247170,113997378472181762,113997395652050946,113997515911135234,113997786494074882,113997417126887426,113997550270873602,113997765019238402,114279076787126274,114278866333728770,114279102556930050,114278844858892290,114278879218630658,114279038132420610,114279119736799234,114279106851897346,114279111146864642,114279179866341378,114279068197191682,114279072492158978,114279033837453314,114279003772682242,114279124031766530,114279115441831938,114279261470720002,114279008067649538,114278862038761474,114279081082093570,114278995182747650,114279145506603010,114279025247518722,114279239995883522,114279265765687298,114278999477714946,114278892103532546,114279016657584130,114279257175752706,114278853448826882,114278883513597954,114279252880785410,114278909283401730,114279063902224386,114279098261962754,114279235700916226,114278990887780354,114279085377060866,114279055312289794,114279046722355202,114278874923663362,114279012362616834,114279089672028162,114279059607257090,114279244290850818,114279149801570306,114279248585818114,114279154096537602,114278904988434434,114279231405948930,114279141211635714,114279020952551426,114279093966995458,114278887808565250,114279042427387906,114278857743794178,114279218521047042,114279051017322498,114279227110981634,114278849153859586,114279029542486018,114278896398499842,114278870628696066,114560641956052994,114560676315791362,114560684905725954,114842095457075202,114842121226878978,115123596203786242,115123570433982466,115123664923262978,115405071165620226,115405122705227778,115686679290642433,115686365757505536,115686687880970241,115686636340903936,115686692176658433,115686713650708481,115686528966393856,115686683586199553,115686430177427456,115686610573393920,115686696470970369,115686623457771520,115686593392082944,115686722263187457,115686705062477825,115686924104433665,115686666407051265,115686640637378560,115686674995544065,115686670701625345,115686241207975936,115686928400318465,115686228315799552,115686709357248513,115686627750772736,115686236908683264,115686649227116545,115686700767444993,115686919810318337,115686284153716736,115686606278295552,115686254090780672,115686717949411329,115686554737573888,115686425883443200,115686662114246657,115686219729993728,115686808162598913,115686524673589248,115686653520248833,115686279858225152,115686601982410752,115686632047050752,115968059787444226,115968068377378818,115968021132738562,115968072672346114,115968025427705858,116249543354613762,116249547649581058,116249534764679170,116249496109973506,116249500404940802,116530644668973058,116530679028711426,116530661848842242,116531065575768066,116531061280800770,116531018331127810,116531026921062402,116530704798515202,116530979676422146,116531052690866178,116530949611651074,116531035510996994,116531031216029698,116530790697861122,116531048395898882,116531056985833474,116530953906618370,116530709093482498,116812424580431872,116812617856253953,116812506185138176,116812562021089281,116812428873236480,116812824011276289,116812454644416512,116812592083501057,116812136815525888,116812604969320449,116812153997623296,116812501889253376,116812553427091457,116812493298925568,116812523364614144,116812265664348160,116812596377812993,116812179765067776,116812570608467969,116812613557551105,116812510480236544,116812574902386689,116812531953893376,116812600674287617,116812609264091137,116812622170161153,116812587787812865,116812527657615360,116812540544221184,116812566313893889,116812819717160961,116812549133959169,116812119636836352,116812184060559360,116812536247746560,116812579197485057,116812828307161089,116812583493042177,117093921040039938,117093925335007234,117093968284680194,117093959694745602,117093972579647490,117375443261718530,117375434671783938,117375396017078274,117375400312045570,117375447556685826,117656913956372480,117938388919123970,118219700686749698,118219503118254082,118219704981716994,118219803765964802,118219915435114498,118219868190474242,118219881075376130,118219640557207554,118219511708188674,118219885370343426,118219558952828930,118219554657861634,118219906845179906,118219829535768578,118219876780408834,118219911140147202,118219528888057858,118219494528319490,118219898255245314,118219902550212610,118219799470997506,118219516003155970,118501338886569984,118782813838835714,118782770889162754,118782839608639490,118782745119358978,118782775184130050,118782822428770306,119064245890449408,119064701156917249,119064220092792834,119345772406833152,119345720867291136,119627200139034624,119908675115810816,120190197308194818,120190145768587266,120471620754866178,120471689474342914,120753164449873922,120753095730397186,121034652319875074,121034467636281346,121034514880921602,121034459046346754,121035210665623554,121034274362753026,121034270067785730,121034626550071298,121034553535627266,121034287247654914,121034291542622210,121034656614842370,121034398916804610,121034471931248642,121034519175888898,121034506290987010,121034549240659970,121034450456412162,121034630845038594,121034446161444866,121034579305431042,121034480521183234,121034278657720322,121034454751379458,121034510585954306,121034390326870018,121034308722491394,121034493406085122,121034497701052418,121034635140005890,121034540650725378,121034304427524098,121034257182883842,121034639434973186,121034437571510274,121034265772818434,121034411801706498,121034501996019714,121034660909809666,121034416096673794,121034407506739202,121034484816150530,121034441866477570,121034544945692674,121034476226215938,121034295837589506,121034248592949250,121034420391641090,121034433276542978,121034424686608386,121034428981575682,121034669499744258,121034394621837314,121034523470856194,121034617960136706,121034403211771906,121034643729940482,121034244297981954,121034463341314050,121034252887916546,121034282952687618,121034665204776962,121034261477851138,121034648024907778,121316097244069888,121597572220846080,121879047197622272,122160367543713794,122160187155087362,122160389018550274,122160565112209410,122160406198419458,122160444853125122,122160152795348994,122160539342405634,122160397608484866,122160208629923842,122160333183975426,122160380428615682,122160535047438338,122160376133648386,122160341773910018,122160320299073538,122160346068877314,122160363248746498,122160182860120066,122160453443059714,122160174270185474,122160148500381698,122160543637372930,122160449148092418,122160560817242114,122160324594040834,122160517867569154,122160290234302466,122160157090316290,122160191450054658,122160337478942722,122160307414171650,122160165680250882,122160384723582978,122160479212863490,122160195745021954,122160350363844610,122160311709138946,122160178565152770,122160393313517570,122160316004106242,122160358953779202,122160556522274818,122160298824237058,122160526457503746,122160419083321346,122160401903452162,122160423378288642,122160303119204354,122160294529269762,122160530752471042,122160204334956546,122160440558157826,122160161385283586,122160354658811906,122160410493386754,122160328889008130,122160371838681090,122160414788354050,122160547932340226,122160169975218178,122160144205414402,122160552227307522,122441863996571650,122441786687160322,122441868291538946,122442005730492418,122441833931800578,122441632068337666,122441666428076034,122442010025459714,122442018615394306,122441842521735170,122441894061342722,122441881176440834,122442027205328898,122441846816702466,122441662133108738,122441851111669762,122441679312977922,122441803867029506,122442035795263490,122441778097225730,122441657838141442,122442031500296194,122441627773370370,122441825341865986,122441636363304962,122441640658272258,122442040090230786,122441919831146498,122441876881473538,122441954190884866,122441683607945218,122441898356310018,122441872586506242,122441816751931394,122441782392193026,122441765212323842,122441889766375426,122441992845590530,122441773802258434,122441924126113794,122441808161996802,122441653543174146,122441859701604354,122441829636833282,122441619183435778,122441790982127618,122441838226767874,122441644953239554,122441623478403074,122441928421081090,122442022910361602,122441885471408130,122442001435525122,122441915536179202,122442014320427010,122441769507291138,122441670723043330,122441821046898690,122441795277094914,122441855406637058,122441812456964098,122441799572062210,122441649248206850,122723467832852480,123004796770385922,123004766705614850,123004607791824898,123004848309993474,123004878374764546,123004745230778370,123004959979143170,123004603496857602,123004964274110466,123004599201890306,123004968569077762,123004805360320514,123004633561628674,123004612086792194,123004728050909186,123004942799273986,123004573432086530,123004775295549442,123004582022021122,123004813950255106,123004732345876482,123004594906923010,123004779590516738,123004865489862658,123004951389208578,123004590611955714,123004822540189698,123004771000582146,123004874079797250,123004762410647554,123004586316988418,123004758115680258,123004869784829954,123004985748946946,123004629266661378,123004990043914242,123004831130124290,123004753820712962,123004719460974594,123004620676726786,123004809655287810,123004577727053826,123004835425091586,123004792475418626,123004616381759490,123004736640843778,123004788180451330,123004715166007298,123004981453979650,123004783885484034,123004723755941890,123004818245222402,123004569137119234,123004801065353218,123004826835156994,123004972864045058,123004839720058882,123004740935811074,123004844015026178,123004977159012354,123004904144568322,123004749525745666,123004955684175874,123286314695065602,123286460723953666,123286048407093250,123286456428986370,123286452134019074,123286061291995138,123286241680621570,123286198730948610,123286044112125954,123286233090686978,123286078471864322,123286306105131010,123286417774280706,123286237385654274,123286284630294530,123286353349771266,123286443544084482,123286052702060546,123286190141014018,123286091356766210,123286207320883202,123286245975588866,123286065586962434,123286280335327234,123286430659182594,123286297515196418,123286276040359938,123286434954149890,123286318990032898,123286301810163714,123286095651733506,123286224500752386,123286220205785090,123286271745392642,123286465018920962,123286267450425346,123286288925261826,123286108536635394,123286426364215298,123286203025915906,123286323285000194,123286211615850498,123286344759836674,123286254565523458,123286228795719682,123286447839051778,123286439249117186,123286082766831618,123286087061798914,123286069881929730,123286263155458050,123286293220229122,123286349054803970,123286258860490754,123286340464869378,123286074176897026,123286194435981314,123286379119575042,123286104241668098,123286250270556162,123286310400098306,123286215910817794,123286056997027842,123567583501615104,123567815434174464,123567519077892096,123568197698781185,123568223452332033,123567931394949120,123567768200740864,123567978638540801,123567755316166656,123568017297309697,123567922805669888,123567935688802304,123567854085472256,123567970049523713,123567536256581632,123568189108256769,123567824021487616,123567982934097921,123568201993420801,123567965754949633,123567751021920256,123567987228868609,123568459690606593,123567914226352130,123567772495904768,123567927115317248,123568180518453249,123567776791134208,123567798266167296,123568000115343361,123567553438679040,123567781086756864,123567785381003264,123568176222568449,123567665105403904,123567952868147201,123567579206123520,123568171935924225,123567759610871808,123567939985276928,123567892739981312,123567828314292224,123567961462145025,123568012998606849,123567995818868737,123568008705146881,123568219158216705,123567901330309120,123567905626193920,123567948575014913,123567789676822528,123568030195187713,123568309358493697,123568193402765313,123567974343442433,123568227748216833,123567793971724288,123568004410376193,123567991524556801,123567909921292288,123568021595619329,123849702724927489,123849423551725569,123849470795579393,123849457910808577,123849402075381760,123849406371659776,123849410665512960,123849466501267457,123849479387086849,123849487975317505,123849384898002944,123849329062182912,123849475092054017,123849397782380544,123849011233292288,123849436438855681,123849483681857537,123849445026234369,123849496572329985,123849367716691968,123849389203062786,123849380602904576,123849414961987584,123849376307019776,123849140082114560,123849492274020353,123849694134927361,123849453615251457,123849698429042689,123849427844857857,123848994054602752,123849440731660289,123849298998198272,123849462205579265,123849784335204353,123849058478325760,123849505171898369,123849303291002880,123849934667317249,123849054182834176,123849028415389696,123849449320153089,123849664092569601,124130932887519233,124130980148609025,124130902821568513,124130898528436225,124130859874713600,124130872759091200,124131173405753345,124130864179773442,124130885642223616,124130881348370432,124130889938698240,124130773974908928,124131259311915009,124131169111638017,124130920002945025,124130950068764673,124130928591962113,124130615058825216,124130958658568193,124130469031313408,124130954363797505,124130924296863745,124130941477978113,124130851283730432,124130937182289921,124130877052092416,124130842693402624,124130503392100352,124130945772290049,124130778267713536,124131177701638145,124130855579615232,124130967250731009,124130529159544832,124131139069345793,124130533455036416,124130804038893568,124131409644027905,124130486210002944,124130962952028161,124130915708370945,124130911415566337,124130971549040641,124412313398411264,124693629446782978,124693809835409410,124693453353123842,124693440468221954,124693822720311298,124693427583320066,124693827015278594,124693839900180482,124693479122927618,124693565022273538,124693801245474818,124693625151815682,124693754000834562,124693728231030786,124693418993385474,124693805540442114,124693483417894914,124693835605213186,124693723936063490,124693831310245890,124693792655540226,124693436173254658,124975263351898112,125256746903601154,125256699658960898,125256695363993602,125256742608633858,125256734018699266,125538221879984130,125538170340376578,125538174635343874,125538208995082242,125538217585016834,125819619562618880,126101094510624770,126382350443216898,126382354738184194,126382393392889858,126382612436221954,126382367623086082,126382397687857154,126382410572759042,126382663975829506,126382363328118786,126382380507987970,126382341853282306,126382621026156546,126382608141254658,126382573781516290,126382603846287362,126382651090927618,126382633911058434,126382655385894914,126382595256352770,126382328968380418,126382333263347714,126382569486548994,126382337558315010,126382376213020674,126382586666418178,126382371918053378,126382346148249602,126382406277791746,126382638206025730,126382625321123842,126382646795960322,126382629616091138,126382401982824450,126382389097922562,126382590961385474,126382384802955266,126382616731189250,126382642500993026,126382582371450882,126382599551320066,126382359033151490,126382324673413122,126663769587712000,126664319343263745,126663958563192832,126663773882613760,126664572750266369,126663915614306304,126663765291696128,126663782472220672,126664461104644097,126664293571297281,126663924203913216,126664332231573505,126663928501043200,126664289278164993,126663919910191104,126663752407515136,126663932794109952,126664370907840513,126663941383520256,126664284988899329,126664504029872129,126663945679536128,126664143249342464,126663967156273152,126663949975158784,126664306461835265,126664482551431169,126663971448422400,126663962860584960,126663980065882112,126663937088618496,126663954269143040,126945601050836992,126945235977109504,126945364825931776,126945631115476992,126945704130904065,126945721333055489,126945678359068673,126945665475477505,126945682654625793,126945712719134721,126945717017837569,126945278926651392,126945253159206912,126945686949396481,126945669770051585,126945652588675073,126945218798419968,126945699835871233,126945592460509184,126945622526197760,126945708425674753,126945923172859905,126945691245084673,126945605346721792,126945639705804800,126945661182672897,126945635409330176,126945626819198976,126945523742015488,126945648295542785,126945927468744705,126945695539396609,126945918878744577,126945553806000128,126945283222142976,126945528034820096,126945609641820160,126945674063970305,127227110386040832,127227123272253441,127227393855455233,127227136159383553,127227179107614721,127227076027547648,127227084618530816,127227114682515456,127226758198853632,127227166221795329,127227398149570561,127227080323432448,127227101795909632,127226753903362048,127227067437219840,127227187695845377,127226839802642432,127227174812581889,127227153335779329,127226728135917568,127227157631336449,127227097502908416,127227149040680961,127227170516107265,127227127565385729,127227003011530752,127227402445455361,127226998718726144,127227106092187648,127226710953820160,127227183402385409,127226693775130624,127227196309831681,127227144746762241,127227161926107137,127227028782710784,127227191994548225,127227140452188161,127508559595241472,127508400695869440,127508825896517633,127508877422166017,127508843076714497,127508430760706048,127508641198505985,127509109364555777,127508654084325377,127508658379096065,127508666971258881,127508581068898304,127508611136094209,127508572479619072,127508589659226112,127508477988241408,127508168751841280,127508628312489985,127508228880072704,127508624017391617,127508821610463233,127508563900301314,127508465108123648,127508868832165889,127508314779353088,127508426465083392,127508602542096385,127508435054952448,127508662672556033,127508233175564288,127508422169853952,127508679869136897,127508542413930496,127508830192402433,127508645492817921,127508447940116480,127508503759421440,127508649789292545,127508636902817793,127508959032442881,127508585362751488,127508443645673472,127508851667369985,127508576789266432,127508551004258304,127508615428898817,127508671269568513,127508873126281217,127508185930530816,127508404990115840,127508598248964097,127508473695436800,127508619723472897,127508203112628224,127508632608047105,127508838782205953,127508847372730369,127508417874690048,127508439350771712,127508555300143104,127508409284820992,127790116175216641,127790305169113089,127790322349441025,127789789756063744,127789918622384128,127790017390641152,127789897146564608,127790300873228289,127790090405609473,127789678089338880,127789910031663104,127790343808876545,127789703856783360,127790111879528449,127789892851400704,127789952964952064,127790137649266689,127790051765977088,127790047456329728,127789914327482368,127789875672580096,127790133355806721,127790434009153537,127789922916827136,127790124766003201,127789884261531648,127789940084834304,127790141947969537,127790073225674753,127790352398876673,127789901441794048,127790025980968960,127790098994102273,127790313758916609,127790154845847553,127790584341266433,127790038877011970,127789905737416704,127789978736132096,127790056045608960,127790030276853760,127790120469528577,127789660907241472,127789708152274944,127789643728551936,127790034571952128,127790107584757761,127789948672147456,127790094700183553,127790129061036033,127790318053425153,127789879966826496,127790064635936768,127790326644080641,127790296587239425,127790348102991873,127790077518807041,127790086112804865,127790103289200641,127790060339462144,127790146246279169,128071415061544960,128071612625977345,128071183128985600,128071771564015617,128071569676894209,128071531022319616,128071599742713857,128071801620791297,128071178833494016,128071561089515521,128071350649290752,128071372123275264,128071500957679616,128071595446239233,128071453712842752,128071775849938945,128071385008373760,128071509548662784,128071135883952128,128071118705262592,128071492367351808,128071621222989825,128071505253564416,128071616924680193,128071788735627265,128071354943537152,128071604037746689,128071367828111360,128071380714127360,128071376418504704,128071780145823745,128071397893537792,128072059317977089,128071818785587201,128071552495517697,128071535316172800,128071389304193024,128071522433040384,128071393599094784,128071513853722626,128071797326151681,128071526742687744,128071359238242304,128071264732774400,128071427941662720,128071629822558209,128071827375587329,128071586856239105,128071591151927297,128071565382320129,128071793030135809,128071539612647424,128071908985864193,128071423648858112,128071548202385409,128071578265911297,128071608332517377,128071582561468417,128071153066049536,128071823079702529,128071573970812929,128353096199700481,128353083309228033,128353040359030785,128353057538179073,128353104806871041,128352980230275072,128353027472228353,128353036066226177,128352967344062464,128353066128637953,128353087602688001,128352739709485056,128353014589358080,128352928689553408,128353298056413185,128352658105696256,128353079014457345,128352898625568768,128353023179096065,128353005999030272,128352653810204672,128353293762297857,128352975934390272,128353302352297985,128352628042760192,128353070422949889,128352997409751040,128352593681973248,128352610860662784,128353044653604865,128353074719424513,128353061832949761,128352984525373440,128353091901390849,128353383962574849,128353001702752256,128353053242621953,128352902918373376,128353010292883456,128353048947523585,128634128799236098,128634227583483906,128634249058320386,128634309187862530,128634365022437378,128634283418058754,128634072964661250,128634468101652482,128634236173418498,128634476691587074,128634287713026050,128634274828124162,128634313482829826,128634347842568194,128634133094203394,128634261943222274,128634373612371970,128634292007993346,128634279123091458,128634489576488962,128634377907339266,128634450921783298,128634111619366914,128634296302960642,128634090144530434,128634472396619778,128634300597927938,128634257648254978,128634068669693954,128634485281521666,128634442331848706,128634244763353090,128634107324399618,128634317777797122,128634266238189570,128634334957666306,128634223288516610,128634103029432322,128634094439497730,128634326367731714,128634231878451202,128634480986554370,128634085849563138,128634322072764418,128634369317404674,128634403677143042,128634343547600898,128634270533156866,128634463806685186,128634098734465026,128634455216750594,128634459511717890,128634330662699010,128634339252633602,128634081554595842,128634120209301506,128634218993549314,128634214698582018,128634077259628546,128634115914334210,128634240468385794,128634304892895234,128634253353287682,128915608059117568,128916024672845825,128915878642974720,128915955952451584,128916003196043265,128916016082059265,128915934478794752,128915925887811584,128915994607026177,128916037556109313,128915603763625984,128915543635394560,128915577996181504,128915560814084096,128916333915996161,128915986019647489,128916243715719169,128915951656173568,128915977425649665,128915921604706306,128915998900944897,128915689662906368,128915947363172352,128915990312452097,128916007491600385,128916054760423425,128916020376371201,128915848578990080,128915852871794688,128916248009834497,128916028967878657,128915930183696384,128916252305719297,128915973132517377,128915917297483776,128916033262649345,128916041854812161,128916492847022081,128915964542779392,128915960246304768,128916046153121793,128916011786371073,129197327848505344,129197452402360321,129197392274194432,129197083035828224,129197491058769921,129197478172753921,129197430929162240,129197465289162753,129197516831522817,129197396581220354,129197460996358145,129197469583736833,129197963528896513,129197405160407040,129197035790794752,129197078740336640,129197512532819969,129197164639617024,129197727282429953,129197808892706817,129197521129832449,129197400864522240,129197018612105216,129197503944589313,129197529737265153,129197495353081857,129197052972892160,129197323555700736,129197422339883008,129197486763081729,129197448109228033,129197473877655553,129197499649556481,129197482468311041,129197439519490048,129197722986545153,129197508239360001,129197409455505408,129197435223015424,129197718692429825,129197426632884224,129197353619685376,129478820015046658,129478867259686914,129478824310013954,129478858669752322,129478871554654210,129760299286921218,129760333646659586,129760342236594178,129760346531561474,129760294991953922,130041808609148930,130041538026209282,130041525141307394,130041512256405506,130041830083985410,130041821494050818,130041516551372802,130041787134312450,130041744184639490,130041800019214338,130041563796013058,130041782839345154,130041761364508674,130041520846340098,130041795724247042,130041838673920002,130041542321176578,130041576680914946,130041507961438210,130041559501045762,130041757069541378,130041572385947650,130041804314181634,130041812904116226,130041748479606786,130041503666470914,130041817199083522,130041825789018114,130041555206078466,130041765659475970,130041778544377858,130041533731241986,130041774249410562,130041791429279746,130041550911111170,130041546616143874,130041568090980354,130041585270849538,130041769954443266,130041529436274690,130041499371503618,130041580975882242,130323296469843970,130323244930236418,130604771446685698,130604719907078146,130886246423461890,130886194883854338,131167725712965634,131167652698521602,131167352050810882,131167386410549250,131167562504208386,131167571094142978,131167592568979458,131167618338783234,131167403590418434,131167751482769410,131167614043815938,131167506669633538,131167734302900226,131167515259568130,131167601158914050,131167760072704002,131167755777736706,131167360640745474,131167510964600834,131167493784731650,131167519554535426,131167622633750530,131167536734404610,131167764367671298,131167639813619714,131167588274012162,131167605453881346,131167742892834818,131167553914273794,131167498079698946,131167489489764354,131167747187802114,131167609748848642,131167558209241090,131167738597867522,131167407885385730,131167583979044866,131167678468325378,131167377820614658,131167528144470018,131167545324339202,131167549619306498,131167717123031042,131167347755843586,131167382115581954,131167373525647362,131167390705516546,131167566799175682,131167523849502722,131167596863946754,131167579684077570,131167502374666242,131167356345778178,131167648403554306,131167541029371906,131167364935712770,131167644108587010,131167343460876290,131167395000483842,131167575389110274,131167369230680066,131167532439437314,131167730007932930,131448968761311234,131449033185820674,131449020300918786,131448985941180418,131449222164381698,131448973056278530,131449016005951490,131448848502226946,131448822732423170,131449204984512514,131449127675101186,131448981646213122,131449153444904962,131449226459348994,131448964466343938,131448869977063426,131448852797194242,131449239344250882,131449007416016898,131448878566998018,131448994531115010,131448857092161538,131449119085166594,131449192099610626,131449230754316290,131448998826082306,131449050365689858,131449024595886082,131449084725428226,131449123380133890,131449063250591746,131449041775755266,131449037480787970,131448827027390466,131449067545559042,131449209279479810,131448844207259650,131449071840526338,131449080430460930,131449046070722562,131449235049283586,131449217869414402,131449011710984194,131449093315362818,131449058955624450,131449054660657154,131449089020395522,131448831322357762,131449200689545218,131448818437455874,131448990236147714,131448835617325058,131449114790199298,131448861387128834,131448865682096130,131449076135493634,131449097610330114,131449028890853378,131449003121049602,131449213574447106,131448839912292354,131448882861965314,131448977351245826,131730602652008450,131730688551354370,131730490982858754,131730456623120386,131730568292270082,131730521047629826,131730714321158146,131730533932531714,131730448033185794,131730332069068802,131730336364036098,131730439443251202,131730473802989570,131730512457695234,131730594062073858,131730499572793346,131730675666452482,131730555407368194,131730684256387074,131730692846321666,131730538227499010,131730344953970690,131730469508022274,131730452328153090,131730293414363138,131730310594232322,131730503867760642,131730516752662530,131730546817433602,131730525342597122,131730306299265026,131730314889199618,131730495277826050,131730542522466306,131730443738218498,131730598357041154,131730710026190850,131730508162727938,131730357838872578,131730589767106562,131730705731223554,131730465213054978,131730482392924162,131730697141288962,131730302004297730,131730551112400898,131730572587237378,131730701436256258,131730353543905282,131730563997302786,131730340659003394,131730667076517890,131730628421812226,131730478097956866,131730319184166914,131730679961419778,131730529637564418,131730559702335490,131730323479134210,131730460918087682,131730297709330434,131730486687891458,131730327774101506,132012146360516608,132293621337292800,132575096302010370,132856571290779648,133138046255235074,133419379501039616,133419383795744768,133419598528315393,133420083875479553,133419645780492289,133419400976007168,133419551300190208,133419289290276864,133419418156597248,133419585647017985,133419817587638273,133419177623552000,133419534106165248,133419821883654145,133419847637204993,133419478270345216,133419555579822080,133419160441454592,133419637183479809,133419796122173441,133419933543366657,133419559873675264,133419624300216321,133419405271629824,133419375206793216,133419620003741697,133419143262765056,133419516924854272,133419615709429761,133419538411225090,133419409565876224,133419564170149888,133419413861695488,133419594234396673,133419448206360576,133419641482182657,133419804703326209,133419439619047424,133419843343089665,133419546990542848,133419611413741569,133419396680777728,133419628595249153,133419525515182080,133419203390996480,133419607118970881,133419654380060673,133419813293129729,133419851933089793,133419572759887873,133419577053020161,133419452499165184,133419602823413761,133419589939822593,133419529811066880,133419392385613824,133419826178293761,133419422451040256,133419632890019841,133419800407441409,133419207686488064,133701013400911872,133982239243698176,133982110394875904,133982604333481985,133982754656747521,133982402452586496,133982342339035136,133982153344417792,133982539893243905,133982127576973312,133982372404461568,133982505533243392,133982428223766528,133982544187817985,133982333749166080,133982771837075457,133982501253611520,133982776131715073,133982561367162881,133982569957163009,133982552776835073,133982514123571200,133982398159781888,133982329454460928,133982368110018560,133982574253637633,133983033828900865,133982767541059585,133982582843441153,133982535600439297,133982591435603969,133982355225051136,133982527006441473,133982157639909376,133982466878275584,133982325160214528,133982883496787969,133982479764488192,133982350929428480,133982484059586560,133982595733913601,133982475468603392,133982346634199040,133982750360862721,133982763246551041,133982548481736705,133982578548670465,133982389572468736,133982496943964160,133982746075725825,133982363815116800,133982359519297536,133982522713309185,133982565662851073,133982587136901121,133982557072392193,133982793296510977,133982797590626305,133982093216186368,133982509827096576,133982801886511105,133982488364646402,134263997690019841,134264036343873537,134263585371586560,134263800136925184,134264023458447361,134264049230348289,134264272567336961,134264221052502017,134263976230322176,134263984803807232,134264014869954561,134263628321128448,134263804431171584,134263568192897024,134264251108425729,134264242517770241,134263821610909696,134264358473498625,134263873136492544,134264044933873665,134263825906139136,134264010577149953,134264053525381121,134263843086729216,134263877429297152,134263864549179392,134263980509954048,134264070710624257,134263941854986240,134263830201761792,134263950445314048,134264225337573377,134263847381172224,134264246813786113,134263959036297216,134263903200477184,134264079310192641,134264040639561729,134263989100281856,134264238223261697,134264508805611521,134264062113611777,134263963341357058,134264229633458177,134263602553683968,134264019164528641,134264027753545729,134263714220408832,134263971920674816,134263954741198848,134263838791827456,134263834496008192,134264066412314625,134264032049102849,134263808725876736,134263817315745792,134264268273221633,134263632616620032,134264057820151809,134264276863221761,134264001983152129,134545275109572610,134545446908264450,134545425433427970,134545318059245570,134545455498199042,134545451203231746,134545279404539906,134545060361207810,134545287994474498,134545064656175106,134545210685063170,134545300879376386,134545249339768834,134545352418983938,134545206390095874,134545459793166338,134545343829049346,134545245044801538,134545438318329858,134545283699507202,134545043181338626,134545232159899650,134545077541076994,134545339534082050,134545292289441794,134545103310880770,134545189210226690,134545416843493378,134545429728395266,134545309469310978,134545219274997762,134545240749834242,134545047476305922,134545296584409090,134545262224670722,134545056066240514,134545253634736130,134545464088133634,134545227864932354,134545378188787714,134545270814605314,134545305174343682,134545193505193986,134545094720946178,134545434023362562,134545214980030466,134545322354212866,134545348124016642,134545107605848066,134545257929703426,134545073246109698,134545081836044290,134545266519638018,134545442613297154,134545202095128578,134545051771273218,134545068951142402,134545086131011586,134545223569965058,134545236454866946,134545197800161282,134545090425978882,134545313764278274,134826518158245890,134826814510989314,134826664187133954,134826539633082370,134826745791512578,134826909000269826,134826711431774210,134826827395891202,134826715726741506,134826724316676098,134826707136806914,134826702841839618,134826788741185538,134826793036152834,134826797331120130,134826535338115074,134826578287788034,134826565402886146,134826526748180482,134826934770073602,134826904705302530,134826780151250946,134826728611643394,134826900410335234,134826569697853442,134826522453213186,134826672777068546,134826741496545282,134826891820400642,134826823100923906,134826552517984258,134826818805956610,134826677072035842,134826694251905026,134826556812951554,134826685661970434,134826784446218242,134826582582755330,134826939065040898,134826561107918850,134826775856283650,134826689956937730,134826698546872322,134826926180139010,134826543928049666,134826720021708802,134826917590204418,134826548223016962,134826921885171714,134826913295237122,134826531043147778,134826930475106306,134826750086479874,134826758676414466,134826771561316354,134826732906610690,134826754381447170,134826762971381762,134826853165694978,134826668482101250,134826767266349058,134826737201577986,134826681367003138,135108302372995074,135108018905153538,135108173523976194,135108366797504514,135108396862275586,135108199293779970,135108409747177474,135108203588747266,135108401157242882,135107993135349762,135108031790055426,135108139164237826,135108027495088130,135108057559859202,135108036085022722,135108182113910786,135108152049139714,135108186408878082,135108379682406402,135108220768616450,135107997430317058,135108233653518338,135108259423322114,135108268013256706,135108414042144770,135108190703845378,135108147754172418,135108255128354818,135108272308224002,135108298078027778,135108263718289410,135108040379990018,135108246538420226,135108405452210178,135108328142798850,135108044674957314,135108006020251650,135108293783060482,135108023200120834,135108001725284354,135108250833387522,135108010315218946,135108388272340994,135108169229008898,135108164934041602,135108212178681858,135108383977373698,135108225063583746,135108392567308290,135108160639074306,135108143459205122,135108216473649154,135108229358551042,135108207883714562,135108177818943490,135108156344107010,135108289488093186,135108194998812674,135108242243452930,135108014610186242,135108237948485634,135108053264891906,135108375387439106,135389682860228610,135389867543822338,135389721514934274,135389858953887746,135389880428724226,135389850363953154,135389498176634882,135389614140751874,135389717219966978,135389661385392130,135389511061536770,135389803119312898,135389777349509122,135389618435719170,135389742989770754,135389502471602178,135389489586700290,135389472406831106,135389515356504066,135389841774018562,135389854658920450,135389704335065090,135389480996765698,135389674270294018,135389876133756930,135389493881667586,135389884723691522,135389725809901570,135389678565261314,135389712924999682,135389644205522946,135389695745130498,135389730104868866,135389764464607234,135389773054541826,135389476701798402,135389738694803458,135389665680359426,135389691450163202,135389863248855042,135389708630032386,135389768759574530,135389639910555650,135389889018658818,135389700040097794,135389657090424834,135389528241405954,135389669975326722,135389652795457538,135389734399836162,135389506766569474,135389485291732994,135389532536373250,135389627025653762,135389622730686466,135389635615588354,135389648500490242,135389631320621058,135389871838789634,135389687155195906,135389468111863810,135389747284738050,135389519651471362,];


fn _semaction_rule_0_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  primary_expression::IDENTIFIER_0(_item0_) }

fn _semaction_rule_1_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<constant<'lt>>::default()};  primary_expression::primary_expression_1(parser.lbx(0,_item0_)) }

fn _semaction_rule_2_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<stringnt<'lt>>::default()};  primary_expression::primary_expression_2(parser.lbx(0,_item0_)) }

fn _semaction_rule_3_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  primary_expression::primary_expression_3(parser.lbx(1,_item1_)) }

fn _semaction_rule_4_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<generic_selection<'lt>>::default()};  primary_expression::primary_expression_4(parser.lbx(0,_item0_)) }

fn _semaction_rule_5_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> constant<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<i32>::default()};  constant::I_CONSTANT_5(_item0_) }

fn _semaction_rule_6_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> constant<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_7(_x_7)=parser.popstack().value { _x_7 } else {<f64>::default()};  constant::F_CONSTANT_6(_item0_) }

fn _semaction_rule_7_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> constant<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  constant::ENUMERATION_CONSTANT_7(_item0_) }

fn _semaction_rule_8_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> stringnt<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  stringnt::STRING_LITERAL_8(_item0_) }

fn _semaction_rule_9_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> stringnt<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  stringnt::FUNC_NAME }

fn _semaction_rule_10_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<generic_association<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<generic_association<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_11_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<generic_association<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<generic_association<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_91(_x_91)=parser.popstack().value { _x_91 } else {<Vec<LBox<generic_association<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_12_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_selection<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_91(_x_91)=parser.popstack().value { _x_91 } else {<Vec<LBox<generic_association<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  generic_selection {_item2_:parser.lbx(2,_item2_), _item4_,} }

fn _semaction_rule_13_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_association<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<type_name<'lt>>::default()};  generic_association::generic_association_13(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_14_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_association<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  generic_association::DEFAULT_14(parser.lbx(2,_item2_)) }

fn _semaction_rule_15_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<primary_expression<'lt>>::default()};  postfix_expression::postfix_expression_15(parser.lbx(0,_item0_)) }

fn _semaction_rule_16_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_16(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_17_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_17(parser.lbx(0,_item0_)) }

fn _semaction_rule_18_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<argument_expression_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_18(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_19_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_19(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_20_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_20(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_21_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_21(parser.lbx(0,_item0_)) }

fn _semaction_rule_22_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_22(parser.lbx(0,_item0_)) }

fn _semaction_rule_23_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_24_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_25_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<initializer_list<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<type_name<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  postfix_expression::postfix_expression_25(parser.lbx(1,_item1_),parser.lbx(4,_item4_),_item5_) }

fn _semaction_rule_26_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<assignment_expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_27_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<assignment_expression<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_92(_x_92)=parser.popstack().value { _x_92 } else {<Vec<LBox<assignment_expression<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_28_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> argument_expression_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_92(_x_92)=parser.popstack().value { _x_92 } else {<Vec<LBox<assignment_expression<'lt>>>>::default()};  argument_expression_list {_item0_,} }

fn _semaction_rule_29_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<postfix_expression<'lt>>::default()};  unary_expression::unary_expression_29(parser.lbx(0,_item0_)) }

fn _semaction_rule_30_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<unary_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_expression::INC_OP_30(parser.lbx(1,_item1_)) }

fn _semaction_rule_31_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<unary_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_expression::DEC_OP_31(parser.lbx(1,_item1_)) }

fn _semaction_rule_32_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<cast_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<unary_operator<'lt>>::default()};  unary_expression::unary_expression_32(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_33_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<unary_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_expression::SIZEOF_33(parser.lbx(1,_item1_)) }

fn _semaction_rule_34_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_expression::SIZEOF_34(parser.lbx(2,_item2_)) }

fn _semaction_rule_35_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_expression::ALIGNOF_35(parser.lbx(2,_item2_)) }

fn _semaction_rule_36_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::Amp }

fn _semaction_rule_37_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::Star }

fn _semaction_rule_38_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::Bang }

fn _semaction_rule_39_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::UPlus }

fn _semaction_rule_40_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::UMinus }

fn _semaction_rule_41_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::Comp }

fn _semaction_rule_42_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> cast_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<unary_expression<'lt>>::default()};  cast_expression::cast_expression_42(parser.lbx(0,_item0_)) }

fn _semaction_rule_43_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> cast_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<cast_expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<type_name<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  cast_expression::cast_expression_43(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_44_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> multiplicative_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<cast_expression<'lt>>::default()};  multiplicative_expression::multiplicative_expression_44(parser.lbx(0,_item0_)) }

fn _semaction_rule_45_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> multiplicative_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<cast_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<multiplicative_expression<'lt>>::default()};  multiplicative_expression::multiplicative_expression_45(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> multiplicative_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<cast_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<multiplicative_expression<'lt>>::default()};  multiplicative_expression::multiplicative_expression_46(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_47_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> multiplicative_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<cast_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<multiplicative_expression<'lt>>::default()};  multiplicative_expression::multiplicative_expression_47(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_48_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> additive_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<multiplicative_expression<'lt>>::default()};  additive_expression::additive_expression_48(parser.lbx(0,_item0_)) }

fn _semaction_rule_49_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> additive_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<multiplicative_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<additive_expression<'lt>>::default()};  additive_expression::additive_expression_49(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> additive_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<multiplicative_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<additive_expression<'lt>>::default()};  additive_expression::additive_expression_50(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_51_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> shift_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<additive_expression<'lt>>::default()};  shift_expression::shift_expression_51(parser.lbx(0,_item0_)) }

fn _semaction_rule_52_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> shift_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<additive_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<shift_expression<'lt>>::default()};  shift_expression::shift_expression_52(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_53_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> shift_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<additive_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<shift_expression<'lt>>::default()};  shift_expression::shift_expression_53(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_54_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<shift_expression<'lt>>::default()};  relational_expression::relational_expression_54(parser.lbx(0,_item0_)) }

fn _semaction_rule_55_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<relational_expression<'lt>>::default()};  relational_expression::relational_expression_55(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_56_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<relational_expression<'lt>>::default()};  relational_expression::relational_expression_56(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_57_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<relational_expression<'lt>>::default()};  relational_expression::relational_expression_57(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_58_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<relational_expression<'lt>>::default()};  relational_expression::relational_expression_58(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_59_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> equality_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<relational_expression<'lt>>::default()};  equality_expression::equality_expression_59(parser.lbx(0,_item0_)) }

fn _semaction_rule_60_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> equality_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<relational_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<equality_expression<'lt>>::default()};  equality_expression::equality_expression_60(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_61_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> equality_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<relational_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<equality_expression<'lt>>::default()};  equality_expression::equality_expression_61(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_62_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> and_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<equality_expression<'lt>>::default()};  and_expression::and_expression_62(parser.lbx(0,_item0_)) }

fn _semaction_rule_63_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> and_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<equality_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_21(_x_21)=parser.popstack().value { _x_21 } else {<and_expression<'lt>>::default()};  and_expression::and_expression_63(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_64_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> exclusive_or_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_21(_x_21)=parser.popstack().value { _x_21 } else {<and_expression<'lt>>::default()};  exclusive_or_expression::exclusive_or_expression_64(parser.lbx(0,_item0_)) }

fn _semaction_rule_65_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> exclusive_or_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_21(_x_21)=parser.popstack().value { _x_21 } else {<and_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_22(_x_22)=parser.popstack().value { _x_22 } else {<exclusive_or_expression<'lt>>::default()};  exclusive_or_expression::exclusive_or_expression_65(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_66_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> inclusive_or_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_22(_x_22)=parser.popstack().value { _x_22 } else {<exclusive_or_expression<'lt>>::default()};  inclusive_or_expression::inclusive_or_expression_66(parser.lbx(0,_item0_)) }

fn _semaction_rule_67_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> inclusive_or_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_22(_x_22)=parser.popstack().value { _x_22 } else {<exclusive_or_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_23(_x_23)=parser.popstack().value { _x_23 } else {<inclusive_or_expression<'lt>>::default()};  inclusive_or_expression::inclusive_or_expression_67(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_68_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> logical_and_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_23(_x_23)=parser.popstack().value { _x_23 } else {<inclusive_or_expression<'lt>>::default()};  logical_and_expression::logical_and_expression_68(parser.lbx(0,_item0_)) }

fn _semaction_rule_69_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> logical_and_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_23(_x_23)=parser.popstack().value { _x_23 } else {<inclusive_or_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_24(_x_24)=parser.popstack().value { _x_24 } else {<logical_and_expression<'lt>>::default()};  logical_and_expression::logical_and_expression_69(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_70_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> logical_or_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_24(_x_24)=parser.popstack().value { _x_24 } else {<logical_and_expression<'lt>>::default()};  logical_or_expression::logical_or_expression_70(parser.lbx(0,_item0_)) }

fn _semaction_rule_71_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> logical_or_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_24(_x_24)=parser.popstack().value { _x_24 } else {<logical_and_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_25(_x_25)=parser.popstack().value { _x_25 } else {<logical_or_expression<'lt>>::default()};  logical_or_expression::logical_or_expression_71(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_72_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> conditional_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_25(_x_25)=parser.popstack().value { _x_25 } else {<logical_or_expression<'lt>>::default()};  conditional_expression::conditional_expression_72(parser.lbx(0,_item0_)) }

fn _semaction_rule_73_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> conditional_expression<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<conditional_expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_25(_x_25)=parser.popstack().value { _x_25 } else {<logical_or_expression<'lt>>::default()};  conditional_expression::conditional_expression_73(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_74_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<conditional_expression<'lt>>::default()};  assignment_expression::assignment_expression_74(parser.lbx(0,_item0_)) }

fn _semaction_rule_75_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<assignment_operator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<unary_expression<'lt>>::default()};  assignment_expression::assignment_expression_75(parser.lbx(0,_item0_),parser.lbx(1,_item1_),parser.lbx(2,_item2_)) }

fn _semaction_rule_76_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::Eq1 }

fn _semaction_rule_77_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::MUL_ASSIGN }

fn _semaction_rule_78_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::DIV_ASSIGN }

fn _semaction_rule_79_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::MOD_ASSIGN }

fn _semaction_rule_80_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::ADD_ASSIGN }

fn _semaction_rule_81_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::SUB_ASSIGN }

fn _semaction_rule_82_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::LEFT_ASSIGN }

fn _semaction_rule_83_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::RIGHT_ASSIGN }

fn _semaction_rule_84_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::AND_ASSIGN }

fn _semaction_rule_85_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::XOR_ASSIGN }

fn _semaction_rule_86_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::OR_ASSIGN }

fn _semaction_rule_87_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<assignment_expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_88_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<assignment_expression<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_92(_x_92)=parser.popstack().value { _x_92 } else {<Vec<LBox<assignment_expression<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_89_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut assignments = if let RetTypeEnum::Enumvariant_92(_x_92)=parser.popstack().value { _x_92 } else {<Vec<LBox<assignment_expression<'lt>>>>::default()};  expression {assignments,} }

fn _semaction_rule_90_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> constant_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<conditional_expression<'lt>>::default()};  constant_expression {_item0_:parser.lbx(0,_item0_), } }

fn _semaction_rule_91_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<declaration_specifiers<'lt>>::default()};  declaration::DecSpec(parser.lbx(0,_item0_)) }

fn _semaction_rule_92_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut il = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<init_declarator_list<'lt>>::default()}; let mut ds = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<declaration_specifiers<'lt>>::default()};  declaration::DecSpecList(parser.lbx(0,ds),parser.lbx(1,il)) }

fn _semaction_rule_93_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<static_assert_declaration<'lt>>::default()};  declaration::Statassert(parser.lbx(0,_item0_)) }

fn _semaction_rule_94_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<storage_class_specifier<'lt>>::default()};  declaration_specifier::storage(parser.lbx(0,_item0_)) }

fn _semaction_rule_95_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_36(_x_36)=parser.popstack().value { _x_36 } else {<type_specifier<'lt>>::default()};  declaration_specifier::typespec(parser.lbx(0,_item0_)) }

fn _semaction_rule_96_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<type_qualifier<'lt>>::default()};  declaration_specifier::typequal(parser.lbx(0,_item0_)) }

fn _semaction_rule_97_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_80(_x_80)=parser.popstack().value { _x_80 } else {<function_specifier<'lt>>::default()};  declaration_specifier::funcspec(parser.lbx(0,_item0_)) }

fn _semaction_rule_98_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_81(_x_81)=parser.popstack().value { _x_81 } else {<alignment_specifier<'lt>>::default()};  declaration_specifier::alignspec(parser.lbx(0,_item0_)) }

fn _semaction_rule_99_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration_specifier<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_86(_x_86)=parser.popstack().value { _x_86 } else {<declaration_specifier<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_100_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration_specifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_86(_x_86)=parser.popstack().value { _x_86 } else {<declaration_specifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_93(_x_93)=parser.popstack().value { _x_93 } else {<Vec<LBox<declaration_specifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_101_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_93(_x_93)=parser.popstack().value { _x_93 } else {<Vec<LBox<declaration_specifier<'lt>>>>::default()};  declaration_specifiers {_item0_,} }

fn _semaction_rule_102_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<init_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<init_declarator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_103_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<init_declarator<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<init_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_94(_x_94)=parser.popstack().value { _x_94 } else {<Vec<LBox<init_declarator<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_104_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> init_declarator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_94(_x_94)=parser.popstack().value { _x_94 } else {<Vec<LBox<init_declarator<'lt>>>>::default()};  init_declarator_list {_item0_,} }

fn _semaction_rule_105_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<initializer<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  _item1_ }

fn _semaction_rule_106_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<initializer<'lt>>> {
 None }

fn _semaction_rule_107_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<initializer<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<initializer<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_108_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> init_declarator<'lt> {
let mut initializer = if let RetTypeEnum::Enumvariant_95(_x_95)=parser.popstack().value { _x_95 } else {<Option<LBox<initializer<'lt>>>>::default()}; let mut declarator = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<declarator<'lt>>::default()};  init_declarator {declarator:parser.lbx(0,declarator), initializer,} }

fn _semaction_rule_109_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::EXTERN }

fn _semaction_rule_110_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::STATIC }

fn _semaction_rule_111_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::AUTO }

fn _semaction_rule_112_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::REGISTER }

fn _semaction_rule_113_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::THREAD_LOCAL }

fn _semaction_rule_114_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::TYPEDEF }

fn _semaction_rule_115_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  type_specifier::Typename(_item0_) }

fn _semaction_rule_116_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::VOID }

fn _semaction_rule_117_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::CHAR }

fn _semaction_rule_118_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::SHORT }

fn _semaction_rule_119_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::INT }

fn _semaction_rule_120_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::LONG }

fn _semaction_rule_121_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::FLOAT }

fn _semaction_rule_122_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::DOUBLE }

fn _semaction_rule_123_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::SIGNED }

fn _semaction_rule_124_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::UNSIGNED }

fn _semaction_rule_125_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::BOOL }

fn _semaction_rule_126_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::COMPLEX }

fn _semaction_rule_127_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::IMAGINARY }

fn _semaction_rule_128_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<struct_or_union_specifier<'lt>>::default()};  type_specifier::type_specifier_128(parser.lbx(0,_item0_)) }

fn _semaction_rule_129_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<enum_specifier<'lt>>::default()};  type_specifier::type_specifier_129(parser.lbx(0,_item0_)) }

fn _semaction_rule_130_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_82(_x_82)=parser.popstack().value { _x_82 } else {<atomic_type_specifier<'lt>>::default()};  type_specifier::type_specifier_130(parser.lbx(0,_item0_)) }

fn _semaction_rule_131_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<&'lt str>> {
 None }

fn _semaction_rule_132_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<&'lt str>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_133_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union_specifier<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_39(_x_39)=parser.popstack().value { _x_39 } else {<struct_declaration_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_96(_x_96)=parser.popstack().value { _x_96 } else {<Option<LBox<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_38(_x_38)=parser.popstack().value { _x_38 } else {<struct_or_union<'lt>>::default()};  struct_or_union_specifier::struct_or_union_specifier_133(parser.lbx(0,_item0_),_item1_,parser.lbx(3,_item3_)) }

fn _semaction_rule_134_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union_specifier<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_38(_x_38)=parser.popstack().value { _x_38 } else {<struct_or_union<'lt>>::default()};  struct_or_union_specifier::struct_or_union_specifier_134(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_135_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union<'lt> {
let mut x = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  struct_or_union::STRUCT(x) }

fn _semaction_rule_136_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union<'lt> {
let mut x = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  struct_or_union::UNION(x) }

fn _semaction_rule_137_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<struct_declarator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_138_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<struct_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_97(_x_97)=parser.popstack().value { _x_97 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_139_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
 vec![] }

fn _semaction_rule_140_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_97(_x_97)=parser.popstack().value { _x_97 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()}; _item0_ }

fn _semaction_rule_141_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declaration<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_97(_x_97)=parser.popstack().value { _x_97 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_41(_x_41)=parser.popstack().value { _x_41 } else {<specifier_qualifier_list<'lt>>::default()};  struct_declaration::struct_declaration_141(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_142_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<static_assert_declaration<'lt>>::default()};  struct_declaration::struct_declaration_142(parser.lbx(0,_item0_)) }

fn _semaction_rule_143_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declaration<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_40(_x_40)=parser.popstack().value { _x_40 } else {<struct_declaration<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_144_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declaration<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_40(_x_40)=parser.popstack().value { _x_40 } else {<struct_declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_98(_x_98)=parser.popstack().value { _x_98 } else {<Vec<LBox<struct_declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_145_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declaration_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_98(_x_98)=parser.popstack().value { _x_98 } else {<Vec<LBox<struct_declaration<'lt>>>>::default()};  struct_declaration_list {_item0_,} }

fn _semaction_rule_146_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_36(_x_36)=parser.popstack().value { _x_36 } else {<type_specifier<'lt>>::default()};  specifier_qualifier::specifier_qualifier_146(parser.lbx(0,_item0_)) }

fn _semaction_rule_147_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<type_qualifier<'lt>>::default()};  specifier_qualifier::specifier_qualifier_147(parser.lbx(0,_item0_)) }

fn _semaction_rule_148_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<specifier_qualifier<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_87(_x_87)=parser.popstack().value { _x_87 } else {<specifier_qualifier<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_149_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<specifier_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_87(_x_87)=parser.popstack().value { _x_87 } else {<specifier_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_99(_x_99)=parser.popstack().value { _x_99 } else {<Vec<LBox<specifier_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_150_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_99(_x_99)=parser.popstack().value { _x_99 } else {<Vec<LBox<specifier_qualifier<'lt>>>>::default()};  specifier_qualifier_list {_item0_,} }

fn _semaction_rule_151_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<struct_declarator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_152_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declarator<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<struct_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_97(_x_97)=parser.popstack().value { _x_97 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_153_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_97(_x_97)=parser.popstack().value { _x_97 } else {<Vec<LBox<struct_declarator<'lt>>>>::default()};  struct_declarator_list {_item0_,} }

fn _semaction_rule_154_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<declarator<'lt>>::default()};  struct_declarator::struct_declarator_154(parser.lbx(0,_item0_)) }

fn _semaction_rule_155_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  struct_declarator::Colon_155(parser.lbx(1,_item1_)) }

fn _semaction_rule_156_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<declarator<'lt>>::default()};  struct_declarator::struct_declarator_156(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_157_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<enumerator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<enumerator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_158_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<enumerator<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<enumerator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_100(_x_100)=parser.popstack().value { _x_100 } else {<Vec<LBox<enumerator<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_159_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_160_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_161_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enum_specifier<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_100(_x_100)=parser.popstack().value { _x_100 } else {<Vec<LBox<enumerator<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  enum_specifier::ENUM_161(_item2_,_item3_) }

fn _semaction_rule_162_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_163_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_164_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enum_specifier<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<enumerator_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  enum_specifier::ENUM_164(_item1_,parser.lbx(3,_item3_),_item4_) }

fn _semaction_rule_165_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enum_specifier<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  enum_specifier::ENUM_165(_item1_) }

fn _semaction_rule_166_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enumerator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<enumerator<'lt>>::default()};  enumerator_list::enumerator_list_166(parser.lbx(0,_item0_)) }

fn _semaction_rule_167_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enumerator_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<enumerator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<enumerator_list<'lt>>::default()};  enumerator_list::enumerator_list_167(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_168_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> constant_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  _item1_ }

fn _semaction_rule_169_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<constant_expression<'lt>>> {
 None }

fn _semaction_rule_170_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<constant_expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<constant_expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_171_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enumerator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_101(_x_101)=parser.popstack().value { _x_101 } else {<Option<LBox<constant_expression<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  enumerator {_item0_,_item1_,} }

fn _semaction_rule_172_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> atomic_type_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  atomic_type_specifier {_item2_:parser.lbx(2,_item2_), } }

fn _semaction_rule_173_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::CONST }

fn _semaction_rule_174_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::VOLATILE }

fn _semaction_rule_175_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::ATOMIC }

fn _semaction_rule_176_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::RESTRICT }

fn _semaction_rule_177_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> function_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  function_specifier::INLINE }

fn _semaction_rule_178_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> function_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  function_specifier::NORETURN }

fn _semaction_rule_179_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> alignment_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  alignment_specifier::ALIGNAS_179(parser.lbx(2,_item2_)) }

fn _semaction_rule_180_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> alignment_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  alignment_specifier::ALIGNAS_180(parser.lbx(2,_item2_)) }

fn _semaction_rule_181_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<pointer<'lt>>::default()};  declarator::declarator_181(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_182_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  declarator::declarator_182(parser.lbx(0,_item0_)) }

fn _semaction_rule_183_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  direct_declarator::IDENTIFIER_183(_item0_) }

fn _semaction_rule_184_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_declarator::direct_declarator_184(parser.lbx(1,_item1_)) }

fn _semaction_rule_185_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_185(parser.lbx(0,_item0_)) }

fn _semaction_rule_186_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_186(parser.lbx(0,_item0_)) }

fn _semaction_rule_187_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<type_qualifier_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_187(parser.lbx(0,_item0_),parser.lbx(3,_item3_),parser.lbx(4,_item4_)) }

fn _semaction_rule_188_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_188(parser.lbx(0,_item0_),parser.lbx(3,_item3_)) }

fn _semaction_rule_189_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_189(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_190_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_190(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(3,_item3_)) }

fn _semaction_rule_191_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_191(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_192_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_192(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_193_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_193(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_194_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<parameter_type_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_194(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_195_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<identifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_195(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_196_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_196(parser.lbx(0,_item0_)) }

fn _semaction_rule_197_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
 Vec::new() }

fn _semaction_rule_198_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_199_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<pointer<'lt>>> {
 None }

fn _semaction_rule_200_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<pointer<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<pointer<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_201_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> pointer<'lt> {
let mut ptr = if let RetTypeEnum::Enumvariant_103(_x_103)=parser.popstack().value { _x_103 } else {<Option<LBox<pointer<'lt>>>>::default()}; let mut tql = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  pointer {tql,ptr,} }

fn _semaction_rule_202_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<type_qualifier<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_203_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_204_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  type_qualifier_list {_item0_,} }

fn _semaction_rule_205_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<parameter_declaration<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<parameter_declaration<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_206_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<parameter_declaration<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<parameter_declaration<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_104(_x_104)=parser.popstack().value { _x_104 } else {<Vec<LBox<parameter_declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_207_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> SEQNT_207_0<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  SEQNT_207_0 {phantom:PhantomData, } }

fn _semaction_rule_208_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<SEQNT_207_0<'lt>>> {
 None }

fn _semaction_rule_209_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<SEQNT_207_0<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_118(_x_118)=parser.popstack().value { _x_118 } else {<SEQNT_207_0<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_210_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_type_list<'lt> {
let mut ellipsis = if let RetTypeEnum::Enumvariant_106(_x_106)=parser.popstack().value { _x_106 } else {<Option<LBox<SEQNT_207_0<'lt>>>>::default()}; let mut parameters = if let RetTypeEnum::Enumvariant_104(_x_104)=parser.popstack().value { _x_104 } else {<Vec<LBox<parameter_declaration<'lt>>>>::default()};  parameter_type_list {parameters,ellipsis,} }

fn _semaction_rule_211_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<declaration_specifiers<'lt>>::default()};  parameter_declaration::parameter_declaration_211(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_212_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<declaration_specifiers<'lt>>::default()};  parameter_declaration::parameter_declaration_212(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_213_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<declaration_specifiers<'lt>>::default()};  parameter_declaration::parameter_declaration_213(parser.lbx(0,_item0_)) }

fn _semaction_rule_214_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<&'lt str>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_215_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<&'lt str>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_107(_x_107)=parser.popstack().value { _x_107 } else {<Vec<LBox<&'lt str>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_216_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> identifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_107(_x_107)=parser.popstack().value { _x_107 } else {<Vec<LBox<&'lt str>>>::default()};  identifier_list {_item0_,} }

fn _semaction_rule_217_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<abstract_declarator<'lt>>> {
 None }

fn _semaction_rule_218_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<abstract_declarator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<abstract_declarator<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_219_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_name<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_108(_x_108)=parser.popstack().value { _x_108 } else {<Option<LBox<abstract_declarator<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_41(_x_41)=parser.popstack().value { _x_41 } else {<specifier_qualifier_list<'lt>>::default()};  type_name {_item0_:parser.lbx(0,_item0_), _item1_,} }

fn _semaction_rule_220_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> abstract_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<pointer<'lt>>::default()};  abstract_declarator::abstract_declarator_220(parser.lbx(0,_item0_)) }

fn _semaction_rule_221_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> abstract_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()};  abstract_declarator::abstract_declarator_221(parser.lbx(0,_item0_)) }

fn _semaction_rule_222_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<pointer<'lt>>::default()};  abstract_declarator::abstract_declarator_222(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_223_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_223(parser.lbx(1,_item1_)) }

fn _semaction_rule_224_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_224 }

fn _semaction_rule_225_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_225 }

fn _semaction_rule_226_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
 Vec::new() }

fn _semaction_rule_227_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_228_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_228(_item2_,parser.lbx(3,_item3_)) }

fn _semaction_rule_229_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
 None }

fn _semaction_rule_230_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  Some(_item0_) }

fn _semaction_rule_231_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<assignment_expression<'lt>>> {
 None }

fn _semaction_rule_232_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<assignment_expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_233_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_110(_x_110)=parser.popstack().value { _x_110 } else {<Option<LBox<assignment_expression<'lt>>>>::default()}; let mut s = if let RetTypeEnum::Enumvariant_109(_x_109)=parser.popstack().value { _x_109 } else {<Option<()>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<type_qualifier_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_233(parser.lbx(1,_item1_),parser.lbx(2,s),_item3_) }

fn _semaction_rule_234_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_234(parser.lbx(1,_item1_)) }

fn _semaction_rule_235_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_235(parser.lbx(0,_item0_)) }

fn _semaction_rule_236_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_236(parser.lbx(0,_item0_)) }

fn _semaction_rule_237_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
 Vec::new() }

fn _semaction_rule_238_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_239_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_102(_x_102)=parser.popstack().value { _x_102 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_239(parser.lbx(0,_item0_),_item3_,parser.lbx(4,_item4_)) }

fn _semaction_rule_240_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
 None }

fn _semaction_rule_241_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  Some(_item0_) }

fn _semaction_rule_242_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut s = if let RetTypeEnum::Enumvariant_109(_x_109)=parser.popstack().value { _x_109 } else {<Option<()>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_242(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(3,s),parser.lbx(4,_item4_)) }

fn _semaction_rule_243_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_243(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_244_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_244(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_245_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_245 }

fn _semaction_rule_246_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<parameter_type_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_246(parser.lbx(1,_item1_)) }

fn _semaction_rule_247_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_247(parser.lbx(0,_item0_)) }

fn _semaction_rule_248_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<parameter_type_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_248(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_249_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_expression<'lt>>::default()};  initializer::initializer_249(parser.lbx(0,_item0_)) }

fn _semaction_rule_250_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<initializer_designation<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_88(_x_88)=parser.popstack().value { _x_88 } else {<initializer_designation<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_251_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<initializer_designation<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_88(_x_88)=parser.popstack().value { _x_88 } else {<initializer_designation<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_111(_x_111)=parser.popstack().value { _x_111 } else {<Vec<LBox<initializer_designation<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_252_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_253_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_254_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_111(_x_111)=parser.popstack().value { _x_111 } else {<Vec<LBox<initializer_designation<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  initializer::Lbrace_254(_item1_,_item2_) }

fn _semaction_rule_255_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<designation<'lt>>> {
 None }

fn _semaction_rule_256_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<designation<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_79(_x_79)=parser.popstack().value { _x_79 } else {<designation<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_257_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer_designation<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<initializer<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_112(_x_112)=parser.popstack().value { _x_112 } else {<Option<LBox<designation<'lt>>>>::default()};  initializer_designation {_item0_,_item1_:parser.lbx(1,_item1_), } }

fn _semaction_rule_258_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_84(_x_84)=parser.popstack().value { _x_84 } else {<designator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_259_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_84(_x_84)=parser.popstack().value { _x_84 } else {<designator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_113(_x_113)=parser.popstack().value { _x_113 } else {<Vec<LBox<designator<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_260_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designation<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_113(_x_113)=parser.popstack().value { _x_113 } else {<Vec<LBox<designator<'lt>>>>::default()};  designation {_item0_,} }

fn _semaction_rule_261_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_84(_x_84)=parser.popstack().value { _x_84 } else {<designator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_262_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_84(_x_84)=parser.popstack().value { _x_84 } else {<designator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_113(_x_113)=parser.popstack().value { _x_113 } else {<Vec<LBox<designator<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_263_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_113(_x_113)=parser.popstack().value { _x_113 } else {<Vec<LBox<designator<'lt>>>>::default()};  designator_list {_item0_,} }

fn _semaction_rule_264_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  designator::designator_264(parser.lbx(1,_item1_)) }

fn _semaction_rule_265_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  designator::Dot_265(_item1_) }

fn _semaction_rule_266_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> static_assert_declaration<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  static_assert_declaration {_item2_:parser.lbx(2,_item2_), _item4_,} }

fn _semaction_rule_267_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<labeled_statement<'lt>>::default()};  statement::statement_267(parser.lbx(0,_item0_)) }

fn _semaction_rule_268_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<compound_statement<'lt>>::default()};  statement::statement_268(parser.lbx(0,_item0_)) }

fn _semaction_rule_269_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<expression_statement<'lt>>::default()};  statement::statement_269(parser.lbx(0,_item0_)) }

fn _semaction_rule_270_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<selection_statement<'lt>>::default()};  statement::statement_270(parser.lbx(0,_item0_)) }

fn _semaction_rule_271_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<iteration_statement<'lt>>::default()};  statement::statement_271(parser.lbx(0,_item0_)) }

fn _semaction_rule_272_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<jump_statement<'lt>>::default()};  statement::statement_272(parser.lbx(0,_item0_)) }

fn _semaction_rule_273_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> labeled_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  labeled_statement::IDENTIFIER_273(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_274_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> labeled_statement<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  labeled_statement::CASE_274(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_275_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> labeled_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  labeled_statement::DEFAULT_275(parser.lbx(2,_item2_)) }

fn _semaction_rule_276_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<block_item<'lt>>> {
 Vec::new() }

fn _semaction_rule_277_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<block_item<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_85(_x_85)=parser.popstack().value { _x_85 } else {<block_item<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_114(_x_114)=parser.popstack().value { _x_114 } else {<Vec<LBox<block_item<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_278_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> compound_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut statements = if let RetTypeEnum::Enumvariant_114(_x_114)=parser.popstack().value { _x_114 } else {<Vec<LBox<block_item<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  compound_statement {statements,} }

fn _semaction_rule_279_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> block_item<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration<'lt>>::default()};  block_item::Declaration(parser.lbx(0,_item0_)) }

fn _semaction_rule_280_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> block_item<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()};  block_item::Statement(parser.lbx(0,_item0_)) }

fn _semaction_rule_281_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
 None }

fn _semaction_rule_282_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_283_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_115(_x_115)=parser.popstack().value { _x_115 } else {<Option<LBox<expression<'lt>>>>::default()};  expression_statement {_item0_,} }

fn _semaction_rule_284_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> selection_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  selection_statement::IF_284(parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_285_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> selection_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  selection_statement::IF_285(parser.lbx(2,_item2_),parser.lbx(4,_item4_),parser.lbx(6,_item6_)) }

fn _semaction_rule_286_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> selection_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  selection_statement::SWITCH_286(parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_287_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::WHILE_287(parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_288_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::DO_288(parser.lbx(1,_item1_),parser.lbx(4,_item4_)) }

fn _semaction_rule_289_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
 None }

fn _semaction_rule_290_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_291_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_115(_x_115)=parser.popstack().value { _x_115 } else {<Option<LBox<expression<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<expression_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<expression_statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::FOR_291(parser.lbx(2,_item2_),parser.lbx(3,_item3_),_item4_,parser.lbx(6,_item6_)) }

fn _semaction_rule_292_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
 None }

fn _semaction_rule_293_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_294_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_115(_x_115)=parser.popstack().value { _x_115 } else {<Option<LBox<expression<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<expression_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::FOR_294(parser.lbx(2,_item2_),parser.lbx(3,_item3_),_item4_,parser.lbx(6,_item6_)) }

fn _semaction_rule_295_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::GOTO_295(_item1_) }

fn _semaction_rule_296_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::CONTINUE_296 }

fn _semaction_rule_297_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::BREAK_297 }

fn _semaction_rule_298_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::RETURN_298 }

fn _semaction_rule_299_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::RETURN_299(parser.lbx(1,_item1_)) }

fn _semaction_rule_300_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<external_declaration<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_71(_x_71)=parser.popstack().value { _x_71 } else {<external_declaration<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_301_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<external_declaration<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_71(_x_71)=parser.popstack().value { _x_71 } else {<external_declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_116(_x_116)=parser.popstack().value { _x_116 } else {<Vec<LBox<external_declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_302_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> translation_unit<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_116(_x_116)=parser.popstack().value { _x_116 } else {<Vec<LBox<external_declaration<'lt>>>>::default()};  translation_unit {_item0_,} }

fn _semaction_rule_303_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<function_definition<'lt>>::default()};  external_declaration::external_declaration_303(parser.lbx(0,_item0_)) }

fn _semaction_rule_304_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration<'lt>>::default()};  external_declaration::external_declaration_304(parser.lbx(0,_item0_)) }

fn _semaction_rule_305_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<&'lt str>::default()};  external_declaration::directive(_item0_) }

fn _semaction_rule_306_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration<'lt>>> {
 Vec::new() }

fn _semaction_rule_307_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_117(_x_117)=parser.popstack().value { _x_117 } else {<Vec<LBox<declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_308_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> function_definition<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<compound_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_117(_x_117)=parser.popstack().value { _x_117 } else {<Vec<LBox<declaration<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<declaration_specifiers<'lt>>::default()};  function_definition {_item0_:parser.lbx(0,_item0_), _item1_:parser.lbx(1,_item1_), _item2_,_item3_:parser.lbx(3,_item3_), } }

fn _semaction_rule_309_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> translation_unit<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<translation_unit<'lt>>::default()}; <translation_unit<'lt>>::default()}

pub fn make_parser<'lt>() -> ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>
{
 let mut parser1:ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>> = ZCParser::new(310,482);
 let mut rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("constant");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("constant");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("constant");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("stringnt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("stringnt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_10_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_91(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_10_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_91(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_selection");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_association");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_77(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_association");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_77(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_23_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_23_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_26_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_92(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_26_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_92(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("argument_expression_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("cast_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_15(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("cast_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_15(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_16(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_16(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_16(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_16(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("additive_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_17(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("additive_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_17(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("additive_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_17(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("shift_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_18(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("shift_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_18(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("shift_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_18(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("equality_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_20(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("equality_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_20(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("equality_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_20(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_21(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_21(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("exclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_22(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("exclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_22(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("inclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_23(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("inclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_23(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("logical_and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_24(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("logical_and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_24(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("logical_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_25(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("logical_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_25(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("conditional_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_72_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("conditional_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_73_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_74_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_75_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_76_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_77_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_78_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_79_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_80_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_81_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_82_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_83_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_84_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_85_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_86_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_87_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_92(_semaction_rule_87_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_87_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_92(_semaction_rule_88_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_29(_semaction_rule_89_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("constant_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_90_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_91_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_92_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_93_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_86(_semaction_rule_94_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_86(_semaction_rule_95_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_86(_semaction_rule_96_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_86(_semaction_rule_97_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_86(_semaction_rule_98_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_99_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_93(_semaction_rule_99_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_99_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_93(_semaction_rule_100_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_32(_semaction_rule_101_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_102_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_94(_semaction_rule_102_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_102_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_94(_semaction_rule_103_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("init_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_104_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("SEQNT_105_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_105_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_106_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_95(_semaction_rule_106_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_106_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_95(_semaction_rule_107_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("init_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_108_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_109_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_110_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_111_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_112_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_113_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_114_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_115_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_116_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_117_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_118_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_119_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_120_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_121_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_122_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_123_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_124_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_125_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_126_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_127_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_128_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_129_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_130_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_131_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_131_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_131_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_132_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_133_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_134_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_38(_semaction_rule_135_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_38(_semaction_rule_136_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_137_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_137_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_137_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_138_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT2_139_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_139_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT2_139_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_140_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_40(_semaction_rule_141_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_40(_semaction_rule_142_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_143_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_98(_semaction_rule_143_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_143_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_98(_semaction_rule_144_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declaration_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_39(_semaction_rule_145_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_87(_semaction_rule_146_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_87(_semaction_rule_147_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_148_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_99(_semaction_rule_148_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_148_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_99(_semaction_rule_149_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_41(_semaction_rule_150_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_151_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_151_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_151_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_152_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_42(_semaction_rule_153_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_43(_semaction_rule_154_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_43(_semaction_rule_155_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_43(_semaction_rule_156_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_157_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_100(_semaction_rule_157_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_157_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_100(_semaction_rule_158_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_159_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_159_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_159_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_160_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_44(_semaction_rule_161_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_162_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_162_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_162_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_163_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_44(_semaction_rule_164_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_44(_semaction_rule_165_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enumerator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_166_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enumerator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_167_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("SEQNT_168_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_168_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_169_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_101(_semaction_rule_169_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_169_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_101(_semaction_rule_170_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enumerator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_171_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("atomic_type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_82(_semaction_rule_172_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_173_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_174_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_175_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_176_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("function_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_80(_semaction_rule_177_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("function_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_80(_semaction_rule_178_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("alignment_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_81(_semaction_rule_179_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("alignment_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_81(_semaction_rule_180_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_181_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_182_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_183_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_184_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_185_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_186_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_187_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_188_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_189_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_190_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_191_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_192_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_193_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_194_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_195_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_196_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_197_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_197_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_197_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_198_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_199_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_103(_semaction_rule_199_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_199_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_103(_semaction_rule_200_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("pointer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_50(_semaction_rule_201_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_202_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_202_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_202_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_203_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_51(_semaction_rule_204_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_205_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_104(_semaction_rule_205_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_205_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_104(_semaction_rule_206_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("SEQNT_207_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_118(_semaction_rule_207_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_208_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_106(_semaction_rule_208_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_208_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_106(_semaction_rule_209_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_type_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_52(_semaction_rule_210_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_211_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_212_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_213_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_214_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_107(_semaction_rule_214_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_214_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_107(_semaction_rule_215_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("identifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_216_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_217_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_108(_semaction_rule_217_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_217_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_108(_semaction_rule_218_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_name");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_219_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_220_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_221_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_222_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_223_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_224_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_225_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_226_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_226_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_226_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_227_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_228_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_229_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_109(_semaction_rule_229_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_229_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_109(_semaction_rule_230_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_231_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_110(_semaction_rule_231_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_231_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_110(_semaction_rule_232_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_233_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_234_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_235_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_236_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_237_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_237_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_237_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_102(_semaction_rule_238_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_239_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_240_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_109(_semaction_rule_240_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_240_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_109(_semaction_rule_241_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_242_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_243_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_244_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_245_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_246_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_247_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_248_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_249_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_250_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_111(_semaction_rule_250_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWSEPNT_250_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_111(_semaction_rule_251_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_252_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_252_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_252_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_253_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_254_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_255_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_112(_semaction_rule_255_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_255_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_112(_semaction_rule_256_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer_designation");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_257_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_258_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_258_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_258_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_259_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designation");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_79(_semaction_rule_260_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_261_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_261_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_261_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_113(_semaction_rule_262_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_83(_semaction_rule_263_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_84(_semaction_rule_264_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_84(_semaction_rule_265_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("static_assert_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_266_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_267_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_268_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_269_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_270_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_271_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_272_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_273_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_274_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_275_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_276_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_114(_semaction_rule_276_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_276_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_114(_semaction_rule_277_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("compound_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_278_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("block_item");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_85(_semaction_rule_279_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("block_item");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_85(_semaction_rule_280_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_281_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_115(_semaction_rule_281_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_281_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_115(_semaction_rule_282_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_283_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_284_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_285_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_286_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_287_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_288_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_289_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_115(_semaction_rule_289_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_289_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_115(_semaction_rule_290_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_291_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_292_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_115(_semaction_rule_292_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_292_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_115(_semaction_rule_293_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_294_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_295_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_296_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_297_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_298_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_299_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_300_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_116(_semaction_rule_300_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_300_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_116(_semaction_rule_301_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("translation_unit");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_302_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_71(_semaction_rule_303_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_71(_semaction_rule_304_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_71(_semaction_rule_305_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_306_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_117(_semaction_rule_306_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWNT_306_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_117(_semaction_rule_307_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("function_definition");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_308_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_309_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";

 for i in 0..11574 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>, lexer:&mut c11blexer<'lt>) -> Result<translation_unit<'lt>,translation_unit<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse(lexer) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<translation_unit<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>, lexer:&mut c11blexer<'lt>, parserpath:&str) -> Result<translation_unit<'lt>,translation_unit<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(lexer,parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<translation_unit<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_107(Vec<LBox<&'lt str>>),
  Enumvariant_31(declaration<'lt>),
  Enumvariant_6(i32),
  Enumvariant_118(SEQNT_207_0<'lt>),
  Enumvariant_57(abstract_declarator<'lt>),
  Enumvariant_106(Option<LBox<SEQNT_207_0<'lt>>>),
  Enumvariant_102(Vec<LBox<type_qualifier<'lt>>>),
  Enumvariant_26(conditional_expression<'lt>),
  Enumvariant_34(init_declarator<'lt>),
  Enumvariant_82(atomic_type_specifier<'lt>),
  Enumvariant_47(type_qualifier<'lt>),
  Enumvariant_104(Vec<LBox<parameter_declaration<'lt>>>),
  Enumvariant_46(enumerator<'lt>),
  Enumvariant_60(initializer<'lt>),
  Enumvariant_20(equality_expression<'lt>),
  Enumvariant_68(iteration_statement<'lt>),
  Enumvariant_49(direct_declarator<'lt>),
  Enumvariant_77(generic_association<'lt>),
  Enumvariant_48(declarator<'lt>),
  Enumvariant_64(compound_statement<'lt>),
  Enumvariant_96(Option<LBox<&'lt str>>),
  Enumvariant_98(Vec<LBox<struct_declaration<'lt>>>),
  Enumvariant_16(multiplicative_expression<'lt>),
  Enumvariant_10(primary_expression<'lt>),
  Enumvariant_56(type_name<'lt>),
  Enumvariant_81(alignment_specifier<'lt>),
  Enumvariant_113(Vec<LBox<designator<'lt>>>),
  Enumvariant_14(unary_operator<'lt>),
  Enumvariant_91(Vec<LBox<generic_association<'lt>>>),
  Enumvariant_51(type_qualifier_list<'lt>),
  Enumvariant_116(Vec<LBox<external_declaration<'lt>>>),
  Enumvariant_78(static_assert_declaration<'lt>),
  Enumvariant_99(Vec<LBox<specifier_qualifier<'lt>>>),
  Enumvariant_59(direct_abstract_declarator<'lt>),
  Enumvariant_39(struct_declaration_list<'lt>),
  Enumvariant_11(postfix_expression<'lt>),
  Enumvariant_71(external_declaration<'lt>),
  Enumvariant_75(generic_selection<'lt>),
  Enumvariant_38(struct_or_union<'lt>),
  Enumvariant_21(and_expression<'lt>),
  Enumvariant_84(designator<'lt>),
  Enumvariant_117(Vec<LBox<declaration<'lt>>>),
  Enumvariant_24(logical_and_expression<'lt>),
  Enumvariant_23(inclusive_or_expression<'lt>),
  Enumvariant_30(constant_expression<'lt>),
  Enumvariant_111(Vec<LBox<initializer_designation<'lt>>>),
  Enumvariant_37(struct_or_union_specifier<'lt>),
  Enumvariant_44(enum_specifier<'lt>),
  Enumvariant_73(constant<'lt>),
  Enumvariant_43(struct_declarator<'lt>),
  Enumvariant_27(assignment_expression<'lt>),
  Enumvariant_50(pointer<'lt>),
  Enumvariant_53(parameter_list<'lt>),
  Enumvariant_2((usize,usize)),
  Enumvariant_15(cast_expression<'lt>),
  Enumvariant_18(shift_expression<'lt>),
  Enumvariant_110(Option<LBox<assignment_expression<'lt>>>),
  Enumvariant_9(&'lt str),
  Enumvariant_17(additive_expression<'lt>),
  Enumvariant_80(function_specifier<'lt>),
  Enumvariant_13(unary_expression<'lt>),
  Enumvariant_114(Vec<LBox<block_item<'lt>>>),
  Enumvariant_108(Option<LBox<abstract_declarator<'lt>>>),
  Enumvariant_36(type_specifier<'lt>),
  Enumvariant_45(enumerator_list<'lt>),
  Enumvariant_89(compiler_directive<'lt>),
  Enumvariant_103(Option<LBox<pointer<'lt>>>),
  Enumvariant_76(generic_assoc_list<'lt>),
  Enumvariant_88(initializer_designation<'lt>),
  Enumvariant_54(parameter_declaration<'lt>),
  Enumvariant_66(expression_statement<'lt>),
  Enumvariant_90(expression_list<'lt>),
  Enumvariant_95(Option<LBox<initializer<'lt>>>),
  Enumvariant_112(Option<LBox<designation<'lt>>>),
  Enumvariant_92(Vec<LBox<assignment_expression<'lt>>>),
  Enumvariant_61(initializer_list<'lt>),
  Enumvariant_100(Vec<LBox<enumerator<'lt>>>),
  Enumvariant_69(jump_statement<'lt>),
  Enumvariant_19(relational_expression<'lt>),
  Enumvariant_25(logical_or_expression<'lt>),
  Enumvariant_29(expression<'lt>),
  Enumvariant_40(struct_declaration<'lt>),
  Enumvariant_41(specifier_qualifier_list<'lt>),
  Enumvariant_63(labeled_statement<'lt>),
  Enumvariant_67(selection_statement<'lt>),
  Enumvariant_58(declaration_list<'lt>),
  Enumvariant_28(assignment_operator<'lt>),
  Enumvariant_74(stringnt<'lt>),
  Enumvariant_1(()),
  Enumvariant_22(exclusive_or_expression<'lt>),
  Enumvariant_105(SEQNT_207_0),
  Enumvariant_55(identifier_list<'lt>),
  Enumvariant_33(init_declarator_list<'lt>),
  Enumvariant_79(designation<'lt>),
  Enumvariant_85(block_item<'lt>),
  Enumvariant_87(specifier_qualifier<'lt>),
  Enumvariant_94(Vec<LBox<init_declarator<'lt>>>),
  Enumvariant_12(argument_expression_list<'lt>),
  Enumvariant_109(Option<()>),
  Enumvariant_7(f64),
  Enumvariant_65(statement_list<'lt>),
  Enumvariant_35(storage_class_specifier<'lt>),
  Enumvariant_72(function_definition<'lt>),
  Enumvariant_0(translation_unit<'lt>),
  Enumvariant_86(declaration_specifier<'lt>),
  Enumvariant_83(designator_list<'lt>),
  Enumvariant_101(Option<LBox<constant_expression<'lt>>>),
  Enumvariant_32(declaration_specifiers<'lt>),
  Enumvariant_93(Vec<LBox<declaration_specifier<'lt>>>),
  Enumvariant_52(parameter_type_list<'lt>),
  Enumvariant_97(Vec<LBox<struct_declarator<'lt>>>),
  Enumvariant_42(struct_declarator_list<'lt>),
  Enumvariant_62(statement<'lt>),
  Enumvariant_115(Option<LBox<expression<'lt>>>),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<translation_unit<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct c11blexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<HashSet<&'lt str>>>,
}
impl<'lt> c11blexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> c11blexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> c11blexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> c11blexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<HashSet<&'lt str>>::default()));
    for kw in ["volatile","_Thread_local","switch","_Bool","restrict","_Alignof","include","static","signed","goto","_Atomic","unsigned","union","return","int","define","_Alignas","double","enum","if","_Noreturn","else","auto","_Complex","for","break","const","float","_Static_assert","long","continue","__func__","struct","_Imaginary","while","short","extern","char","register","sizeof","void","do","case","_WILDCARD_TOKEN_","default","inline","_Generic","typedef",] {keywords.insert(kw);}
    for c in ['[',']','(',')','+','-','~',';','%',',','!','.','>','?','/','|','^','*','{',':','}','&','=','<',] {stk.add_single(c);}
    for d in ["==","<<","+=","|=",">=",">>","!=","/=","-=","--","&&","<=","||","&=","*=","^=","++","->","%=",] {stk.add_double(d);}
    for d in [">>=","...","<<=",] {stk.add_triple(d);}
    for (k,v) in [(r"_Atomic","ATOMIC"),(r"__func__","FUNC_NAME"),(r"%","Percent"),(r",","Comma"),(r"volatile","VOLATILE"),(r"==","EQ_OP"),(r"char","CHAR"),(r"union","UNION"),(r"while","WHILE"),(r"<<","LEFT_OP"),(r"+=","ADD_ASSIGN"),(r"continue","CONTINUE"),(r"long","LONG"),(r"!","Bang"),(r"for","FOR"),(r"_Static_assert","STATIC_ASSERT"),(r"sizeof","SIZEOF"),(r"|=","OR_ASSIGN"),(r"struct","STRUCT"),(r"short","SHORT"),(r"enum","ENUM"),(r">=","GE_OP"),(r"return","RETURN"),(r".","Dot"),(r">","Gt"),(r"?","Quest"),(r"else","ELSE"),(r"const","CONST"),(r"register","REGISTER"),(r"/","Div"),(r">>","RIGHT_OP"),(r"!=","NE_OP"),(r"switch","SWITCH"),(r"break","BREAK"),(r"_Thread_local","THREAD_LOCAL"),(r"/=","DIV_ASSIGN"),(r"static","STATIC"),(r">>=","RIGHT_ASSIGN"),(r"|","Bar"),(r"-=","SUB_ASSIGN"),(r"^","Hat"),(r"*","Star"),(r"extern","EXTERN"),(r"float","FLOAT"),(r"_Bool","BOOL"),(r"--","DEC_OP"),(r"if","IF"),(r"{","Lbrace"),(r"define","DEFINE"),(r"...","ELLIPSIS"),(r"int","INT"),(r"signed","SIGNED"),(r"unsigned","UNSIGNED"),(r"restrict","RESTRICT"),(r"&&","AND_OP"),(r"default","DEFAULT"),(r"<=","LE_OP"),(r"inline","INLINE"),(r"_Imaginary","IMAGINARY"),(r":","Colon"),(r"||","OR_OP"),(r"<<=","LEFT_ASSIGN"),(r"typedef","TYPEDEF"),(r"_Alignas","ALIGNAS"),(r"&=","AND_ASSIGN"),(r"double","DOUBLE"),(r"}","Rbrace"),(r"_Alignof","ALIGNOF"),(r"include","INCLUDE"),(r"*=","MUL_ASSIGN"),(r"&","Amp"),(r"^=","XOR_ASSIGN"),(r"auto","AUTO"),(r"_Complex","COMPLEX"),(r"goto","GOTO"),(r"=","Eq1"),(r"_Generic","GENERIC"),(r"_Noreturn","NORETURN"),(r"++","INC_OP"),(r"<","Lt"),(r"void","VOID"),(r"->","PTR_OP"),(r"do","DO"),(r"case","CASE"),(r"%=","MOD_ASSIGN"),] {lexnames.insert(k,v);}
    stk.add_custom("directive",r"(?m)^#.*$");
    c11blexer {stk,keywords,lexnames,shared_state}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for c11blexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Alphanum(n) if self.shared_state.borrow().contains(n) => Some(TerminalToken::from_raw(token,"TYPEDEF_NAME",RetTypeEnum::Enumvariant_9( n
))),
      RawToken:: Alphanum(n) => Some(TerminalToken::from_raw(token,"ENUMERATION_CONSTANT",RetTypeEnum::Enumvariant_9( n
))),
      RawToken:: Alphanum(n) => Some(TerminalToken::from_raw(token,"IDENTIFIER",RetTypeEnum::Enumvariant_9( n
))),
      RawToken:: Num(n) => Some(TerminalToken::from_raw(token,"I_CONSTANT",RetTypeEnum::Enumvariant_6( (n as i32)
))),
      RawToken:: Float(n) => Some(TerminalToken::from_raw(token,"F_CONSTANT",RetTypeEnum::Enumvariant_7( n
))),
      RawToken:: Strlit(s) => Some(TerminalToken::from_raw(token,"STRING_LITERAL",RetTypeEnum::Enumvariant_9( s
))),
      RawToken:: Custom("directive",d) => Some(TerminalToken::from_raw(token,"COMPILER_DIRECTIVE",RetTypeEnum::Enumvariant_9( d
))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_2((self.stk.previous_position(),self.stk.current_position())),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>)
{
}//end of load_extras: don't change this line as it affects augmentation
