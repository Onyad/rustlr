//Parser generated by rustlr for grammar cauto
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::cauto_ast;
use crate::cauto_ast::*;

static SYMBOLS:[&'static str;148] = ["IDENTIFIER","CONSTANT","STRING_LITERAL","TYPE_NAME","PTR_OP","INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","SIZEOF","TYPEDEF","EXTERN","STATIC","AUTO","REGISTER","CHAR","SHORT","INT","LONG","SIGNED","UNSIGNED","FLOAT","DOUBLE","CONST","VOLATILE","VOID","STRUCT","UNION","ENUM","ELLIPSIS","CASE","DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE","BREAK","RETURN","[","]","(",")","Lbrace","Rbrace","Amp","+","-","~","Bang","Bar","Hat",";","Dot","Comma","Colon","Star","Div","Percent","Lt","Gt","Eq1","Quest","Hash","primary_expression","postfix_expression","argument_expression_list","unary_expression","unary_operator","cast_expression","multiplicative_expression","additive_expression","shift_expression","relational_expression","equality_expression","and_expression","exclusive_or_expression","inclusive_or_expression","logical_and_expression","logical_or_expression","conditional_expression","assignment_expression","assignment_operator","expression","constant_expression","declaration","declaration_specifiers","init_declarator_list","init_declarator","storage_class_specifier","type_specifier","struct_or_union_specifier","struct_or_union","struct_declaration_list","struct_declaration","specifier_qualifier_list","struct_declarator_list","struct_declarator","enum_specifier","enumerator_list","enumerator","type_qualifier","declarator","direct_declarator","pointer","type_qualifier_list","parameter_type_list","parameter_list","parameter_declaration","identifier_list","type_name","abstract_declarator","direct_abstract_declarator","initializer","initializer_list","statement","labeled_statement","compound_statement","declaration_list","statement_list","expression_statement","selection_statement","iteration_statement","jump_statement","translation_unit","external_declaration","function_definition","START","EOF"];

static TABLE:[u64;7041] = [176095297536,124554838016,1245184,141734182912,322124840960,502512746497,154619936768,468153270273,184686018560,515397844993,12885229568,171800002560,163210788864,463858827265,120259608576,519691239425,133144969216,528281698305,618476797953,180390854656,446678040577,614181699585,115965296640,146030854144,150324314112,188978954240,158914707456,450972221441,167505428480,622772420609,476741500929,137440002048,472447254529,257698103296,128850919424,111671246848,523986599937,281474977955840,281994670243841,281998963310593,281732674813952,282003258408961,281797101551616,562949955977216,563216244015104,844558075101184,844893083402241,845013343535105,844592435560448,844549484969984,844566664314880,844871609679873,844691220922368,844540895428608,844596730134528,844570960986112,845009048371201,844897377386497,844875904450561,844940327976961,844553781051392,844605320986624,844601025429504,844579550068736,844437815361536,844927442878465,844588140920832,844536601378816,844888788959233,844583844839424,844575254446080,844545189740544,844562370134016,844901671632897,844609616150528,844613909086208,1126063121760258,1125912797904898,1126149021106178,1126088891564034,1126217740582914,1126045941891074,1126020172087298,1126037351956482,1126213445615618,1126011582152706,1126157611040770,1126033056989186,1126028762021890,1126058826792962,1126067416727554,1126222035550210,1126015877120002,1126024467054594,1126084596596738,1126161906008066,1126071711694850,1126080301629442,1126054531825666,1126204855681026,1126041646923778,1126076006662146,1125899913003010,1126050236858370,1407512329191426,1407632588275714,1407623998341122,1407563868798978,1407538098995202,1407542393962498,1407508034224130,1407533804027906,1407636883243010,1407550983897090,1407490854354946,1407486559387650,1407499444289538,1407688422850562,1407679832915970,1407374890237954,1407516624158722,1407503739256834,1407555278864386,1407525214093314,1407692717817858,1407495149322242,1407529509060610,1407697012785154,1407559573831682,1407520919126018,1407387775139842,1407546688929794,1689116151250944,1688849863344128,1970453692416002,1970573951500290,1970488052154370,1970440807514114,1970324843397122,1970445102481410,1970436512546818,1970646965944322,1970479462219778,1970470872285186,1970449397448706,1970337728299010,1970500937056258,1970638376009730,1970582541434882,1970492347121666,1970475167252482,1970505232023554,1970496642088962,1970466577317890,1970586836402178,1970513821958146,1970462282350594,1970509526990850,1970483757187074,1970642670977026,1970457987383298,1970629786075138,2251915783569410,2251941553373186,2252061812457474,2251958733242370,2251975913111554,2251950143307778,2251971618144258,2251963028209666,2251980208078850,2252121941999618,2251967323176962,2252104762130434,2251911488602114,2251988798013442,2251799819452418,2252113352065026,2251932963438594,2251937258405890,2251812704354306,2251928668471298,2252057517490178,2251945848340482,2251954438275074,2251984503046146,2252048927555586,2251924373504002,2251920078536706,2533420827803650,2533395057999874,2533541086887938,2533416532836354,2533442302640130,2533592626495490,2533459482509314,2533403647934466,2533446597607426,2533579741593602,2533407942901762,2533412237869058,2533536791920642,2533450892574722,2533386468065282,2533455187542018,2533463777476610,2533433712705538,2533399352967170,2533438007672834,2533429417738242,2533618396299266,2533532491579392,2533425122770946,2533523901710336,2533287683817474,2533588331528194,2533390763032578,2815278048804865,2814749768351744,2815007465209856,2815273753706497,2815071891947520,2815054713192448,2815269461491713,2815205036916737,2815209332080641,3096748733366273,3096224745062400,3096482441920512,3377815690477570,3377858640150530,3377888704921602,3377824280412162,3377961719365634,3377837165314050,3377871525052418,3377880114987010,3377957424398338,3378004669038594,3377699726360578,3377884409954306,3377867230085122,3377712611262466,3377875820019714,3378013258973186,3377854345183234,3377850050215938,3377832870346754,3377841460281346,3377948834463746,3378021848907778,3377845755248642,3377828575379458,3377811395510274,3377819985444866,3377862935117826,3659432401829890,3659363682353154,3659342207516674,3659346502483970,3659286372941826,3659355092418562,3659299257843714,3659350797451266,3659337912549378,3659359387385858,3659325027647490,3659187588694018,3659488236404738,3659294962876418,3659312142745602,3659423811895298,3659303552811010,3659496826339330,3659316437712898,3659329322614786,3659290667909122,3659436696797186,3659320732680194,3659479646470146,3659307847778306,3659174703792130,3659492531372034,3659333617582082,3940787119194114,3940791414161410,3940782824226818,3940821478932482,3940769939324930,3940907378278402,3940812888997890,3940963212853250,3940825773899778,3940971802787842,3940662565142530,3940778529259522,3940911673245698,3940898788343810,3940765644357634,3940800004096002,3940649680240642,3940838658801666,3940954622918658,3940834363834370,3940808594030594,3940795709128706,3940967507820546,3940761349390338,3940804299063298,3940774234292226,3940817183965186,3940830068867074,4222253505708034,4222442484269058,4222266390609922,4222446779236354,4222429599367170,4222382354726914,4222137541591042,4222249210740738,4222279275511810,4222292160413698,4222305045315586,4222287865446402,4222373764792322,4222236325838850,4222386649694210,4222270685577218,4222296455380994,4222438189301762,4222283570479106,4222313635250178,4222124656689154,4222309340282882,4222240620806146,4222300750348290,4222262095642626,4222274980544514,4222257800675330,4222244915773442,4503758547255298,4503737072418818,4503904576143362,4503788612026370,4503913166077954,4503749957320706,4503857331503106,4503715597582338,4503724187516930,4503719892549634,4503745662353410,4503741367386114,4503917461045250,4503848741568514,4503921756012546,4503754252288002,4503599633465346,4503762842222594,4503732777451522,4503775727124482,4503711302615042,4503612518367234,4503767137189890,4503784317059074,4503728482484226,4503861626470402,4503771432157186,4503780022091778,4785194869653506,4785203459588098,4785254999195650,4785323718672386,4785250704228354,4785233524359170,4785087495471106,4785224934424578,4785259294162946,4785190574686210,4785186279718914,4785237819326466,4785246409261058,4785336603574274,4785216344489986,4785229229391874,4785392438149122,4785199164620802,4785220639457282,4785212049522690,4785396733116418,4785242114293762,4785388143181826,4785207754555394,4785263589130242,4785332308606978,4785074610569218,4785379553247234,5066678435512322,5066738565054466,5066871709040642,5066708500283394,5066665550610434,5066807284531202,5066712795250690,5066734270087170,5066695615381506,5066863119106050,5066549586493442,5066562471395330,5066704205316098,5066661255643138,5066798694596610,5066674140545026,5066687025446914,5066854529171458,5066811579498498,5066699910348802,5066725680152578,5066691320414210,5066717090217986,5066721385185282,5066729975119874,5066682730479618,5066669845577730,5348329508765698,5348187774844930,5348144825171970,5348368163471362,5348282264125442,5348338098700290,5348273674190850,5348196364779522,5348140530204674,5348174889943042,5348037450989570,5348183479877634,5348200659746818,5348342393667586,5348209249681410,5348157710073858,5348166300008450,5348290854060034,5348286559092738,5348213544648706,5348170594975746,5348179184910338,5348136235237378,5348153415106562,5348204954714114,5348149120139266,5348192069812226,5348162005041154,5629615506718722,5629821665148930,5629662751358978,5629671341293570,5629611211751426,5629761535606786,5629632686587906,5629624096653314,5629817370181634,5629512427503618,5629636981555202,5629675636260866,5629619801686018,5629654161424386,5629667046326274,5629679931228162,5629628391620610,5629688521162754,5629748650704898,5629757240639490,5629658456391682,5629649866457090,5629641276522498,5629804485279746,5629645571489794,5629499542601730,5629813075214338,5629684226195458,5911442664194049,5911116245106688,5911107655892992,5911498497523713,5911111950925824,5910987396153344,5911142016352256,5910974512168960,5911086182170624,5911494202163201,5911425483145217,5911451252424705,5911103361843200,5911124835237888,5911421188964353,5911502792622081,5911133425631232,5911605871116291,5911099065761792,5911163489878016,5911159196942336,5911438369751041,5911597283344385,5911232209027072,5911094770532352,5911150606221312,5911120541777920,5911137721712640,5911154901778432,5911477023670273,5911296635764736,5911146310926336,5911129130860544,5911446958178305,5911090476220416,5911489908768769,5911592989818881,6192595530022914,6193080861327362,6192578350153730,6192462386036738,6192565465251842,6192569760219138,6192629889761282,6192449501134850,6192638479695874,6192625594793986,6192612709892098,6192599824990210,6192617004859394,6192707199172610,6192574055186434,6192771623682050,6192608414924802,6192591235055618,6192586940088322,6192561170284546,6192621299826690,6192604119957506,6192634184728578,6192582645121026,6474079096471554,6474061916602370,6474113456209922,6474100571308034,6474053326667778,6474104866275330,6474087686406146,6474555837841410,6474096276340738,6474040441765890,6474044736733186,6474036146798594,6474070506536962,6474083391438850,6474091981373442,6473937362550786,6473924477648898,6474246600196098,6474109161242626,6474182175686658,6474066211569666,6474049031700482,6474074801504258,6474057621635074,6755579836301314,6755524001726466,6755704390352898,6755721570222082,6755661440679938,6755571246366722,6755515411791874,6755717275254786,6755566951399426,6755554066497538,6755532591661058,6755562656432130,6755541181595650,6755536886628354,6755549771530242,6755648555778050,6755657145712642,6755519706759170,6755511116824578,6755558361464834,6755545476562946,6755584131268610,6755528296693762,6755712980287490,6755575541334018,6755399447674882,6755412332576770,6755588426235906,7037179366408194,7037041927454722,7037037632487426,7037016157650946,7037196546277378,7036998977781762,7037024747585538,7037046222422018,7037187956342786,7037050517389314,7036990387847170,7037192251310082,7037132121767938,7036986092879874,7037136416735234,7037063402291202,7036994682814466,7037029042552834,7037033337520130,7037123531833346,7037003272749058,7036874423730178,7037011862683650,7037020452618242,7037059107323906,7037054812356610,7036887308632066,7037007567716354,7318538381361154,7318671525347330,7318654345478146,7318521201491970,7318534086393858,7318495431688194,7318465366917122,7318508316590082,7318598510903298,7318667230380034,7318486841753602,7318529791426562,7318362287702018,7318611395805186,7318469661884418,7318662935412738,7318349402800130,7318504021622786,7318482546786306,7318516906524674,7318499726655490,7318491136720898,7318512611557378,7318461071949826,7318607100837890,7318525496459266,7318478251819010,7318473956851714,7600009057206272,7600339769032705,7599983285895168,7600275346423809,7600292524457985,7600146498977794,7600073484533762,7599966105370624,7599991876616192,7600013350141952,7600137909043202,7599944630796288,7599996171190272,7600000466485248,7600326883934209,7600301112688641,7600288230014977,7600296818442241,7599936042434560,7599940336484352,7599953222107136,7599824376430594,7599837256417280,7599948926025728,7599978991124480,7599970402041856,7599957516156928,7599961811189760,7600129319108610,7600004762042368,7600082074468354,7599974695501824,7600086369435650,7599987581976576,7881432492867584,7881441082081280,7881445378752512,7881475443195904,7881488326852608,7881312233127936,7881419607506944,7881612885622786,7881604295688194,7881763206725633,7881449672212480,7881771795152897,7881458262605824,7881411019145216,7881299353010178,7881484033916928,7881423902736384,7881548461113346,7881814745743361,7881767501168641,7881801860644865,7881462558687232,7881428198817792,7881453967835136,7881436787900416,7881750323200001,7881471147900928,7881557051047938,7881415313195008,7881621475557378,7881776089399297,7881479738753024,7881561346015234,7881466853326848,8162920359395330,8163036323512322,8162950424166402,8162903179526146,8162774330507266,8163032028545026,8162787215409154,8162898884558850,8162963309068290,8162894589591554,8162885999656962,8162911769460738,8162941834231810,8162916064428034,8162890294624258,8162933244297218,8162946129199106,8163087863119874,8162959014100994,8162954719133698,8163079273185282,8162907474493442,8163096453054466,8162928949329922,8163023438610434,8162937539264514,8162924654362626,8444507005583362,8444433991139330,8444562840158210,8444360976695298,8444421106237442,8444249307545602,8444416811270146,8444498415648770,8444571430092802,8444399631400962,8444382451531778,8444395336433666,8444408221335554,8444438286106626,8444369566629890,8444425401204738,8444567135125506,8444511300550658,8444391041466370,8444365271662594,8444429696172034,8444554250223618,8444403926368258,8444386746499074,8444373861597186,8444412516302850,8444378156564482,8444262192447490,8725908967981058,8725840248504322,8726029227065346,8725878903209986,8725835953537026,8725896083079170,8725861723340802,8725904673013762,8726037816999938,8725857428373506,8725848838438914,8725853133406210,8725874608242690,8725883198177282,8725913262948354,8725870313275394,8726042111967234,8726046406934530,8725844543471618,8725973392490498,8725986277392386,8725900378046466,8725887493144578,8725891788111874,8725724284387330,8725866018308098,8725981982425090,8725737169289218,9007362469134338,9007345289265154,9007323814428674,9007353879199746,9007349584232450,9007310929526786,9007366764101634,9007336699330562,9007388238938114,9007340994297858,9007328109395970,9007199260377090,9007383943970818,9007456958414850,9007315224494082,9007461253382146,9007448368480258,9007358174167042,9007512792989698,9007379649003522,9007212145278978,9007375354036226,9007504203055106,9007319519461378,9007371059068930,9007521382924290,9007332404363266,9288858928480258,9288674244886530,9288824568741890,9288794503970818,9288687129788418,9288837453643778,9288828863709186,9288854633512962,9288931942924290,9288996367433730,9288841748611074,9288850338545666,9288820273774594,9288785914036226,9288846043578370,9288798798938114,9288790209003522,9288815978807298,9288803093905410,9288863223447554,9288807388872706,9288811683840002,9289305605079042,9288833158676482,9570415503081474,9570149215109122,9851795984875520,9851946309713920,9852156764618753,9851881891954690,9851873302020098,9852152469782529,9852139584815105,9851886186921986,9851624193916930,9851937726529538,9851791690301440,10133567314853889,10133575903084545,10133361159569410,10133412699176962,10133245192437760,10133270961586176,10133275256881152,10133571608838145,10133232306552832,10133236601585664,10133348274667522,10133210832830464,10133240895766528,10133253781520384,10133228012503040,10133266667012096,10133563020410881,10133223716421632,10133258076291072,10133404109242370,10133215126880256,10133356864602114,10133283847602176,10133262372372480,10133614559428609,10133421289111554,10133249485897728,10133099166564354,10133601674330113,10133219421192192,10133550137147393,10133112046813184,10133288140537856,10133279552438272,10414840433278978,10414574145306626,10696311112073216,10977773206700034,10977635767746562,10977524098596866,10977704487223298,10977786091601922,10977657242583042,10977829041274882,10977841926176770,10977683012386818,10977691602321410,10977790383816704,10977661537550338,10977644357681154,10977678717419522,10977536983498754,10977648652648450,10977700192256002,10977695897288706,10977846221144066,10977837631209474,10977713077157890,10977781796634626,10977640062713858,10977674422452226,10977665832517634,10977708782190594,10977652947615746,10977670127484930,10977687307354114,11259153688363008,11259162279215104,11259488699088897,11259175163723776,11259480108957697,11259484404056065,11259501581172737,11259140802609152,11259467224121345,11259471515680769,11259145099280384,11259188047380480,11259183754444800,11259179459280896,11259514468958209,11259011953655808,11259132213395456,11259475809927169,11259136508428288,11259170868428800,11259157983133696,11259149392740352,11259166573854720,11540474058899458,11540624382754818,11540641562624002,11540632972689410,11540654447525890,11540650152558594,11540611497852930,11541105419091970,11540637267656706,11540620087787522,11540663037460482,11540658742493186,11540602907918338,11540645857591298,11540585728049154,11540486943801346,11540594317983746,11540598612951042,11540796181446658,11540615792820226,11540731756937218,11540590023016450,11540628677722114,11540607202885634,11822206719950848,11822408586821633,11822271146688512,11821949023092736,11822253967933440,11822473008447489,11822468717412353,11822404291657729,11822477303545857,12103703179296768,12103539963854848,12103449773735936,12103565732741120,12103544258166784,12103608684576768,12103827733479425,12103668816936960,12103823435563009,12103432594325504,12103561438560256,12103870678106113,12103660228182016,12103600093855744,12103711767134208,12103595798560768,12103801961316353,12103582913265664,12103797667856385,12103424003670016,12103548553396224,12103900740059137,12103887857385473,12104033891516417,12103681701511168,12103625867591680,12103784781119489,12104025298763777,12103630162952192,12103728947462144,12103939396403201,12104012413927425,12103647343214592,12103531378180096,12103746127724544,12103698883674112,12103591503986688,12104003825434625,12103587209347072,12103445480407040,12103849207988225,12103651636477952,12103655934263296,12103892151828481,12103853503217665,12103999530663937,12103707473281024,12103780486938625,12103874972876801,12103896445812737,12103793372561409,12103428298113024,12103926511304705,12103578618494976,12103604389412864,12103638751903744,12103806256349185,12103574322872320,12103832027987969,12103643047919616,12103621574393856,12103535669805056,12103690289348608,12103552849477632,12104021006286849,12103840615104513,12103810550792193,12103557143527424,12103836323217409,12104016709550081,12103862091776001,12103716063084544,12103814847987713,12103844913086465,12103819141709825,12103694587396096,12103570029412352,12103664523673600,12103436883787776,12104008121188353,12103612977512448,12104029595631617,12385049299582976,12385075070566400,12385079366123520,12385362834096129,12385027826188288,12385032120238080,12385083661287424,12385087954223104,12385062186057728,12385014940565504,12385040709451776,12385036415270912,12385010646515712,12385345659928577,12385045006123008,12385367128539137,12385375716769793,12385070775271424,12385414373113857,12385165266059264,12385483098947585,12385057889976320,12385053595205632,12385371422523393,12385023530106880,12384911860498432,12385401488015361,12385349949587457,12385019234877440,12385066480697344,12666666021879810,12666373964103682,12666601597370370,12666515698024450,12666614482272258,12666498518155266,12666550057762818,12666597302403074,12666661726912514,12666507108089858,12666575827566594,12666571532599298,12666502813122562,12666593007435778,12666618777239554,12666537172860930,12666610187304962,12666395438940162,12666489928220674,12666494223187970,12666532877893634,12666648842010626,12666554352730114,12666545762795522,12666678906781698,12666511403057154,12666653136977922,12666562942664706,12666378259070978,12666644547043330,12666481338286082,12666580122533890,12666519992991746,12666399733907458,12666386849005570,12666382554038274,12666696086650882,12666657431945218,12666541467828226,12666631662141442,12666640252076034,12666528582926338,12666605892337666,12666588712468482,12666558647697410,12666485633253378,12666524287959042,12948355743088641,12947848936882176,12948360038121473,13229500007055362,13229504302022658,13229323913396226,13229590201761792,13229508596989954,13229637446008834,13229628856074242,13229448467447810,13229435582545922,13229585906401282,13229646035943426,13229457057382402,13229482827186178,13229581611433986,13229491417120770,13229474237251586,13229641740976130,13229573021499394,13229461352349698,13229452762415106,13229495712088066,13229487122153474,13229336798298114,13229439877513218,13229478532218882,13229469942284290,13229465647316994,13229512891957250,13229444172480514,13511348646445057,13510970682114048,13510914847408128,13510936322113536,13511262740938753,13510953502048256,13511340056707073,13510798890893312,13510932027080704,13510927733030912,13510983568130048,13510910553358336,13510966387539968,13511314279956481,13511275623612417,13510923436949504,13510944912965632,13510979272966144,13510962092900352,13511271329366017,13511301394857985,13511267035381761,13510949206425600,13510957796818944,13511060883570688,13510974977409024,13511335761674241,13511344351805441,13510919141720064,13511249862262785,13510940616294400,13510811767341056,13510987861065728,13792531561775104,13792651821580289,13792699069759489,13792381238444032,13792527270936576,13792553039560704,13792557333544960,13792656116613121,13792295340670976,13792299633999872,13792681888251905,13792630347202561,13792282454589440,13792686183481345,13792273867931648,13792677593743361,13792561627398144,13792716249432065,13792664708251649,13792565923348480,13792634641383425,13792647528120321,13792694773350401,13792673295826945,13792669001973761,13792690475368449,13792595987988480,13792278158376960,13792643234922497,13792660411056129,13792548743938048,14074062377451520,14074053787451392,14355335483490304,14355674786562049,14355687671070721,14355812232134657,14355490103033856,14355348367081472,14355365546426368,14355537350361090,14355700553744385,14355412791197696,14355382726950912,14355391317671936,14355691965513729,14355726324989953,14355378432180224,14355567419129856,14355344071852032,14355361252245504,14355369843097600,14355352663162880,14355374136557568,14355807937232897,14355408498262016,14355339777540096,14355404203098112,14355670491791361,14355356957212672,14355387023032320,14355696259497985,14355399907540992,14355395612246016,14355236697473024,14355739210088449,14355528760426498,14636862002561026,14636703088771074,14636926427070466,14636986556612610,14636982261645314,14636836232757250,14636827642822658,14636840527724546,14637020916350978,14636866297528322,14636939311972354,14636870592495618,14636707383738370,14636896362299394,14636965081776130,14636853412626434,14636883477397506,14636844822691842,14636904952233986,14636930722037762,14636913542168578,14636857707593730,14636698793803778,14636711678705666,14636849117659138,14636943606939650,14636973671710722,14636814757920770,14636969376743426,14637003736481794,14636935017005058,14636977966678018,14636819052888066,14636874887462914,14636990851579906,14636922132103170,14636831937789954,14636720268640258,14636724563607554,14636900657266690,14636810462953474,14636879182430210,14637330153996290,14636956491841538,14636806167986178,14636917837135874,14636887772364802,14636823347855362,14918478713716738,14918487303651330,15199833434423298,15199807664619522,15199661635731458,15199781894815746,15199764714946562,15199820549521410,15199962283442178,15199794779717634,15199777599848450,15199786189783042,15199803369652226,15199799074684930,15199811959586818,15199829139456002,15199760419979266,15199816254554114,15199992348213250,15199769009913858,15199953693507586,15199910743834626,15199915038801922,15199837729390594,15199790484750338,15199824844488706,15199897853689856,15199906443558912,15199773304881154,15199966578409474,15481295531147266,15481381430493186,15481282646245378,15481252581474306,15481256876441602,15481312711016450,15481235401605122,15481291236179970,15481123732455426,15481243991539714,15481265466376194,15481269761343490,15481299826114562,15481755092647938,15481286941212674,15481278351278082,15481248286507010,15481239696572418,15481304121081858,15481308416049154,15481274056310786,15481261171408898,15481136617357314,15481445855002626,15762598701105154,15762856399142914,15762903643783170,15762860694110210,15762912233717762,15762920823652354,15762847809208322,16044387210297346,16044331375722498,16044073677684738,16044335670689794,16044395800231938,16044322785787906,16044378620362754,16325870774059008,16325716154646528,16325806356365314,16326064054861825,16326076939829249,16325862190940162,16325720449220608,16325797766430722,16325810651332610,16325548658327554,16607345757782018,16607023635234818,16607281333272578,16607191138959362,16607272743337986,16607195433926658,16607285628239874,16607337167847426,16888812144427010,16888760604819458,16888756309852162,16888498611814402,16888747719917570,17170295706943490,17170287117008898,17169973584396290,17170222692499458,17170235577401346,17170278527074306,17170231282434050,17451714852683778,17451628953337858,17451568823795714,17451586003664898,17451620363403266,17451624658370562,17451607478501378,17451611773468674,17451594593599490,17451762097324034,17451590298632194,17451598888566786,17451581708697602,17451706262749186,17451633248305154,17451616068435970,17451560233861122,17451697672814594,17451753507389442,17451461449613314,17451577413730306,17451637543272450,17451792162095106,17451766392291330,17451573118763010,17451603183534082,17451710557716482,17451564528828418,17733395980025857,17733099628068864,17733404578807809,17733091038199808,17733056677740544,17733408868401153,17733391688466433,17733095332773888,17733108218789888,17733103923625984,17733086743560192,17733065266954240,17733413163433985,17733438933303297,17733060972773376,17732936418000896,17733073857085440,17733078152708096,17733112511725568,17733082447478784,17733069563625472,17733400274272257,17733426045517825,18014883850616833,18014888140144641,18014535949484032,18014669102186496,18014901022228481,18014913910013953,18014578900336640,18014544540336128,18014411394711552,18014540243664896,18014531654451200,18014574604779520,18014583195500544,18014553129418752,18014548833796096,18014870956736513,18014561720270848,18014587488436224,18014557424189440,18014875250982913,18014866665177089,18014570309484544,18014566014910464,18296062465146880,18296191321112578,18296049581490176,18296363122360321,18296388886724609,18295886371422208,18296341641887745,18296131191570434,18296195616079874,18296045286195200,18296023810506752,18296122601635842,18296350227693569,18296036696981504,18296053877047296,18295873493532674,18296135486537730,18296010926194688,18296019517046784,18296040991621120,18296032400900096,18296028106129408,18296345933447169,18296058172211200,18296006631161856,18296375998939137,18296015220375552,18577490203901954,18577528858607618,18577498793836546,18577481613967362,18577520268673026,18577515973705730,18577507383771138,18577361354883074,18577485908934658,18577619052920834,18577524563640322,18577511678738434,18577494498869250,18577503088803842,18577537448542210,18577533153574914,18859317370814465,18858823440859136,18859081137717248,18859343140683777,18859141277351936,18859347426213889,18859145564454912,18859351721312257,18859321665912833,19140560416800770,19140435856326656,19140453036261376,19140444447178752,19140766572019713,19140431561293824,19140478807179264,19140616251375618,19140788052819969,19140770863579137,19140465921753088,19140487395278848,19140311301554176,19140298423795714,19140440150507520,19140457331032064,19140448740638720,19140813816856577,19140775157825537,19140474511622144,19140547531898882,19140461627113472,19140556121833474,19140800929071105,19140470216327168,19140483102343168,19140620546342914,19422078341218306,19422116999921664,19422086931152898,19703295614451714,19703334269157378,19703265549680642,19703274139615234,19703561902424066,19703527542685698,19703531837652994,19703308499353602,19703501772881922,19703351449026562,19703342859091970,19703510362816514,19703591967195138,19703506067849218,19703278434582530,19703579082293250,19703566197391362,19703287024517122,19703587672227842,19703549017522178,19703570492358658,19703338564124674,19703347154059266,19703329974190082,19703523247718402,19703282729549826,19703557607456770,19703269844647938,19703325679222786,19703321384255490,19703299909419010,19703544722554882,19703596262162434,19703574787325954,19703553312489474,19703304204386306,19703312794320898,19703583377260546,19703518952751106,19703497477914626,19703317089288194,19703291319484418,19984981054783488,20266503269384194,20266258456248322,20266516154286082,20266511859318786,20266460319711234,20266451729776642,20266546219057154,20266468909645826,20266254168096768,20547948189253634,20547677606313986,20547673311346690,20547900944613378,20547905239580674,20547896649646082,20547943894286338,20547918124482562,20547913829515266,20547909534547970,20547961074155522,20547681901281282,20547699081150466,20547883764744194,20547892354678786,20547888059711490,20547939599319042,20547875174809602,20547931009384450,20547870879842306,20547694786183170,20547978254024706,20547965369122818,20547995433893890,20547879469776898,20547780685529090,20547956779188226,20547952484220930,20829375914508288,20829363029934080,20829616429858817,20829298600902656,20829663674433537,20829569191116801,20829152576143360,20829393094967296,20829324371886080,20829723808694273,20829599250907137,20829337255542784,20829612135415809,20829573486018561,20829169758437376,20829530534379521,20829290010771456,20829517650591745,20829543419740161,20829453225492480,20829745284317185,20829728103464961,20829560601247745,20829388801703936,20829594961248257,20829504764968961,20829277127507968,20829431751311360,20829380212293632,20829758169546753,20829315782017024,20829367325949952,20829264241885184,20829521945886721,20829268536197120,20829255656210432,20829371621244928,20829384506212352,20829526239346689,20829302896525312,20829740992495617,20829564893134849,20829174051766272,20829307191296000,20829436045164544,20829650789335041,20829350145622016,20829354440982528,20829625018089473,20829320076591104,20829586369806337,20829749576794113,20829547713593345,20829161161818112,20829556306018305,20829732399218689,20829259947835392,20829148281700352,20829156872355840,20829405979541504,20829423161704448,20829539126018049,20829753873661953,20829332962607104,20829577781248001,20829509059149825,20829311487377408,20829281421557760,20829534828822529,20829470405754880,20829440341114880,20829328667443200,20829552011509761,20829427457327104,20829294307442688,20829418870013952,20829414567378944,20829620723843073,20829345852424192,20829272831426560,20829285716590592,21111031282728961,21110880956252160,21111035577958401,21110992627302401,21110807939317760,21110764987482112,21110623262408704,21110996922597377,21110769284153344,21110790758727680,21111039869845505,21110730632921088,21111112890253313,21111009805533185,21110812232253440,21111014102728705,21110649028476928,21110644735148032,21110756398268416,21110760693301248,21111061350514689,21111048462729217,21110799348596736,21110906728022016,21110795053301760,21111001216057345,21111044167827457,21111099994800129,21111091408994305,21110631849066496,21110984035860481,21111026988220417,21110636138528768,21111052757958657,21111005511090177,21111177314697217,21110803644153856,21110627552854016,21110898138415104,21110979741679617,21111095700553729,21110773577613312,21110777873235968,21111138653831169,21110945382465536,21111125766045697,21110911021875200,21110915317825536,21110902434037760,21111018396450817,21110786464088064,21111022690304001,21110782168006656,21392355938795520,21673835202740226,21673620462174208,21673891037315074,21673624757207040,21673629044310018,21673921102086146,21673869562478594,21673633339277314,21673878152413186,21673843792674818,21673873857445890,21673848087642114,21673826612805634,21673886742347778,21955305881468930,21955370305978370,21955116902907906,21955146967678978,21955391780814850,21955142672711682,21955078248202242,21955065363300354,21955357421076482,21955134082777090,21955374600945666,21955353126109186,21955104018006018,21955121197875202,21955099723038722,21955151262646274,21955366021955584,21955396075782146,21955125492842498,21955069658267650,21955073953234946,21955327356305410,21955086838136834,21955361716043778,21955331651272706,21955383190880258,21955108312973314,21955129787809794,21955138377744386,21955378895912962,21955348831141890,21955095428071426,21955323061338114,21955091133104130,21955387485847554,21955082543169538,21955112607940610,21955297291534338,21955344536174594,22236574702043138,22236583291977730,22236561817141250,22236871054786562,22236553227206658,22236802344091648,22236828105113602,22236578997010434,22236776565506050,22236819515179010,22236823810146306,22236557522173954,22236806638993408,22236785155440642,22236570407075842,22236836695048194,22236840990015490,22236858169884674,22236798040342530,22236793745375234,22236862464851970,22236566112108546,22518419051380737,22518002436407296,22518285905428480,22518320266018816,22518006732619776,22518393280004097,22518273021968384,22518358919413761,22518023912030208,22518303090737152,22518380394643457,22518105516474368,22518367510855681,22518376099610625,22518277317591040,22518397573857281,22518436234657793,22518388986281985,22518354625232897,22518414753398785,22518384689086465,22518406166282241,22518401871773697,22518423346282497,22518427641511937,22518290201378816,22518410461511681,22518019618701312,22518371806150657,22518281611575296,22518255839805440,22517998145961984,22799537538990082,22799541833957378,22799769467224066,22799726517551106,22799546128924674,22799494599868416,22799511769186306,22799816711864322,22799516064153602,22799503179251714,22799821006831618,22799773762191362,22799533244022786,22799743697420290,22799563308793858,22799795237027842,22799790942060546,22799735107485698,22799498894901248,22799778057158658,22799524654088194,22799571898728450,22799756582322178,22799786647093250,22799576193695746,22799554718859266,22799528949055490,22799722233004032,22799507474219010,22799747992387586,22799799531995138,22799812416897026,22799550423891970,22799490305032192,22799559013826562,22799752287354882,22799808121929730,22799730822873088,22799567603761154,22799803826962434,22799520359120898,22799782362611712,23081231564996608,23080952389828608,23081235858849792,23080956686041088,23080948099383296,23081321759571969,23081308872835073,23081227271012352,23081240154800128,23081205800042496,23081270219440128,23081317469126657,23080973865451520,23081304578654209,23080969572122624,23081055469895680,23081222975389696,23362431662751744,23362444548833280,23362423076093952,23362783849545729,23362745196150784,23362715131510784,23362792446033921,23362796736282625,23362427366539264,23362530446606336,23362697952100352,23362448842162176,23362779555364865,23362710835560448,23362706541707264,23362702247723008,23362680776818688,23644177224433664,23644314660241409,23644164334485504,23644477870571521,23644172928811008,23644482166325249,23644155746648064,23644336136912897,23644276006453249,23644138568810496,23644142862073856,23644495051423745,23644267417698305,23644104208089088,23644293186846721,23644185812271104,23644310368354305,23644125681614848,23644271712993281,23644258826256385,23643898048806912,23644134273318912,23644005423316992,23644507936653313,23644288893124609,23644254532075521,23644499343900673,23644280301486081,23644297480699905,23643923818872832,23644220172861440,23644327548354561,23644306073124865,23644503640768513,23643906639462400,23644473581305857,23644168638562304,23644112797040640,23644323253125121,23644099912728576,23644301778616321,23644117093056512,23644095619530752,23643902343249920,23644202992599040,23644318958223361,23644181518417920,23643919525543936,23644121388351488,23644129979400192,23644284595929089,23644190108221440,23925690860044288,24207127171825666,24207161531564034,24207183006400514,24207178711433218,24206899538558978,24207165826531330,24206903833526274,24206908128493570,24207152941629442,24206895243591682,24207109991956482,24207144351694850,24206878063722498,24206882358689794,24207195891302402,24206886653657090,24207187301367810,24207118581891074,24207148646662146,24206890948624386,24207170121498626,24207174416465922,24207101402021890,24207122876858370,24207131466792962,24488623623634946,24488606443765762,24488353040695298,24488576378994690,24488357335662594,24488593558863874,24488649403596800,24488378810499074,24488365925597186,24488640803504130,24488619328667650,24488670868275202,24488584968929282,24488597853831170,24488627918602242,24488370220564482,24488602148798466,24488374515531778,24488636508536834,24488361630629890,24488383105466370,24488653698433024,24488645108563968,24488657983373314,24488662278340610,24770120074657794,24770077124984834,24770072830017538,24769905326292994,24770085714919426,24770090009886722,24770055650148354,24769823721914370,24769819426947074,24770081419952130,24769802247077890,24769797952110594,24769806542045186,25051333056921602,25051556395220994,25051307287117826,25051294402215938,25051530625417218,25051552100253698,25051612229795842,25051522035482626,25051350236790786,25051586459992066,25051599344893954,25051603639861250,25051341646856194,25051320172019714,25051328761954306,25051590754959362,25051315877052418,25051582165024770,25051595049926658,25051363121692674,25051573575090178,25051345941823490,25051534920384514,25051290107248642,25051298697183234,25051543510319106,25051311582085122,25051607934828546,25051324466987010,25051358826725378,25051616524763138,25051354531758082,25051302992150530,25051620819730434,25051367416659970,25051376006594562,25051577870057474,25051526330449922,25051569280122882,25051371711627266,25051547805286402,25051337351888898,25332855290003458,25332919714512898,25332885354774530,25332881059807234,25332752210788354,25333070038368258,25332966959153154,25332945484316674,25332971254120450,25332962664185858,25333039973597186,25332984139022338,25332898239676418,25333027088695298,25332924009480194,25332988433989634,25332872469872642,25333022793728002,25333005613858818,25332911124578306,25332760800722946,25332936894382082,25333014203793410,25333035678629890,25332893944709122,25333379276013570,25333052858499074,25332992728956930,25332928304447490,25332949779283970,25332863879938050,25332773685624834,25332889649741826,25333031383662594,25332868174905346,25332769390657538,25332979844055042,25332756505755650,25332915419545602,25332902534643714,25332975549087746,25332958369218562,25332859584970754,25332747915821058,25332932599414786,25332954074251266,25332906829611010,25332876764839938,25333018498760706,25614480591028224,25895955567804416,26177198604156930,26177258733699074,26177452007227394,26177263028666370,26177202899124226,26177499251867650,26177275913568258,26177271618600962,26177237258862594,26177486366965762,26177477777031170,26177421942456322,26177254438731778,26177473482063874,26177434827358210,26177520726704130,26177207194091522,26177494956900354,26177250143764482,26177430532390914,26177232963895298,26177482071998466,26177490661933058,26177512136769538,26177456302194690,26177241553829890,26177190014222338,26177211489058818,26177245848797186,26177220078993410,26177194309189634,26177443417292802,26177507841802242,26177215784026114,26177426237423618,26177503546834946,26177447712260098,26177228668928002,26177516431736834,26177224373960706,26177267323633666,26177469187096578,26458686478024704,26458918396559362,26458965641199618,26458952756297730,26458703648194562,26458944166363138,26458690773057536,26458982830702592,26458995705970690,26458961346232322,26458922691526658,26458948461330434,26458695058259970,26458901216690178,26458699353227266,26458707943161858,26458909806624770,26458987125866496,26740380497936386,26740406267740162,26740328958328834,26740367613034498,26740384792903682,26740427742576642,26740359023099906,26740414857674754,26740397677805570,26740393382838274,26740354728132610,26740144274735106,26740320368394242,26740444922445826,26740230174081026,26740410562707458,26740131389833218,26740148569702402,26740324663361538,26740122799898626,26740350433165314,26740341843230722,26740333253296130,26740337548263426,26740346138198018,26740127094865922,26740401972772866,26740389087870978,26740363318067202,27021606365429762,27021795343990786,27021816818827266,27021885538304002,27021799638958082,27021855473532930,27021881243336706,27021808228892674,27021623545298946,27021619250331650,27021864063467522,27021825408761858,27021872653402114,27021812523859970,27021833998696450,27021876948369410,27021838293663746,27021803933925378,27021821113794562,27021705149677570,27021902718173186,27021842588631042,27021889833271298,27021919898042370,27021829703729154,27021597775495170,27021868358434818,27021602070462466,27303291790295040,27303652567810049,27303394870099968,27303270316769280,27303094222782464,27303429229314049,27303442114936833,27303485065592833,27303304676638720,27303081336700928,27303072746045440,27303308970557440,27303317559312384,27303077040488448,27303497950363649,27303287494279168,27303489357479937,27303450703691777,27303433523494913,27303446410231809,27303313266049024,27303656863563777,27303274609967104,27303339031724032,27303678338007041,27303674041139201,27303493655461889,27303459293167617,27303463590363137,27303180120555520,27303502245593089,27303300378853376,27303360509509632,27303476475854849,27303510834151425,27303347626049536,27303330443886592,27303467884085249,27303296085590016,27303669748662273,27303377689837568,27303682633891841,27303480770363393,27303454998724609,27303356215656448,27303364805459968,27303278905327616,27303648279265281,27303351921672192,27303098516111360,27303472177938433,27584852673101824,27866031296544770,27866130080792578,27866237454974978,27866280404647938,27866048476413954,27866293289549826,27866267519746050,27866297584517122,27866288994582530,27866254634844162,27866027001577474,27866224570073090,27866306174451714,27866241749942274,27866301879484418,27866246044909570,27866344829157378,27866250339876866,27866310469419010,27866044181446658,27866228865040386,27866258929811458,27866314764386306,27866220275105794,27866327649288194,27866022706610178,27866263224778754,28147802626588672,28147811216588800,28429080023334914,28429294771699714,28428976944119810,28429247527059458,28428972649152514,28429260411961346,28428994123988994,28429251822026754,28428998418956290,28429230347190274,28429256116994050,28428981239087106,28429264706928642,28710469110857730,28710718218960898,28710666679353346,28710731103862786,28710456225955842,28710688154189826,28710670974320642,28710675269287938,28710705334059010,28710473405825026,28710679564255234,28710658089418754,28710722513928194,28710713923993602,28710692449157122,28710769758568450,28710649499484162,28710653794451458,28710683859222530,28710662384386050,28710645204516866,28710451930988546,28710555010203650,28710447636021250,28710752578699266,28710739693797378,28710726808895490,28710735398830082,28992210365644802,28992197480742914,28991922602835970,28992180300873730,28991948372639746,28992201775710210,28992206070677506,28991931192770562,28992214660612098,28992244725383170,28991926897803266,28991944077672450,28992029977018370,29273715407192066,29273453414187010,29273831383236609,29273668162551810,29273462015787008,29273698227322882,29273676752486402,29273659572617218,29273732587061250,29273719702159362,29273723997126658,29273693932355586,29273650982682626,29273427644383234,29273483490754560,29273492080361472,29273470605787136,29273457709154306,29273436234317826,29273681047453698,29273736882028546,29273466310492160,29273474900623360,29273500670164992,29273741188857856,29273444824252418,29273745471963138,29273449119219714,29273672457519106,29273702522290178,29273728292093954,29273487785918464,29273711112224770,29273496375394304,29273440529285122,29273479195262976,29273431939350530,29555160318935042,29554979930308610,29554881146060802,29554898325929986,29555194678673410,29555164613902338,29555156023967746,29554894030962690,29555147434033154,29554876851093506,29554872556126210,29555130254163970,29555151729000450,29836652487770112,30118080217808896,30118105982763008,30118196177338369,30118178996420609,30117826807595008,30118110276616192,30117843989889024,30118097393156096,30117831103807488,30117929887662080,30118183290601473,30118114572566528,30117848283217920,30118144637206528,30117822517149696,30118191889055745,30118101688778752,30399555194126338,30399589553864706,30399585258897410,30399619618635778,30399563784060930,30399576668962818,30399520834387970,30399602438766594,30399499359551490,30399507949486082,30399495064584194,30399538014257154,30399542309224450,30399525129355266,30399306086023170,30399516539420674,30399533719289858,30399529424322562,30399404870270978,30399318970925058,30399568079028226,30399572373995522,30399301791055874,30399512244453378,30399323265892354,30399503654518786,30399580963930114,30399297496088578,30680772470571008,30680776761016320,30681150432477185,30681051642200064,30681064525987840,30680793943310336,30681030164414464,30681094590627840,30681128949841921,30681060230037504,30680781057228800,30681047346577408,30680879841083392,30681055936184320,30681146130759681,30681133244022785,30681141837561857,30680798236639232,30962535202291714,30962256029417474,30962273209286658,30962505137520642,30962539497259010,30962354813665282,30962268914319362,30962522317389826,30962247439482882,30962251734450178,30962569562030082,30962530907324418,30962526612357122,31243731016220674,31244027368964098,31243722426286082,31243993009225730,31243988714258434,31243980124323842,31243726721253378,31243932879683586,31243919994781698,31243743901122562,31244005894127618,31243997304193026,31243954354520066,31244001599160322,31244044548833282,31244014484062210,31243950059552770,31243962944454658,31243937174650882,31243941469618178,31243928584716290,31243924289748994,31243829800468482,31244010189094914,31243748196089858,31243967239421954,31243958649487362,31243945764585474,31525197400702976,31525519520759808,31525566767693825,31525579649384449,31525618306121729,31525223166771200,31525553879973889,31525596828598273,31525476572332032,31525592534745089,31525201691148288,31525485160169472,31525575354351617,31525571060891649,31525205987360768,31525605421023233,31525601126514689,31525622602530817,31525304771215360,31525583943827457,31525558174154753,31525489456119808,31525639787184129,31525588241022977,31525609716252673,31525218873442304,31525472276709376,31525455094546432,31525480866316288,31525614008139777,31806985903407106,31806947248701442,31806968723537922,31806934363799554,31806990198374402,31807011673210882,31806706742067200,31806702447165440,31806973018505218,31807020263145474,31806977313472514,31806711025500162,31807007378243586,31806942953734146,31806925773864962,31806723910402050,31806715320467458,31806732500336642,31806728205369346,31806719615434754,32088147359170560,32369678159577090,32369892907941890,32369940152582146,32369884318007298,32369927267680258,32369970217353218,32369922983657472,32369875728072706,32369682454544386,32369918677745666,32369935857614850,32651316353368066,32651123079839746,32651342123171842,32651118784872450,32651402252713986,32651367892975618,32651363598008322,32651320648335362,32651337828204546,32651355008073730,32651380777877506,32651329238269954,32651419432583170,32651333533237250,32651299173498882,32651372187942914,32651204684218370,32651385072844802,32651105899970562,32651324943302658,32651303468466178,32651307763433474,32651389367812098,32651294878531586,32651097310035970,32651101605003266,32651376482910210,32651312058400770,32932842861887490,32932825682018306,32932834271952898,32932877221625858,32932890106527746,32932885811560450,33214300658597890,33214365083107330,33214395158560768,33214360788140034,33214107395686400,33214352198205442,33214309248532482,33214317838467074,33495827174653954,33495784224980994,33495840059555842,33495582361518082,33495835764588546,33495818595729408,33495870124326914,33495578066550786,33495792814915586,33495775635046402,33777276379594754,33777022976524290,33777280674562050,33777319329267714,33777104580902914,33777005796655106,33777272084627458,33777018681556994,33777254904758274,33777284969529346,33777289264496642,33776997206720514,33777001501687810,34058790014222338,34058734179647490,34058777129320450,34058785719255042,34058725589712898,34340217744785410,34340295054196738,34340264989425666,34340252104523778,34340209154850818,34340260694458370,34340002996420610,34340243514589186,34340247809556482,34340200564916226,34340222051090432,34340007291387906,34621654075834370,34621568176488450,34621744270147586,34621542406684674,34621662665768962,34621709910409218,34621585356357634,34621529521782786,34621645485899778,34621533816750082,34621572471455746,34621598241259522,34621619716096002,34621550996619266,34621606831194114,34621576766423042,34621688435572738,34621422147600386,34621714205376514,34621658370801666,34621430737534978,34621624011063298,34621426442567682,34621692730540034,34621555291586562,34621538111717378,34621563881521154,34621705615441922,34621602536226818,34621636895965186,34621589651324930,34621697025507330,34621666960736258,34621593946292226,34621701320474626,34621649780867074,34621447917404162,34621559586553858,34621679845638146,34621546701651970,34621727090278402,34621628306030594,34621435032502274,34621581061390338,34621611126161410,34621641190932482,34621443622436866,34903038859739138,34903047449673730,34903064629542914,34903528486010882,34903051744641026,34902910010720258,34903219248365570,34903086104379394,34903154823856130,34903060334575618,34903043154706434,34903025974837250,34903017384902658,34903073219477506,34903068924510210,34903081809412098,34903030269804546,34903077514444802,34903056039608322,34902897125818370,34903008794968066,34903021679869954,34903034564771842,34903013089935362,35184715700764672,35184642679963650,35184685629636610,35466117663096832,35466160612835328,35747592633253890,35747635582926850,36029308128395265,36029303839850497,36028797027155968,36310448098312194,36310585537265666,36310538292625410,36310426623475714,36310615602036738,36310284889554946,36310439508377602,36310529702690818,36310533997658114,36310521112756226,36310418033541122,36310430918443010,36310405148639234,36310409443606530,36310422328508418,36310456688246786,36310589832232962,36310576947331074,36310443803344898,36310383673802754,36310435213410306,36310392263737346,36310400853671938,36310460983214082,36310387968770050,36310413738573826,36310452393279490,36310396558704642,36592008980267008,36592060519809024,36873471072206848,36873780309983233,36873741655408641,36873221950341120,36873544073936896,36873784604884993,36873483951931394,36873745935695873,36873535491538946,36873479662075904,36873750245277697,37154958934147072,37436485450530816,37436433904959490,37717908882128898,37717960421736450,37999435398119426,37999383858511874,38280927546834946,38280867417292802,38280897482063874,38280674143764482,38280923251867650,38280648373960706,38280639784026114,38280931841802242,38280635489058818,38280858827358210,38280682733699074,38280910366965762,38280876007227394,38280871712260098,38280691323633666,38280631194091522,38280678438731778,38280918956900354,38280669848797186,38280936136769538,38280644078993410,38280893187096578,38280940431736834,38280944726704130,38280656963895298,38280695618600962,38280665553829890,38280652668928002,38280687028666370,38280626899124226,38280901777031170,38280661258862594,38280850237423618,38280914661933058,38280880302194690,38280699913568258,38562325227896832,38843851737530370,38843701413675010,38843804492890114,38843675643871234,38843718593544194,38843662758969346,38843710003609602,38843667053936642,38843727183478786,38843795902955522,38843692823740418,38843714298576898,38843735773413378,38843705708642306,38843890392236034,38843722888511490,38843688528773122,38843559679754242,38843671348903938,38843731478446082,38843679938838530,38843697118707714,38843864622432258,38843860327464962,38843684233805826,38843813082824706,38843808787857410,38843658464002050,39125064712454146,39125116252061698,39125348180295682,39125352475262978,39125060417486850,39125339590361090,39125069007421442,39125270870884354,39125365360164866,39125343885328386,39125318115524610,39125051827552258,39125103367159810,39125077597356034,39125073302388738,39125322410491906,39125361065197570,39125305230622722,39125090482257922,39125275165851650,39125094777225218,39125056122519554,39125038942650370,39125120547028994,39125292345720834,39125279460818946,39125043237617666,39125283755786242,39125124841996290,39125099072192514,39125326705459202,39125107662127106,39125047532584962,39125369655132162,39125331000426498,39125086187290626,39125111957094402,39125081892323330,39125335295393794,39125296640688130,39125300935655426,39125356770230274,39406767327215618,39406810276888578,39406801686953986,39406750147346434,39406814571855874,39688091980201986,39688122044973058,39688130634907650,39687976016084994,39688293843664898,39688603081310210,39688087685234690,39687984606019586,39688126339940354,39688276663795714,39688259483926530,39688263778893826,39688169289613314,39688152109744130,39688246599024642,39688079095300098,39688096275169282,39688104865103874,39688173584580610,39688212239286274,39688117750005762,39688250893991938,39688113455038466,39688147814776834,39687997490921474,39688190764449794,39688139224842242,39688156404711426,39688207944318978,39688216534253570,39687993195954178,39688242304057346,39688255188959234,39688195059417090,39688199354384386,39688100570136578,39688160699678722,39688186469482498,39688083390267394,39688109160071170,39688134929874946,39688238009090050,39688143519809538,39688177879547906,39687971721117698,39688203649351682,39687980311052290,39688229419155458,39969446694158336,39969768817754112,39969970679513089,39969966388477953,39969704391016448,39969906269945857,39969974974611457,40251084880412672,40251093469626368,40251424182370305,40251097764921344,40251505800773633,40251059109625856,40251071993937920,40251067700477952,40251372643942401,40251368354283521,40251037634920448,40251437067468801,40251063403806720,40251089175052288,40251076289560576,40251389822894081,40250934554853376,40251033340870656,40251385528451073,40251394116878337,40251054814593024,40251187960414208,40251080584331264,40251398411124737,40251102060478464,40251050520543232,40251110648578048,40251106355642368,40251046224461824,40251041929232384,40532516919050242,40532572753625090,40532396659965954,40532409544867842,40532534098919426,40532654358003714,40532512624082946,40532564163690498,40532525508984834,40532521214017538,40532546983821314,40532585638526978,40532577048592386,40532538393886722,40533028020158466,40532508329115650,40532542688854018,40532581343559682,40532568458657794,40532555573755906,40532529803952130,40532718782513154,40532551278788610,40532559868723202,40814301135568897,40814275357966337,40814232405606401,40813871632154624,40813893104893952,40814155097767936,40814137926680576,40814159391621120,40814279652474881,40813979002667008,40814193752211456,40814262472474625,40814245292343297,40814271060049921,40814228111425537,40814292537573377,40814129325998080,40814266766196737,40814258175279105,40814240997048321,40814163687571456,40814253880836097,40814146508161024,40814296832475137,40813897398222848,40813880218812416,40813875922599936,40814288239591425,40814283947704321,40814249585803265,40814438574456833,40814150803783680,41095595717230594,41095514112851970,41095604307165186,41095668731674626,41095518407819266,41095660141740034,41095608602132482,41095346609127426,41377079283744770,41377135118319618,41377070693810178,41377083578712066,41376821585707010,41658786183839745,41658472648474624,41658485532131328,41658464058605568,41658811953709057,41658799065923585,41658442584031232,41658476944031744,41658764708872193,41658773294678017,41658455467884544,41658433993179136,41658451173113856,41658468353179648,41658781894311937,41658309438406656,41658769000431617,41658459763965952,41658446877491200,41658429698146304,41658481239195648,41658438287360000,41658567151976448,41939887500820482,41939904680689666,41939913270624258,41940093659250690,41939921860558850,41940033529708546,41939771536703490,41939896090755074,41939956220297218,41939926155526146,41939934745460738,41939930450493442,41939947630362626,41939917565591554,41939951925329922,41940020644806658,41940089364283394,41940029234741250,41939891795787778,41939960515264514,41939939040428034,41939784421605378,41940085069316098,41939908975656962,41939943335395330,41939900385722370,41939883205853186,41940076479381506,42221259398643714,42221422607400962,42221426902368258,42221414017466370,42221517096681474,42221405427531778,42221409722499074,42221418312433666,42221388247662594,42221401132564482,42221392542629890,42221396837597186,42221383952695298,42221379657728002,42221431197335554,42221435492302850,42502721490583554,42503043613130754,42502983483588610,42502970598686722,42503039318163458,42502979188621314,42784501418622976,42784510008623104,43065984977010690,43065989280366592,43065976387076098,43347451363655682,43347459953590274,43628879093104640,43628629985918976,43629042304679937,43628913454678016,43628982172712961,43629033714810881,43629016533303297,43628900570890240,43628647165329408,43629038006697985,43628909158727680,43628625689706496,43628977878532097,43629063787905025,43628995059449857,43628621399261184,43629003647942657,43628943519318016,43628904864874496,43629046601089025,43629012239581185,43628990766252033,43628999352909825,43629029419581441,43628896275267584,43629025125072897,43628728769773568,43628642872000512,43629007942385665,43629020827156481,43910354072305666,43910096374267906,43910414201847810,43910418496815106,43910345482371074,43910358367272962,44191846228688896,44191678723194880,44191949306331137,44191859112148992,44191996553003009,44191592825421824,44191940717576193,44191957895806977,44191979373002753,44191854818295808,44191850524311552,44191927831953409,44191962193002497,44191983668232193,44191975078494209,44191987960119297,44192009436790785,44191945012871169,44191970780577793,44191597118750720,44191863408099328,44191953601363969,44191992258101249,44191893472739328,44191932126134273,44191966486724609,44191579939340288,44191876292476928,44191575643127808,44192000848232449,44191571352682496,44192168360214529,44191829046525952,44473072095461376,44473441463435265,44473428578074625,44473450055204865,44473050619838464,44473321205399552,44473419989581825,44473325501022208,44473407102844929,44473458653396993,44473067802132480,44473153699905536,44473338384809984,44473402808664065,44473304023236608,44473046329393152,44473415696384001,44473445757288449,44473424283041793,44473437169713153,44473054916050944,44473432872517633,44473334088859648,44473329795006464,44473454349713409,44473368449449984,44754744641650688,44755096834605057,44754912146423809,44755101123870721,44754946506424321,44754718872829952,44754882079555585,44754937913540609,44754813361520640,44754753232699392,44754843426160640,44754877785374721,44754761822109696,44754740346355712,44755105419624449,44754826245898240,44754796182110208,44754748934914048,44754950801653761,44754723166027776,44754890670997505,44754542778843136,44754925031915521,44754894966292481,44754529892761600,44754791896252416,44754547072172032,44754916440145921,44754920733999105,44754942211522561,44754736050339840,44754525596549120,44754628676616192,44754903554785281,44754959390212097,44755118304722945,44754907849228289,44754766115373056,44755131189952513,44754800477732864,44754757526618112,44754804771717120,44754787587784704,44754778999947264,44754809065570304,44754929326424065,44755126894067713,44754933621653505,44755122597199873,44754899259752449,44754521302106112,44754727461388288,45036284048506882,45036271163604994,45036206739095554,45036159494455298,45036279753539586,45036129429684226,45036176674324482,45036193854193666,45036133724651522,45036180969291778,45036103659880450,45036022055501826,45036266868637698,45036627645890562,45036198149160962,45036112249815042,45036120839749634,45036202444128258,45036253983735810,45036000580665346,45036172379357186,45036125134716930,45036318408245250,45036275458572290,45036262573670402,45035996285698050,45036223918964738,45036185264259074,45036232508899330,45036138019618818,45036146609553410,45036017760534530,45036241098833922,45036116544782338,45036228213932034,45036219623997442,45036004875632642,45036142314586114,45036150904520706,45036288343474178,45036301228376066,45036215329030146,45036168084389890,45036009170599938,45036107954847746,45036155199488002,45036236803866626,45036163789422594,45036211034062850,45317784795938816,45317733259804672,45599208236580864,45880683206868994,45880979566231553,45880670326947840,45880678918455296,45880983859625985,45880949501329409,45880743328677888,46162291323699201,46162183949123584,46162282732781569,46162278438338561,46162274143305729,46162256963108865,46162252668928001,46162171065663488,46162218309713920,46162287029977089,46162295617552385,46162188245073920,46161896189657088,46162175361286144,46162003560169472,46162321389977601,46162334283923457,46162179655270400,46161900480102400,46161921955725312,46162265554550785,46162308505206785,46161904776314880,46162299915468801,46162153883500544,46162317095075841,46162269849845761,46161917662396416,46162312797093889,46162304209977345,46162325685207041,46443693286424576,46443392639107072,46443749120016385,46443478536880128,46443744826556417,46443646042374144,46443731939819521,46443740533358593,46443628860211200,46443379753025536,46443650337996800,46443375456813056,46443654631981056,46443371166367744,46443663221784576,46443766311026689,46443757709492225,46443727645638657,46443753415049217,46443762006687745,46443658925834240,46443396932435968,46725202622349313,46724953513590784,46725125314707456,46725224096727041,46725232686202881,46725215510069249,46725129608691712,46725219803267073,46725121019084800,46725206916530177,46725241287802881,46725133902544896,46724846143078400,46725138198495232,46725103836921856,46724871909146624,46725168263135232,46725236983398401,46725228391759873,46724854729736192,46724850433523712,46724867615817728,47006707662913537,47006428490301440,47006548748599296,47006565929058304,47006595995795456,47006613175205888,47006922410885121,47006527275073536,47006325410234368,47006931003637761,47006540160040960,47006561635794944,47006926707752961,47006544455335936,47006626059583488,47006522979713024,47006342592528384,47006321115791360,47006535864025088,47006720547684353,47006699073437697,47006737727225857,47006600291418112,47006578813632512,47006716253831169,47006703368470529,47006677599059969,47006329706446848,47006918118408193,47006733435338753,47006905233309697,47006587401469952,47006557340303360,47006604585402368,47006746320109569,47006690484682753,47006900937555969,47006518686515200,47006346885857280,47006896653205505,47006681893240833,47006643239845888,47006742025207809,47006729140109313,47006694779977729,47006759203897345,47006553046384640,47006608879255552,47006711960109057,47006724845600769,47006750615339009,47288053790343168,47287821862567936,47288169756688385,47287817569239040,47288070972506112,47288079562113024,47288165463490561,47287903467012096,47288152575770625,47288174050148353,47288156869951489,47287800386945024,47287796096499712,47288083855966208,47288178356453377,47287804683157504,47288088151916544,47288075268128768,47288118216556544,47569545949216768,47569640440201217,47569653333229569,47569593193267200,47569528767053824,47569563128627200,47569279659868160,47569554538823680,47569275363655680,47569296839278592,47569550244839424,47569649026859009,47569627552481281,47569631846662145,47569271073210368,47569292545949696,47569378443722752,47569644733399041,47569558832676864,47851059586334720,47851051000594432,48132500203569154,48132491613634562,48132440074027010,48132465843830786,48132444368994306,48132457253896194,48132508793503746,48132495908601858,48132478728732674,48132246800498690,48132525973372930,48132513088471042,48132435779059714,48132504498536450,48132448663961602,48132225325662210,48132229620629506,48132452958928898,48132418599190530,48132431484092418,48132461548863490,48132487318667266,48132422894157826,48132242505531394,48132543153242114,48132328404877314,48132221030694914,48132427189125122,48413704590000128,48413970879348736,48413983762808832,48414104023662593,48413979468955648,48414056776794113,48414121203662849,48414069663531009,48413988058759168,48414086843662337,48414099729154049,48414073956990977,48413721769410560,48414091137384449,48414108318892033,48413803373854720,48414018123399168,48414061083688961,48414125508263937,48413953697185792,48414078252023809,48414095431237633,48414112610779137,48413975174971392,48414116908761089,48413717476081664,48414082546466817,48413696003342336,48413700293787648,48414052482613249,48413958004408320,48414065368236033,48695557523177473,48695179566710784,48695591885471745,48695493100109824,48695600475602945,48695553228734465,48695583295602689,48695445856059392,48695450151682048,48695454445666304,48695463035469824,48695548933701633,48695175270498304,48695570407948289,48695540344946689,48695587587489793,48695527459323905,48695458739519488,48695579000373249,48695192452792320,48695428673896448,48695196746121216,48695170980052992,48695278350565376,48695574705864705,48695531753504769,48695544640241665,48695596180373505,48695561820372993,48695566114095105,48695609074974721,48976645965086720,49258421572730882,49258395802927106,49258219709267970,49258370033123330,49258202529398786,49258150989791234,49258447342534658,49258198234431490,49258455932469250,49258193939464194,49258443047567362,49258181054562306,49258382918025218,49258138104889346,49258206824366082,49258224004235266,49258378623057922,49258417277763586,49258438752600066,49258430162665474,49258189644496898,49258425867698178,49258211119333378,49258434457632770,49258185349529602,49258468817371138,49258172464627714,49258451637501954,49258176759595010,49258374328090626,49258464522403842,49258159579725826,49258163874693122,49258400097894402,49258215414300674,49258142399856642,49258155284758530,49258460227436546,49258146694823938,49258168169660418,49258391507959810,49258404392861698,49539857894801410,49539690391076866,49539939499180034,49539651736371202,49539845009899522,49539617376632834,49539896549507074,49539686096109570,49539668916240386,49539694686044162,49539677506174978,49539681801142274,49539892254539778,49539621671600130,49539647441403906,49539853599834114,49539638851469314,49539634556502018,49539664621273090,49539673211207682,49539926614278146,49539875074670594,49539630261534722,49539943794147330,49539698981011458,49539849304866818,49539656031338498,49539922319310850,49539613081665538,49539866484736002,49539643146436610,49539900844474370,49539879369637890,49539625966567426,49539660326305794,49539913729376258,49539935204212738,49539918024343554,49539870779703298,49539905139441666,49539909434408962,49539930909245442,49821070895284224,50102859388157954,50102584510251010,50102889452929026,50102850798223362,50102614575022082,50102623164956674,50102863683125250,50102636049858562,50102799258615810,50102597395152898,50102631754891266,50102829323386882,50102872273059842,50102593100185602,50102885157961730,50102580215283714,50102648934760450,50102601690120194,50102867978092546,50102842208288770,50102876568027138,50102575920316418,50102618869989378,50102627459923970,50102893747896322,50102605985087490,50102820733452290,50102816438484994,50102846503256066,50102610280054786,50102644639793154,50102640344825858,50102825028419586,50102880862994434,50102588805218306,50102807848550402,50384020840316928,50384450335866881,50384304305930240,50384046606385152,50384029426974720,50384308599783424,50384300011945984,50384295716323328,50384278534160384,50384128210829312,50384424566128641,50384377319587841,50384390205210625,50384411680636929,50384437447753729,50384420268212225,50384433155866625,50384441745735681,50384394500505601,50384342960373760,50384403088998401,50384042313056256,50384428860637185,50384407383441409,50384458928422913,50384381613768705,50384415974359041,50384446040637441,50384025130762240,50384398793965569,50384312895733760,50665783576494080,50665882360152065,50665873770676225,50665890951069697,50665963963613185,50665633247920128,50665908132577281,50665817937084416,50665972549419009,50665912424464385,50665895244922881,50665886657347585,50665641838772224,50665667607920640,50665899542839297,50665985444872193,50665495817027584,50665878065709057,50665869477216257,50666011208450049,50665521583095808,50665603187539968,50665654722625536,50665903837347841,50665770693033984,50665774988656640,50665753510871040,50665671903215616,50665646132232192,50665925312577537,50665628952887296,50665517289766912,50666049876262913,50665856590479361,50665865181921281,50665779282640896,50665663313346560,50665998320664577,50665684786872320,50665500107472896,50665637542100992,50665852296298497,50665933905133569,50665787872444416,50665916722446337,50665680493936640,50665968255172609,50665659018706944,50665921017348097,50665504403685376,50665650427854848,50665676198772736,50665508693147648,50947018030448642,50947043800252418,50947000850579458,50947271433519106,50947009440514050,50947056685154306,50947318678159362,50947232778813442,50947073865023490,50947039505285122,50947305793257474,50947301498290178,50947249958682626,50947065275088898,50947013735481346,50947052390187010,50947314383192066,50947022325415938,50947026620383234,50947224188878850,50947245663715330,50947267138551810,50947284318420994,50947292908355586,50947254253649922,50947060980121602,50947288613388290,50947035210317826,50947297203322882,50947310088224770,50947069570056194,50947048095219714,50947275728486402,50947241368748034,50947005145546754,50947030915350530,51228445773266946,51228686291435522,51228471543070722,51228634751827970,51228651931697154,51228570327318530,51228626161893378,51228458658168834,51228737831043074,51228561737383938,51228557442416642,51228617571958786,51228553147449346,51228450068234242,51228767895814146,51228724946141186,51228604687056898,51228578917253122,51228656226664450,51228720651173890,51228467248103426,51228677701500930,51228608982024194,51228587507187714,51228660521631746,51228669111566338,51228643341762562,51228566032351234,51228621866926082,51228703471304706,51228681996468226,51228454363201538,51228613276991490,51228716356206594,51228647636729858,51228583212220418,51228673406533634,51228591802155010,51228729241108482,51228600392089602,51228630456860674,51228664816599042,51228712061239298,51228750715944962,51228733536075778,51228690586402818,51228574622285826,51228596097122306,51229077133459458,51510122613833730,51509929340305410,51510135498735618,51510187038343170,51510118318866434,51510178448408578,51510199923245058,51509942225207298,51510195628277762,51510148383637506,51510144088670210,51510139793702914,51509925045338114,51510242872918018,51510165563506690,51509920750370818,51510212808146946,51510208513179650,51510191333310466,51510204218212354,51510225693048834,51510126908801026,51510152678604802,51510156973572098,51510028124553218,51509946520174594,51510161268539394,51791653417713664,51791769384058881,51791833807978497,51791679189483520,51791717843927040,51791627650465792,51791662005551104,51791395719872512,51791670599876608,51791825219420161,51791687779287040,51791597583794176,51791417196609536,51791619059417088,51791820924190721,51791795151765505,51791979837390849,51791773677518849,51791593290596352,51791623352680448,51791782266994689,51791971258007553,51791400014315520,51791636239876096,51791756497321985,51792005607718913,51791503094382592,51791640533139456,51791421489938432,51791614764122112,51791765088763905,51791799449681921,51792001311834113,51791752203141121,51791674895499264,51791700663664640,51791777972551681,51791997014966273,51791610468106240,51791992722489345,51791601879154688,51791631944384512,51791816629288961,51791808039419905,51791404310528000,51791786564190209,51791790857912321,51791803744190465,51791683483336704,51791812331307009,51791975541637121,52073128394424320,52073192820637696,52072892173320192,52072896466649088,52073154166194176,52073149872209920,52073231474032641,52073244360769537,52072870700580864,52073162755997696,52073240067571713,52073145576587264,52073248666288129,52072978071093248,52072874991026176,52072879287238656,52073158460047360,52073227179851777,52354723643064321,52354624848920576,52354620553297920,52354667797348352,52354354263949312,52354367150030848,52354637732708352,52354629142904832,52354371443359744,52354633436758016,52354719337480193,52354702156562433,52354715044282369,52354349967736832,52354706450743297,52354345677291520,52354453047803904,52354603371134976,52636198619840513,52636181427453953,52635829240659968,52636194314190849,52635824944447488,52635928024514560,52636190020993025,52635842126741504,52635846420070400,52636104119615488,52636078347845632,52636099825631232,52636142774059008,52635820654002176,52636095530008576,52636108413468672,52636177133273089,52636112709419008,52917707946262529,52917570506719232,52917725126262785,52917690764754945,52917673584361473,52917712238149633,52917716536131585,52917617750769664,52917703651033089,52917720831033345,52917699356524545,52917304217370624,52917656404164609,52917583390179328,52917686471032833,52917664995606529,52917652109983745,52917733726158849,52917317103452160,52917299921158144,52917321396781056,52917669290901505,52917553324556288,52917682173837313,52917579096326144,52917403001225216,52917295630712832,52917587686129664,52917574802341888,52917695058608129,52917677879394305,53199054073036800,53199161447743489,53199191512842241,53199148561072129,53199174333235201,53199144267612161,53199092727480320,53199058366889984,53199045483429888,53198774897868800,53198796373491712,53199170035318785,53199157150547969,53199049779052544,53199127086694401,53199028301266944,53199195807744001,53199182922973185,53199152856104961,53198779194081280,53199208702935041,53199165741465601,53199139972317185,53198770607423488,53199200102973441,53199062662840320,53199187214860289,53198792080162816,53199178627743745,53199131380875265,53198877977935872,53480606357585921,53480636435070977,53480249874579456,53480619244322817,53480567704190976,53480614951124993,53480602063405057,53480627832815617,53480271350202368,53480352954646528,53480524755763200,53480537639550976,53480254170791936,53480503277977600,53480623537782785,53480632127258625,53480520460140544,53480267056873472,53480529049747456,53480245584134144,53480533343600640,53761827931357184,53762012616261632,53762111411847169,53761742033584128,53761978254688256,53762102809526273,53762042680901632,53762077040115713,53762089927835649,53761746326913024,53761724851290112,53762081334296577,53761729147502592,53761720560844800,53762008320311296,53761995436851200,53762094221033473,53762107103969281,53762098514493441,53762004026458112,53761999732473856,54043517657612288,54043552016826369,54043577786236929,54043582080679937,54043302908067840,54043470413561856,54043479003168768,54043483297021952,54043195537555456,54043474709184512,54043204124213248,54043217010294784,54043586388623361,54043199828000768,54043569197744129,54043564904546305,54043487592972288,54043573491204097,54043453231398912,54043221303623680,54043556311007233,54324962569682944,54325031287717889,54324674804711424,54324953979879424,54324945390272512,54325057057390593,54324696280334336,54325052762947585,54324949685895168,54325026993537025,54324958273732608,54324928208109568,54325061365399553,54324679100923904,54324691987005440,54325044174454785,54324670514266112,54324992634322944,54324777884778496,54325039881256961,54325048467914753,54606364543483904,54887852399853570,54887843809918978,54887912529395714,54887830925017090,54887624766586882,54887848104886274,54887727845801986,54887646241423362,54887620471619586,54887856694820866,54887860989788162,54887899644493826,54887818040115202,54887822335082498,54887878169657346,54887886759591938,54887629061554178,54887895349526530,54887865284755458,54887839514951682,54887835219984386,54887826630049794,54887942594166786,54887908234428418,54887891054559234,54887641946456066,54887925414297602,54887903939461122,55169318786039810,55169301606170626,55169305901137922,55169366030680066,55169293016236034,55169417570287618,55169104037675010,55169095447740418,55169378915581954,55169374620614658,55169121217544194,55169383210549250,55169323081007106,55169387505516546,55169357440745474,55169310196105218,55169331670941698,55169370325647362,55169202821922818,55169314491072514,55169361735712770,55169400390418434,55169099742707714,55169116922576898,55169353145778178,55169335965908994,55169327375974402,55169297311203330,55169340260876290,55450974146920449,55450948374757377,55450987028545537,55450579007766528,55450991326527489,55450845297115136,55450591893848064,55450931194560513,55450849592737792,55450978441428993,55450999927078913,55450677791621120,55450982736658433,55450952669790209,55450570421108736,55450596187176960,55450828114952192,55450858180575232,55450574711554048,55450969849004033,55450926900379649,55450939786002433,55450853886722048,55450892541165568,55450995621429249,55450944081297409,55450862476525568,55450961261428737,55450965555150849,55450956964233217,55732333155778562,55732328860811266,55732049687937026,55732367515516930,55732152767152130,55732320270876674,55732045392969730,55732071162773506,55732053982904322,55732324565843970,55732303091007490,55732066867806210,55732337450745858,56013803837849602,56013541844844546,56013520370008066,56013778068045826,56013795247915010,56013627744190466,56013812427784194,56013808132816898,56013842492555266,56013528959942658,56013799542882306,56013546139811842,56013524664975362,56295270224101378,56295102720376834,56295016821030914,56295283109003266,56295003936129026,56295253044232194,56295287403970562,56295274519068674,56295021115998210,56294999641161730,56294995346194434,56295317468741634,56295278814035970,56576470323298306,56576728021336066,56576491798134786,56576478913232898,56576745201205250,56576577697480706,56576792445845506,56576474618265602,56576758086107138,56576753791139842,56576749496172546,56576762381074434,56576496093102082,56858224472948738,56858267422621698,56858220177981442,56857966774910978,56858237357850626,56857949595041794,56857953890009090,56858052674256898,56857971069878274,56857945300074498,56858228767916034,56858233062883330,56858202998112258,57139428866392066,57139695154364418,57139446046261250,57139441751293954,57139742399004674,57139699449331714,57139420276457474,57139712334233602,57139527650639874,57139677974495234,57139424571424770,57139703744299010,57139708039266306,57421217375518722,57420921022775298,57421183015780354,57421170130878466,57420899547938818,57420916727808002,57421187310747650,57421002627153922,57421152951009282,57421174425845762,57420903842906114,57421178720813058,57420895252971522,57702662287589378,57702477603995650,57702395999617026,57702649402687490,57702378819747842,57702374524780546,57702645107720194,57702391704649730,57702657992622082,57702627927851010,57702370229813250,57702653697654786,57702692352360450,57983853796655106,57983845206720514,57983849501687810,57984167329267714,57984132969529346,57983952580902914,57983866681556994,57984102904758274,57983870976524290,57984128674562050,57984137264496642,57984124379594754,57984120084627458,58265577881075714,58265320183037954,58265607945846786,58265341657874434,58265595060944898,58265612240814082,58265427557220354,58265599355912194,58265328772972546,58265642305585154,58265345952841730,58265324478005250,58265603650879490,58547186005245953,58547151644196865,58547070040932352,58547190298968065,58547203185246209,58546799455371264,58547082924392448,58547181708050433,58547216070344705,58547177413607425,58546902535438336,58547168825114625,58547224670961665,58547074336555008,58546816637665280,58547164529819649,58547087220342784,58547173118574593,58547220365246465,58547207480475649,58547198890737665,58546795164925952,58546820930994176,58547155938377729,58546803751583744,58547117284982784,58547211772362753,58547052858769408,58547194592821249,58547078630539264,58828274431885314,58828592259465218,58828295906721794,58828549309792258,58828278726852610,58828527834955778,58828545014824962,58828377511100418,58828291611754498,58828270136918018,58828562194694146,58828553604759554,58828557899726850,59110050065022978,59110015705284610,59109955575742466,59109981345546242,59109745122344962,59109766597181442,59109959870709762,59109852496527362,59109753712279554,59109942690840578,59109985640513538,59110011410317314,59109968460644354,59110037180121090,59109989935480834,59110020000251906,59110002820382722,59110067244892162,59109946985807874,59109951280775170,59109977050578946,59109749417312258,59109964165677058,59110028590186498,59109770892148738,59109972755611650,59110024295219202,59110032885153794,59391490669871106,59391301691310082,59391482079936514,59391288806408194,59391284511440898,59391318871179266,59391537914511362,59391542209478658,59391263036604418,59391258741637122,59391473490001922,59391503554772994,59391297396342786,59391267331571714,59391293101375490,59391533619544066,59391250151702530,59391563684315138,59391254446669826,59391305986277378,59391271626539010,59391310281244674,59391546504445954,59391567979282434,59391275921506306,59391494964838402,59391314576211970,59391516439674882,59391520734642178,59391525029609474,59391559389347842,59391280216473602,59391550799413250,59391499259805698,59391323166146562,59391555094380546,59673042956124162,59672750898348034,59672780963119106,59672768078217218,59673000006451202,59673017186320386,59672978531614722,59672738013446146,59672974236647426,59672776668151810,59672759488282626,59672969941680130,59673025776254978,59672746603380738,59672793848020994,59672789553053698,59672798142988290,59673012891353090,59672755193315330,59672948466843650,59672785258086402,59672772373184514,59673030071222274,59672991416516610,59673021481287682,59672995711483906,59672742308413442,59673038661156866,59672725128544258,59672763783249922,59672733718478850,59672965646712834,59672729423511554,59672957056778242,59673008596385794,59673034366189570,59954487885430784,60236005798641665,60235752395702272,60235967145246720,60235932784656384,60235919901196288,60236022978838529,60235937080606720,60235653611847680,60236014392180737,60236018685378561,60236031581683713,60235645025189888,60235928490803200,60236001504460801,60235902719033344,60235649315635200,60235666497929216,60236027273871361,60235924196818944,60235670791258112,60517493662089217,60517497955549185,60517412057317376,60517145767968768,60517124292345856,60517480775352321,60517407761367040,60517394877906944,60517399173529600,60517227372412928,60517442121957376,60517120001900544,60517141474639872,60517506558459905,60517476481171457,60517489368891393,60517128588558336,60517377695744000,60517403467513856,60517502250582017,60798899930857472,61080095721390080,61080069955321856,61080469383217153,61080357714788352,61080439322312705,61080392075378688,61080353420935168,61080447908970497,61080473691881473,61080452204003329,61080327649165312,61080344831328256,61080443615510529,61080460795641857,61080362010738688,61080074245767168,61080177325834240,61080456498446337,61080430728773633,61080091428061184,61080349126950912,61080078541979648,61080465089363969,61080426434592769,61361961553559553,61361901411303425,61361832691499008,61361828397645824,61361570698100736,61361836987449344,61361824103661568,61361927180713985,61361566404771840,61361914299023361,61361549222477824,61361948657844225,61361544932032512,61361905705484289,61361922885681153,61361931475156993,61361819808038912,61361940066074625,61361918592221185,61361957247582209,61361935772352513,61361867052089344,61361952952352769,61361553518690304,61361652302544896,61361944359927809,61361802625875968,61643423634554881,61643041381482496,61643019908743168,61643406451867649,61643436516179969,61643389273636865,61643432224292865,61643458005172225,61643045674811392,61643277602586624,61643440814161921,61643307668209664,61643445109063681,61643397862391809,61643028495400960,61643342028800000,61643024199188480,61643402157424641,61643419336638465,61643393568931841,61643415042785281,61643427929063425,61643376388014081,61643311964160000,61643303374356480,61643299080372224,61643294784749568,61643127279255552,61643449404293121,61643380682194945,61643410749063169,61924894313349121,61924881428578305,61924902917177345,61924494885453824,61924868545642497,61924898611265537,61924782644920320,61924877134135297,61924752579297280,61924602255966208,61924864252444673,61924774057082880,61924817005510656,61924778351067136,61924872839102465,61924520651522048,61924516358193152,61924855658905601,61924885725773825,61924786940870656,61924851364724737,61924499175899136,61924503472111616,61924890019495937,61924769761460224,62206291982221312,62206244738170880,62206227556007936,62205995628232704,62205978448822272,62206326341435393,62206253327777792,62206077232676864,62206343522353153,62206249033793536,62206360702484481,62206364996206593,62206261917581312,62206257621630976,62205974152609792,62206369304018945,62205991334903808,62205969862164480,62206339229155329,62206347815813121,62206330635616257,62206356405288961,62206352110845953,62487728304488448,62487822792523777,62487887230468097,62487848564686849,62487839972917249,62487552209387520,62487766958931968,62487702532718592,62487818499063809,62487453425532928,62487732598341632,62487719714881536,62487814205865985,62487835679195137,62487844266770433,62487736894291968,62487827087556609,62487801318146049,62487466311614464,62487470604943360,62487805612326913,62487449129320448,62487870040702977,62487857154424833,62487861446311937,62487831381999617,62487865744293889,62487852859195393,62487444838875136,62487724010504192,62768932699242498,62769104497934338,62769100202967042,62769087318065154,62768919814340610,62769070138195970,62769061548261378,62769224757018626,62769035778457602,62769031483490306,62769168922443778,62769237641920514,62769108792901634,62769091613032450,62769078728130562,62769065843228674,62769048663359490,62769044368392194,62769241936887810,62769233346953218,62769074433163266,62769040073424898,62769177512378370,62769057253294082,62769095907999746,62769083023097858,62769052958326786,62769181807345666,63050905903431681,63050394791378944,63332140362039296,63332183307190272,63613344755875840,63895008700792834,63894948571250690,63894944276283394,63895086010204162,63894974341054466,63895000110858242,63894832607133698,63894957161185282,63894939981316098,63894991520923650,63894931391381506,63894965751119874,63895068830334978,63894978636021762,63894935686348802,63895124664909826,63894970046087170,63894987225956354,63895137549811714,63894961456152578,63895163319615490,63894982930989058,63895133254844418,63895081715236866,63894995815890946,63895077420269570,63895004405825538,63894952866217986,64176853055242241,64176427834998784,64176745670180865,64176835864625153,64176810087874561,64176294691274752,64176436424212480,64176462195458048,64176616814870528,64176797202776065,64176552403009536,64176475080884224,64176762843299841,64176414949638144,64176822986211329,64176419244867584,64176423540948992,64176470785327104,64176449309966336,64176758548856833,64176479376048128,64176466490032128,64176432130031616,64176767137284097,64176453604737024,64176410655326208,64176543813140480,64176771431530497,64176857345818625,64176457900818432,64176818676629505,64176406361276416,64176556702433280,64176307575259136,64176445014343680,64176814383562753,64176840159723521,64176483668983808,64176440720883712,64176831580274689,64458023089340416,64458169103745025,64458160516169729,64458156218974209,64458177696169985,64458044551856128,64458190581268481,64457795441917952,64458212067966977,64457877046362112,64458057435316224,64458126155120641,64457791148589056,64458027369693184,64458194877677569,64458143336038401,64457773966295040,64458181991399425,64458048847478784,64458186283286529,64458151924531201,64458130449301505,64458147629498369,64458061731266560,64458139042840577,64457769675849728,64458091795906560,64457778262507520,64458173401661441,64458053141463040,64458164809891841,64739506646679554,64739493771214848,64739502361214976,64739558186287106,65020981622931458,65021033162539010,65302718586421249,65302443719983104,65302452309852160,65302194598117376,65302508139642882,65302757257379841,65302456600035330,65583931576287234,65583983115894786,65865307767898114,65865462386720770,65865488156524546,65865256228290562,65865294882996226,65865157444042754,65865312062865410,65865458091753474,65865333537701890,65865269113192450,65865406552145922,65865410847113218,65865393667244034,65865277703127042,65865273408159746,65865329242734594,65865281998094338,65865324947767298,65865402257178626,65865299177963522,65865264818225154,65865290588028930,65865303472930818,65865286293061634,65865260523257858,65865449501818882,65865320652800002,65865316357832706,66146765557858304,66146752671973376,66146787032432640,66146739786612736,66147070507155457,66147165007773697,66146744081842176,66146735492300800,66146778441711616,66146812820389888,66146632412233728,66146782737793024,66146756967006208,66146808505958400,66147091974258689,66146799917858816,66147122039750657,66146748377923584,66146804213022720,66146731198251008,66147083385831425,66147087680274433,66146791327006720,66147096268505089,66146761261187072,66146774146940928,66146795622301696,66147134924849153,66146769851318272,66428210476548098,66428274901057538,66428279196024834,66428244836286466,66428249131253762,66428283490992130,66428223361449986,66428438109814786,66428257721188354,66428262016155650,66428356505436162,66428412340011010,66428219066482690,66428214771515394,66428236246351874,66428343620534274,66428206181580802,66428253426221058,66428227656417282,66428399455109122,66428266311122946,66428408045043714,66428360800403458,66428352210468866,66428231951384578,66428270606090242,66428240541319170,66428107397332994,66709874428542978,66709883018477570,66991216269393922,66991190499590146,66991044470702082,66991366593249282,66991156139851778,66991164729786370,66991233449263106,66991229154295810,66991302168739842,66991675830894594,66991194794557442,66991177614688258,66991199089524738,66991211974426626,66991220564361218,66991203384492034,66991169024753666,66991057355603970,66991160434819074,66991207679459330,66991186204622850,66991181909655554,66991224859328514,66991173319720962,67272519442956288,67272944643276801,67272880216408065,67272626813468672,67272914576998401,67272807202422784,67272785737482240,67272897396604929,67272888807849985,67272948946370561,67272523733401600,67272901691637761,67272940348375041,67272927463276545,67272923168768001,67272910283276289,67272841563013120,67272918870851585,67272802908569600,67272893103144961,67273086389583873,67272528029614080,67272875922227201,67272936050393089,67272811498373120,67272794318962688,67272905986080769,67272777136799744,67272931758505985,67272798614585344,67272540915695616,67272545209024512,67273090684485633,67554299358806018,67554307948740610,67835782930825218,67835774340890626,67835739981152258,68117120464388098,68117064629813250,68117206363734018,68117103284518914,68117094694584322,68117068924780546,68116944370728962,68117090399617026,68117060334845954,68117249313406978,68117262198308866,68116957255630850,68117116169420802,68117124759355394,68117098989551618,68117266493276162,68117129054322690,68117257903341570,68117193478832130,68117202068766722,68117056039878658,68117111874453506,68117107579486210,68117077514715138,68117086104649730,68117073219747842,68117081809682434,68117133349289986,68398604031492098,68398578261688322,68398432232800258,68398689930838018,68398552491884546,68398582556655618,68398608326459394,68398591146590210,68398573966721026,68398565376786434,68398595441557506,68398586851622914,68398599736524802,68398561081819138,68398556786851842,68398569671753730,68680418304000001,68680216442241024,68680414018469889,68680422599098369,68680212155138048,68680392553725953,68680152015503360,68679894318645248,68961476673732608,68961395069288448,68961373593665536,68961755846344705,68961773029031937,68961781618769921,68961390775959552,68961377889878016,68961790208638977,68961742963408897,68961648474849280,68961777323540481,68961760143540225,68961661358637056,68961794505048065,68961626997063680,68961644179226624,68961730076672001,68961764437262337,68961747256868865,68961738670211073,68961725782491137,68961369303220224,68961657062686720,68961785910657025,68961751551901697,68961691423277056,68961768731115521,68961811695927297,68961652768833536,69243157811167234,69243149221232642,69524602722254848,69524345022709760,69524688621535233,69524727276961793,69524722982453249,69524319256641536,69524710096961537,69524641376698368,69524327843299328,69524697210290177,69524735864078337,69524624196435968,69524675735912449,69524598428270592,69524701505323009,69524748752191489,69524731572191233,69524757340749825,69524692916830209,69524740162060289,69524714390683649,69524705799766017,69524607016108032,69524576950484992,69524718684536833,69524323547086848,69524744456962049,69524426627153920,69524611312058368,69524680030093313,69524594132647936,69524916268236801,69524340729380864,69806107760328706,69806090591404032,69806112055296002,69806056220721154,69805850062290946,69806099170394114,69806064810655746,69805854357258242,69806142120067074,69806047630786562,70087398062030850,70087406651965442,70087445306671106,70087552680853506,70087441011703810,70087514026147842,70087277802946562,70087415241900034,70087488256344066,70087449601638402,70087535500984322,70087475371442178,70087479666409474,70087548385886210,70087574155689986,70087539795951618,70087591335559170,70087294982815746,70087428126801922,70087282097913858,70087900573204482,70087402356998146,70087432421769218,70087496846278658,70087393767063554,70087290687848450,70087423831834626,70087380882161666,70087526911049730,70087501141245954,70087466781507586,70087505436213250,70087436716736514,70087385177128962,70087269213011970,70087561270788098,70087273507979266,70087509731180546,70087544090918914,70087410946932738,70087471076474882,70087376587194370,70087453896605698,70087419536867330,70087556975820802,70087492551311362,70087483961376770,70087389472096258,70087458191572994,70369001875898370,70368800012435458,70369049120538626,70368847257075714,70369044825571330,70369027645702146,70368821487271938,70368993285963778,70368778537598978,70369006170865666,70368765652697090,70369062005440514,70369087775244290,70369083480276994,70369053415505922,70369074890342402,70368808602370050,70369023350734850,70368838667141122,70368769947664386,70368804307402754,70369057710473218,70368817192304642,70368787127533570,70368830077206530,70369019055767554,70368842962108418,70368791422500866,70368812897337346,70368997580931074,70368825782239234,70368795717468162,70369092070211586,70368834372173826,70368774242631682,70368761357729794,70368782832566274,70369079185309698,70369066300407810,70369070595375106,70369040530604034,70369014760800258,70650592823672833,70650579936935937,70650326533996544,70650240636223488,70650541283540992,70650219163484160,70650476857327616,70650223453929472,70650506922950656,70650575642755073,70650227750141952,70650244929552384,70650498335113216,70650494039490560,70650588530475009,70650597131812865,70650511218900992,70650502629097472,70931956134248450,70932256791592961,70931951845703680,70931943254196224,71213319432110080,71213306547798016,71213491232636928,71213671620542465,71213710282391553,71213310841978880,71213637261066241,71213353793814528,71213181993025536,71213431120199680,71213289367404544,71213697405288449,71213632966623233,71213323727732736,71213349498650624,71213714577489921,71213336613224448,71213731763585025,71213285073092608,71213345203093504,71213620087947265,71213280779042816,71213426822414336,71213293662633984,71213418230906880,71213328022503424,71213705998041089,71213315138650112,71213641555050497,71213684505640961,71213302252765184,71213340907798528,71213727473008641,71213332318584832,71213645849296897,71213297958715392,71213358086750208,71494906087604226,71776432606740480,71776381074604032,72057929057828864,72057933352992768,72057864623751170,72057868918718466,72057632705150976,72057637000183808,72057649875386370,72057911868391426,72057898983489538,72057847443881986,72057941933162498,72057645580419074,72057907573424130,72057654170353666,72057890393554946,72057641285451778,72057894688522242,72057856033816578,72339331010592770,72339322420658178,72339111976894464,72339416909938690,72339339600527362,72339404034539520,72339116262227970,72339107681861632,72339369665298434,72339124852162562,72339120557195266,72339373960265730,72339343895494658,72339408329703424,72339386845167618,72339365370331138,72339129147129858,72339382550200322,72620763046346754,72620866125561858,72620754456412162,72620836060790786,72620823175888898,72620788816150530,72620771636281346,72620767341314050,72620780226215938,72620565477851138,72620831765823490,72620784521183234,72620827470856194,72620569772818434,72620651377197058,72620775931248642,72620810290987010,72620741571510274,72620818880921602,72620801701052418,72620750161444866,72620848945692674,72620758751379458,72620552592949250,72620548297981954,72620814585954306,72620544003014658,72620745866477570,72902353977737218,72902289553227778,72902079099830274,72902323912966146,72902319617998850,72902366862639106,72902061919961090,72902298143162370,72902066214928386,72902336797868034,72902049035059202,72902302438129666,72902349692665856,72902053330026498,72902070509895682,72902332502900738,72902280963293186,72902358272704514,72902074804862978,72902293848195074,72902057624993794,72902341102796800,72902345397829632,72902315323031554,72902272373358594,73183794594643970,73183790299676674,73183764529872898,73183824669376512,73183807479545858,73183773119807490,73183755939938306,73183528306671618,73183549781508098,73183816079507456,73183545486540802,73183798889611266,73183532601638914,73183811774513154,73183747350003714,73183541191573506,73183554076475394,73183536896606210,73183768824840194,73183833249349634,73183777414774786,73183524011704322,73183828954382338,73183820374540288,73183841839284226,73464990409555970,73464968934719490,73465252402561026,73465256697528322,73465273877397506,73465248107593730,73464973229686786,73465170798182402,73465166503215106,73465205157920770,73464994704523266,73465226632757250,73465179388116994,73465183683084290,73465213747855362,73465200862953474,73464977524654082,73465175093149698,73465243812626434,73465291057266690,73465187978051586,73465196567986178,73465076308901890,73465260992495618,73465235222691842,73465209452888066,73465239517659138,73465192273018882,73746744546295810,73746774611066882,73746748841263106,73746727366426626,73746478258323458,73746499733159938,73746504028127234,73746697301655554,73746482553290754,73746778906034178,73746753136230402,73746521207996418,73746546977800194,73746787495968770,73746534092898306,73746512618061826,73746495438192642,73746538387865602,73746705891590146,73746465373421570,73746469668388866,73746757431197698,73746508323094530,73746525502963714,73746529797931010,73746461078454274,73746761726164994,73746486848258050,73746714481524738,73746693006688258,73746701596622850,73746473963356162,73746766021132290,73746740251328514,73746791790936066,73746718776492034,73746542682832898,73746516913029122,73746770316099586,73746723071459330,73746783201001474,73746491143225346,74028232428027904,74028180888354816,74309655845404674,74309707385012226,74591182373847040,74591122251972608,74872421114970114,74872661633138690,74872408230068226,74872369575362562,74872678813007874,74872640158302210,74872412525035522,74872648748236802,74872360985427970,74872438294839298,74872614388498434,74872653043204098,74872657338171394,74872592913661954,74872395345166338,74872665928105986,74872597208629250,74872386755231746,74872683107975170,74872605798563842,74872446884773890,74872670223073282,74872382460264450,74872442589806594,74872378165297154,74872391050199042,74872687402942466,74872691697909762,74872601503596546,74872674518040578,74872627273400322,74872429704904706,74872416820002818,74872425409937410,74872644453269506,74872365280395266,74872399640133634,74872622978433026,74872403935100930,74872433999872002,74872373870329858,74872618683465730,75153840257171458,75154132314947586,75154093660241922,75153874616909826,75154080775340034,75153866026975234,75153878911877122,75153921861550082,75153900386713602,75154067890438146,75154158084751362,75154140904882178,75154128019980290,75154145199849474,75153917566582786,75154076480372738,75153870321942530,75153896091746306,75154089365274626,75153904681680898,75154123725012994,75154115135078402,75153853142073346,75153891796779010,75153835962204162,75153908976648194,75153913271615490,75154136609914882,75153883206844418,75153848847106050,75154149494816770,75153887501811714,75154097955209218,75154102250176514,75153857437040642,75154119430045698,75154153789784066,75154162379718658,75153861732007938,75153844552138754,75154166674685954,75154072185405442,75435555772104704,75717043624869890,75716773041930242,75717056509771778,75716987790295042,75716983495327746,75716876121145346,75716992085262338,75717000675196930,75716794516766722,75716790221799426,75717073689640962,75717090869510146,75716777336897538,75717013560098818,75717039329902594,75716974905393154,75716768746962946,75716996380229634,75717026445000706,75717004970164226,75717052214804482,75716970610425858,75717009265131522,75716979200360450,75717060804739074,75717047919837186,75716966315458562,75717035034935298,75998570131423234,75998514296848386,75998497116979202,75998290958548994,75998527181750274,75998273778679810,75998295253516290,75998522886782978,75998561541488642,75998578721357826,75998286663581698,75998540066652162,75998299548483586,75998278073647106,75998282368614402,75998591606259714,75998557246521346,75998565836455938,75998544361619458,75998505706913794,75998518591815682,75998548656586754,75998303843450882,75998583016325122,75998574426390530,76279997863362562,76280066582839298,76279980683493378,76279774525063170,76280032223100930,76279770230095874,76279748755259394,76279757345193986,76280040813035522,76279993568395266,76280002158329858,76280045108002818,76280015043231746,76279753050226690,76280023633166338,76279989273427970,76279972093558786,76279761640161282,76279778820030466,76280053697937410,76280057992904706,76279765935128578,76280019338199042,76280036518068226,76280049402970114,76561232321970178,76561472840138754,76561541559615490,76561447070334978,76561236616937474,76561528674713602,76561464250204162,76561532969680898,76561253796806658,76561490020007938,76561223732035586,76561455660269570,76561477135106050,76561240911904770,76561228027002882,76561524379746306,76561249501839362,76561468545171458,76561507199877122,76561245206872066,76561511494844418,76561498609942530,76561494314975234,76561520084779010,76561515789811714,76842982187532288,76842930655723520,77124457164242944,77124405632499712,77405893475893250,77405674432561154,77405957900402690,77405932130598914,77405936425566210,77405661547659266,77405657252691970,77405914950729730,77405648674291712,77405665842626562,77405923540664322,77405953605435394,77405919245697026,77405880590991362,77405889180925954,77405670137593858,77405872001056770,77405966490337282,77405652969193472,77405678727528450,77687136524500994,77687441467179010,77687411402407938,77687127945904128,77687145114435586,77687428582277122,77687355567833090,77687140819468290,77687432877244418,77687153704370178,77687364157767682,77687123651002368,77687346977898498,77687149409402882,77687389927571458,77687398517506050,77687394222538754,77687132229533698,77687407107440642,77687368452734978,77968886379184130,77968821954674690,77968869199314946,77968882084216834,77968620091211778,77968843429511170,77968907854020610,77968873494282242,77968602922614784,77968916443955202,77968624386179074,77968628681146370,77968598627713024,77968903559053314,77968864904347650,77968839134543874,77968607206309890,77968611501277186,77968830544609282,77968615796244482,78250339880927234,78250305521188866,78250344175894530,78250348470861826,78250318406090754,78250378535632898,78250095067791362,78250357060796418,78250099362758658,78250090772824066,78250361355763714,78250073604423680,78250382830600194,78250077899325440,78250082182889474,78250103657725954,78250296931254274,78250391420534786,78250314111123458,78250086477856770,78531776221151232,78813246886772738,78813255476707330,78813298426380290,78813307016314882,78813311311282178,79094786287140866,79094730452566018,79094721862631426,79094739042500610,79094773402238978,79094781992173570,79376317101703169,79376158185750528,79376368641835009,79376347167326209,79376523259281409,79376209723195392,79376299920785409,79376226907127808,79376141008240640,79376175368110080,79376351461834753,79376188250783744,79376050812026880,79376518978928641,79376248381308928,79376540440133633,79376321395163137,79376235496931328,79375943437516800,79376338575556609,79375947731959808,79376355757064193,79375969207582720,79376372937064449,79375952028172288,79376364346933249,79376162481766400,79376231200980992,79375964914253824,79376329984638977,79376183957520384,79376360048951297,79376265561571328,79376166777061376,79376325690195969,79376342869409793,79376304214966273,79376149596798976,79376218317520896,79376381525622785,79376334281834497,79376527555035137,79376544732610561,79376549029478401,79376179662028800,79376312806408193,79376171070324736,79376222613143552,79376201135357952,79376145301438464,79376553325363201,79657474246115330,79657766303891458,79657448476311554,79657465656180738,79657753418989570,79657714764283906,79657469951148034,79657461361213442,79657457066246146,79657757713956866,79657671814610946,79657688994480130,79657697593065472,79657723354218498,79657680404545538,79657731944153090,79657736239120386,79657701887967232,79657719059251202,79657478541082626,79657693289447426,79657452771278850,79939198330863618,79939163971125250,79939172569776128,79938927747923970,79939155381190658,79938944927793154,79939211215765506,79939194035896322,79939146791256066,79938940632825858,79938949222760450,79939168266092546,79938932042891266,79939241280536578,79938936337858562,79939176864677888,79939206920798210,79939228395634690,79938953517727746,79939189740929026,79939232690601986,79938923452956674,80220613188648962,80220660433289218,80220587418845186,80220596008779778,80220565944008706,80220673318191106,80220475749695490,80220394145316866,80220634663485442,80220372670480386,80220604598714370,80220570238976002,80220368375513090,80220647548387330,80220651843354626,80220583123877890,80220578828910594,80220591713812482,80220608893681666,80220389850349570,80220656138321922,80220643253420034,80220600303747074,80220376965447682,80220574533943298,80220638958452738,80220690498060290,80220626073550850,80502096745529346,80502161170038786,80502139695202306,80502143990169602,80502156875071490,80502191234809858,80502148285136898,80502118231638016,80502113925398530,80502105335463938,80501903472001026,80501899177033730,80783378449104898,80783580312567810,80783636147142658,80783666211913730,80783631852175362,80783623262240770,80783374160887808,80783588902502402,80783571722633218,81065111141220352,81065106838192128,81346328402264066,81346324107296770,81346521675792386,81346564625465346,81346568931311616,81346586100301826,81346581805334530,81346530265726978,81346573215399938,81346616165072898,81346538855661570,81628039601913858,81628005242175490,81628018127077378,81627799083745282,81628056781783042,81627803378712578,81628043896881154,81628091141521410,81628048191848450,81628013832110082,81627790501543936,81627794796576768,81627996652240898,81628061076750338,81909488813998082,81909531763671042,82191006740250626,82190963790577666,82472331392909314,82472344277811202,82472481716764674,82472305623105538,82472279853301762,82472339982843906,82472430177157122,82472348572778498,82472322802974722,82472181069053954,82472309918072834,82472425882189826,82472357162713090,82472352867745794,82472297033170946,82472314213040130,82472327097942018,82472301328138242,82472335687876610,82472284148269058,82472292738203650,82472318508007426,82472490306699266,82472168184152066,82472473126830082,82472486011731970,82472417292255234,82472288443236354,82753956695506946,82753905155899394,83035380143685632,83316850815074306,83316855110041602,83316842225139714,83316906649649154,83598330097172480,83879856602808322,83879800768233474,83879805063200770,83879792178298882,84161271460724736,84442853795758081,84442780781772800,84442772193935360,84442497312751616,84442776487919616,84442815142363136,84442935416127489,84442896748118017,84442493022306304,84442875270987777,84442870975954945,84442518788374528,84442501608964096,84442901042626561,84442866682494977,84442883862626305,84442746437500928,84442849501577217,84442918224134145,84442879565430785,84442892450201601,84442750716149760,84442862389297153,84442888156348417,84442909629743105,84442600392818688,84442767898312704,84442785077723136,84442514495045632,84442905337856001,84442913927725057,84724079661154304,84724122609844224,84723980875137024,84724105429909504,84724101134876672,84724135495335936,84724109724090368,84724418970058753,84724470502653953,84724509164503041,84724118314221568,84724083955204096,84724504882184193,84724148380762112,84724431848734721,84724114020761600,84724513459601409,84724152675926016,84724144085204992,84724483387752449,84724139789910016,84724096840826880,84724436143177729,84724156968861696,84724092544745472,84724126904614912,84724088249516032,84724440437161985,84724230004342784,84724131200696320,84724444731408385,85005692094382080,85005704969912322,85005756509519874,85005700684382208,85287179945836546,85568654922678274,85568706462285826,85850138501251072,85850181450858496,86131613467541506,86131656417214466,86413122800451586,86413131390386178,86694606367293442,86694597777358850,86975793578770432,86976141472890881,86975767812702208,86976137177595905,86976059868119040,86976025506545664,86976162946744321,86976124291973121,86976193013022721,86975776399360000,86976175833022465,86976145766350849,86976205911883777,86976089932759040,86976150061383681,86976055572168704,86976184420139009,86976042688708608,86975772103147520,86975875183214592,86976158653022209,86976188718120961,86976051278315520,86976046984331264,86976029818290176,86976167240597505,86976171538513921,86975789285441536,86976197308252161,86976180128251905,86976128586153985,86976154355826689,87257539134816258,87257526249914370,87257513365012482,87257345861287938,87257281436778498,87257521954947074,87257307206582274,87257328681418754,87257341566320642,87257294321680386,87257590674423810,87257564904620034,87257337271353346,87257582084489218,87257290026713090,87257320091484162,87257272846843906,87257547724750850,87257569199587330,87257560609652738,87257586379456514,87257298616647682,87257324386451458,87257543429783554,87257577789521922,87257332976386050,87257315796516866,87257285731745794,87257302911614978,87257496185143298,87257556314685442,87257504775077890,87257277141811202,87257311501549570,87257573494554626,87257517659979778,87539005525590016,87538949692719104,87539297583890433,87538958282129408,87539125786443777,87539108606443521,87538992642129920,87539095719772161,87539121491935233,87538923921408000,87538962575392768,87539293304389633,87539104309248001,87538984047804416,87539142966444033,87538919626047488,87539138671542273,87538739238862848,87539087131017217,87538936806375424,87539078539575297,87539022705917952,87538996937752576,87539301879644161,87539039886180352,87538975459966976,87539112900165633,87538953986637824,87538726352781312,87538945394933760,87539134373560321,87538932510359552,87539323354087425,87539147261673473,87538743532191744,87539009821540352,87538722056568832,87538825136635904,87539314764742657,87539001231736832,87539327649972225,87539155850231809,87538915332849664,87539091426312193,87538941101670400,87539130081673217,87539074245394433,87538717762125824,87539100014804993,87539117194018817,87539319057219585,87820274338562050,87820489086926850,87820214209019906,87820209914052610,87820540626534402,87820227093921794,87820506266796034,87820295813398530,87820287223463938,87820514856730626,87820261453660162,87820493381894146,87820282928496642,87820265748627458,87820291518431234,87820519151697922,87820278633529346,87820450432221186,87820523446665218,87820252863725570,87820231388889090,87820248568758274,87820222798954498,87820476202024962,87820497676861442,87820532036599810,87820467612090370,87820510561763330,87820536331567106,87820257158692866,87820218503987202,87820501971828738,87820527741632514,87820441842286594,87820446137253890,87820244273790978,87820463317123074,87820239978823682,87820270043594754,87820471907057666,87820235683856386,87820454727188482,88101989839601664,88102045673193473,88101693485613056,88101672009990144,88101955479011328,88101942595551232,88101925413388288,88102097228988417,88102049968226305,88102084326981633,88101951185158144,88101775090057216,88102071445356545,88101667719544832,88101959774961664,88101689192284160,88102037084438529,88102058559864833,88102067147440129,88102054262669313,88102024198815745,88102028492996609,88102088624963585,88102080035094529,88102062853586945,88102075739865089,88101676306202624,88101946891173888,88102041379733505,88102092919865345,88383232881786882,88383164162310146,88383219996884994,88383168457277442,88383159867342850,88383490579824642,88383172752244738,88383413270413314,88383456220086274,88383228586819586,88383202817015810,88383215701917698,88383404680478722,88383451925118978,88383481989890050,88383185637146626,88383439040217090,88383469104988162,88383421860347906,88383241471721474,88383447630151682,88383207111983106,88383181342179330,88383417565380610,88383400385511426,88383211406950402,88383464810020866,88383245766688770,88383391795576834,88383477694922754,88383237176754178,88383396090544130,88383426155315202,88383486284857346,88383224291852290,88383198522048514,88383443335184386,88383473399955458,88383189932113922,88383194227081218,88383460515053570,88383177047212034,88664922607779842,88664896837976066,88664879658106882,88664956967518210,88664892543008770,88664901132943362,88664682089611266,88664965557452802,88664647729872898,88664703564447746,88664656319807490,88664931197714434,88664952672550914,88664939787649026,88664669204709378,88664720744316930,88664652024840194,88664694974513154,88664944082616322,88664664909742082,88664948377583618,88664699269480450,88664707859415042,88664918312812546,88664690679545858,88664914017845250,88664673499676674,88664686384578562,88664961262485506,88664888248041474,88664712154382338,88664660614774786,88664935492681730,88664677794643970,88664716449349634,88664871068172290,88946522145226753,88946118415745024,88946101236334592,88946509257113601,88946311689928704,88946324576272384,88946371821305856,88946483489996801,88946358931357696,88946462014570497,88946487783718913,88946474898358273,88946380409143296,88946470603325441,88946333165682688,88946702533525505,88946096940122112,88946689648295937,88946397589471232,88946328870191104,88946517849997313,88946298804961280,88946376115290112,88946672467443713,88946698237640705,88946466309865473,88946337458946048,88946500669997057,88946479192801281,88946200020189184,88946315985223680,88946320278487040,88946449128947713,88946693940772865,88946290216402944,88946492077572097,88946414769733632,88946496375488513,88946307393912832,88946092645679104,88946294509600768,88946350343520256,88946530733785089,88946668188073985,88946453423128577,88946114122416128,88946367525683200,88946513555095553,88946384705093632,88946676763197441,88946504965226497,89227773781671936,89227808142393344,89227928399839233,89227795255197696,89228173214351361,89227949875068929,89227833908068352,89228143164850177,89227786666639360,89227593392455680,89228005710495745,89227765193113600,89227936991281153,89227769486311424,89227846798016512,89227992826707969,89227589099126784,89227674996899840,89227924105658369,89227997121937409,89227803846901760,89227571916832768,89227984233824257,89227945580036097,89227954169511937,89227799552983040,89227576213045248,89227971352199169,89227851092000768,89228177510236161,89227842502393856,89227567622389760,89227889746444288,89228164625006593,89227872566181888,89228147444154369,89227979941937153,89227967054282753,89227812435656704,89227975646707713,89228151739908097,89227962760429569,89227941286576129,89228168917483521,89227855385853952,89227825320230912,89227988531806209,89227782370623488,89227790961934336,89227859681804288,89227958466707457,89509416263286785,89509420556746753,89509326068711424,89509042603098112,89509480702672897,89509330362564608,89509433443418113,89509300296941568,89509068369166336,89509424851779585,89509321774727168,89509454918647809,89509446328909825,89509334658514944,89509149973610496,89509429146222593,89509317479104512,89509046893543424,89509442030993409,89509467803418625,89509411967991809,89509450623418369,89509472098648065,89509403376549889,89509459210534913,89509437737140225,89509064075837440,89509463508516865,89509399082369025,89509364723154944,89509051189755904,89790796755304450,89790792460337154,89790740920729602,89790809640206338,89790758100598786,89790736625762306,89790521877397506,89790745215696898,89790822525108226,89790728035827714,89790775280467970,89790723740860418,89790526172364802,89790749510664194,89790805345239042,89790732330795010,89790715150925826,89790719445893122,89790624956612610,89790762395566082,89790839704977410,89790543352233986,89790753805631490,89790801050271746,89790517582430210,89790539057266690,89790783870402562,89790788165369858,90072276022132736,90072014029258752,90072284611936256,90072366216708097,90072396282331137,90072417771257857,90072370510168065,90072250250362880,90072353329971201,90072099927031808,90072391984414721,90072314676576256,90072271728148480,90072409163956225,90072349035790337,90072413461938177,90072001143177216,90072280315985920,90072374805200897,90072400576839681,90072383396839425,90072267432525824,90071992556519424,90072379099643905,90072387690561537,90072018322587648,90072404872069121,90072361923510273,90071996846964736,90353781067481090,90353725232906242,90353729527873538,90353716642971650,90635256043798530,90635204504190978,90635191619289090,90635200209223682,90916679481032706,90916666596130818,90916731020640258,90916675186065410,91198154457808898,91198141572907010,91198205997416450,91198150162841602,91479620856184832,91761104422895616,92042566503301122,92042579388203010,92042630927810562,92042575093235714,92324196096016385,92324170323853313,92324204685754369,92324183210524673,92324084425621504,92324148849475585,92324161735098369,92324208977641473,92323818136272896,92324166030393345,92324191798099969,92324174618886145,92323792370204672,92324067246211072,92324221873618945,92323796660649984,92324062966317056,92324114490261504,92324217570525185,92323813842944000,92323899740717056,92324058664730624,92324187504246785,92324071541833728,92324359319126017,92324178913329153,92324075835817984,92324153143656449,92324050064048128,92324200390524929,92323800956862464,92324080129671168,92324213275623425,92605572291493890,92605580881428482,92605537931755522,92887055860039680,92887004329934848,93168625320656897,93168792839323649,93168822888300545,93168539420393472,93168612434378753,93168453520850944,93168492176343040,93168444929146880,93168221590781952,93168462109605888,93168616728231937,93168324670849024,93168608140656641,93168827184185345,93168419160260608,93168638205755393,93168814298955777,93168590960525313,93168509355753472,93168573779607553,93168578073788417,93168432044572672,93168436340588544,93168599549018113,93168457816342528,93168603843461121,93168586665230337,93168449226932224,93168646795886593,93168642500657153,93168225886994432,93168423455621120,93168483582017536,93168505059803136,93168522240131072,93168595253985281,93168474994180096,93168655384444929,93168243066404864,93168217296338944,93168496471965696,93168500765949952,93168621026148353,93168797118103553,93168629615886337,93168633907773441,93168440635883520,93168818591432705,93168414867062784,93168238773075968,93168801413857281,93449984338362370,93449692280586242,93449915618885634,93449980043395074,93449713755422722,93449962863525890,93449975748427778,93450014403133442,93449997223264258,93449911323918338,93449696575553538,93449958568558594,93449967158493186,93449928503787522,93449898439016450,93449932798754818,93449924208820226,93449937093722114,93449718050390018,93449902733983746,93449889849081858,93449799654768642,93449919913852930,93449949978624002,93449971453460482,93449907028951042,93449894144049154,93449700870520834,93731480778113026,93731429238505474,94012646528843778,94012908521848834,94012861277208578,94012947176554498,94012934291652610,94012663708712962,94012865572175874,94012929996685314,94012899931914242,94012844097339394,94012882752045058,94012921406750722,94012650823811074,94012912816816130,94012848392306690,94012925701718018,94012874162110466,94012668003680258,94012839802372098,94012856982241282,94012964356423682,94012917111783426,94012642233876482,94012878457077762,94012749608058882,94012869867143170,94012852697300992,94012887047012354,94294344844050434,94294331959148546,94294353433985026,94294422153461762,94294409268559874,94294323369213954,94294340549083138,94294125800718338,94294383498756098,94294336254115842,94294319074246658,94294404973592578,94294117210783746,94294224584966146,94294349139017730,94294121505751042,94294142980587522,94294327664181250,94294400678625282,94294362023919618,94294439333330946,94294392088690690,94294138685620226,94294357728952322,94294314779279362,94294396383657986,94294374908821506,94294387793723394,94575854190395392,94575905720303616,94857384982806530,94857329148231682,94857320558297090,94857372097904642,94857337738166274,94857380687839234,95138855671431170,95138804131823618,95138799836856322,95138791246921730,95420266223894530,95420330648403970,95420274813829122,95420279108796418,95701805625311234,95701797035376642,95701762675638274,95983237652480002,95983280602152962,96264802817605633,96264734099570688,96264725509767168,96265051928002561,96264862949572609,96264656788389888,96264673970749440,96265043335249921,96264648199438336,96264661084405760,96264686853423104,96264764164210688,96264819997802497,96264665379700736,96264721215782912,96264832884473857,96264643904077824,96264798523424769,96264854359703553,96264463516893184,96264850064474113,96264467810222080,96264639610880000,96264841472049153,96264828587278337,96265017583337473,96264669672964096,96264845769965569,96264446334599168,96264682560159744,96264450630811648,96264442040156160,96264746983948288,96264678264668160,96265026157674497,96264858651590657,96265047632117761,96264867244474369,96264708325834752,96264811409047553,96264880128262145,96265039042772993,96265021861920769,96264871539703809,96264729803620352,96264837178195969,96264824292835329,96264716920160256,96264549414666240,96264815704342529,96264699737997312,96546183312572418,96546191902507010,96546148952834050,96545925614534658,96546200492441602,96546024398782466,96546118888062978,96546153247801346,96546221967278082,96546131772964866,96545938499436546,96546144657866754,96545917024600066,96545921319567362,96546127477997570,96546157542768642,96546114593095682,96545942794403842,96546123183030274,96546136067932162,96546196197474306,96546209082376194,96546239147147266,96546187607539714,96546140362899458,96546161837735938,96546174722637826,96546204787408898,96827967536824321,96827787131617281,96827976111095809,96827623924170752,96827808605011969,96827774246256641,96827696937369600,96827821493125121,96827649691418624,96827632513581056,96827684052992000,96827606741811200,96827993288671233,96827679757041664,96827752771026945,96827417763643392,96827400584232960,96827769951223809,96827413470314496,96827598152859648,96827971815342081,96827817197895681,96828001881423873,96827671169204224,96827391993577472,96827778540699649,96827795723386881,96827636806844416,96827619626385408,96827589564301312,96827765657763841,96827628218089472,96827675463188480,96827666873581568,96827658279256064,96827499368087552,96827791425470465,96827812902993921,96827997585539073,96827611037827072,96827988996194305,96827800017895425,96827593857499136,96827396288020480,96827714117632000,96827782837895169,96827830081683457,96827748476846081,96827615333122048,96827761362468865,96827804313124865,97109171930660864,97390552408195074,97390350544732162,97390363429634050,97390612537737218,97390582472966146,97390616832704514,97390569588064258,97390634012573698,97390556703162370,97390586767933442,97390625422639106,97390449328979970,97390565293096962,97390573883031554,97390629717606402,97390560998129666,97390543818260482,97390578177998850,97390367724601346,97390621127671810,97390664077344770,97390346249764866,97390608242769922,97390539523293186,97390341954797570,97390548113227778,97390646897475586,97390599652835330,97672061744316418,97671924305362946,97672100399022082,97672035974512642,97672031679545346,97672014499676162,97671816931180546,97672027384578050,97671825521115138,97672096104054786,97672083219152898,97672040269479938,97671842700984322,97672087514120194,97672074629218306,97672104693989378,97672139053727746,97672023089610754,97672048859414530,97672108988956674,97672044564447234,97672057449349122,97671838406017026,97672121873858562,97672053154381826,97672091809087490,97672018794643458,97671821226147842,97953317677891586,97953536721223682,97953562491027458,97953296203055106,97953549606125570,97953579670896642,97953575375929346,97953493771550722,97953300498022402,97953399282270210,97953558196060162,97953502361485314,97953506656452610,97953583965863938,97953596850765826,97953291908087810,97953519541354498,97953510951419906,97953532426256386,97953515246387202,97953489476583426,97953571080962050,97953566785994754,97953498066518018,97953313382924290,97953523836321794,97953528131289090,97953614030635010,];


fn _semaction_rule_0_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; primary_expression::IDENTIFIER_0(_item0_) }

fn _semaction_rule_1_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_2(_x_2)=parser.popstack().value { _x_2 } else {<i32>::default()}; primary_expression::CONSTANT_1(_item0_) }

fn _semaction_rule_2_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; primary_expression::STRING_LITERAL_2(_item0_) }

fn _semaction_rule_3_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> primary_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; primary_expression::primary_expression_3(parser.lbx(1,_item1_)) }

fn _semaction_rule_4_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> postfix_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_204(_x_204)=parser.popstack().value { _x_204 } else {<primary_expression<'lt>>::default()}; postfix_expression::postfix_expression_4(parser.lbx(0,_item0_)) }

fn _semaction_rule_5_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> postfix_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_209(_x_209)=parser.popstack().value { _x_209 } else {<postfix_expression<'lt>>::default()}; postfix_expression::postfix_expression_5(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_6_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> postfix_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_209(_x_209)=parser.popstack().value { _x_209 } else {<postfix_expression<'lt>>::default()}; postfix_expression::postfix_expression_6(parser.lbx(0,_item0_)) }

fn _semaction_rule_7_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> postfix_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_152(_x_152)=parser.popstack().value { _x_152 } else {<argument_expression_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_209(_x_209)=parser.popstack().value { _x_209 } else {<postfix_expression<'lt>>::default()}; postfix_expression::postfix_expression_7(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_8_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> postfix_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_209(_x_209)=parser.popstack().value { _x_209 } else {<postfix_expression<'lt>>::default()}; postfix_expression::postfix_expression_8(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_9_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> postfix_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_209(_x_209)=parser.popstack().value { _x_209 } else {<postfix_expression<'lt>>::default()}; postfix_expression::postfix_expression_9(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_10_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> postfix_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_209(_x_209)=parser.popstack().value { _x_209 } else {<postfix_expression<'lt>>::default()}; postfix_expression::postfix_expression_10(parser.lbx(0,_item0_)) }

fn _semaction_rule_11_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> postfix_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_209(_x_209)=parser.popstack().value { _x_209 } else {<postfix_expression<'lt>>::default()}; postfix_expression::postfix_expression_11(parser.lbx(0,_item0_)) }

fn _semaction_rule_12_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> argument_expression_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_190(_x_190)=parser.popstack().value { _x_190 } else {<assignment_expression<'lt>>::default()}; argument_expression_list::argument_expression_list_12(parser.lbx(0,_item0_)) }

fn _semaction_rule_13_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> argument_expression_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_190(_x_190)=parser.popstack().value { _x_190 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_152(_x_152)=parser.popstack().value { _x_152 } else {<argument_expression_list<'lt>>::default()}; argument_expression_list::argument_expression_list_13(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_14_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_209(_x_209)=parser.popstack().value { _x_209 } else {<postfix_expression<'lt>>::default()}; unary_expression::unary_expression_14(parser.lbx(0,_item0_)) }

fn _semaction_rule_15_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_178(_x_178)=parser.popstack().value { _x_178 } else {<unary_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_expression::INC_OP_15(parser.lbx(1,_item1_)) }

fn _semaction_rule_16_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_178(_x_178)=parser.popstack().value { _x_178 } else {<unary_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_expression::DEC_OP_16(parser.lbx(1,_item1_)) }

fn _semaction_rule_17_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_198(_x_198)=parser.popstack().value { _x_198 } else {<cast_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_161(_x_161)=parser.popstack().value { _x_161 } else {<unary_operator<'lt>>::default()}; unary_expression::unary_expression_17(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_18_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_178(_x_178)=parser.popstack().value { _x_178 } else {<unary_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_expression::SIZEOF_18(parser.lbx(1,_item1_)) }

fn _semaction_rule_19_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_157(_x_157)=parser.popstack().value { _x_157 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_expression::SIZEOF_19(parser.lbx(2,_item2_)) }

fn _semaction_rule_20_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_operator::Amp }

fn _semaction_rule_21_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_operator::Star }

fn _semaction_rule_22_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_operator::unary_operator_22 }

fn _semaction_rule_23_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_operator::unary_operator_23 }

fn _semaction_rule_24_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_operator::unary_operator_24 }

fn _semaction_rule_25_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; unary_operator::Bang }

fn _semaction_rule_26_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> cast_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_178(_x_178)=parser.popstack().value { _x_178 } else {<unary_expression<'lt>>::default()}; cast_expression::cast_expression_26(parser.lbx(0,_item0_)) }

fn _semaction_rule_27_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> cast_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_198(_x_198)=parser.popstack().value { _x_198 } else {<cast_expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_157(_x_157)=parser.popstack().value { _x_157 } else {<type_name<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; cast_expression::cast_expression_27(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_28_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> multiplicative_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_198(_x_198)=parser.popstack().value { _x_198 } else {<cast_expression<'lt>>::default()}; multiplicative_expression::multiplicative_expression_28(parser.lbx(0,_item0_)) }

fn _semaction_rule_29_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> multiplicative_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_198(_x_198)=parser.popstack().value { _x_198 } else {<cast_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_154(_x_154)=parser.popstack().value { _x_154 } else {<multiplicative_expression<'lt>>::default()}; multiplicative_expression::multiplicative_expression_29(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_30_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> multiplicative_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_198(_x_198)=parser.popstack().value { _x_198 } else {<cast_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_154(_x_154)=parser.popstack().value { _x_154 } else {<multiplicative_expression<'lt>>::default()}; multiplicative_expression::multiplicative_expression_30(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_31_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> multiplicative_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_198(_x_198)=parser.popstack().value { _x_198 } else {<cast_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_154(_x_154)=parser.popstack().value { _x_154 } else {<multiplicative_expression<'lt>>::default()}; multiplicative_expression::multiplicative_expression_31(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_32_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> additive_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_154(_x_154)=parser.popstack().value { _x_154 } else {<multiplicative_expression<'lt>>::default()}; additive_expression::additive_expression_32(parser.lbx(0,_item0_)) }

fn _semaction_rule_33_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> additive_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_154(_x_154)=parser.popstack().value { _x_154 } else {<multiplicative_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_206(_x_206)=parser.popstack().value { _x_206 } else {<additive_expression<'lt>>::default()}; additive_expression::additive_expression_33(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_34_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> additive_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_154(_x_154)=parser.popstack().value { _x_154 } else {<multiplicative_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_206(_x_206)=parser.popstack().value { _x_206 } else {<additive_expression<'lt>>::default()}; additive_expression::additive_expression_34(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_35_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> shift_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_206(_x_206)=parser.popstack().value { _x_206 } else {<additive_expression<'lt>>::default()}; shift_expression::shift_expression_35(parser.lbx(0,_item0_)) }

fn _semaction_rule_36_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> shift_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_206(_x_206)=parser.popstack().value { _x_206 } else {<additive_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_158(_x_158)=parser.popstack().value { _x_158 } else {<shift_expression<'lt>>::default()}; shift_expression::shift_expression_36(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_37_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> shift_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_206(_x_206)=parser.popstack().value { _x_206 } else {<additive_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_158(_x_158)=parser.popstack().value { _x_158 } else {<shift_expression<'lt>>::default()}; shift_expression::shift_expression_37(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_38_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> relational_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_158(_x_158)=parser.popstack().value { _x_158 } else {<shift_expression<'lt>>::default()}; relational_expression::relational_expression_38(parser.lbx(0,_item0_)) }

fn _semaction_rule_39_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_158(_x_158)=parser.popstack().value { _x_158 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_179(_x_179)=parser.popstack().value { _x_179 } else {<relational_expression<'lt>>::default()}; relational_expression::relational_expression_39(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_40_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_158(_x_158)=parser.popstack().value { _x_158 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_179(_x_179)=parser.popstack().value { _x_179 } else {<relational_expression<'lt>>::default()}; relational_expression::relational_expression_40(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_41_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_158(_x_158)=parser.popstack().value { _x_158 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_179(_x_179)=parser.popstack().value { _x_179 } else {<relational_expression<'lt>>::default()}; relational_expression::relational_expression_41(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_42_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_158(_x_158)=parser.popstack().value { _x_158 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_179(_x_179)=parser.popstack().value { _x_179 } else {<relational_expression<'lt>>::default()}; relational_expression::relational_expression_42(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_43_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> equality_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_179(_x_179)=parser.popstack().value { _x_179 } else {<relational_expression<'lt>>::default()}; equality_expression::equality_expression_43(parser.lbx(0,_item0_)) }

fn _semaction_rule_44_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> equality_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_179(_x_179)=parser.popstack().value { _x_179 } else {<relational_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_189(_x_189)=parser.popstack().value { _x_189 } else {<equality_expression<'lt>>::default()}; equality_expression::equality_expression_44(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> equality_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_179(_x_179)=parser.popstack().value { _x_179 } else {<relational_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_189(_x_189)=parser.popstack().value { _x_189 } else {<equality_expression<'lt>>::default()}; equality_expression::equality_expression_45(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> and_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_189(_x_189)=parser.popstack().value { _x_189 } else {<equality_expression<'lt>>::default()}; and_expression::and_expression_46(parser.lbx(0,_item0_)) }

fn _semaction_rule_47_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> and_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_189(_x_189)=parser.popstack().value { _x_189 } else {<equality_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_180(_x_180)=parser.popstack().value { _x_180 } else {<and_expression<'lt>>::default()}; and_expression::and_expression_47(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_48_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> exclusive_or_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_180(_x_180)=parser.popstack().value { _x_180 } else {<and_expression<'lt>>::default()}; exclusive_or_expression::exclusive_or_expression_48(parser.lbx(0,_item0_)) }

fn _semaction_rule_49_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> exclusive_or_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_180(_x_180)=parser.popstack().value { _x_180 } else {<and_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_159(_x_159)=parser.popstack().value { _x_159 } else {<exclusive_or_expression<'lt>>::default()}; exclusive_or_expression::exclusive_or_expression_49(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> inclusive_or_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_159(_x_159)=parser.popstack().value { _x_159 } else {<exclusive_or_expression<'lt>>::default()}; inclusive_or_expression::inclusive_or_expression_50(parser.lbx(0,_item0_)) }

fn _semaction_rule_51_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> inclusive_or_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_159(_x_159)=parser.popstack().value { _x_159 } else {<exclusive_or_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_181(_x_181)=parser.popstack().value { _x_181 } else {<inclusive_or_expression<'lt>>::default()}; inclusive_or_expression::inclusive_or_expression_51(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_52_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> logical_and_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_181(_x_181)=parser.popstack().value { _x_181 } else {<inclusive_or_expression<'lt>>::default()}; logical_and_expression::logical_and_expression_52(parser.lbx(0,_item0_)) }

fn _semaction_rule_53_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> logical_and_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_181(_x_181)=parser.popstack().value { _x_181 } else {<inclusive_or_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_153(_x_153)=parser.popstack().value { _x_153 } else {<logical_and_expression<'lt>>::default()}; logical_and_expression::logical_and_expression_53(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_54_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> logical_or_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_153(_x_153)=parser.popstack().value { _x_153 } else {<logical_and_expression<'lt>>::default()}; logical_or_expression::logical_or_expression_54(parser.lbx(0,_item0_)) }

fn _semaction_rule_55_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> logical_or_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_153(_x_153)=parser.popstack().value { _x_153 } else {<logical_and_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_164(_x_164)=parser.popstack().value { _x_164 } else {<logical_or_expression<'lt>>::default()}; logical_or_expression::logical_or_expression_55(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_56_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> conditional_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_164(_x_164)=parser.popstack().value { _x_164 } else {<logical_or_expression<'lt>>::default()}; conditional_expression::conditional_expression_56(parser.lbx(0,_item0_)) }

fn _semaction_rule_57_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> conditional_expression<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_173(_x_173)=parser.popstack().value { _x_173 } else {<conditional_expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_164(_x_164)=parser.popstack().value { _x_164 } else {<logical_or_expression<'lt>>::default()}; conditional_expression::conditional_expression_57(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_58_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_173(_x_173)=parser.popstack().value { _x_173 } else {<conditional_expression<'lt>>::default()}; assignment_expression::assignment_expression_58(parser.lbx(0,_item0_)) }

fn _semaction_rule_59_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_190(_x_190)=parser.popstack().value { _x_190 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_183(_x_183)=parser.popstack().value { _x_183 } else {<assignment_operator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_178(_x_178)=parser.popstack().value { _x_178 } else {<unary_expression<'lt>>::default()}; assignment_expression::assignment_expression_59(parser.lbx(0,_item0_),parser.lbx(1,_item1_),parser.lbx(2,_item2_)) }

fn _semaction_rule_60_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::Eq1 }

fn _semaction_rule_61_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::MUL_ASSIGN }

fn _semaction_rule_62_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::DIV_ASSIGN }

fn _semaction_rule_63_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::MOD_ASSIGN }

fn _semaction_rule_64_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::ADD_ASSIGN }

fn _semaction_rule_65_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::SUB_ASSIGN }

fn _semaction_rule_66_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::LEFT_ASSIGN }

fn _semaction_rule_67_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::RIGHT_ASSIGN }

fn _semaction_rule_68_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::AND_ASSIGN }

fn _semaction_rule_69_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::XOR_ASSIGN }

fn _semaction_rule_70_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; assignment_operator::OR_ASSIGN }

fn _semaction_rule_71_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_190(_x_190)=parser.popstack().value { _x_190 } else {<assignment_expression<'lt>>::default()}; expression::expression_71(parser.lbx(0,_item0_)) }

fn _semaction_rule_72_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_190(_x_190)=parser.popstack().value { _x_190 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; expression::expression_72(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_73_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> constant_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_173(_x_173)=parser.popstack().value { _x_173 } else {<conditional_expression<'lt>>::default()}; constant_expression::constant_expression_73(parser.lbx(0,_item0_)) }

fn _semaction_rule_74_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; declaration::declaration_74(parser.lbx(0,_item0_)) }

fn _semaction_rule_75_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_186(_x_186)=parser.popstack().value { _x_186 } else {<init_declarator_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; declaration::declaration_75(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_76_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_205(_x_205)=parser.popstack().value { _x_205 } else {<storage_class_specifier<'lt>>::default()}; declaration_specifiers::declaration_specifiers_76(parser.lbx(0,_item0_)) }

fn _semaction_rule_77_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration_specifiers<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_205(_x_205)=parser.popstack().value { _x_205 } else {<storage_class_specifier<'lt>>::default()}; declaration_specifiers::declaration_specifiers_77(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_78_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_184(_x_184)=parser.popstack().value { _x_184 } else {<type_specifier<'lt>>::default()}; declaration_specifiers::declaration_specifiers_78(parser.lbx(0,_item0_)) }

fn _semaction_rule_79_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration_specifiers<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_184(_x_184)=parser.popstack().value { _x_184 } else {<type_specifier<'lt>>::default()}; declaration_specifiers::declaration_specifiers_79(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_80_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_187(_x_187)=parser.popstack().value { _x_187 } else {<type_qualifier<'lt>>::default()}; declaration_specifiers::declaration_specifiers_80(parser.lbx(0,_item0_)) }

fn _semaction_rule_81_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration_specifiers<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_187(_x_187)=parser.popstack().value { _x_187 } else {<type_qualifier<'lt>>::default()}; declaration_specifiers::declaration_specifiers_81(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_82_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> init_declarator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_199(_x_199)=parser.popstack().value { _x_199 } else {<init_declarator<'lt>>::default()}; init_declarator_list::init_declarator_list_82(parser.lbx(0,_item0_)) }

fn _semaction_rule_83_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> init_declarator_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_199(_x_199)=parser.popstack().value { _x_199 } else {<init_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_186(_x_186)=parser.popstack().value { _x_186 } else {<init_declarator_list<'lt>>::default()}; init_declarator_list::init_declarator_list_83(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_84_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> init_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; init_declarator::init_declarator_84(parser.lbx(0,_item0_)) }

fn _semaction_rule_85_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> init_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_150(_x_150)=parser.popstack().value { _x_150 } else {<initializer<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; init_declarator::init_declarator_85(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_86_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; storage_class_specifier::TYPEDEF }

fn _semaction_rule_87_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; storage_class_specifier::EXTERN }

fn _semaction_rule_88_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; storage_class_specifier::STATIC }

fn _semaction_rule_89_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; storage_class_specifier::AUTO }

fn _semaction_rule_90_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; storage_class_specifier::REGISTER }

fn _semaction_rule_91_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_specifier::VOID }

fn _semaction_rule_92_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_specifier::CHAR }

fn _semaction_rule_93_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_specifier::SHORT }

fn _semaction_rule_94_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_specifier::INT }

fn _semaction_rule_95_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_specifier::LONG }

fn _semaction_rule_96_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_specifier::FLOAT }

fn _semaction_rule_97_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_specifier::DOUBLE }

fn _semaction_rule_98_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_specifier::SIGNED }

fn _semaction_rule_99_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_specifier::UNSIGNED }

fn _semaction_rule_100_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_192(_x_192)=parser.popstack().value { _x_192 } else {<struct_or_union_specifier<'lt>>::default()}; type_specifier::type_specifier_100(parser.lbx(0,_item0_)) }

fn _semaction_rule_101_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_197(_x_197)=parser.popstack().value { _x_197 } else {<enum_specifier<'lt>>::default()}; type_specifier::type_specifier_101(parser.lbx(0,_item0_)) }

fn _semaction_rule_102_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; type_specifier::TYPE_NAME_102(_item0_) }

fn _semaction_rule_103_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_or_union_specifier<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_172(_x_172)=parser.popstack().value { _x_172 } else {<struct_declaration_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_194(_x_194)=parser.popstack().value { _x_194 } else {<struct_or_union<'lt>>::default()}; struct_or_union_specifier::struct_or_union_specifier_103(parser.lbx(0,_item0_),_item1_,parser.lbx(3,_item3_)) }

fn _semaction_rule_104_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_or_union_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_172(_x_172)=parser.popstack().value { _x_172 } else {<struct_declaration_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_194(_x_194)=parser.popstack().value { _x_194 } else {<struct_or_union<'lt>>::default()}; struct_or_union_specifier::struct_or_union_specifier_104(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_105_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_or_union_specifier<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_194(_x_194)=parser.popstack().value { _x_194 } else {<struct_or_union<'lt>>::default()}; struct_or_union_specifier::struct_or_union_specifier_105(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_106_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_or_union<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; struct_or_union::STRUCT }

fn _semaction_rule_107_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_or_union<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; struct_or_union::UNION }

fn _semaction_rule_108_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_declaration_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_155(_x_155)=parser.popstack().value { _x_155 } else {<struct_declaration<'lt>>::default()}; struct_declaration_list::struct_declaration_list_108(parser.lbx(0,_item0_)) }

fn _semaction_rule_109_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_declaration_list<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_155(_x_155)=parser.popstack().value { _x_155 } else {<struct_declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_172(_x_172)=parser.popstack().value { _x_172 } else {<struct_declaration_list<'lt>>::default()}; struct_declaration_list::struct_declaration_list_109(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_110_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_declaration<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_151(_x_151)=parser.popstack().value { _x_151 } else {<struct_declarator_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_163(_x_163)=parser.popstack().value { _x_163 } else {<specifier_qualifier_list<'lt>>::default()}; struct_declaration::struct_declaration_110(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_111_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> specifier_qualifier_list<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_163(_x_163)=parser.popstack().value { _x_163 } else {<specifier_qualifier_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_184(_x_184)=parser.popstack().value { _x_184 } else {<type_specifier<'lt>>::default()}; specifier_qualifier_list::specifier_qualifier_list_111(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_112_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> specifier_qualifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_184(_x_184)=parser.popstack().value { _x_184 } else {<type_specifier<'lt>>::default()}; specifier_qualifier_list::specifier_qualifier_list_112(parser.lbx(0,_item0_)) }

fn _semaction_rule_113_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> specifier_qualifier_list<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_163(_x_163)=parser.popstack().value { _x_163 } else {<specifier_qualifier_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_187(_x_187)=parser.popstack().value { _x_187 } else {<type_qualifier<'lt>>::default()}; specifier_qualifier_list::specifier_qualifier_list_113(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_114_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> specifier_qualifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_187(_x_187)=parser.popstack().value { _x_187 } else {<type_qualifier<'lt>>::default()}; specifier_qualifier_list::specifier_qualifier_list_114(parser.lbx(0,_item0_)) }

fn _semaction_rule_115_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_declarator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_162(_x_162)=parser.popstack().value { _x_162 } else {<struct_declarator<'lt>>::default()}; struct_declarator_list::struct_declarator_list_115(parser.lbx(0,_item0_)) }

fn _semaction_rule_116_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_declarator_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_162(_x_162)=parser.popstack().value { _x_162 } else {<struct_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_151(_x_151)=parser.popstack().value { _x_151 } else {<struct_declarator_list<'lt>>::default()}; struct_declarator_list::struct_declarator_list_116(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_117_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; struct_declarator::struct_declarator_117(parser.lbx(0,_item0_)) }

fn _semaction_rule_118_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_160(_x_160)=parser.popstack().value { _x_160 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; struct_declarator::Colon_118(parser.lbx(1,_item1_)) }

fn _semaction_rule_119_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> struct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_160(_x_160)=parser.popstack().value { _x_160 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; struct_declarator::struct_declarator_119(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_120_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> enum_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_195(_x_195)=parser.popstack().value { _x_195 } else {<enumerator_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; enum_specifier::ENUM_120(parser.lbx(2,_item2_)) }

fn _semaction_rule_121_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> enum_specifier<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_195(_x_195)=parser.popstack().value { _x_195 } else {<enumerator_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; enum_specifier::ENUM_121(_item1_,parser.lbx(3,_item3_)) }

fn _semaction_rule_122_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> enum_specifier<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; enum_specifier::ENUM_122(_item1_) }

fn _semaction_rule_123_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> enumerator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_177(_x_177)=parser.popstack().value { _x_177 } else {<enumerator<'lt>>::default()}; enumerator_list::enumerator_list_123(parser.lbx(0,_item0_)) }

fn _semaction_rule_124_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> enumerator_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_177(_x_177)=parser.popstack().value { _x_177 } else {<enumerator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_195(_x_195)=parser.popstack().value { _x_195 } else {<enumerator_list<'lt>>::default()}; enumerator_list::enumerator_list_124(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_125_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> enumerator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; enumerator::IDENTIFIER_125(_item0_) }

fn _semaction_rule_126_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> enumerator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_160(_x_160)=parser.popstack().value { _x_160 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; enumerator::IDENTIFIER_126(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_127_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_qualifier::CONST }

fn _semaction_rule_128_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; type_qualifier::VOLATILE }

fn _semaction_rule_129_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_182(_x_182)=parser.popstack().value { _x_182 } else {<direct_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_167(_x_167)=parser.popstack().value { _x_167 } else {<pointer<'lt>>::default()}; declarator::declarator_129(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_130_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_182(_x_182)=parser.popstack().value { _x_182 } else {<direct_declarator<'lt>>::default()}; declarator::declarator_130(parser.lbx(0,_item0_)) }

fn _semaction_rule_131_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; direct_declarator::IDENTIFIER_131(_item0_) }

fn _semaction_rule_132_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; direct_declarator::direct_declarator_132(parser.lbx(1,_item1_)) }

fn _semaction_rule_133_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_160(_x_160)=parser.popstack().value { _x_160 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_182(_x_182)=parser.popstack().value { _x_182 } else {<direct_declarator<'lt>>::default()}; direct_declarator::direct_declarator_133(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_134_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_182(_x_182)=parser.popstack().value { _x_182 } else {<direct_declarator<'lt>>::default()}; direct_declarator::direct_declarator_134(parser.lbx(0,_item0_)) }

fn _semaction_rule_135_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_156(_x_156)=parser.popstack().value { _x_156 } else {<parameter_type_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_182(_x_182)=parser.popstack().value { _x_182 } else {<direct_declarator<'lt>>::default()}; direct_declarator::direct_declarator_135(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_136_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_196(_x_196)=parser.popstack().value { _x_196 } else {<identifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_182(_x_182)=parser.popstack().value { _x_182 } else {<direct_declarator<'lt>>::default()}; direct_declarator::direct_declarator_136(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_137_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_182(_x_182)=parser.popstack().value { _x_182 } else {<direct_declarator<'lt>>::default()}; direct_declarator::direct_declarator_137(parser.lbx(0,_item0_)) }

fn _semaction_rule_138_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> pointer<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; pointer::Star }

fn _semaction_rule_139_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> pointer<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_210(_x_210)=parser.popstack().value { _x_210 } else {<type_qualifier_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; pointer::Star_139(parser.lbx(1,_item1_)) }

fn _semaction_rule_140_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> pointer<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_167(_x_167)=parser.popstack().value { _x_167 } else {<pointer<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; pointer::Star_140(parser.lbx(1,_item1_)) }

fn _semaction_rule_141_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> pointer<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_167(_x_167)=parser.popstack().value { _x_167 } else {<pointer<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_210(_x_210)=parser.popstack().value { _x_210 } else {<type_qualifier_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; pointer::Star_141(parser.lbx(1,_item1_),parser.lbx(2,_item2_)) }

fn _semaction_rule_142_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_qualifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_187(_x_187)=parser.popstack().value { _x_187 } else {<type_qualifier<'lt>>::default()}; type_qualifier_list::type_qualifier_list_142(parser.lbx(0,_item0_)) }

fn _semaction_rule_143_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_qualifier_list<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_187(_x_187)=parser.popstack().value { _x_187 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_210(_x_210)=parser.popstack().value { _x_210 } else {<type_qualifier_list<'lt>>::default()}; type_qualifier_list::type_qualifier_list_143(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_144_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> parameter_type_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_165(_x_165)=parser.popstack().value { _x_165 } else {<parameter_list<'lt>>::default()}; parameter_type_list::parameter_type_list_144(parser.lbx(0,_item0_)) }

fn _semaction_rule_145_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> parameter_type_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_165(_x_165)=parser.popstack().value { _x_165 } else {<parameter_list<'lt>>::default()}; parameter_type_list::parameter_type_list_145(parser.lbx(0,_item0_)) }

fn _semaction_rule_146_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> parameter_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_193(_x_193)=parser.popstack().value { _x_193 } else {<parameter_declaration<'lt>>::default()}; parameter_list::parameter_list_146(parser.lbx(0,_item0_)) }

fn _semaction_rule_147_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> parameter_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_193(_x_193)=parser.popstack().value { _x_193 } else {<parameter_declaration<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_165(_x_165)=parser.popstack().value { _x_165 } else {<parameter_list<'lt>>::default()}; parameter_list::parameter_list_147(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_148_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> parameter_declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; parameter_declaration::parameter_declaration_148(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_149_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> parameter_declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_202(_x_202)=parser.popstack().value { _x_202 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; parameter_declaration::parameter_declaration_149(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_150_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> parameter_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; parameter_declaration::parameter_declaration_150(parser.lbx(0,_item0_)) }

fn _semaction_rule_151_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> identifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; identifier_list::IDENTIFIER_151(_item0_) }

fn _semaction_rule_152_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> identifier_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_196(_x_196)=parser.popstack().value { _x_196 } else {<identifier_list<'lt>>::default()}; identifier_list::identifier_list_152(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_153_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_name<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_163(_x_163)=parser.popstack().value { _x_163 } else {<specifier_qualifier_list<'lt>>::default()}; type_name::type_name_153(parser.lbx(0,_item0_)) }

fn _semaction_rule_154_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> type_name<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_202(_x_202)=parser.popstack().value { _x_202 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_163(_x_163)=parser.popstack().value { _x_163 } else {<specifier_qualifier_list<'lt>>::default()}; type_name::type_name_154(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_155_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> abstract_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_167(_x_167)=parser.popstack().value { _x_167 } else {<pointer<'lt>>::default()}; abstract_declarator::abstract_declarator_155(parser.lbx(0,_item0_)) }

fn _semaction_rule_156_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> abstract_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_174(_x_174)=parser.popstack().value { _x_174 } else {<direct_abstract_declarator<'lt>>::default()}; abstract_declarator::abstract_declarator_156(parser.lbx(0,_item0_)) }

fn _semaction_rule_157_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_174(_x_174)=parser.popstack().value { _x_174 } else {<direct_abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_167(_x_167)=parser.popstack().value { _x_167 } else {<pointer<'lt>>::default()}; abstract_declarator::abstract_declarator_157(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_158_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_202(_x_202)=parser.popstack().value { _x_202 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; direct_abstract_declarator::direct_abstract_declarator_158(parser.lbx(1,_item1_)) }

fn _semaction_rule_159_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; direct_abstract_declarator::direct_abstract_declarator_159 }

fn _semaction_rule_160_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_160(_x_160)=parser.popstack().value { _x_160 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; direct_abstract_declarator::direct_abstract_declarator_160(parser.lbx(1,_item1_)) }

fn _semaction_rule_161_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_174(_x_174)=parser.popstack().value { _x_174 } else {<direct_abstract_declarator<'lt>>::default()}; direct_abstract_declarator::direct_abstract_declarator_161(parser.lbx(0,_item0_)) }

fn _semaction_rule_162_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_160(_x_160)=parser.popstack().value { _x_160 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_174(_x_174)=parser.popstack().value { _x_174 } else {<direct_abstract_declarator<'lt>>::default()}; direct_abstract_declarator::direct_abstract_declarator_162(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_163_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; direct_abstract_declarator::direct_abstract_declarator_163 }

fn _semaction_rule_164_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_156(_x_156)=parser.popstack().value { _x_156 } else {<parameter_type_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; direct_abstract_declarator::direct_abstract_declarator_164(parser.lbx(1,_item1_)) }

fn _semaction_rule_165_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_174(_x_174)=parser.popstack().value { _x_174 } else {<direct_abstract_declarator<'lt>>::default()}; direct_abstract_declarator::direct_abstract_declarator_165(parser.lbx(0,_item0_)) }

fn _semaction_rule_166_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_156(_x_156)=parser.popstack().value { _x_156 } else {<parameter_type_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_174(_x_174)=parser.popstack().value { _x_174 } else {<direct_abstract_declarator<'lt>>::default()}; direct_abstract_declarator::direct_abstract_declarator_166(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_167_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> initializer<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_190(_x_190)=parser.popstack().value { _x_190 } else {<assignment_expression<'lt>>::default()}; initializer::initializer_167(parser.lbx(0,_item0_)) }

fn _semaction_rule_168_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> initializer<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_171(_x_171)=parser.popstack().value { _x_171 } else {<initializer_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; initializer::Lbrace_168(parser.lbx(1,_item1_)) }

fn _semaction_rule_169_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> initializer<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_171(_x_171)=parser.popstack().value { _x_171 } else {<initializer_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; initializer::Lbrace_169(parser.lbx(1,_item1_)) }

fn _semaction_rule_170_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> initializer_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_150(_x_150)=parser.popstack().value { _x_150 } else {<initializer<'lt>>::default()}; initializer_list::initializer_list_170(parser.lbx(0,_item0_)) }

fn _semaction_rule_171_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> initializer_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_150(_x_150)=parser.popstack().value { _x_150 } else {<initializer<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_171(_x_171)=parser.popstack().value { _x_171 } else {<initializer_list<'lt>>::default()}; initializer_list::initializer_list_171(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_172_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_169(_x_169)=parser.popstack().value { _x_169 } else {<labeled_statement<'lt>>::default()}; statement::statement_172(parser.lbx(0,_item0_)) }

fn _semaction_rule_173_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_168(_x_168)=parser.popstack().value { _x_168 } else {<compound_statement<'lt>>::default()}; statement::statement_173(parser.lbx(0,_item0_)) }

fn _semaction_rule_174_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_203(_x_203)=parser.popstack().value { _x_203 } else {<expression_statement<'lt>>::default()}; statement::statement_174(parser.lbx(0,_item0_)) }

fn _semaction_rule_175_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_211(_x_211)=parser.popstack().value { _x_211 } else {<selection_statement<'lt>>::default()}; statement::statement_175(parser.lbx(0,_item0_)) }

fn _semaction_rule_176_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_170(_x_170)=parser.popstack().value { _x_170 } else {<iteration_statement<'lt>>::default()}; statement::statement_176(parser.lbx(0,_item0_)) }

fn _semaction_rule_177_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_200(_x_200)=parser.popstack().value { _x_200 } else {<jump_statement<'lt>>::default()}; statement::statement_177(parser.lbx(0,_item0_)) }

fn _semaction_rule_178_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> labeled_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; labeled_statement::IDENTIFIER_178(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_179_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> labeled_statement<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_160(_x_160)=parser.popstack().value { _x_160 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; labeled_statement::CASE_179(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_180_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> labeled_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; labeled_statement::DEFAULT_180(parser.lbx(2,_item2_)) }

fn _semaction_rule_181_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> compound_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; compound_statement::Lbrace_181 }

fn _semaction_rule_182_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> compound_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_191(_x_191)=parser.popstack().value { _x_191 } else {<statement_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; compound_statement::Lbrace_182(parser.lbx(1,_item1_)) }

fn _semaction_rule_183_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> compound_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_208(_x_208)=parser.popstack().value { _x_208 } else {<declaration_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; compound_statement::Lbrace_183(parser.lbx(1,_item1_)) }

fn _semaction_rule_184_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> compound_statement<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_191(_x_191)=parser.popstack().value { _x_191 } else {<statement_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_208(_x_208)=parser.popstack().value { _x_208 } else {<declaration_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; compound_statement::Lbrace_184(parser.lbx(1,_item1_),parser.lbx(2,_item2_)) }

fn _semaction_rule_185_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_176(_x_176)=parser.popstack().value { _x_176 } else {<declaration<'lt>>::default()}; declaration_list::declaration_list_185(parser.lbx(0,_item0_)) }

fn _semaction_rule_186_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> declaration_list<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_176(_x_176)=parser.popstack().value { _x_176 } else {<declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_208(_x_208)=parser.popstack().value { _x_208 } else {<declaration_list<'lt>>::default()}; declaration_list::declaration_list_186(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_187_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> statement_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; statement_list::statement_list_187(parser.lbx(0,_item0_)) }

fn _semaction_rule_188_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> statement_list<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_191(_x_191)=parser.popstack().value { _x_191 } else {<statement_list<'lt>>::default()}; statement_list::statement_list_188(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_189_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> expression_statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; expression_statement::expression_statement_189 }

fn _semaction_rule_190_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> expression_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; expression_statement::expression_statement_190(parser.lbx(0,_item0_)) }

fn _semaction_rule_191_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> selection_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; selection_statement::IF_191(parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_192_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> selection_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; selection_statement::IF_192(parser.lbx(2,_item2_),parser.lbx(4,_item4_),parser.lbx(6,_item6_)) }

fn _semaction_rule_193_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> selection_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; selection_statement::SWITCH_193(parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_194_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> iteration_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; iteration_statement::WHILE_194(parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_195_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; iteration_statement::DO_195(parser.lbx(1,_item1_),parser.lbx(4,_item4_)) }

fn _semaction_rule_196_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> iteration_statement<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_203(_x_203)=parser.popstack().value { _x_203 } else {<expression_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_203(_x_203)=parser.popstack().value { _x_203 } else {<expression_statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; iteration_statement::FOR_196(parser.lbx(2,_item2_),parser.lbx(3,_item3_),parser.lbx(5,_item5_)) }

fn _semaction_rule_197_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_175(_x_175)=parser.popstack().value { _x_175 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_203(_x_203)=parser.popstack().value { _x_203 } else {<expression_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_203(_x_203)=parser.popstack().value { _x_203 } else {<expression_statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; iteration_statement::FOR_197(parser.lbx(2,_item2_),parser.lbx(3,_item3_),parser.lbx(4,_item4_),parser.lbx(6,_item6_)) }

fn _semaction_rule_198_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> jump_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; jump_statement::GOTO_198(_item1_) }

fn _semaction_rule_199_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; jump_statement::CONTINUE_199 }

fn _semaction_rule_200_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; jump_statement::BREAK_200 }

fn _semaction_rule_201_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; jump_statement::RETURN_201 }

fn _semaction_rule_202_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> jump_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_166(_x_166)=parser.popstack().value { _x_166 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; jump_statement::RETURN_202(parser.lbx(1,_item1_)) }

fn _semaction_rule_203_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> translation_unit<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_207(_x_207)=parser.popstack().value { _x_207 } else {<external_declaration<'lt>>::default()}; translation_unit::translation_unit_203(parser.lbx(0,_item0_)) }

fn _semaction_rule_204_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> translation_unit<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_207(_x_207)=parser.popstack().value { _x_207 } else {<external_declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<translation_unit<'lt>>::default()}; translation_unit::translation_unit_204(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_205_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_185(_x_185)=parser.popstack().value { _x_185 } else {<function_definition<'lt>>::default()}; external_declaration::external_declaration_205(parser.lbx(0,_item0_)) }

fn _semaction_rule_206_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_176(_x_176)=parser.popstack().value { _x_176 } else {<declaration<'lt>>::default()}; external_declaration::external_declaration_206(parser.lbx(0,_item0_)) }

fn _semaction_rule_207_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> function_definition<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_168(_x_168)=parser.popstack().value { _x_168 } else {<compound_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_208(_x_208)=parser.popstack().value { _x_208 } else {<declaration_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; function_definition::function_definition_207(parser.lbx(0,_item0_),parser.lbx(1,_item1_),parser.lbx(2,_item2_),parser.lbx(3,_item3_)) }

fn _semaction_rule_208_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> function_definition<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_168(_x_168)=parser.popstack().value { _x_168 } else {<compound_statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_201(_x_201)=parser.popstack().value { _x_201 } else {<declaration_specifiers<'lt>>::default()}; function_definition::function_definition_208(parser.lbx(0,_item0_),parser.lbx(1,_item1_),parser.lbx(2,_item2_)) }

fn _semaction_rule_209_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> function_definition<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_168(_x_168)=parser.popstack().value { _x_168 } else {<compound_statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_208(_x_208)=parser.popstack().value { _x_208 } else {<declaration_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; function_definition::function_definition_209(parser.lbx(0,_item0_),parser.lbx(1,_item1_),parser.lbx(2,_item2_)) }

fn _semaction_rule_210_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> function_definition<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_168(_x_168)=parser.popstack().value { _x_168 } else {<compound_statement<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_188(_x_188)=parser.popstack().value { _x_188 } else {<declarator<'lt>>::default()}; function_definition::function_definition_210(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_211_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_149(_x_149)=parser.popstack().value { _x_149 } else {<()>::default()}; <()>::default()}

pub fn make_parser<'lt>() -> ZCParser<RetTypeEnum<'lt>,()>
{
 let mut parser1:ZCParser<RetTypeEnum<'lt>,()> = ZCParser::new(212,349);
 let mut rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_204(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_204(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_204(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_204(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_209(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_209(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_209(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_209(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_209(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_209(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_209(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_209(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("argument_expression_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_152(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("argument_expression_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_152(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_178(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_178(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_178(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_178(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_178(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_178(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_161(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_161(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_161(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_161(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_161(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_161(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("cast_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_198(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("cast_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_198(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_154(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_154(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_154(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_154(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("additive_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_206(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("additive_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_206(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("additive_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_206(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("shift_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_158(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("shift_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_158(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("shift_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_158(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_179(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_179(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_179(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_179(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_179(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("equality_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_189(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("equality_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_189(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("equality_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_189(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_180(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_180(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("exclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_159(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("exclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_159(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("inclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_181(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("inclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_181(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("logical_and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_153(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("logical_and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_153(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("logical_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_164(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("logical_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_164(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("conditional_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_173(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("conditional_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_173(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_190(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_190(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_183(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_166(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_166(_semaction_rule_72_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("constant_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_160(_semaction_rule_73_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_176(_semaction_rule_74_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_176(_semaction_rule_75_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_201(_semaction_rule_76_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_201(_semaction_rule_77_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_201(_semaction_rule_78_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_201(_semaction_rule_79_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_201(_semaction_rule_80_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_201(_semaction_rule_81_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("init_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_186(_semaction_rule_82_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("init_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_186(_semaction_rule_83_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("init_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_199(_semaction_rule_84_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("init_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_199(_semaction_rule_85_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_205(_semaction_rule_86_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_205(_semaction_rule_87_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_205(_semaction_rule_88_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_205(_semaction_rule_89_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_205(_semaction_rule_90_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_91_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_92_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_93_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_94_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_95_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_96_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_97_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_98_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_99_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_100_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_101_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_184(_semaction_rule_102_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_or_union_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_192(_semaction_rule_103_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_or_union_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_192(_semaction_rule_104_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_or_union_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_192(_semaction_rule_105_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_or_union");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_194(_semaction_rule_106_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_or_union");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_194(_semaction_rule_107_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_declaration_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_172(_semaction_rule_108_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_declaration_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_172(_semaction_rule_109_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_155(_semaction_rule_110_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_163(_semaction_rule_111_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_163(_semaction_rule_112_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_163(_semaction_rule_113_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_163(_semaction_rule_114_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_151(_semaction_rule_115_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_151(_semaction_rule_116_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_162(_semaction_rule_117_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_162(_semaction_rule_118_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_162(_semaction_rule_119_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_197(_semaction_rule_120_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_197(_semaction_rule_121_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_197(_semaction_rule_122_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("enumerator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_195(_semaction_rule_123_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("enumerator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_195(_semaction_rule_124_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("enumerator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_177(_semaction_rule_125_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("enumerator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_177(_semaction_rule_126_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_187(_semaction_rule_127_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_187(_semaction_rule_128_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_188(_semaction_rule_129_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_188(_semaction_rule_130_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_182(_semaction_rule_131_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_182(_semaction_rule_132_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_182(_semaction_rule_133_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_182(_semaction_rule_134_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_182(_semaction_rule_135_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_182(_semaction_rule_136_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_182(_semaction_rule_137_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("pointer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_167(_semaction_rule_138_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("pointer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_167(_semaction_rule_139_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("pointer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_167(_semaction_rule_140_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("pointer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_167(_semaction_rule_141_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_210(_semaction_rule_142_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_210(_semaction_rule_143_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("parameter_type_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_156(_semaction_rule_144_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("parameter_type_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_156(_semaction_rule_145_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("parameter_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_165(_semaction_rule_146_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("parameter_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_165(_semaction_rule_147_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_193(_semaction_rule_148_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_193(_semaction_rule_149_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_193(_semaction_rule_150_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("identifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_196(_semaction_rule_151_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("identifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_196(_semaction_rule_152_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_name");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_157(_semaction_rule_153_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("type_name");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_157(_semaction_rule_154_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_202(_semaction_rule_155_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_202(_semaction_rule_156_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_202(_semaction_rule_157_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_174(_semaction_rule_158_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_174(_semaction_rule_159_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_174(_semaction_rule_160_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_174(_semaction_rule_161_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_174(_semaction_rule_162_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_174(_semaction_rule_163_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_174(_semaction_rule_164_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_174(_semaction_rule_165_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_174(_semaction_rule_166_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("initializer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_150(_semaction_rule_167_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("initializer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_150(_semaction_rule_168_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("initializer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_150(_semaction_rule_169_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("initializer_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_171(_semaction_rule_170_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("initializer_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_171(_semaction_rule_171_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_175(_semaction_rule_172_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_175(_semaction_rule_173_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_175(_semaction_rule_174_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_175(_semaction_rule_175_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_175(_semaction_rule_176_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_175(_semaction_rule_177_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_169(_semaction_rule_178_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_169(_semaction_rule_179_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_169(_semaction_rule_180_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("compound_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_168(_semaction_rule_181_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("compound_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_168(_semaction_rule_182_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("compound_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_168(_semaction_rule_183_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("compound_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_168(_semaction_rule_184_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_208(_semaction_rule_185_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("declaration_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_208(_semaction_rule_186_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("statement_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_191(_semaction_rule_187_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("statement_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_191(_semaction_rule_188_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("expression_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_203(_semaction_rule_189_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("expression_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_203(_semaction_rule_190_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_211(_semaction_rule_191_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_211(_semaction_rule_192_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_211(_semaction_rule_193_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_170(_semaction_rule_194_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_170(_semaction_rule_195_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_170(_semaction_rule_196_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_170(_semaction_rule_197_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_200(_semaction_rule_198_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_200(_semaction_rule_199_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_200(_semaction_rule_200_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_200(_semaction_rule_201_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_200(_semaction_rule_202_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("translation_unit");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_203_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("translation_unit");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_204_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_207(_semaction_rule_205_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_207(_semaction_rule_206_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("function_definition");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_185(_semaction_rule_207_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("function_definition");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_185(_semaction_rule_208_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("function_definition");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_185(_semaction_rule_209_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("function_definition");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_185(_semaction_rule_210_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_149(_semaction_rule_211_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";

 for i in 0..7041 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>, lexer:&mut cautolexer<'lt>) -> Result<translation_unit<'lt>,translation_unit<'lt>>
{
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse(lexer) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<translation_unit<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>, lexer:&mut cautolexer<'lt>, parserpath:&str) -> Result<translation_unit<'lt>,translation_unit<'lt>>
{
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(lexer,parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<translation_unit<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_167(pointer<'lt>),
  Enumvariant_198(cast_expression<'lt>),
  Enumvariant_177(enumerator<'lt>),
  Enumvariant_200(jump_statement<'lt>),
  Enumvariant_188(declarator<'lt>),
  Enumvariant_149(()),
  Enumvariant_186(init_declarator_list<'lt>),
  Enumvariant_195(enumerator_list<'lt>),
  Enumvariant_196(identifier_list<'lt>),
  Enumvariant_207(external_declaration<'lt>),
  Enumvariant_166(expression<'lt>),
  Enumvariant_201(declaration_specifiers<'lt>),
  Enumvariant_206(additive_expression<'lt>),
  Enumvariant_165(parameter_list<'lt>),
  Enumvariant_181(inclusive_or_expression<'lt>),
  Enumvariant_160(constant_expression<'lt>),
  Enumvariant_205(storage_class_specifier<'lt>),
  Enumvariant_184(type_specifier<'lt>),
  Enumvariant_179(relational_expression<'lt>),
  Enumvariant_173(conditional_expression<'lt>),
  Enumvariant_176(declaration<'lt>),
  Enumvariant_183(assignment_operator<'lt>),
  Enumvariant_151(struct_declarator_list<'lt>),
  Enumvariant_161(unary_operator<'lt>),
  Enumvariant_169(labeled_statement<'lt>),
  Enumvariant_191(statement_list<'lt>),
  Enumvariant_194(struct_or_union<'lt>),
  Enumvariant_152(argument_expression_list<'lt>),
  Enumvariant_154(multiplicative_expression<'lt>),
  Enumvariant_182(direct_declarator<'lt>),
  Enumvariant_2(i32),
  Enumvariant_189(equality_expression<'lt>),
  Enumvariant_202(abstract_declarator<'lt>),
  Enumvariant_171(initializer_list<'lt>),
  Enumvariant_172(struct_declaration_list<'lt>),
  Enumvariant_170(iteration_statement<'lt>),
  Enumvariant_155(struct_declaration<'lt>),
  Enumvariant_187(type_qualifier<'lt>),
  Enumvariant_199(init_declarator<'lt>),
  Enumvariant_163(specifier_qualifier_list<'lt>),
  Enumvariant_197(enum_specifier<'lt>),
  Enumvariant_203(expression_statement<'lt>),
  Enumvariant_175(statement<'lt>),
  Enumvariant_0(translation_unit<'lt>),
  Enumvariant_193(parameter_declaration<'lt>),
  Enumvariant_158(shift_expression<'lt>),
  Enumvariant_153(logical_and_expression<'lt>),
  Enumvariant_204(primary_expression<'lt>),
  Enumvariant_211(selection_statement<'lt>),
  Enumvariant_1(&'lt str),
  Enumvariant_190(assignment_expression<'lt>),
  Enumvariant_174(direct_abstract_declarator<'lt>),
  Enumvariant_168(compound_statement<'lt>),
  Enumvariant_180(and_expression<'lt>),
  Enumvariant_185(function_definition<'lt>),
  Enumvariant_164(logical_or_expression<'lt>),
  Enumvariant_210(type_qualifier_list<'lt>),
  Enumvariant_156(parameter_type_list<'lt>),
  Enumvariant_150(initializer<'lt>),
  Enumvariant_192(struct_or_union_specifier<'lt>),
  Enumvariant_159(exclusive_or_expression<'lt>),
  Enumvariant_209(postfix_expression<'lt>),
  Enumvariant_162(struct_declarator<'lt>),
  Enumvariant_208(declaration_list<'lt>),
  Enumvariant_157(type_name<'lt>),
  Enumvariant_178(unary_expression<'lt>),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<translation_unit<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct cautolexer<'t> {
   stk: StrTokenizer<'t>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
}
impl<'t> cautolexer<'t> 
{
  pub fn from_str(s:&'t str) -> cautolexer<'t>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'t LexSource<'t>) -> cautolexer<'t>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'t>) -> cautolexer<'t> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    for kw in ["case","volatile","enum","extern","unsigned","for","char","long","static","return","register","break","do","if","signed","void","typedef","short","struct","float","goto","else","switch","while","sizeof","default","union","auto","int","const","double","continue",] {keywords.insert(kw);}
    for c in ['[',']','(',')','+','-','~',';','<','!','?','%','^','&','/','.',',','#','}','*','>','|','=',':','{',] {stk.add_single(c);}
    for d in ["<<",">=","|=","||","--","*=","-=","==","+=","&&","/=","<=","!=","&=","%=","++",">>","->","^=",] {stk.add_double(d);}
    for d in [">>=","...","<<=",] {stk.add_triple(d);}
    for (k,v) in [(r"<","Lt"),(r"void","VOID"),(r"<<","LEFT_OP"),(r"!","Bang"),(r">=","GE_OP"),(r"return","RETURN"),(r"goto","GOTO"),(r"?","Quest"),(r"%","Percent"),(r"^","Hat"),(r"while","WHILE"),(r"|=","OR_ASSIGN"),(r"else","ELSE"),(r"&","Amp"),(r"||","OR_OP"),(r"extern","EXTERN"),(r"signed","SIGNED"),(r"/","Div"),(r"--","DEC_OP"),(r"*=","MUL_ASSIGN"),(r"union","UNION"),(r"-=","SUB_ASSIGN"),(r"double","DOUBLE"),(r".","Dot"),(r",","Comma"),(r"typedef","TYPEDEF"),(r"break","BREAK"),(r"==","EQ_OP"),(r"+=","ADD_ASSIGN"),(r"volatile","VOLATILE"),(r"if","IF"),(r"default","DEFAULT"),(r"#","Hash"),(r"sizeof","SIZEOF"),(r"}","Rbrace"),(r"short","SHORT"),(r"unsigned","UNSIGNED"),(r"&&","AND_OP"),(r"register","REGISTER"),(r">>=","RIGHT_ASSIGN"),(r"/=","DIV_ASSIGN"),(r"continue","CONTINUE"),(r"...","ELLIPSIS"),(r"case","CASE"),(r"*","Star"),(r">","Gt"),(r"for","FOR"),(r"|","Bar"),(r"<=","LE_OP"),(r"!=","NE_OP"),(r"&=","AND_ASSIGN"),(r"int","INT"),(r"long","LONG"),(r"%=","MOD_ASSIGN"),(r"=","Eq1"),(r"char","CHAR"),(r":","Colon"),(r"++","INC_OP"),(r"static","STATIC"),(r"struct","STRUCT"),(r"{","Lbrace"),(r">>","RIGHT_OP"),(r"<<=","LEFT_ASSIGN"),(r"enum","ENUM"),(r"->","PTR_OP"),(r"const","CONST"),(r"switch","SWITCH"),(r"do","DO"),(r"auto","AUTO"),(r"float","FLOAT"),(r"^=","XOR_ASSIGN"),] {lexnames.insert(k,v);}
    cautolexer {stk,keywords,lexnames}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for cautolexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,"IDENTIFIER",RetTypeEnum::Enumvariant_1(s))),
      RawToken::Num(n) => Some(TerminalToken::from_raw(token,"CONSTANT",RetTypeEnum::Enumvariant_2((n as i32)))),
      RawToken::Strlit(n) => Some(TerminalToken::from_raw(token,"STRING_LITERAL",RetTypeEnum::Enumvariant_1(n))),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,"TYPE_NAME",RetTypeEnum::Enumvariant_1(s))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
}//impl Tokenizer

fn load_extras<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>)
{
}//end of load_extras: don't change this line as it affects augmentation
