//Parser generated by rustlr for grammar c11a
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::marker::PhantomData;
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use crate::cauto_ast::declaration_specifiers::*;
use crate::cauto_ast::storage_class_specifier::*;
use crate::cauto_ast::init_declarator::*;
use crate::cauto_ast::init_declarator_list::*;
use crate::cauto_ast::declarator::*;
use crate::cauto_ast::declaration::*;
use crate::cauto_ast::direct_declarator::*;
use rustlr::LBox;
use crate::c11a_ast;
use crate::c11a_ast::*;

static SYMBOLS:[&'static str;201] = ["_WILDCARD_TOKEN_","FUNC_NAME","INLINE","RESTRICT","ALIGNAS","ALIGNOF","ATOMIC","BOOL","COMPLEX","GENERIC","IMAGINARY","NORETURN","STATIC_ASSERT","THREAD_LOCAL","PTR_OP","INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","SIZEOF","TYPEDEF","EXTERN","STATIC","AUTO","REGISTER","CHAR","SHORT","INT","LONG","SIGNED","UNSIGNED","FLOAT","DOUBLE","CONST","VOLATILE","VOID","STRUCT","UNION","ENUM","CASE","DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE","BREAK","RETURN","INCLUDE","DEFINE","ELLIPSIS","Lbrace","Rbrace","Amp","Bang","Bar","Hat","Dot","Comma","Colon","Star","Div","Percent","Lt","Gt","Eq1","Quest","Hash","[","]","(",")","+","-","~",";","TYPEDEF_NAME","ENUMERATION_CONSTANT","IDENTIFIER","I_CONSTANT","F_CONSTANT","STRING_LITERAL","primary_expression","postfix_expression","argument_expression_list","unary_expression","unary_operator","cast_expression","multiplicative_expression","additive_expression","shift_expression","relational_expression","equality_expression","and_expression","exclusive_or_expression","inclusive_or_expression","logical_and_expression","logical_or_expression","conditional_expression","assignment_expression","assignment_operator","expression","constant_expression","declaration","declaration_specifiers","init_declarator_list","init_declarator","storage_class_specifier","type_specifier","struct_or_union_specifier","struct_or_union","struct_declaration_list","struct_declaration","specifier_qualifier_list","struct_declarator_list","struct_declarator","enum_specifier","enumerator_list","enumerator","type_qualifier","declarator","direct_declarator","pointer","type_qualifier_list","parameter_type_list","parameter_list","parameter_declaration","identifier_list","type_name","abstract_declarator","direct_abstract_declarator","initializer","initializer_list","statement","labeled_statement","compound_statement","declaration_list","statement_list","expression_statement","selection_statement","iteration_statement","jump_statement","translation_unit","external_declaration","function_definition","constant","stringnt","generic_selection","generic_assoc_list","generic_association","static_assert_declaration","designation","function_specifier","alignment_specifier","atomic_type_specifier","designator_list","designator","block_item","NEWRENT_23_0","NEWRENT_128_0","NEWRENT_134_0","NEWRENT_138_0","NEWRENT_150_0","NEWRENT_153_1","NEWRENT_176_0","NEWRENT_187_0","NEWRENT_189_1","NEWRENT_192_0","NEWRENT_212_0","NEWRENT_215_1","NEWRENT_217_2","NEWRENT_223_3","NEWRENT_226_4","NEWRENT_236_0","NEWRENT_244_0","NEWRENT_259_0","NEWRENT_271_0","NEWRENT_274_1","NEWRENT_282_0","NEWRENT_287_0","START","EOF"];

static TABLE:[u64;11504] = [219045756928,738737192961,34360131584,47247196160,408023924736,193275887616,12886016000,25770131456,846110523393,223341182976,523987320833,734439604225,201864642560,184685821952,154619478016,188979544064,700080259073,8590458880,541168828417,55835820032,206158495744,158914510848,725850390529,197569544192,163209019392,171800330240,592708173825,545463468033,42951049216,549757714433,528281436161,695786864641,227636019200,231929085952,743031439361,167505166336,17181376512,180390395904,210454970368,554051567617,176095363072,579823075329,51539738624,30067064832,214750199808,691492749313,281509344247810,281668258037762,281694027841538,281483574444034,281891596337154,281706912743426,281638193266690,281685437906946,281676847972354,281642488233986,281530819084290,281809991958530,281505049280514,281646783201282,281848646664194,281883006402562,281861531566082,281702617776130,281655373135874,281689732874242,281522229149698,281857236598786,281672553005058,281681142939650,281500754313218,281629603332098,281487869411330,281663963070466,281805696991234,281517934182402,281659668103170,281492164378626,281698322808834,281633898299394,281814286925826,281878711435266,281651078168578,563332208590848,844437816147968,844622499676160,844656859217920,844454997196800,844798598643714,844631088627712,845159369736193,844609615953920,844613909676032,844811483545602,844472177328128,844841548316674,844605320527872,844648271314944,844807188578306,844652566151168,845017638305793,844828663414786,844592435298304,844480765952000,844433520590848,844442111508480,845167961571329,844643975888896,844579549609984,844832954056704,844588139151360,844596730462208,844755648970754,845163667324929,844639680331776,844459290263552,844764238905346,844978981699585,844601025495040,844635385102336,844974687846401,844583844642816,844618206019584,844467881181184,845004753207297,844970393600001,844450700263424,844953214255105,844966098960385,844626794774528,1125934273658882,1125929978691586,1126106072350722,1126067417645058,1126114662285314,1126286460977154,1126093187448834,1126084597514242,1126230626402306,1126063122677762,1126239216336898,1126131842154498,1126071712612354,1126282166009858,1125955748495362,1125908503855106,1126303640846338,1126316525748226,1126307935813634,1126080302546946,1125925683724290,1126097482416130,1126054532743170,1126101777383426,1126118957252610,1126088892481538,1125942863593474,1125947158560770,1125917093789698,1126076007579650,1126110367318018,1126273576075266,1126127547187202,1126058827710466,1126123252219906,1125912798822402,1407538103058434,1407392074170370,1407589642665986,1407417843974146,1407387779203074,1407559577894914,1407568167829506,1407782916194306,1407546692993026,1407550987960322,1407542398025730,1407404959072258,1407748556455938,1407563872862210,1407430728876034,1407581052731394,1407757138853888,1407593937633282,1407602527567874,1407714196717570,1407791506128898,1407709901750274,1407572462796802,1407585347698690,1407383484235778,1407555282927618,1407422138941442,1407576757764098,1407606822535170,1407778621227010,1407598232600578,1407400664104962,1407761441357826,1407705606782978,1407529513123842,1407533808091138,1407409254039554,1689236415381506,1689184875773954,1688905702899714,1689081796558850,1689004487147522,1688862753226754,1688892817997826,1688875638128642,1689025961984002,1689038846885890,1688867048194050,1689060321722370,1689064616689666,1689034551918594,1689189170741250,1689232120414210,1689073206624258,1689180580806658,1688858458259458,1689021667016706,1689056026755074,1689068911656962,1689030256951298,1689257890217986,1689013077082114,1689253595250690,1689008782114818,1689266480152578,1689047436820482,1689077501591554,1689051731787778,1689223530479618,1688879933095938,1688897112965122,1689043141853186,1688884228063234,1689017372049410,1970921841033217,1970664143192064,1970857416654849,1970741452144640,1970728567570432,1970861711294465,1970930430902273,1970926135672833,1970707092537344,2251975918223362,2251980213190658,2252207846457346,2251847069204482,2252216436391938,2252018867896322,2251817004433410,2251988803125250,2251825594368002,2251967328288770,2252173486718978,2251855659139074,2252186371620866,2251971623256066,2251997393059842,2252139126980610,2251829889335298,2251842774237186,2251958738354178,2252027457830914,2251984508157954,2252130537046018,2251993098092546,2251808414498818,2251963033321474,2252005982994434,2251812709466114,2251834184302594,2252010277961730,2252031752798210,2252203551490050,2252182076653570,2252001688027138,2252014572929026,2252023162863618,2251954443386882,2533291988942850,2533489557438466,2533438017830914,2534133802532866,2533442312798210,2533326348681218,2533485262471170,2533330643648514,2533506737307650,2533498147373058,2533283399008258,2533459492667394,2533429427896322,2533322053713922,2533493852405762,2533468082601986,2533472377569282,2533502442340354,2533480967503874,2533304873844738,2533450902732802,2533446607765506,2533476672536578,2533287693975554,2533682830966786,2533309168812034,2533463787634690,2533455197700098,2533300578877442,2533317758746626,2533433722863618,2814758363987970,2814784133791746,2815089076469762,2814930162679810,2814766953922562,2814938752614402,2815132026142722,2814964522418178,2814934457647106,2814968817385474,2814805608628226,2814792723726338,2815153500979202,2815157795946498,2814908687843330,2814925867712514,2814955932483586,2815166385881090,2814762658955266,2814947342548994,2814917277777922,2815123436208130,2814779838824450,2814912982810626,2814977407320066,2814904392876034,2814797018693634,2815136321110018,2814981702287362,2814775543857154,2815080486535170,2814951637516290,2814921572745218,2814943047581698,2814960227450882,2814973112352770,3096422319325186,3096439499194370,3096564053245954,3096280585404418,3096383664619522,3096435204227074,3096452384096258,3096426614292482,3096456679063554,3096418024357890,3096396549521410,3096241930698754,3096250520633346,3096259110567938,3096555463311362,3096632772722690,3096267700502530,3096392254554114,3096448089128962,3096607002918914,3096405139456002,3096237635731458,3096400844488706,3096430909259778,3096233340764162,3096443794161666,3096387959586818,3096271995469826,3096413729390594,3096598412984322,3096628477755394,3096641362657282,3096379369652226,3096611297886210,3096254815600642,3096409434423298,3378464228638721,3378116336222208,3378000376627202,3659591313063936,3659475349012480,3940658269847554,3940928852787202,3940696924553218,3941070586707970,3940838658473986,3940864428277762,3940834363506690,3940812888670210,3941057701806082,3940855838343170,3940692629585922,3940963212525570,3940688334618626,3940911672918018,3940671154749442,3940847248408578,3940894493048834,3940903082983426,3940950327623682,3940830068539394,3940851543375874,3940817183637506,3941074881675266,3940666859782146,3940679744684034,3941053406838786,3941040521936898,3940881608146946,3940825773572098,3940920262852610,3940924557819906,3940701219520514,3941031932002306,3940821478604802,3940954622590978,3940800003768322,3940714104422402,3940808593702914,3940958917558274,3940873018212354,3940907377950722,3940842953441282,3941066291740674,3941061996773378,3940877313179650,3940684039651330,3940868723245058,3940653974880258,3940915967885314,3940718399389698,3940885903114242,3940662564814850,3940890198081538,3940988982329346,3940804298735618,3941508673372162,3941049111871490,3940860133310466,3940675449716738,3941044816904194,3940933147754498,3940705514487810,3941079176642562,4222459665776642,4222141838196738,4222326521790466,4222317931855874,4222330816757762,4222532680220674,4222287867084802,4222150428131330,4222455370809346,4222305046953986,4222506910416898,4222343701659650,4222167608000514,4222296457019394,4222171902967810,4222309341921282,4222528385253378,4222322226823170,4222335111725058,4222498320482306,4222292162052098,4222300751986690,4222356586561538,4222283572117506,4222463960743938,4222137543229442,4222352291594242,4222347996626946,4222511205384194,4222180492902402,4222313636888578,4222339406692354,4222154723098626,4222133248262146,4222279277150210,4222159018065922,4222541270155266,4503625405104130,4503831563534338,4503801498763266,4503629700071426,4503642584973314,4503792908828674,4503930347782146,4503822973599746,4504016247128066,4503616815169538,4503788613861378,4504003362226178,4503754254123010,4503771433992194,4503784318894082,4503646879940610,4503758549090306,4503981887389698,4503762844057602,4503633995038722,4503938937716738,4503934642749442,4504007657193474,4503608225234946,4503805793730562,4503612520202242,4503655469875202,4503810088697858,4503767139024898,4503780023926786,4503775728959490,4503973297455106,4503797203795970,4503986182356994,4503818678632450,4503814383665154,4503827268567042,4785242118619138,4785143334371330,4785263593455618,4785405327376386,4785491226722306,4785237823651842,4785495521689602,4785413917310978,4785130449469442,4785108974632962,4785474046853122,4785486931755010,4785469751885826,4785276478357506,4785087499796482,4785272183390210,4785465456918530,4785267888422914,4785504111624194,4785259298488322,4785121859534850,4785233528684546,4785285068292098,4785499816656898,4785091794763778,4785246413586434,4785448277049346,4785224938749954,4785078909861890,4785250708553730,4785297953193986,4785383852539906,4785139039404034,4785293658226690,4785388147507202,4785302248161282,4785306543128578,4785096089731074,4785255003521026,4785452572016642,4785104679665666,4785117564567554,4785280773324802,4785083204829186,4785461161951234,4785482636787714,4785478341820418,4785113269600258,4785409622343682,4785229233717250,4785289363259394,4785456866983938,4785100384698370,5066755746955266,5066936135581698,5066880301006850,5066772926824450,5066884595974146,5066738567086082,5066717092249602,5066596833165314,5066751451987970,5066888890941442,5066558178459650,5066777221791746,5066708502315010,5066923250679810,5066562473426946,5066760041922562,5066605423099906,5066725682184194,5066729977151490,5066704207347714,5066712797282306,5066592538198018,5066957610418178,5066734272118786,5066721387216898,5066931840614402,5066747157020674,5066742862053378,5066953315450882,5066579653296130,5066966200352770,5066575358328834,5066781516759042,5066768631857154,5066764336889858,5066583948263426,5066566768394242,5348406816866306,5348179183599618,5348355277258754,5348247903076354,5348235018174466,5348213543337986,5348363867193346,5348432586670082,5348183478566914,5348037449678850,5348033154711554,5348428291702786,5348187773534210,5348239313141762,5348252198043650,5348226428239874,5348080399351810,5348067514449922,5348209248370690,5348200658436098,5348192068501506,5348041744646146,5348256493010946,5348411111833602,5348058924515330,5348243608109058,5348230723207170,5348204953403394,5348441176604674,5348054629548034,5348071809417218,5348217838305282,5348398226931714,5348222133272578,5348196363468802,5348050334580738,5629907574849538,5629555387531266,5629667056680962,5629714301321218,5629697121452034,5629675646615554,5629722891255810,5629551092563970,5629525322760194,5629542502629378,5629546797596674,5629705711386626,5629692826484738,5629727186223106,5629529617727490,5629718596288514,5629710006353922,5629679941582850,5629701416419330,5629671351648258,5629662761713666,5629533912694786,5629508142891010,5629684236550146,5629512437858306,5629516732825602,5629688531517442,5629654171779074,5629731481190402,5630358546415618,5629658466746370,5911184972447746,5911180677480450,5911348181204994,5911004583821314,5911154907676674,5911361066106882,5911197857349634,5911309526499330,5911150612709378,5911008878788610,5911382540943362,5911163497611266,5911129137872898,5911313821466626,5911137727807490,5911189267415042,5910987403952130,5911159202643970,5911021763690498,5911356771139586,5911391130877954,5911030353625090,5911202152316930,5911133432840194,5911146317742082,5911305231532034,5911193562382338,5910983108984834,5911206447284226,5911176382513154,5911142022774786,5911378245976066,5911000288854018,5910991698919426,5911172087545858,5911167792578562,5911017468723202,6192505329352706,6192642768306178,6192479559548930,6192668538109954,6192655653208066,6192604113600514,6192853221703682,6192672833077250,6192629883404290,6192621293469698,6192681423011842,6192475264581634,6192788797194242,6192612703535106,6192458084712450,6192823156932610,6192634178371586,6192483854516226,6192638473338882,6192492444450818,6192659948175362,6192466674647042,6192625588436994,6192836041834498,6192677128044546,6192462379679746,6192664243142658,6192651358240770,6192616998502402,6192780207259650,6192647063273474,6192831746867202,6192496739418114,6192608408567810,6192857516670978,6192866106605570,6474306720563200,6755575545331714,6755592725200898,6755820358467586,6755785998729218,6755442401345538,6755408041607170,6755631379906562,6755790293696514,6755794588663810,6755730164154370,6755429516443650,6755734459121666,6755468171149314,6755803178598402,6755549775527938,6755811768532994,6755571250364418,6755738754088962,6755403746639874,6755712984285186,6755807473565698,6755412336574466,6755597020168194,6755798883631106,6755588430233602,6755579840299010,6755416631541762,6755566955397122,6755425221476354,6755420926509058,6755622789971970,6755562660429826,6755781703761922,6755554070495234,6755828948402178,6755601315135490,6755433811410946,6755627084939266,6755558365462530,6755609905070082,6755824653434882,6755438106378242,6755777408794626,6755773113827330,6755708689317890,6755463876182018,6755614200037378,6755816063500290,6755584135266306,6755618495004674,6755446696312834,6755605610102786,6755455286247426,7037076288438274,7037054813601794,7037102058242050,7037080583405570,7037097763274754,7037071993470978,7037037633732610,7037256677064706,7036930259550210,7037282446868482,7037059108569090,7036908784713730,7037089173340162,7037029043798018,7037106353209346,7036891604844546,7037050518634498,7037063403536386,7036904489746434,7037033338765314,7036887309877250,7036883014909954,7037278151901186,7037041928699906,7036900194779138,7037260972032002,7036921669615618,7037291036803074,7037248087130114,7037067698503682,7037093468307458,7037046223667202,7037213727391746,7036917374648322,7037205137457154,7037084878372866,7318508315738114,7318538380509186,7318572740247554,7318731654037506,7318546970443778,7318555560378370,7318568445280258,7318392351621122,7318405236523010,7318559855345666,7318375171751938,7318551265411074,7318366581817346,7318542675476482,7318684409397250,7318581330182146,7318512610705410,7318516905672706,7318757423841282,7318766013775874,7318753128873986,7318564150312962,7318525495607298,7318735949004802,7318383761686530,7318529790574594,7318379466719234,7318534085541890,7318504020770818,7318680114429954,7318362286850050,7318688704364546,7318521200640002,7318396646588418,7318577035214850,7318723064102914,7318357991882754,7599832968658946,7600240990552066,7599841558593538,7600017652252674,7599880213299202,7600232400617474,7600159386173442,7599987587481602,7599850148528130,7599983292514306,7600155091206146,7599978997547010,7600228105650178,7599991882448898,7600052011991042,7600210925780994,7600163681140738,7599854443495426,7599867328397314,7600039127089154,7600047717023746,7599858738462722,7599871623364610,7600206630813698,7600021947219970,7600030537154562,7600026242187266,7600013357285378,7600000472383490,7600009062318082,7600004767350786,7600043422056450,7599996177416194,7600034832121858,7599837263626242,7600056306958338,7600198040879106,7881685905637378,7881492632109058,7881449682436098,7881612891193346,7881728855310338,7881522696880130,7881715970408450,7881471157272578,7881707380473858,7881462567337986,7881681610670082,7881526991847426,7881320833417218,7881346603220994,7881333718319106,7881307948515330,7881355193155586,7881458272370690,7881479747207170,7881303653548034,7881630071062530,7881325128384514,7881484042174466,7881720265375746,7881711675441154,7881453977403394,7881677315702786,7881694495571970,7881496927076354,7881342308253698,7881638660997122,7881608596226050,7881501222043650,7881505517010946,7881724560343042,7881673020735490,7881475452239874,7881518401912834,7881634366029826,7881329423351810,7881338013286402,7881531286814722,7881466862305282,7881514106945538,7881703085506562,7881316538449922,7881698790539266,7881312243482626,7881488337141762,7881690200604674,7881509811978242,7881368078057474,7881363783090178,8162928951623682,8162954721427458,8162967606329346,8163156584890370,8162993376133122,8162959016394754,8162989081165826,8162971901296642,8162997671100418,8163178059726850,8163182354694146,8162791512670210,8162804397572098,8163001966067714,8162980491231234,8162817282473986,8162976196263938,8163160879857666,8162787217702914,8163109340250114,8163006261035010,8162946131492866,8162941836525570,8163147994955778,8162933246590978,8163105045282818,8162937541558274,8162800102604802,8162821577441282,8162830167375874,8163190944628738,8162963311362050,8162782922735618,8163113635217410,8162950426460162,8162808692539394,8162984786198530,8444425396682752,8444988038512641,8444464051519488,8444992332759041,8444257891778560,8444266482696192,8444773288640513,8444433987141632,8444476937338880,8444945090215937,8445108313391106,8444283661451264,8444799059034113,8444292252368896,8444408215830528,8444657325244416,8444275071451136,8444468347076608,8444429691715584,8444455459815424,8444442577207296,8444451165962240,8444416806486016,8444790470148097,8444296548515840,8444481230405632,8444459756290048,8444803352887297,8444279368384512,8444403920797696,8444472642502656,8444421101649920,8444438280863744,8444794764787713,8444829124395009,8444983740923905,8444949381578753,8444262187335680,8444975151710209,8444412510339072,8444446870863872,8444777582755841,8444300841058304,8444842009493505,8444305137139712,8725904673996802,8725951918637058,8726059292819458,8725741465239554,8725934738767874,8725758645108738,8725947623669762,8725754350141442,8725917558898690,8725900379029506,8725913263931394,8725956213604354,8725737170272258,8725930443800578,8725891789094914,8725780119945218,8725750055174146,8725878904193026,8725767235043330,8726140897198082,8725926148833282,8726097947525122,8726054997852162,8725921853865986,8725896084062210,8725732875304962,8725883199160322,8726128012296194,8725943328702466,8726063587786754,8725887494127618,8726106537459714,8725908968964098,8725771530010626,8726110832427010,8726132307263490,8725939033735170,9007255097638914,9007229327835138,9007207852998658,9007396831559682,9007353881886722,9007358176854018,9007392536592386,9007426896330754,9007375356723202,9007405421494274,9007383946657794,9007422601363458,9007572925218818,9007585810120706,9007431191298050,9007602989989890,9007414011428866,9007409716461570,9007366766788610,9007246507704322,9007534270513154,9007233622802434,9007607284957186,9007216442933250,9007615874891778,9007388241625090,9007581515153410,9007212147965954,9007242212737026,9007538565480450,9007371061755906,9007401126526978,9007362471821314,9007529975545858,9007225032867842,9007379651690498,9007418306396162,9288828868755458,9288691429801986,9288708609671170,9288833163722754,9288717199605762,9288854638559234,9288725789540354,9288893293264898,9288871818428418,9288837458690050,9288730084507650,9288880408363010,9288888998297602,9289082271825922,9288901883199490,9288700019736578,9288906178166786,9288897588232194,9289533243392002,9288841753657346,9288682839867394,9288867523461122,9288858933526530,9288704314703874,9288846048624642,9288863228493826,9288721494573058,9288884703330306,9288876113395714,9288850343591938,9288687134834690,9570381143998466,9570557237657602,9570166395633666,9570179280535554,9570376849031170,9570479928246274,9570308129554434,9570531467853826,9570484223213570,9570535762821122,9570303834587138,9570205050339330,9570355374194690,9570368259096578,9570325309423618,9570351079227394,9570333899358210,9570552942690306,9570196460404738,9570183575502850,9570342489292802,9570157805699074,9570522877919234,9570174985568258,9570488518180866,9570321014456322,9570346784260098,9570565827592194,9570363964129282,9570312424521730,9570359669161986,9570192165437442,9570338194325506,9570372554063874,9570162100666370,9570316719489026,9570329604390914,9852032214761474,9851800286527490,9851826056331266,9851834646265858,9852040804696066,9851632782802946,9851817466396674,9851680027443202,9851649962672130,9851847531167746,9852027919794178,9851654257639426,9851667142541314,9851821761363970,9851959200317442,9851804581494786,9851851826135042,9851787401625602,9851658552606722,9851856121102338,9851795991560194,9851963495284738,9851791696592898,9851813171429378,9851778811691010,9851997855023106,9852006444957698,9851954905350146,9852010739924994,9851838941233154,9851830351298562,9851641372737538,9851783106658306,9851843236200450,9851637077770242,9851671437508610,9851808876462082,10133262378205186,10133146414088194,10133116349317122,10133292442976258,10133481421537282,10133322507747330,10133155004022786,10133434176897026,10133253788270594,10133438471864322,10133107759382530,10133326802714626,10133296737943554,10133124939251714,10133331097681922,10133288148008962,10133301032910850,10133283853041666,10133279558074370,10133515781275650,10133485716504578,10133112054349826,10133502896373762,10133318212780034,10133472831602690,10133309622845442,10133258083237890,10133305327878146,10133275263107074,10133429881929730,10133133529186306,10133313917812738,10133142119120898,10133129234219010,10133270968139778,10133507191341058,10133266673172482,10414754534326274,10414608505438210,10414904858181634,10414599915503618,10414793189031938,10414913448116226,10414776009162754,10414771714195458,10414797483999234,10414591325569026,10414741649424386,10414784599097346,10414737354457090,10414733059489794,10414788894064642,10414982167592962,10414947807854594,10414960692756482,10414629980274690,10414745944391682,10414604210470914,10414909153148930,10414806073933826,10414758829293570,10414801778966530,10414582735634434,10414990757527554,10414587030601730,10414728764522498,10414767419228162,10414621390340098,10414763124260866,10414750239358978,10414977872625666,10414956397789186,10414617095372802,10414780304130050,10696431375351810,10696246691758082,10696096367902722,10696208037052418,10696057713197058,10696268166594562,10696435670319106,10696276756529154,10696079188033538,10696220921954306,10696104957837314,10696281051496450,10696066303131650,10696259576659970,10696083483000834,10696250986725378,10696092072935426,10696203742085122,10696263871627266,10696074893066242,10696238101823490,10696272461561858,10696388425678850,10696457145155586,10696242396790786,10696422785417218,10696452850188290,10696229511888898,10696216626987010,10696384130711554,10696465735090178,10696062008164354,10696255281692674,10696379835744258,10696233806856194,10696212332019714,10696225216921602,10977743145992194,10977678721482754,10977554167431170,10977691606384642,10977700196319234,10977747440959490,10977713081221122,10977751735926786,10977734556057602,10977571347300354,10977906354749442,10977863405076482,10977940714487810,10977687311417346,10977854815141890,10977730261090306,10977721671155714,10977541282529282,10977549872463874,10977756030894082,10977725966123010,10977683016450050,10977932124553218,10977708786253826,10977927829585922,10977532692594690,10977536987561986,10977704491286530,10977897764814850,10977738851024898,10977579937234946,10977717376188418,10977558462398466,10977910649716738,10977695901351938,10977567052333058,11259385621577730,11259226704445440,11259054904246272,11259578891501569,11259188047970304,11259222409609216,11259218114183168,11259170868756480,11259213818626048,11259175163789312,11259166573592576,11259024838557696,11259407092350976,11259230997512192,11259042019475456,11259007658885120,11259733508030465,11259029135491072,11259192344313856,11259183754248192,11259742099865601,11259205226921984,11259591776600065,11259329787002882,11259209523396608,11259338376937474,11259179458822144,11259402801446914,11259372736675842,11259553119993857,11259046315622400,11259196637970432,11259011954442240,11259016249802752,11259157982937088,11259381326610434,11259033428557824,11259527353663489,11259548826140673,11259162277445632,11259153687904256,11259200933068800,11259737805619201,11259540237254657,11259415686348802,11259544531894273,11540650140499968,11541015213965313,11540813353779202,11540847713517570,11540675909779456,11541023802851329,11540877778288642,11540671614681088,11540504112201728,11540882069061632,11540856303452162,11540663024680960,11541066753310721,11540529880956928,11540508405268480,11540693090893824,11540804763844610,11541053868212225,11540645845467136,11540860598419458,11540491226513408,11540628664614912,11540705974222848,11541028096704513,11541212782329857,11541208484741121,11540684500107264,11540482635595776,11540641550303232,11540654435532800,11540486931152896,11541019508604929,11540680203632640,11540516996186112,11540701681156096,11540499815268352,11540688795336704,11541002330439681,11540632959647744,11540637254156288,11540667321024512,11541217076576257,11540697386319872,11540890663190530,11540521292333056,11540658730958848,11822249678274562,11822365642391554,12103591503724544,12103634453528576,12103436884574208,12103832022482944,12103806257135618,12104003821633537,12103638748758016,12103763307462658,12103952283926529,12103604388954112,12103458358689792,12103479834378240,12103471245754368,12103625863200768,12103969462026241,12103441179934720,12103621568102400,12103432589017088,12104158438162433,12103973756272641,12103647339741184,12103617274445824,12103797667201026,12103630157053952,12103466949607424,12103608684380160,12103810552102914,12103643044315136,12104167029997569,12103827731972098,12103651634577408,12103449768689664,12103582913069056,12103978050125825,12103965167386625,12103754717528066,12103578618036224,12103454065623040,12103840616873986,12104016706732033,12103600093921280,12104162735751169,12103587207577600,12103612978102272,12103595798888448,12103655927644160,12385199631630338,12385315595747330,12666567227867136,12666781975904256,12666554342375424,12666541457145856,12666777684934658,12666399722110976,12666528571457536,12666902237413377,12667108391583745,12666575816622080,12666416903028736,12666382542438400,12666532866490368,12666923709693953,12666429787799552,12666404019044352,12666571521523712,12666713260425218,12666597293162496,12666550047342592,12666756210098178,12666558637801472,12666588702179328,12666605881065472,12667116983418881,12666592997736448,12666953775054849,12666391133356032,12667112689172481,12666928003547137,12666790569836546,12666421199175680,12666704670490626,12666760505065474,12666545752309760,12666580110475264,12666915120807937,12666562931523584,12666408312111104,12666966660153345,12666584406949888,12666537160998912,12666601587998720,12666747620163586,12666386837995520,12666919415447553,12948707922149379,13229809242800129,13229800653324289,13229779177111553,13229753409077248,13230028285149185,13229757703127041,13229392630120448,13229345385807872,13229362566725632,13229388336594944,13229787766784001,13229474234695680,13229761996587009,13229744816914432,13229813537964033,13229663214632960,13229749112864768,13229804947636225,13229826423455745,13229796358029313,13229633149206528,13229817832144897,13229792061685761,13229736227241984,13229843602079745,13229723342143488,13229783471947777,13229714753191936,13230032580968449,13229774882340865,13229328206790656,13229740521816064,13229637443846144,13229770587308033,13229719048749056,13230036876460033,13229822128357377,13229706162143232,13511138190950402,13511129601015810,13511215500361730,13511172550688770,13511181140623362,13511185435590658,13511202615459842,13792497200005120,13792303925886976,13792827910389761,13792866571321345,13792449954185216,13792681882746880,13792286744838144,13792484313792512,13792462838366208,13792454249218048,13792840801583105,13792458544644096,13792471428366336,13792488609021952,13792467134709760,13792299628953600,13793016890261505,13792505787908096,13792316809871360,13792823616536577,13792480017317888,13792475723464704,13792492904579072,13792853681897473,13792819326877697,13792905226158081,13792308218953728,13792501494841344,14073950710202370,14073976480006146,14074049494450178,14073774616543234,14074122505027584,14073778911510530,14073761731641346,14073907760529410,14073929235365890,14073967890071554,14073903465562114,14074156868632578,14073800386347010,14073796091379714,14073937825300482,14073912055496706,14073920645431298,14073972185038850,14073791796412418,14074079559221250,14073942120267778,14073916350464002,14073783206477826,14073980774973442,14074083854188546,14073955005169666,14073757436674050,14073804681314306,14074109623992322,14074135393796098,14073933530333186,14073924940398594,14074131094896640,14073963595104258,14073766026608642,14074152573665282,14073946415235074,14073959300136962,14355412802076674,14355258183254018,14355447161815042,14355597485670402,14355429981945858,14355451456782338,14355266773188610,14355399917174786,14355271068155906,14355606075604994,14355241003384834,14355584600768514,14355279658090498,14355417097043970,14355391327240194,14355249593319426,14355382737305602,14355236708417538,14355554535997442,14355631845408770,14355455751749634,14355434276913154,14355253888286722,14355524471226370,14355627550441474,14355275363123202,14355610370572290,14355387032272898,14355442866847746,14355404212142082,14355421392011266,14355438571880450,14355558830964738,14355378442338306,14355425686978562,14355408507109378,14355232413450242,14355395622207490,14637102522564610,14637029508120578,14918513071882240,14918590380834816,14918775064363009,14918779359592449,14918556021227520,14918770773524481,15200065357545472,15200030997938176,15200250045267969,15481158097633282,15481136622796802,15481527452827650,15481338486259714,15481347076194306,15481295536586754,15481424385605634,15481308421488642,15481454438383618,15481175277502466,15481317011423234,15481312716455938,15481291241619458,15481166687567874,15481149507698690,15481153802665986,15481329896325122,15481484503941120,15481278356717570,15481304126521346,15481355666128898,15481286946652162,15481321306390530,15481342781227010,15481170982535170,15481531759788034,15481351371161602,15481334191292418,15481179572469762,15481282651684866,15481299831554050,15481325601357826,15481140917764098,15481974130147329,15481132327829506,15763457695088642,15762667421106178,15762766205353986,15762826334896130,15762774795288578,15762761910386690,15762980953718786,15762864989601794,15762633061367810,15762654536204290,15762804860059650,15762993838620674,15763023903391746,15762938004045826,15762663126138882,15763019608424450,15762822039928834,15762611586531330,15762800565092354,15762650241236994,15762628766400514,15762869284569090,15762602996596738,15762860694634498,15763015313457154,15762624471433218,15762817744961538,15762783385223170,15763002428555266,15762757615419394,15762843514765314,15762839219798018,15762791975157762,15762615881498626,15762882169470978,15762641651302402,15762645946269698,15762753320452098,15762998133587970,15762852104699906,15762834924830722,15762877874503682,15762830629863426,15762620176465922,15762796270125058,15762637356335106,15762770500321282,15762779090255874,15763028198359042,15763011018489858,15762607291564034,15762749025484802,15762873579536386,15762899349340162,15762856399667202,15762989543653378,15762903644307458,15763006723522562,15762813449994242,15762912234242050,15762907939274754,15762809155026946,15762787680190466,16044404392722432,16044477407100928,16325574426886144,16325930913562626,16326141362634753,16325561535234048,16325763399417856,16325935208529922,16325965273300994,16326158542569473,16326347520933889,16325887963889666,16325759104188416,16325883668922370,16325922323628034,16326338931261441,16325879373955074,16607186843271170,16607036519415810,16607440246341634,16607225497976834,16607053699284994,16607251267780610,16607255562747906,16607358641963010,16607204023140354,16607234087911426,16607057994252290,16607070879154178,16607362936930306,16607354346995714,16607427361439746,16607191138238466,16607079469088770,16607040814383106,16607324282093570,16607195433205762,16607066584186882,16607221203009538,16607208318107650,16607032224448514,16607238382878722,16607246972813314,16607242677846018,16607182548303874,16607049404317698,16607229792944130,16607212613074946,16607405886603266,16607178253336578,16607410181570562,16607199728173058,16607216908042242,16607431656407042,16607397296668674,16888799258476544,17170158273167362,17170377316499458,17170162568134658,17170274235252736,17170132503363586,17170003654344706,17170149683232770,17170347251728386,17169999359377410,17170205517807618,17170201222840322,17170145388265474,17170196927873026,17170381611466754,17169986474475522,17170184042971138,17169982179508226,17170390201401346,17170355841662978,17170171158069250,17170188337938434,17170029424148482,17170179748003842,17170136798330882,17170360136630274,17170304302055426,17170192632905730,17170007949312002,17170020834213890,17170166863101954,17170308597022722,17170312891990018,17170016539246594,17170141093298178,17169990769442818,17170153978200066,17170175453036546,17170128208396290,17452036974968833,17452032679870465,17451860881244160,17733503355846657,17733391689056257,17733155461857280,17733108218593280,17732936418787328,17733361623957505,17733305789513728,17732953599836160,17733477584338945,17733348740235264,17733469000826881,17733125397413888,17733400280694785,17733340149186560,17732957892902912,17733314380562432,17733099628134400,17733318676119552,17732966483820544,17733103923167232,17733632208338945,17733426050826241,17733473290485761,17733554901417985,17733073862066176,17733232776577024,17733490475532289,17733413165334529,17733357330497537,17733344444284928,17733374509711361,17733417459515393,17733443232333825,17733322969513984,17733636503830529,17732992257490944,17733116808658944,17733151168790528,17733516245270529,17733383099318273,17733237071216640,17732949302902784,17733142578528256,17733627912519681,17733331556696064,17733129691267072,17733112512315392,17733404575006721,17733378804482049,17733262842003456,17733121102315520,17733335854612480,17732987963965440,17732945013178368,17733146873954304,17732962194096128,17732927834161152,17733408870170625,17733395985399809,17733421755727873,17733353036447744,17733387394154497,17733666564210689,17733133987741696,17733370214678529,17733138282971136,18014600391491586,18014626161295362,18014621866328066,18014415707897858,18014613276393474,18014604686458882,18014806549921794,18014587506589698,18014557441818626,18014450067636226,18014570326720514,18014630456262658,18015257521487874,18014574621687810,18014617571360770,18014445772668930,18014596096524290,18014428592799746,18014407117963266,18014561736785922,18014454362603522,18014411412930562,18014608981426178,18014432887767042,18014441477701634,18014566031753218,18014583211622402,18014553146851330,18014424297832450,18014591801556994,18014578916655106,18296204204834818,18296247154507778,18296212794769410,18296255744442370,18296290104180738,18296260039409666,18296277219278850,18577722131349506,18577687771611138,18577730721284098,18577765081022466,18577735016251394,18577752196120578,18577679181676546,18859240057995266,18859209993224194,18859162748583938,18859205698256898,18859197108322306,18859227173093378,18859154158649346,19140702149869570,19140715034771458,19140672085098498,19140637725360130,19140629135425538,19140684970000386,19140680675033090,19421833531293696,19421872179118082,19421867884150786,19422147063971840,19421906538856450,19422078337548290,19422168531861506,19421876474085378,19422159941926914,19421859294216194,19421846409314306,19422112697286658,19422091222450178,19422082632515586,19422138467090434,19422104107352066,19421902243889154,19421854999248898,19421850704281602,19422125582188546,19422155653971968,19422134172123138,19421885064019970,19421842121162752,19422108402319362,19422121287221250,19422177121796098,19421915128791042,19421889358987266,19421910833823746,19421919423758338,19422164236894210,19422151351992322,19421880769052674,19422129877155842,19422116992253954,19421863589183490,19422099819134976,19422095517417474,19421837826457600,19421893653954562,19421897948921858,19703368628830210,19703553312423938,19703347153993730,19703652096671746,19703372923797506,19703566197325826,19703364333862914,19703329974124546,19703338564059138,19703613441966082,19703609146998786,19703317089222658,19703639211769858,19703574787260418,19703321384189954,19703334269091842,19703600557064194,19703360038895618,19703583377195010,19703342859026434,19703622031900674,19703634916802562,19703557607391234,19703385808699394,19703626326867970,19703604852031490,19703570492293122,19703630621835266,19703591967129602,19703643506737154,19703394398633986,19703325679157250,19703381513732098,19703308499288066,19703351448961026,19703579082227714,19703596262096898,19703390103666690,19703377218764802,19703355743928322,19703587672162306,19703312794255362,19984942392213504,19985208683855873,19985122783199232,19985152850132992,19985135668297728,19985191502741505,19984753413521408,19985139962871808,19985036884901888,19985204388691969,19984925211099136,19985427726204929,19984727647846400,19985200094380033,19985225866870785,19985212979019777,19984929504952320,19985466377895937,19985178618167297,19984955275542528,19984757706588160,19985161437642753,19985238751707137,19985290289217537,19985148553920512,19984787777650688,19984933801426944,19984766297505792,19985105603198976,19985032590262272,19985221569413121,19984749116588032,19985230161575937,19985268814512129,19985432022024193,19984908032278528,19984912326000640,19985303169531905,19984736232472576,19985182913003521,19984899441819648,19984744826863616,19984873675751424,19984950982475776,19985316058955777,19985118489804800,19984792071176192,19984903736852480,19984920916000768,19984938096656384,19985131370381312,19985157144182785,19985144257970176,19984946687639552,19985354715693057,19984916622344192,19985436317515777,19985174323396609,19985273104171009,19985114194247680,19985277398024193,19985195799085057,19984762007781376,19985187207839745,19985062655688704,19985217273200641,19985170032164865,20266262748004354,20266331467481090,20266340057415682,20266537625911298,20266550510813186,20266301402710018,20266529035976706,20266335762448386,20266288517808130,20266258453037058,20266279927873538,20266271337938946,20266344352382978,20266267042971650,20266314287611906,20266593460486146,20266580575584258,20266297107742722,20266563395715074,20266318582579202,20266507561140226,20266516151074818,20266533330944002,20266503266172930,20266602050420738,20266292812775426,20266546215845890,20266576280616962,20266541920878594,20266284222840834,20266309992644610,20266584870551554,20266327172513794,20266322877546498,20266275632906242,20266524741009410,20266559100747778,20266571985649666,20266305697677314,20266589165518850,20266554805780482,20266520446042114,20547677597401090,20548089914261506,20548072734392322,20547742021910530,20547711957139458,20548012604850178,20548055554523138,20548094209228802,20547694777270274,20548068439425026,20547982540079106,20548085619294210,20547986835046402,20547823626289154,20548064144457730,20548102799163394,20547737726943234,20548098504196098,20829534827118594,20829513352282114,20829466107641858,20829229884440578,20829500467380226,20829225595305984,20829242769342466,20829483287511042,20829470402609154,20829251359277058,20829478992543746,20829504762347522,20829457517707266,20829453222739970,20829221300404224,20829526237184002,20829552006987778,20829238474375170,20829234179407874,20829247064309762,21110726335791106,21110713450889218,21110722040823810,21110958264025090,21110704860954626,21111014104825856,21110717745856514,21110696271020034,21110932494221314,21111018399727616,21110988328796162,21110709155921922,21110945379123202,21111001213698050,21111009803632642,21110941084155906,21110700565987330,21111026983501826,21110979738861570,21110975443894274,21110953969057794,21110928199254018,21392459007721474,21392407468113922,21392454712754178,21392446122819586,21392235669422082,21392179834847234,21392192719749122,21392209899618306,21392484777525250,21392197014716418,21392175539879938,21392171244912642,21392201309683714,21392420353015810,21392231374454786,21392188424781826,21392476187590658,21392433237917698,21392184129814530,21392501957394434,21392480482557954,21392450417786882,21392244259356674,21392471892623362,21392403173146626,21392463302688770,21392489072492546,21392493367459842,21392437532884994,21392222784520194,21392416058048514,21392158360010754,21392428942950402,21392166949945346,21392441827852290,21392205604651010,21392214194585602,21392239964389378,21392227079487490,21392162654978050,21392218489552898,21392424647983106,21673908217249794,21673951166922754,21673959756857346,21673903922282498,21673878152478722,21673676289015810,21673929692086274,21673891037380610,21673671994048514,21673659109146626,21673912518836224,21673667699081218,21673646224244738,21673976936726530,21673895332347906,21673938282020866,21673654814179330,21673882447446018,21673916813672448,21673964051824642,21673663404113922,21673650519212034,21673968346791938,21673925397118978,21673921108705280,21955116902973442,21955443320487938,21955146967744514,21955172737548290,21955430435586050,21955138377809922,21955370306043906,21955421845651458,21955383190945794,21955189917417474,21955159852646402,21955439025520642,21955451910422530,21955396075847682,21955391780880386,21955108313038850,21955164147613698,21955366011076610,21955434730553346,21955177032515586,21955181327482882,21955134082842626,21955151262711810,21955400370814978,21955408960749570,21955129787875330,21955112608006146,21955142672777218,21955374601011202,21955387485913090,21955155557679106,21955194212384770,21955413255716866,21955168442580994,21955353126174722,21955357421142018,21955426140618754,21955185622450178,21955125492908034,21955121197940738,21955378895978498,21955404665782274,22236918299951106,22236888235180034,22236604767338498,22236613357273090,22236901120081922,22236609062305794,22236926889885698,22236862465376258,22236617652240386,22236914004983810,22236621947207682,22236600472371202,22236845285507074,22236858170408962,22236626242174978,22236879645245442,22236909710016514,22236866760343554,22236832400605186,22236871055310850,22236596177403906,22236840990539778,22236828105637890,22236853875441666,22236875350278146,22518711107911681,22518388984643584,22518066861572096,22518307380658176,22518449113792513,22518337446084608,22518436228038657,22518419048366080,22518019617259520,22518414753267712,22518002438242304,22518380398772224,22518410458693632,22518431934578689,22518036798177280,22518148466147328,22518444823216129,22518393280200704,22518062568046592,22518427640528896,22518706812420097,22518397573595136,22518311675297792,22518423344316416,22518702516600833,22799550425661442,22799868253241346,22799563310563330,22799597670301698,22799589080367106,22799795238797314,22799812418666498,22799576195465218,22799782353895426,22799610555203586,22799851073372162,22799859663306754,22799825303568386,22799876843175938,22799571900497922,22799803828731906,22799821008601090,22799838188470274,22799808123699202,22799554720628738,22799593375334402,22799863958274050,22799816713633794,22799567605530626,22799829598535682,22799614850170882,22799584785399810,22799601965268994,22799580490432514,22799833893502978,22799606260236290,22799559015596034,22799619145138178,22799778058928130,22799546130694146,22799790943830018,23081343233622016,23081364706689024,23081373297737728,23081338938064896,23081381888000001,23081399067213825,23081257334079488,23081016814993408,23081347527016448,23081360412114944,23081330347016192,23081661061332993,23081098419568640,23080952391663616,23081377593950208,23081386181459969,23081394772180993,23080986751598592,23081369001787392,23081012521467904,23081403366703105,23081652470022145,23080969570680832,23081287399505920,23081261628719104,23081656765841409,23362874043924481,23362843978498048,23362762376216576,23362732310790144,23362856864710657,23362491791704064,23362461728309248,23362487498178560,23362736605429760,23363131742552065,23363127446732801,23362427368374272,23362813914775552,23362839683399680,23362835388825600,23362818210332672,23362822503727104,23362805329035264,23362861158170625,23362573396279296,23362444547391488,23362848274448384,23363136038043649,23362852570660864,23362869753610241,23643996838035456,23644263120437250,23644284595273730,23644228760698882,23644301775142914,23644001127432194,23644276005339138,23644202990895106,23644233055666178,23925755282653184,24207178719821824,24488662276636674,24488679456505858,24488447528271874,24488657981669378,24488645096767490,24488627916898306,24488395988664322,24488426053435394,24488700931342338,24488670866571266,24488408873566210,24488632211865602,24488400283631618,24488649391734786,24488709521276930,24488464708141058,24488430348402690,24488413168533506,24488696636375042,24488469003108354,24488688046440450,24488675161538562,24488434643369986,24488653686702082,24488417463500802,24488705226309634,24488456118206466,24488383103762434,24488666571603970,24488460413173762,24488718111211522,24488451823239170,24488391693697026,24488421758468098,24488387398729730,24488713816244226,24488404578598914,24488683751473154,24488438938337282,24488640801800194,24488726701146114,24488443233304578,24769802247929858,24769819427799042,24770218859757570,24770180205051906,24770193089953794,24769836607668226,24770107190607874,24770137255378946,24770214564790274,24770197384921090,24770227449692162,24769948276817922,24769866672439298,24770111485575170,24769862377472002,24770223154724866,24770210269822978,24770188794986498,25051337354379266,25051668066861058,25051663771893762,25051685246730242,25051582167515138,25051698131632130,25051702426599426,25051341649346562,25051586462482434,25051294404706306,25051311584575490,25051655181959170,25051689541697538,25051612232286210,25051277224837122,25051693836664834,25051672361828354,25051423253725186,25333151635013634,25333052850765826,25333070030635010,25333082915536898,25333134455144450,25333078620569602,25333125865209858,25333112980307970,25333065735667714,25332850987302914,25333057151893504,25332846692335618,25614304485179394,25614613722824706,25614283010342914,25614626607726594,25614368909688834,25614308780146690,25614609427857410,25614330254983170,25614527823478786,25614338844917762,25614291600277506,25614364614721538,25614562183217154,25614325960015874,25614295895244802,25614287305310210,25614343139885058,25614566478184450,25614605132890114,25614540708380674,25614347434852354,25614549298315266,25614596542955522,25614579363086338,25614587953020930,25614583658053634,25614575068119042,25614570773151746,25614321665048578,25614600837922818,25614300190212098,25614553593282562,25614351729819650,25614356024786946,25614557888249858,25614532118446082,25614334549950466,25614618017792002,25614317370081282,25614313075113986,25614545003347970,25614360319754242,25896037160779778,25895800937578498,25896007096008706,25895788052676610,25895779462742018,25896032865812482,25896041455747074,25895831002349570,25895839592284162,25895835297316866,25896045750714370,25896019980910594,25896002801041410,25895813822480386,25896071520518146,25896084405420034,25895822412414978,25896054340648962,25896075815485442,25896015685943298,25895805232545794,25896024275877890,25895826707382274,25895757987905538,25895762282872834,25895783757709314,25896080110452738,25896092995354626,25896050045681666,25895792347643906,25895809527513090,25895770872807426,25896088700387330,25896058635616258,25895843887251458,25895766577840130,25895796642611202,25895818117447682,25896028570845186,25896101585289218,25896062930583554,25895775167774722,26177503550832642,26177490665930754,26177271622598658,26177550795472898,26177275917565954,26177559385407490,26177477781028866,26177507845799938,26177494966992896,26177537910571010,26177576565276674,26459038655119362,26458716532572162,26459068719890434,26459060129955842,26459047245053954,26458987115511810,26459042950086658,26458961345708034,26459073014857730,26459064424923138,26459077309825026,26459030065184770,26458652108062722,26458712237604866,26458686467801090,26458798136950786,26458669287931906,26458957050740738,26740444913860610,26740500748435458,26740509338370050,26740225870528514,26740479280283648,26740221575561218,26740212985626626,26740217280593922,26740440618893314,26740526518239234,26740457798762498,26740487863533570,26740432028958722,26740208697409536,26740204402311168,26740427733991426,26740453503795202,26740474985447424,27022001495539714,27021932776062978,27021915602485248,27021700847828994,27021928481095682,27021984315670530,27021975725735938,27021962840834050,27021902711291906,27021696552861698,27303111398129666,27303137167933442,27303497945186306,27303489355251714,27303502240153602,27303223067279362,27303485060284418,27303094218260482,27303381981069314,27303141462900738,27303493650219010,27303077038391298,27303467880415234,27303472175382530,27303412045840386,27303454995513346,27303386276036610,27303463585447938,27584667977318402,27584612142743554,27584655092416514,27584929970323458,27584607847776258,27584680862220290,27584856955879426,27584904200519682,27584921380388866,27584659387383810,27584942855225346,27584616437710850,27584693747122178,27584646502481922,27584891315617794,27584938560258050,27584925675356162,27584642207514626,27584869840781314,27584637912547330,27584650797449218,27584672272285698,27584882725683202,27584852660912130,27584620732678146,27584912790454274,27584676567252994,27584633617580034,27584689452154882,27584865545814018,27584874135748610,27584908495486978,27584951445159938,27584934265290754,27584887020650498,27584878430715906,27584629322612738,27584899905552386,27584685157187586,27584895610585090,27584625027645442,27584663682351106,27866349112131586,27866112888930306,27866383471869954,27866168723505154,27866104298995714,27866331932262402,27866125773832194,27866353407098882,27866095709061122,27866387766837250,27866379176902658,27866117183897602,27866147248668674,27866108593963010,27866164428537858,27866160133570562,27866130068799490,27866121478864898,27866366292000770,27866138658734082,27866396356771842,27866426421542914,27866357702066178,27866374881935362,27866134363766786,27866361997033474,27866413536641026,27866417831608322,27866087119126530,27866409241673730,27866370586968066,27866142953701378,27866340522196994,27866151543635970,27866344817164290,27866327637295106,27866155838603266,27866091414093826,27866400651739138,27866100004028418,27866082824159234,27866404946706434,28147875632185346,28147901401989122,28147815502643202,28147806912708610,28147828387545090,28147587876126720,28147802617741314,28147596459311106,28147819797610498,28147592171159552,28147600754278402,28147862747283458,28147884222119938,28147832682512386,28429354910744576,28710847061229568,28710842767835136,28710885715673089,28710898601426945,28711160595546113,28710451925876736,28710469104893952,28710829886406656,28710859946328064,28710756868292608,28710786933719040,28711152004235265,28710597953781760,28710516349206528,28710868536000512,28710486285811712,28711156300054529,28710881422213121,28710512055681024,28710838472278016,28710894312030209,28710761162932224,28710872831950848,28710864240902144,28710877128163328,28992253318332418,28992227548528642,28992309152907266,28992257613299714,28992300562972674,28992025691422720,28992326332776450,28992287684493312,29273401875234818,29273706817912834,29273792717258754,29273809897127938,29273419055104002,29273788422291458,29273462004776962,29273822782029826,29273466299744258,29273711112880130,29273814192095234,29273547904122882,29273736882683906,29273436234973186,29273818487062530,29273779832356866,29273797012226050,29273827076997122,29555177503064066,29555207567835138,29555203272867842,29555259107442690,29555276287311874,29555250517508098,29836652474531842,29836407661395970,29836665359433730,29836738373877762,29836708309106690,29836459201003522,29836699719172098,29836493560741890,29836480675840002,29836725488975874,29836424841265154,29836429136232450,29836467790938114,29836416251330562,29836476380872706,29836729783943170,29836734078910466,29836678244335618,29836751258779650,29836704014139394,29836695424204802,29836442021134338,29836489265774594,29836742668845058,29836686834270210,29836691129237506,29836669654401026,29836450611068930,29836454906036226,29836433431199746,29836463495970818,29836656769499138,29836682539302914,29836721194008578,29836472085905410,29836712604073986,29836446316101634,29836437726167042,29836420546297858,29836484970807298,29836411956363266,29836673949368322,30117998603403264,30117865459089408,30118041553797120,30118020077584384,30118045849223168,30118028666535936,30117852575105024,30118007193862144,30117835394056192,30118196179632130,30118389454864385,30118565539479553,30117848278171648,30118024372682752,30118037258240000,30118415220539393,30118011487584256,30117856868171776,30118015783927808,30118367976095745,30118157524926466,30118402331115521,30118032963010560,30118050144059392,30118239129305090,30118372265754625,30118054437126144,30118209064534018,30118230531964928,30118226244403202,30118376559607809,30118161819893762,30118204769566722,30118002898436096,30399684045176834,30399679748112384,30399636790968320,30399933151379457,30399937446215681,30399671158112256,30399903086542849,30399632505569282,30681159020052480,30962814385455105,30962462188371968,30962290389221376,30962273208303616,30962792906227713,30962664059305986,30962840150671361,30962432123994112,30962651174404098,30962629699567618,30962633994534914,30962281798303744,30962445007716352,30962655462096896,30962453596667904,30962586749894658,30962990469611521,30962801489739777,30962277505236992,30962479367258112,30962440714059776,30962260324188160,30962427828568064,30962827261247489,30962475074191360,30962436417716224,30962797195886593,30962423533535232,30962621109633026,30962457893142528,30962466483929088,30962470779355136,30962582454927362,30962449302814720,31244276466450433,31244272172597249,31243915690770432,31244250707853313,31243898510245888,31243894215213056,31243769662078976,31243731005341696,31243932869853184,31244315123056641,31243778250702848,31243885623902208,31244349491838977,31243924279525376,31243752481947648,31244130438807552,31243748185014272,31243765365932032,31243877034360832,31244465446322177,31243907100704768,31243902805278720,31244345197199361,31243739596259328,31244302237958145,31243881329393664,31243756775014400,31244456854487041,31243919984427008,31243735300898816,31244108973801472,31243937165082624,31244263583711233,31243889920049152,31243954343968768,31243945756065792,31244340901969921,31244267878350849,31244461152075777,31244139038638080,31243928573378560,31243911394426880,31243950050902016,31244336606871553,31243941460639744,31525626895269888,31525687024156673,31525261822787584,31525644077301761,31525906067161089,31525661252976641,31525360612474880,31525704210120705,31525407846563840,31525807289270273,31525910362652673,31525618303107072,31525996263309313,31525588239384576,31525266116313088,31525656958140417,31525510930038784,31525506635399168,31525575360905216,31525652663304193,31525691318337537,31525614008008704,31525674139516929,31525201692983296,31525218872000512,31525223169261568,31525622599057408,31525596828336128,31525678433828865,31525592534941696,31525236052918272,31525901771341825,31525635482779649,31525536706265088,31525579648335872,31525412141793280,31525669844221953,31525609713434624,31525210277609472,31525699912007681,31525648368533505,31525695614550017,31525790105010177,31525665547878401,31525682728992769,31525631189319681,31525347720888320,31807058927812608,32088370694455298,32088319154847746,32088482363604994,32088306269945858,32088173125959682,32088310564913154,32088177420926978,32088323449815042,32088374989422594,32088340629684226,32088336334716930,32088533903212546,32088301974978562,32088529604378624,32088353514586114,32088160241057794,32088379284389890,32088190305828866,32088181715894274,32088362104520706,32088314859880450,32088521014509568,32088551083081730,32088555378049026,32088155946090498,32088349219618818,32088357809553410,32088332039749634,32088366399488002,32088508133408770,32088194600796162,32088198895763458,32088327744782338,32088203190730754,32088164536025090,32088448003866626,32088478068637698,32088344924651522,32370163490553857,32370365353164801,32369828480221184,32369845662908416,32369849957744640,32369807007547392,32370348172115969,32369922981953536,32369781236236288,32369776941203456,32369819891269632,32369656681857024,32369673861464064,32370202144800769,32369669568921600,32369652388790272,32369789826891776,32369854250811392,32370283759337473,32370176373293057,32370356761329665,32369665272774656,32369841367482368,32369832776695808,32369798417088512,32370172079439873,32369785530744832,32370215029899265,32370150615285761,32369802712121344,32370030345650176,32370167785193473,32369648091856896,32370361058918401,32369639503101952,32369815597613056,32369635207741440,32370146320449537,32369630912184320,32369837071925248,32369824186368000,32369811301269504,32369794122055680,32369678157545472,32651488146227200,32651531096162305,32651135959760896,32651522505900032,32651410836881408,32651574046359553,32651578340671489,32651591225180161,32651561159819265,32651118778843136,32651436607668224,32651513914851328,32651509620277248,32651599818850305,32651161729630208,32651569751064577,32651805974003713,32651479555178496,32651586930999297,32651543984144385,32651166023155712,32651101599825920,32651526802112512,32651582635835393,32651496735178752,32651565454721025,32651397959057408,32651548275376129,32651604117422081,32651556864983041,32651801678184449,32651406542241792,32651552570146817,32651247627730944,32651741556310017,32651492441784320,32651810269495297,32651595521392641,32651518209949696,32651535389622273,32932984597905410,32932593755881474,32932722604900354,32932825684115458,32932765554573314,32932799914311682,32932808504246274,32932993187840002,32932847158951938,32932623820652546,32932842863984642,32932726899867650,32932988892872706,32932756964638722,32932636705554434,32932791324377090,32932834274050050,32932812799213570,32932761259606018,32932735489802242,32932769849540610,32932744079736834,32932911583461378,32932967418036226,32932881518690306,32932615230717954,32932580870979586,32932954533134338,32932782734442498,32932838569017346,32932963123068930,32932774144507906,32932641000521730,32932787029409794,32932855748886530,32932628115619842,32932602345816066,32932576576012290,32932997482807298,32932731194834946,32932585165946882,32933001777774594,32932589460914178,32932980302938114,32932739784769538,32932748374704130,32932976007970818,32932610935750658,32932829979082754,32932804209278978,32932778439475202,32932877223723010,32932795619344386,32932971713003522,32932598050848770,32932752669671426,32933431274504194,32932885813657602,32932872928755714,32932851453919234,32932619525685250,32932606640783362,32932817094180866,33214652845785089,33214648550555649,33214429507420160,33214386558074880,33214644265353217,33214584135745537,33214463867027456,33495908788338690,33495526536249346,33495900198404098,33495590960758786,33495921673240578,33495857248731138,33496114947162113,33495852953763842,33495560895987714,33495831478927362,33495917378273282,33495835773894658,33495586665791490,33495861543698434,33495913083305986,33495685450039298,33495535114584064,33495736978767872,33495904493371394,33495543716118530,33495938853109762,33495934558142466,33495943148077058,33495548006236160,33495732683538432,33495951738011650,33495947443044354,33495672565137410,33495895903436802,33777065935503362,33777306453671938,33777336518443010,33777388058050562,33777379468115970,33777160424783874,33777422417788930,33777010100928514,33777383763083266,33777211964391426,33777426712756226,33777370878181378,33777413827854338,33777018690863106,33777207669424130,33777327928508418,33777418122821634,33777396647985154,33777061640536066,33777409532887042,33777375173148674,33777001510993922,33777022985830402,33777332223475714,33777310748639234,33777392353017858,33777035870732290,33777147539881986,34058863036596226,34058686942937090,34058854446661634,34058871626530818,34058802907054082,34058781432217602,34058485079474178,34058476489539586,34058497964376066,34058901691301890,34058540914049026,34058785727184898,34058807202021378,34058897396334594,34058893101367298,34058536619081730,34058635403329538,34058510849277954,34058850151694338,34058888806400002,34058884511432706,34058811496988674,34058858741628930,34058682647969794,34058493669408770,34058622518427650,34058867331563522,34058845856727042,34340363782848514,34340286473437186,34340333718077442,34340329423110146,34340320833175554,34340282178469890,34340277883502594,34621808694853634,34621761441628160,34621838759624706,34621752860278786,34621757155246082,34622216717533185,34622027739037697,34621795809951746,34621804399886338,34903081797943296,34902909998137344,34903305136046080,34903107567091712,34902948651859968,34903098976763904,34903476935196673,34902922882252800,34903451163688961,34903442580176897,34903090388008960,34903640143560705,34902931472252928,34903489824620545,34903622975094785,34903094681665536,34903073207484416,34903116157878272,34902940063170560,34903129041207296,34903086091665408,34903111862321152,34903120453304320,34903670219538433,34903077502517248,34903459766206465,34903103270617088,34902927179186176,34903464061370369,34903124748140544,34903446869835777,34903455471304705,35184956218015745,35184784414015488,35184960507740161,35466624468320257,35466177791787008,35466152018051074,35747626995351554,35747682833334272,35747652765155330,36029127741734914,36029101971931138,36310658556624896,36592133533401088,36873638574948352,37154821481299970,37155092064239618,37155079179337730,37154757056790530,37155083474305026,37155053409533954,37154834366201858,37154769941692418,37154825776267266,37154812891365378,37154774236659714,37154782826594306,37155001869926402,37155031934697474,37154804301430786,37155044819599362,37154842956136450,37154817186332674,37155036229664770,37155087769272322,37155027639730178,37155019049795586,37154787121561602,37155100654174210,37155023344762882,37154800006463490,37154761351757826,37155006164893698,37155074884370434,37154765646725122,37154808596398082,37155070589403138,37154830071234562,37155061999468546,37154778531627010,37154838661169154,37155040524632066,37155057704501250,37154795711496194,37154791416528898,37155049114566658,37155014754828290,37436588528435200,37718136511791105,37718102150938625,37718119331856385,37718046315970560,37717668359634944,37718140805971969,37717797208522752,37718359850287105,37718080676954113,37717956123033600,37718072086691840,37718076382904320,37718106445774849,37718042022576128,37718145102184449,37718123627151361,37718149399642113,37718067790741504,37718115035512833,37718084970414081,37718355554795521,37718162289459201,37717711310422016,37718153694347265,37718110740611073,37718351258976257,37718029135970304,37718093564936193,37717685540552704,37718132216627201,37718063495643136,37717651180617728,37717715603947520,37718059201069056,37717960417673216,37718097856167937,37718127921463297,37717986188460032,37718037727019008,37999126157328384,37999602898173953,37999512703729664,37999826235686913,37999577127649281,37999190580658176,37999143336345600,37999461165170688,37999559947124737,37999186287132672,37999538472353792,37999516999286784,37999585717321729,37999160517263360,37999830531506177,37999504112680960,37999435394383872,37999272185233408,37999568541646849,37999547063402496,37999534177779712,37999598603862017,37999590012223489,37999620078895105,37999555653664769,37999572832878593,37999508417282048,37999594308567041,37999834826997761,37999521292681216,37999624376352769,37999581422485505,37999607193337857,37999628676431873,37999564251791361,37999542767452160,37999551359614976,37999611488501761,37999615782682625,37999431099744256,38281000560951298,38280991971016706,38280708503175170,38280901776703490,38280936136441858,38280695618273282,38280665553502210,38280953316311042,38280656963567618,38280721388077058,38280923251539970,38280678438404098,38280687028338690,38280987676049410,38280704208207874,38280983381082114,38280970496180226,38280742862913538,38280661258534914,38280712798142466,38280729978011650,38280931841474562,38280918956572674,38280940431409154,38280682733371394,38280674143436802,38280914661605378,38280944726376450,38280957611278338,38280961906245634,38280734272978946,38280691323305986,38280738567946242,38280949021343746,38280979086114818,38280725683044354,38280906071670786,38280974791147522,38280669848469506,38280717093109762,38280699913240578,38280927546507266,38562449772118018,38562406822445058,38562402527477762,38562475541921794,38562458362052610,38843933347545088,39125124844683266,39125331003113474,39125111959781378,39125373952786434,39125408312524802,39125154921578496,39125099074879490,39125146331512832,39125120549715970,39125150626938880,39125103369846786,39125416902459394,39125137741447168,39125343888015362,39125339593048066,39125399722590210,39125167806676992,39125107664814082,39125129151578112,39125163511644160,39125326708146178,39125094779912194,39125412607492098,39125378247753730,39125382554779648,39125365362851842,39125133446414336,39125142036938752,39125425492393986,39125116254748674,39125356772917250,39125159216611328,39125532879093761,39125369657819138,39125361067884546,39125386837688322,39125352477949954,39406827467309056,39406883301818368,39688276663664642,39688302433468418,39688358268043266,39688349678108674,39688306728435714,39688375447912450,39969893374820353,39969884784099329,39969906259460097,39970155368480769,39969841836261376,39969786002145280,39969871900377088,39969468173320192,39969859014754304,39969867604426752,39969876196589568,39969511124107264,39969515417632768,39969880490639361,39970159663972353,39969910564782081,39969837540704256,39969897669853185,39969597022208000,39969863309328384,39969760231358464,39969485354237952,39969828949655552,39969450994302976,39969846129655808,39970151072661505,39969901964623873,39969755936718848,40251071998918656,40251303926366208,40251359760809985,40250990394343424,40250960330948608,40251634640683009,40251368351531009,40251230913429504,40250986100817920,40251346877087744,40251338286039040,40251321106366464,40250925971013632,40251260978855936,40251372646563841,40251626049372161,40250943150030848,40251235208069120,40251333991464960,40251630345191425,40251351173300224,40251355467350017,40251312517414912,40251316812972032,40251385541558273,40251376941334529,40251342581137408,40251381236170753,40532834737520641,40533109617393665,40532813262749696,40532808968175616,40532830444060673,40532843328241665,40532821853798400,40532465371054080,40532400947724288,40532735955566592,40533101026082817,40532705890140160,40532435307659264,40532817557848064,40532461077528576,40532710184779776,40532791789682688,40532418126741504,40532546975629312,40532847623274497,40532856223367169,40532826150010880,40532796083077120,40533105321902081,40532851918045185,40532787494125568,40532778903076864,40814266766393344,40814271059787776,40813936054239232,40814283944886272,40814253879787520,40814318304952321,40814580298612737,40813875924434944,40814021952339968,40814301126721536,40814309714231297,40814288239460352,40813910284369920,40814180866850816,40814584594104321,40814210932277248,40814331200143361,40814185161490432,40813893103452160,40813940347764736,40814296830509056,40814262470836224,40814322599985153,40814576002793473,40814292534558720,40814326894755841,40814305420771329,41095496929050624,41095784690941953,41095793281662977,41095776103432192,41095368080162816,41096050979504129,41095758921596928,41095728856498176,41095685908987904,41095767511269376,41095797576695809,41095741743104000,41096055275323393,41095350901145600,41095771807219712,41095763216171008,41096059570814977,41095780397481985,41095415324475392,41095385261080576,41095746036498432,41095660138201088,41095737447546880,41095655843561472,41095801881952257,41095411030949888,41377135114911744,41377212424257536,41377276858728449,41377530252034049,41377534547525633,41377233898307584,41377203833208832,41377246783930368,41376890301186048,41377272553406465,41377525956214785,41376843056873472,41376886007660544,41376860237791232,41377255374192641,41377221013209088,41377160885698560,41377242487980032,41377268258373633,41377216719814656,41377238192881664,41377251080142848,41376971905761280,41377259667652609,41377130820272128,41376825877856256,41658717464690688,41658751835504641,41659009524236289,41658708875018240,41658726056853504,41658335214501888,41658365277896704,41658300854566912,41658635862409216,41659000932925441,41658721760641024,41658446882471936,41658695989919744,41658691696525312,41658747530117121,41658605796982784,41658610091622400,41658743235084289,41659005228744705,41658678809919488,41658318033584128,41658360984371200,41658730350903297,41658713169592320,41658734644363265,41658687400968192,41940110834270210,41939874611068930,41940166668845058,41940106539302914,41939861726167042,41939891790938114,41940128014139394,41939896085905410,41940132309106690,41939866021134338,41940102244335618,41939908970807298,41939878906036226,41940115129237506,41939870316101634,41940093654401026,41939853136232450,41939887495970818,41940123719172098,41940089359433730,41939848841265154,41940149488975874,41940080769499138,41939904675840002,41939900380872706,41940119424204802,41940076474531842,41939913265774594,41939844546297858,41939917560741890,41940158078910466,41940175258779650,41940162373877762,41940136604073986,41939883201003522,41939857431199746,42221585815830528,42221422601961472,42221697483538433,42221663123013632,42221731843997697,42221456961568768,42221285167923200,42221272276729856,42221877882650625,42221955182166017,42221658828439552,42221310937792512,42221761911848961,42221560045043712,42221718959226881,42221628763340800,42221701778309121,42221435486142464,42221289457647616,42221250807988224,42221667418112000,42221710367981569,42221267987005440,42221641649946624,42221315231318016,42221676010274816,42221826329673729,42221736139161601,42221465552355328,42221444076142592,42221791974653953,42221989538037761,42221448371240960,42221740433342465,42221839219097601,42221714662883329,42221478435684352,42221749027012609,42221684597784577,42221555750404096,42221461256798208,42221280866729984,42221645943341056,42221813449359361,42221452665094144,42221950886346753,42221637354389504,42221800558166017,42221276573663232,42221744729554945,42221680304324609,42221671714062336,42221796264312833,42221396835893248,42221723254521857,42221439782486016,42221259392614400,42221727548833793,42221474142617600,42221431192420352,42221469847781376,42221693192306689,42221753321717761,42221654530523136,42221706073145345,42221426896994304,42221959477657601,42503069377691650,42502841744424962,42502863219261442,42502820269588482,42503112327364610,42503039312920578,42502815974621186,42502828859523074,42503082262593538,42503108032397314,42503052197822466,42503030722985986,42502811679653890,42502850334359554,42502837449457666,42502824564555778,42503086557560834,42502794499784706,42503043607887874,42502798794752002,42503026428018690,42503116622331906,42502846039392258,42502867514228738,42503099442462722,42503056492789762,42502858924294146,42503073672658946,42502854629326850,42503077967626242,42503125212266498,42502833154490370,42502803089719298,42502807384686594,42503060787757058,42503065082724354,42784656026566657,42784643145728001,42784591603367936,42784741928075265,42784389735907328,42784385439563776,42784789172518913,42784634551205889,42784750511587329,42784608781860864,42784711865270273,42784222230151168,42784909431078913,42784595896762368,42784939491459073,42784402618515456,42784509998465024,42784668912648193,42784900839768065,42784381145841664,42784372555382784,42784230820151296,42784746217734145,42784415505776640,42784217940426752,42784424096038912,42784686092582913,42784630257745921,42784617371533312,42784505703825408,42784200761409536,42784578716762112,42784673207943169,42784651731730433,42784677502255105,42784604483944448,42784346789314560,42784763402780673,42784406914990080,42784613076434944,42784625963696128,42784698980433921,42784660321402881,42784398324662272,42784376850415616,42784265184739328,42784905135587329,42784827836137473,42784260891213824,42784664616304641,42784587307810816,42784776283095041,42784209346035712,42784419801202688,42784694682976257,42784681797419009,42784647436959745,42784226527084544,42784621667483648,42784690386763777,42784428389105664,42784235121344512,42784411210219520,42784394029563904,42784703275139073,42784535769251840,42784239411068928,43066015036211202,43066023626145794,43065976381505538,43065770223075330,43065778813009922,43066062280851458,43066002151309314,43065800287846402,43066075165753346,43066066575818754,43065808877780994,43066006446276610,43065795992879106,43066049395949570,43065993561374722,43065753043206146,43065787402944514,43065765928108034,43065744453271554,43065804582813698,43065817467715586,43065783107977218,43065813172748290,43066057985884162,43065774518042626,43066036511047682,43065791697911810,43065989266407426,43066019331178498,43065980676472834,43065748748238850,43066010741243906,43066032216080386,43065757338173442,43066027921113090,43065761633140738,43347631750840321,43347575917117440,43347485722673152,43347150714830848,43347541556789248,43347563029856256,43347601685151745,43347210844635136,43347296742735872,43347850793189377,43347580211167233,43347605979987969,43347459951886336,43347614569725953,43347185074765824,43347859384500225,43347167893848064,43347545850183680,43347610274824193,43347455657246720,43347537261232128,43347623161364481,43347571620904960,43347597390381057,43347593095348225,43347618866069505,43347567324954624,43347855089008641,43347627455676417,43347636055703553,43347558735282176,43347215138160640,43347584504627201,43347528670183424,43628827548647424,43628814666039296,43628664341200896,43628831845122048,43629166858207233,43628849026170880,43628810369695744,43628647160283136,43628806075973632,43628840435908608,43629029414076416,43628844731334656,43628818959695872,43629364421591041,43628853319237632,43628634276167680,43629252766400513,43628655750283264,43628651457216512,43629214102650881,43629188332912641,43629201213227009,43628823254794240,43628797485514752,43628836140351488,43629175441719297,43629171147866113,43628801780547584,43910525879713792,44192022320513025,44191983665414144,44192284314632193,44192018025480193,44191987959988224,44191610004897792,44191592823980032,44192009434759169,44191966486921216,44191640068292608,44191880587378688,44192000847249408,44191953600315392,44191962191364096,44191575644962816,44191721672867840,44192030910119937,44192026615283713,44192275723321345,44192048101130241,44191992255086592,44191635774767104,44192035204956161,44192043796201473,44191970780315648,44192039499857921,44191910652805120,44192280019140609,44191996551036928,44192005141299201,44191884882018304,44473437168074752,44473501591994369,44473518772912129,44473084981608448,44473750700032001,44473458642124800,44473527372873729,44473445757026304,44473385629515776,44473505886830593,44473050621673472,44473359858728960,44473467231797248,44473428577026048,44473110751477760,44473115045003264,44473523068207105,44473754995851265,44473196649578496,44473497297223681,44473475823960064,44473462936698880,44473514476568577,44473480118009857,44473471527747584,44473355564089344,44473067800690688,44473510181666817,44473493002190849,44473441463631872,44473484411469825,44473759291342849,44754860606226432,44754946504458240,44754976568705025,44754585728188416,44754916440342528,44754942208507904,44754933618835456,44754912144785408,44754955094720513,44755234268053505,44755229972561921,44754834835439616,44754830540800000,44754920733736960,44754937913409536,44754903553736704,44754985158377473,44754989464748033,44754542777401344,44754590021713920,44754671626289152,44754972273934337,44754559958319104,44754967978901505,44754980863541249,44754959388180481,44754950800670720,44755225676742657,44754525598384128,45036434364891137,45036704949272577,45036395710447616,45036387121496064,45036335582937088,45036430071431169,45036017754112000,45036305517510656,45036417185218560,45036412890120192,45036455840251905,45036060704899072,45036451545415681,45036447250644993,45036064998424576,45036709244764161,45036309812150272,45036421481168896,45036425777381376,45036391417053184,45036378530447360,45036464441524225,45036700653453313,45036408595546112,45036146602999808,45036442955612161,45036460135088129,45036034935029760,45036000575094784,45317930816962561,45318175630163969,45317870687158272,45317939418300417,45317900754092032,45317909341601793,45317492730822656,45317935111798785,45317810559647744,45317509911740416,45317905048141825,45317780494221312,45317853507158016,45317535681609728,45317475551805440,45317539975135232,45317926522126337,45317862098206720,45318184221474817,45318179925983233,45317922227355649,45317892161929216,45317883572256768,45317917932322817,45317887866830848,45317621579710464,45317784788860928,45317866393763840,45317896457879552,45599659198185473,45599654902693889,45598984888451072,45599414395076609,45599650606874625,45599337074917376,45599375730802688,45599405793673217,45599341370474496,45599014951845888,45599392909033473,45599410088509441,45599285536358400,45599358548967424,45599397204066305,45599328483868672,45599345663868928,45599259765571584,45599384318312449,45598967707533312,45599362843541504,45599367138639872,45598950528516096,45599380024852481,45599096556421120,45599371434590208,45599255470931968,45599401498836993,45599010658320384,45880734742282240,45880833525678080,45881129879404545,45880425505226752,45880816347185152,45880571533131776,45880485635031040,45880846411300864,45880872180776961,45880889360121857,45880855001563137,45880897951760385,45881134174896129,45880906551721985,45880842115350528,45880459865161728,45880902246072321,45880876475547649,45880442684243968,45880859295023105,45880850707513344,45880837820252160,45880803460579328,45880760513069056,45880867885744129,45880489928556544,45880885065220097,45880893656465409,45880812051628032,45880820640579584,45881125583585281,45880730447642624,45880880770383873,46162600560295937,46162308502388736,46162342862454785,46162046509842432,46162235489779712,46162321388011520,46162209718992896,46162347157487617,46162278437289984,46162360041930753,46162295617290240,46162329978273793,46162351452258305,46162368643596289,46162325684224000,46162287028338688,46161934841872384,46161960611741696,46162291323895808,46162364336832513,46162205424353280,46162312796962816,46162317092061184,46161900481937408,46162355747094529,46162334271733761,46161917660954624,46162609151606785,46162604856115201,46161964905267200,46443787773673472,46443835018641409,46443792068771840,46443830723805185,46443839313543169,46443822134198273,46443783479099392,46443409818583040,46443800660934656,46443826428968961,46443766300606464,46443710466490368,46443521486553088,46443684695703552,46443392637665280,46443843620372481,46444084128317441,46444075537006593,46443762005049344,46443435588452352,46443817839165441,46443680401063936,46443809248444417,46443804954984449,46443753414000640,46443770594000896,46443796364722176,46443439881977856,46444079832825857,46443375458648064,46724850435358720,46725348654383105,46725159672414208,46725236981760000,46725284225155073,46725262750384128,46725314290253825,46725331471368193,46725245570711552,46725550513717249,46725322881892353,46725352956887041,46725305700515841,46725279931695105,46725228390711296,46725267045482496,46725271341432832,46725258455810048,46724996463263744,46725301405679617,46725340060712961,46725241277317120,46724910565163008,46725297110908929,46725559105028097,46725344356925441,46725327176204289,46724914858688512,46725155377774592,46724884795293696,46725185443201024,46725292819677185,46724867614375936,46725554809536513,46725335766532097,46725318586597377,46725309995352065,46725275637645312,47006419896827906,47006454256566274,47006394127024130,47006407011926018,47006437076697090,47006651825061890,47006660414996482,47006630350225410,47006699069702146,47006711954604034,47006415601860610,47006677594865666,47006724839505922,47006626055258114,47006467141468162,47006707659636738,47006643235127298,47006664709963778,47006449961598978,47006428486762498,47006656120029186,47006462846500866,47006716249571330,47006424191795202,47006445666631682,47006673299898370,47006669004931074,47006686184800258,47006411306893314,47006398421991426,47006432781729794,47006402716958722,47006681889832962,47006638940160002,47006458551533570,47006441371664386,47288255653937153,47288109625835520,47288277129625601,47287834748715008,47288178344132608,47288212703805440,47288221294854144,47288264243675137,47288225591066624,47288234178576385,47287946416685056,47288208409231360,47288135396622336,47288242769297409,47288509058449409,47288105331195904,47288285719953409,47288216998903808,47288247064330241,47288195524132864,47288251359100929,47287860518584320,47287800388780032,47288229885116417,47288191230738432,47288281424789505,47288272835313665,47288504762957825,47288186935181312,47288290025472001,47288268540018689,47287864812109824,47288259948773377,47288500467138561,47287817567797248,47569722041040897,47569687680516096,47569717749809153,47569584602546176,47569610373332992,47569670500843520,47569726335811585,47569661911891968,47569700567777280,47569743516729345,47569339788820480,47569704861827073,47569760696664065,47569764990844929,47569309725425664,47569335495294976,47569696271564800,47569756401500161,47569979739668481,47569653320843264,47569984035160065,47569292544507904,47569691975614464,47569709155287041,47569769287057409,47569786477084673,47569734925484033,47569773584515073,47569752106336257,47569666207449088,47569275365490688,47569777879220225,47569683385942016,47569421393395712,47569580307906560,47569975443849217,47569739220385793,47569747812024321,47569730630647809,47851162662010882,47851149777108994,47851132597239810,47851119712337922,47851085352599554,47851081057632258,47851128302272514,48132813730938881,48132603274264576,48133019889238017,48132384243253248,48132289742241792,48132706354921473,48132723537936385,48132697765445633,48132929693089793,48132616160870400,48132680584069121,48132637633937408,48132611865313280,48132225318912000,48132641929035776,48132242497929216,48132671994462209,48132659108708353,48132702059757569,48132684878905345,48132654815248385,48132530261327872,48132714944266241,48132259678846976,48132598991749120,48132667703230465,48132693470150657,48132933988581377,48132435767721984,48132650521198592,48132689173807105,48132371346817024,48132534555967488,48132719240478721,48132925397270529,48132246795190272,48132633339363328,48132431472492544,48132710650085377,48132830920114177,48132646224986112,48132620454264832,48132285448716288,48132560336977920,48132676289232897,48132233903538176,48132727840833537,48414275817308161,48413743241428992,48414301596024833,48414245751947265,48413893563777024,48413730354364416,48413854908743680,48414314481319937,48413919335415808,48414331666759681,48413713175609344,48414241457700865,48413726061297664,48413867794563072,48414035300450304,48413884973776896,48413721764364288,48413859203252224,48413927923318784,48413872089595904,48414430433837057,48414104018157568,48414310191988737,48414082558590976,48413704584691712,48413751830052864,48414250045800449,48413906449203200,48413876384628736,48413738945282048,48413850613710848,48413889270120448,48414069667594240,48414288702406657,48413910744432640,48414237163061249,48414439025672193,48413880680054784,48413863499399168,48413897858875392,48414318776549377,48414434731425793,48413923630252032,48413708880248832,48414224287203329,48413915039989760,48414335955697665,48413902152728576,48414078257594368,48695557531566082,48695553240596480,48695544650596352,48695501696991234,48695505991958530,48976980968603650,48977028211015680,48977019621015552,48977285915410433,48977032508211202,49258507484856322,49258455945248770,49539930919075842,49539776300253186,49539643156267010,49539780595220482,49540003933519874,49539789185155074,49539797775089666,49539763415351298,49539806365024258,49539630271365122,49539621681430530,49539969573781506,49540012523454466,49539926624108546,49539608796528642,49539638861299714,49539759120384002,49539999638552578,49539754825416706,49539793480122370,49539823544893442,49539935214043138,49539827839860738,49539750530449410,49539613091495938,49539772005285890,49539784890187778,49539814954958850,49539767710318594,49539810659991554,49539651746201602,49539802070056962,49539978163716098,49539819249926146,49539982458683394,49539625976397826,49539604501561346,49821487498854402,49821474613952514,49821457434083330,49821405894475778,49821410189443074,49821453139116034,49821444549181442,50102932419248128,50384351561515008,50384407396024320,50665882367754242,50665826538291200,50947353048907778,50947271444529154,50947198430085122,50947018041458690,50947134005575682,50946987976687618,50947000861589506,50947022336425986,50947129710608386,50947172660281346,50947155480412162,50947176955248642,50947344458973186,50947138300542978,50947194135117826,50947142595510274,50947378818711554,50946983681720322,50947159775379458,50947301509300226,50947168365314050,50946979386753026,50947146890477570,50947164070346754,50947005156556802,50947189840150530,50947331574071298,50947181250215938,50947357343875074,50947026631393282,50947151185444866,50947013746491394,50947305804267522,50946996566622210,50947185545183234,50947374523744258,50947125415641090,50947202725052418,51228776487059458,51228832321634306,51510556411297793,51510337353220096,51510522036748289,51510251463704578,51510294411411456,51510260044267520,51510560699514881,51510307298279426,51510526346461185,51510517756657665,51510303008096256,51791726440153090,51791782274727938,52073265839996930,52073184235618306,52073287314833410,52073656688705537,52073669563187201,52073295904768002,52072883577487360,52073463404888065,52073283019866114,52073300199735298,52072935127515138,52073179940651010,52072892177842178,52072939422482434,52072874997972994,52073081146441728,52073261545029634,52072909357711362,52073270134964226,52073210005422082,52072896469139456,52073021026861058,52073480595111937,52073252955095042,52073291609800706,52073085441671168,52354392924225538,52354573312851970,52354500298407938,52354530363179010,52354577607819266,52354534658146306,52354362859454466,52354388629258242,52354504593375234,52354556132982786,52354560427950082,52354371449389058,52354676392067074,52354551838015490,52354401514160130,52354375744356354,52354358564487170,52354354269519874,52354543248080898,52354749406511106,52354517478277122,52354680687034370,52354513183309826,52354727931674626,52354397219192834,52354706456838146,52354526068211714,52354547543048194,52354719341740034,52354538953113602,52354569017884674,52354646327296002,52354508888342530,52354732226641922,52354753701478402,52354564722917378,52354380039323650,52354521773244418,52636241554046978,52636129884897282,52635885071761410,52636245849014274,52636232964112386,52635842122088450,52636237259079682,52636215784243202,52635889366728706,52635970971107330,52635824942219266,52636250143981570,52636211489275906,52636134179864578,52636198620364800,52636220079210498,52635859301957634,52636202899341314,52636159949668354,52917716533116928,52917798142017537,52917673597206528,52917677878345728,52917334282928128,52917763777888257,52918004297170945,52917776663838721,52917789548347393,52917750893314049,52917364346322944,52917802446159873,52917458848972800,52918000001351681,52917785254166529,52917772369526785,52917729419329537,52917695058345984,52917780959002625,52917720829067264,52917609160048640,52917746598543361,52917604865409024,52917793844559873,52918008592662529,52917733712789505,52917712238018560,52917634942566400,52917725125279744,52917707943444480,52917317102010368,52917360052797440,52917690764951552,52917759482986497,52917755188150273,52917299922993152,52917445950898176,52917742307311617,52917686469394432,52917768074231809,53199148574113792,53480400205185026,53480606363615234,53480279946100738,53480443154857986,53480417385054210,53480460334727170,53480473219629058,53480576298844162,53480408795119618,53480451744792578,53480271356166146,53480425974988802,53480275651133442,53480464629694466,53480258471264258,53480627838451714,53480288536035330,53480456039759874,53480447449825282,53480477514596354,53480297125969922,53480653608255490,53480404500152322,53480438859890690,53480632133419010,53480434564923394,53480413090086914,53480546234073090,53480301420937218,53480292831002626,53480619248517122,53480254176296962,53480421680021506,53480580593811458,53480262766231554,53480649313288194,53480468924661762,53480430269956098,53761888072433666,53762141475504130,53761918137204738,53762128590602242,53761956791910402,53761763518382082,53762059871125506,53761965381844994,53761991151648770,53761986856681474,53761746338512898,53761939612041218,53761870892564482,53761999741583362,53761961086877698,53761948201975810,53762025511387138,53761789288185858,53762150065438722,53762102820798466,53761754928447490,53761931022106626,53761909547270146,53762115705700354,53761883777466370,53762029806354434,53761767813349378,53761776403283970,53761995446616066,53761759223414786,53761943907008514,53761742043545602,53761900957335554,53762111410733058,53762004036550658,53761724863676418,53762124295634946,53762553794134017,53761905252302850,53761926727139330,53762021216419842,53762137180536834,53761973971779586,53761935317073922,53761952496943106,53761875187531778,53761733453611010,53761772108316674,53762034101321730,53762120000667650,53761737748578306,53761784993218562,53762145770471426,53761896662368258,53761913842237442,53761922432172034,53761978266746882,53761879482499074,53761982561714178,53761729158643714,53762132885569538,53761892367400962,53761750633480194,54043599259041792,54043534834663424,54043796827144193,54043792541941761,54043732402765825,54043612143616000,54043801122373633,54043728108126209,54043577784008704,54324687703965698,54324880977494018,54324838027821058,54324902452330498,54324696293900290,54324683408998402,54324679114031106,54324876682526722,54324868092592130,54324898157363202,54324893862395906,54324722063704066,54324829437886466,54324859502657538,54325529517555714,54324885272461314,54324842322788354,54325078545989634,54324872387559426,54324850912722946,54324704883834882,54324700588867586,54324855207690242,54324825142919170,54324833732853762,54324846617755650,54324726358671362,54324713473769474,54324863797624834,54324717768736770,54324889567428610,54606313004466178,54606158385643522,54606308709498882,54606446148452354,54606553522634754,54606171270545410,54606343069237250,54606355954139138,54606317299433474,54606347364204546,54606325889368066,54606334479302658,54606351659171842,54606175565512706,54606197040349186,54606304414531586,54606377428975618,54606338774269954,54606300119564290,54606330184335362,54606368839041026,54606360249106434,54606321594400770,54606373134008322,54606154090676226,54606162680610818,54606188450414594,54606364544073730,54606201335316482,54606192745381890,54606179860480002,54887951177940994,54888024192385026,55169400393367554,55169499177615362,55169426163171330,55451017097707521,55450982733840384,55451008503185409,55450969848741888,55451399359758337,55450991323512832,55450720741294080,55451021388939265,55450634843193344,55450952668741632,55451279087566849,55451029978546177,55451214676361217,55450944093159424,55451042864627713,55451038568284161,55451055749398529,55451077230985217,55451300575641601,55450591892406272,55451025683709953,55450999915675648,55451047159922689,55451218971000833,55451317755183105,55450965555347456,55451274791747585,55450896848322560,55451034273382401,55451064338743297,55450871072620544,55451060044562433,55451068634955777,55451051454234625,55450987028414464,55451004209725441,55450909721231360,55450609073324032,55451072932413441,55451322050412545,55450574713389056,55451283383058433,55450995619463168,55450883950444544,55450879655804928,55450639136718848,55450961259790336,55732449122385922,55732376107941890,56013924099162114,56013851084718082,56013881150275584,56295416261574658,56295381901836290,56295145678635010,56295008239681538,56295411966607362,56295210103144450,56295059779289090,56295369016934402,56295394786738178,56295330362228738,56295034009485314,56295424851509250,56295205808177154,56295304592424962,56295016829616130,56295407671640066,56295420556541954,56295386196803586,56295064074256386,56295373311901698,56295334657196034,56295390491770882,56295308887392258,56295021124583426,56295158563536898,56295326067261442,56294999649746946,56295377606868994,56576852583448578,56576886943186946,56576801043841026,56576856878415874,56576805338808322,56576843993513986,56858331855060994,56858327560093698,56858318970159106,56858276020486146,56858361919832066,56858280315453442,57139463223312384,57139471812001792,57139987221512193,57140163303702529,57139725224116226,57139974323830785,57140146135236609,57139965740318721,57139604958085120,57139626430758912,57139609251807232,57139596367626240,57139647908282368,57139635022462976,57139630727233536,57139643613446144,57139454632394752,57140000095338497,57139982932312065,57139828296187904,57139600662659072,57139970029977601,57139433158279168,57139446042394624,57139613548150784,57139639318020096,57140012984762369,57139617841807360,57139622136905728,57139652201349120,57139450339328000,57420938207690754,57421303279910914,57420946797625346,57421084236578818,57421110006382594,57421118596317186,57420921027821570,57421200200695810,57420925322788866,57421088531546114,57420929617756162,57421079941611522,57421114301349890,57421122891284482,57421105711415298,57421075646644226,57421127186251778,57421092826513410,57420908142919682,57421097121480706,57421071351676930,57421101416448002,57702675187761152,57984150154051586,57984064254705666,57984025600000002,57984038484901890,57984077139607554,57984042779869186,57983858096275458,57983888161046530,57984021305032706,57984034189934594,57984051369803778,57983879571111938,57983875276144642,57984059959738370,57983870981177346,57983896750981122,57984055664771074,57984029894967298,57984068549672962,57984072844640258,57984047074836482,57984253233266690,58265921477804033,58265891429351425,58265736794275840,58265659485323264,58265925773033473,58265895724449793,58266088997781505,58265702434668544,58265655206215680,58265917199024129,58265723914813442,58547576859656193,58547100108521474,58547125888155648,58828575095128064,59110050061811714,59110333539745793,59110157434421248,59391615229296640,59391701128183809,59391649589624832,59391688242233345,59391722604003329,59391739797045249,59391284517142528,59391258747273216,59391714012692481,59391370415243264,59391559395180544,59391533624393728,59391705423347713,59391658177134593,59391933057007617,59391683947331585,59391632407789568,59391675357659137,59391671062888449,59391619522691072,59391529329754112,59391692538576897,59391653883674625,59391640997462016,59391645293412352,59391610933739520,59391288810668032,59391709718511617,59391241566355456,59391696833871873,59391666767855617,59391224387338240,59391928761516033,59391636702363648,59391718308904961,59391679652495361,59391602342690816,59391924465696769,59672884052230146,59672927001903106,59672853987459074,59672720843472898,59672725138440194,59672901232099330,59672707958571010,59672858282426370,59672905527066626,59672892642164738,59672703663603714,59672742318309378,59672896937132034,59673034376085506,59673068735823874,59672849692491778,59673111685496834,59672862577393666,59672750908243970,59672922706935810,59672879757262850,59672738023342082,59672866872360962,59673103095562242,59672871167328258,59672909822033922,59673025786150914,59673081620725762,59672888347197442,59673077325758466,59672729433407490,59672712253538306,59672875462295554,59673098800594946,59672914117001218,59672918411968514,59954182935347202,59954328964235266,59954337554169858,59954200115216386,59954363323973634,59954359029006338,59954371913908226,59954578072338434,59954380503842818,59954324669267970,59954346144104450,59954376208875522,59954195820249090,59954384798810114,59954393388744706,59954354734039042,59954225885020162,59954389093777410,59954187230314498,59954509352861698,59954333259202562,59954586662273026,59954204410183682,59954543712600066,59954367618940930,59954556597501954,59954217295085570,59954397683712002,59954178640379906,59954401978679298,59954552302534658,59954350439071746,59954573777371138,59954341849137154,59954213000118274,59954500762927106,60235975729807362,60235718031769602,60235992909676546,60235713736802306,60235980024774658,60235988614709250,60235971434840066,60235954254970882,60235967139872770,60235726621704194,60236022974447618,60236031564382210,60236048744251394,60235765276409858,60235773866344450,60235748096540674,60235769571377154,60235735211638786,60235756686475266,60236010089545730,60236040154316802,60235949960003586,60236018679480322,60235743801573378,60236001499611138,60235791046213634,60235997204643842,60235709441835010,60236027269414914,60235984319741954,60235739506606082,60235778161311746,60235752391507970,60235760981442562,60236005794578434,60235962844905474,60235786751246338,60235730916671490,60235705146867714,60235722326736898,60236035859349506,60235782456279042,60517476476387330,60517424936779778,60517253138087938,60517193008545794,60517442116648962,60517201598480386,60517214483382274,60517248843120642,60517437821681666,60517231663251458,60517184418611202,60517515131092994,60517205893447682,60517485066321922,60517257433055234,60517210188414978,60517218778349570,60517197303513090,60517188713578498,60517450706583554,60517240253186050,60517506541158402,60517261728022530,60517223073316866,60517523721027586,60517480771354626,60517510836125698,60517244548153346,60517235958218754,60517429231747074,60517463591485442,60517266022989826,60517472181420034,60517497951223810,60517446411616258,60517502246191106,60517467886452738,60517455001550850,60517459296518146,60517227368284162,60517180123643906,60517493656256514,60798972946743296,60798925697318912,61080400678944768,61080456513454080,61361660888154114,61361909996257282,61361630823383042,61361875636518914,61361867046584322,61361940061028354,61361871341551618,61361605053579266,61361922881159170,61361892816388098,61361669478088706,61361648003252226,61361888521420802,61361665183121410,61361854161682434,61361879931486210,61361905701289986,61361682362990594,61361673773056002,61361613643513858,61361862751617026,61361884226453506,61361656593186818,61361635118350338,61361918586191874,61361686657957890,61361897111355394,61361931471093762,61361935766061058,61361901406322690,61361690952925186,61361643708284930,61361626528415746,61361609348546562,61361948650962946,61361639413317634,61361678068023298,61361622233448450,61361652298219522,61361927176126466,61361617938481154,61361849866715138,61643350613819394,61643406448394242,61924911492759552,61924915787857920,61924808414789632,61924945853284353,61924499177734144,61924516356751360,61924533537669120,61924645205639168,61924920083808256,61924559307538432,61924885724135424,61924924380020736,61924950163259393,61924877133086720,61924894313086976,61924941558251521,61925207847403521,61924890019692544,61924834185576448,61924795544371200,61925203551911937,61925199256092673,61924907198185472,61924928674070529,61924804120150016,61924563601063936,61924932967530497,62206360700125186,62206120181956610,62206352110190594,62206382174961666,62206283390713858,62206008512806914,62206390764896258,62206309160517634,62206364995092482,62205974153068546,62206395059863554,62206369290059778,62205991332937730,62206399354830850,62206034282610690,62206038577577986,62206386469928962,62206279095746562,62487758367490050,62487483489583106,62487754072522754,62487449129844738,62487595158732802,62487874331607042,62487827086966786,62487839971868674,62487509259386882,62487870036639746,62487784137293826,62487861446705154,62487857151737858,62487865741672450,62487844266835970,62487466309713922,62487835676901378,62487513554354178,62769314948448258,62769349308186626,62769345013219330,62769310653480962,62769229049102338,62768958466162690,62769340718252034,62768988530933762,62769336423284738,62769233344069634,62768941286293506,62769259113873410,62768924106424322,62769302063546370,62768984235966466,62769332128317442,62769319243415554,62769070135312386,63050545112285186,63050734090846210,63050463507906562,63050433443135490,63050777040519170,63050811400257538,63050794220388354,63050789925421058,63050708321042434,63050785630453762,63050824285159426,63050807105290242,63050815695224834,63050704026075138,63050416263266306,63050459212939266,63050819990192130,63050399083397122,63332179002458114,63332286376640514,63332299261542402,63331908419518466,63332020088668162,63331934189322242,63332183297425410,63332269196771330,63332282081673218,63331938484289538,63332290671607810,63332209067229186,63332252016902146,63332294966575106,63331891239649282,63331874059780098,63332264901804034,63332260606836738,63613495065837570,63613383396687874,63613744173940738,63613769943744514,63613774238711810,63613761353809922,63613765648777218,63613757058842626,63613739878973442,63613735584006146,63613366216818690,63613658274594818,63613413461458946,63613684044398594,63613409166491650,63613653979627522,63613349036949506,63613726994071554,63895210560782338,63895201970847746,63895219150716930,63894841193594882,63895244920520706,63895128956403714,63894888438235138,63894970042613762,63895232035618818,63895236330586114,63894824013725698,63895214855749634,63895249215488002,63894884143267842,63894858373464066,63895159021174786,63895133251371010,63895240625553410,64176608228147202,64176603933179906,64176715602329602,64176689832525826,64176676947623938,64176445019389954,64176707012395010,64176685537558530,64176711307362306,64176363415011330,64176724192264194,64176298990501890,64176333350240258,64176633997950978,64176719897296898,64176316170371074,64176694127493122,64176359120044034,64458151924400130,64458169104269314,64457834096820226,64457838391787522,64458190579105794,64458083204923394,64458164809302018,64458181989171202,64458194874073090,64457773967278082,64457919996166146,64458199169040386,64457808327016450,64458186284138498,64457791147147266,64458160514334722,64458078909956098,64458108974727170,64739639785619458,64739665555423234,64739283303333890,64739644080586754,64739313368104962,64739583951044610,64739309073137666,64739661260455938,64739266123464706,64739656965488642,64739669850390530,64739558181240834,64739635490652162,64739248943595522,64739674145357826,64739626900717570,64739553886273538,64739394972483586,65021144827232258,65020784049979394,65021033158082562,65020788344946690,65021028863115266,65021140532264962,65021101877559298,65021119057428482,65021149122199554,65020741100306434,65020869949325314,65021058927886338,65021136237297666,65021114762461186,65020723920437250,65020758280175618,65021110467493890,65021131942330370,65302641282580481,65302503840677888,65302344926167040,65302658458255361,65302898976620545,65302679934271489,65302692819828737,65302611213287424,65302263321591808,65302654163419137,65302533906104320,65302259028066304,65302684229435393,65302671344795649,65302701423460353,65302594033614848,65302576853614592,65302697117286401,65302628394598401,65302903272439809,65302619804336128,65302198898262016,65302667049500673,65302233258196992,65302688523616257,65302645573812225,65302662753157121,65302632688058369,65302675639107585,65302649868582913,65302907567931393,65302624100548608,65302606918713344,65302585444663296,65302216077279232,65302508135317504,65302589740220416,65302615508385792,65584056120836098,65583991696326658,65583776947961858,65583789832863746,65583764063059970,65583781242929154,65583811307700226,65584051825868802,65584043235934210,65583768358027266,65583751178158082,65583738293256194,65584008876195842,65584060415803394,65584047530901506,65584013171163138,65584004581228546,65583755473125378,65583987401359362,65583978811424770,65583815602667522,65583802717765634,65583759768092674,65584017466130434,65583772652994562,65583746883190786,65584064710770690,65584034645999618,65583798422798338,65583995991293954,65583742588223490,65583729703321602,65584030351032322,65584000286261250,65583974516457474,65584026056065026,65584073300705282,65583807012732930,65584021761097730,65583785537896450,65583794127831042,65583733998288898,65865543987036160,65865853225861121,65865208981487616,65865634182856705,65865561166708736,65865629887692801,65865294879588352,65865453794099200,65865595527233537,65865483859525632,65865539693641728,65865604116840449,65865591236001793,65865599822004225,65865582641479681,65865647070707713,65865526807035904,65865166030700544,65865183211618304,65865458088738816,65865608411676673,65865612706578433,65865625592528897,65865569757757440,65865535398084608,65865148851683328,65865617002921985,65865556872134656,65865638477037569,65865574053969920,65865642773250049,65865565461807104,65865213275013120,65865578348019713,65865651376947201,65865857521352705,65865621298216961,65865848930041857,66146714019692546,66146984602632194,66146928768057346,66146950242893826,66146954537861122,66146709724725250,66146705429757954,66146924473090050,66147010378530816,66146718314659842,66147006077468674,66146937357991938,66146971717730306,66146722609627138,66147023257337858,66146941652959234,66146976012697602,66146997487534082,66146692544856066,66146701134790658,66147014673432576,66146696839823362,66428184701370370,66428425219538946,66428403744702466,66428446694375426,66428167521501186,66428459579277314,66428429514506242,66428188996337666,66428489650143232,66428472464179202,66428193291304962,66428481054113794,66428412334637058,66428176111435778,66428180406403074,66428416629604354,66428485355241472,66428399449735170,66428171816468482,66428197586272258,66428450989342722,66428498233982978,66709934555856898,66709960325660674,66709659677949954,66709878721282050,66709947440758786,66709642498080770,66709672562851842,66709646793048066,66709908792541184,66709663972917250,66709655382982658,66709651088015362,66709887311216642,66709921670955010,66709913087377408,66709668267884546,66709964620627970,66709925965922306,66709956030693378,66709917382410240,66709973210562562,66709891606183938,66709904491085826,66709900196118530,66709874426314754,66991448187207682,66991143244529666,66991400942567426,66991362287861762,66991439597273090,66991349402959874,66991134654595074,66991147539496962,66991431007338498,66991388064088064,66991366582829058,66991353697927170,66991138949562370,66991422417403906,66991435302305794,66991121769693186,66991379467730946,66991117474725890,66991392359120896,66991396647600130,66991130359627778,66991409532502018,66991383769251840,66991126064660482,66991375172763650,67272910278819842,67272828674441218,67272596746207234,67272609631109122,67272905983852546,67272858739212290,67272867329146882,67272854444244994,67272592451239938,67272837264375810,67272824379473922,67272875919081474,67272622516011010,67272923163721730,67272884509016066,67272605336141826,67272618221043714,67272897393917954,67272601041174530,67272841559343106,67272871624114178,67272613926076418,67272863034179586,67272850149277698,67272914573787138,67554088902852610,67554389550563330,67554385255596034,67554084607885314,67554380960628738,67554316536119298,67554067428016130,67554350895857666,67554097492787202,67554342305923074,67554071722983426,67554338010955778,67554312241152002,67554076017950722,67554299356250114,67554080312918018,67554303651217410,67554359485792258,67554398140497922,67554329421021186,67554325126053890,67554372370694146,67554333715988482,67554346600890370,67554093197819906,67835572469366786,67835817282502658,67835864527142914,67835825872437250,67835774332829698,67835550994530306,67835855937208322,67835555289497602,67835559584464898,67835860232175618,67835800102633474,67835546699563010,67835847347273730,67835834462371842,67835873117077506,67835808692568066,67835821577469954,67835812987535362,67835791512698882,67835804397600770,67835778627796994,67835542404595714,67835568174399490,67835563879432194,67835787217731586,68117330931613696,68398805908389888,68680225034338306,68679997401071618,68679993106104322,68680199264534530,68680229329305602,68680259394076674,68680298048782338,68680212155662336,68680280868913154,68680272278978562,68961755861876736,69243230838652928,69524649964077058,69524684323815426,69524418035843074,69524722978521090,69524654259044354,69524697208717314,69524413747625984,69524409452593152,69524624194273282,69524628489240578,69524637079175170,69524641374142466,69524705798651906,69524422330810370,69806180775493634,69806099171115010,69806112056016898,69806172185559042,69806103472177152,69805893012684802,69806159300657154,69806129235886082,69806197955362818,69805897307652098,69806116350984194,69806124940918786,70087363693903874,70087359398936578,70087672931549186,70087599917105154,70087587032203266,70087604212072450,70087372283838466,70087647161745410,70087655751680002,70087625686908930,70087578442268674,70087342224769024,70087634276843522,70087574147301378,70087621391941634,70087350809001986,70087367988871170,70087346519670784,70087355103969282,70087591327170562,70369122138390530,70369109253488642,70369130728325122,70368830080614402,70369066303815682,70369100663554050,70369079188717570,70369074893750274,70369049123946498,70368817201479680,70368821496381440,70368825785647106,70368847260483586,70369147908194306,70369062008848386,70368842965516290,70368834375581698,70369096368586754,70368838670548994,70369053418913794,70650622885036034,70650309352423426,70650292178190336,70650605705166850,70650554165559298,70650549870592002,70650536985690114,70650575640395778,70650317942358018,70650528395755522,70650584230330370,70650313647390722,70650322237325314,70650305057456130,70650300762488834,70650571345428482,70650597115232258,70650296473092096,70650524100788226,70650541280657410,70931771449802752,70931797213839362,70932072091746306,70932046321942530,70932050616909826,70931780033970178,70931999077302274,70931784328937474,70932011962204162,70932059206844418,70932097861550082,70931792918872066,70931767154900992,70932003372269570,70932080681680898,70931788623904770,70931775739002882,70932024847106050,70932029142073346,70932016257171458,71213486939701250,71213547069243394,71213555659177986,71213267896369154,71213499824603138,71213572839047170,71213534184341506,71213504119570434,71213491240697856,71213272191336450,71213474054799362,71494949031051266,71494953326018562,71494961915953154,71495009160593410,71494738577653762,71495047815299074,71494729994403840,71494742872621058,71495022045495298,71494725699305472,71494747167588354,71495000577277952,71494974800855042,71494979095822338,71494966210920450,71494996282441728,71494734282686466,71495030635429890,71776209259462658,71776522792075266,71776217849397250,71776475553988608,71776454072598530,71776484137369602,71776436892729346,71776505612206082,71776441187696642,71776204971114496,71776222144364546,71776200676016128,71776471259152384,71776497022271490,71776449777631234,71776424007827458,71776213554429954,71776428302794754,72057924771250176,72339434091446274,72339472746151938,72339167808978944,72339446976348162,72339172098441218,72339455566282754,72339373961904130,72339404026675202,72339399731707906,72620874719166464,72620879019704320,72902431298813954,72902031854075904,72902401234042882,72902414118944770,72902822147981313,72902448478683138,72902444183715842,72902418413912066,72902435593781250,72902057636659202,72902358284369922,72902044745728000,72902087701430274,72902817839775745,72902023276920834,72902332514566146,72902083406462978,72902328219598850,72902229423030272,72902233718259712,72902439888748546,72902169305808898,72902611681476609,72902628874387457,72902409823977474,72902040456790018,73183876199219202,73183893379088386,73183871922995200,73183803184775170,73183906263990274,73183558371639298,73183562666606594,73183498242097154,73183807479742466,73183884789153794,73183923443859458,73183914853924866,73183889084121090,73183644270985218,73183919148892162,73183515421966338,73183910558957570,73183532601835522,73183833249546242,73465355482300418,73465342597398530,73465351187333122,73465299647725570,73465303942692866,73746821876482048,74027983313502210,74028726350053377,74027940363829250,74027957543698434,74028339795787778,74028228126638082,74028344090755074,74028335500820482,74028258191409154,74028232421605378,74028318320951298,74028301141082114,74028296846114818,74028331205853186,74028314025984002,74028069212848130,74028309731016706,74027923183960066,74027987608469506,74028348385722370,74028082104893440,74309780413808642,74309724579233794,74309728874201090,74309776118841346,74309767528906754,74591255396745216,74872730373521408,75154218218487808,75154325609512961,75154235398160384,75154213925093376,75154411495161857,75154278348292097,75153831667761152,75153844559413248,75154295529668609,75154033531944960,75154617653460993,75154231103586304,75154201038487552,75154312708489217,75154265467453441,75154158105722880,75153857443069952,75153969111040000,75154196760363008,75153840262152192,75154286938030081,75154243989209088,75154299823980545,75154256872931329,75154291234373633,75153887506464768,75154321302159361,75154029236715520,75153883212939264,75154269758685185,75154239693258752,75154317004701697,75153982012194816,75154428688859137,75154531752804353,75154248285421568,75153823083134976,75154132320190464,75154128025550848,75154308414308353,75154304119144449,75154274053455873,75154523161493505,75154282643128321,75154527457312769,75154252579471361,75154209629536256,75435328118587392,75435873581531137,75435469853818880,75435495623098368,75435319528587264,75435680327401472,75435912245542913,75435843516170241,75435461263622144,75435478444277760,75435323825520640,75435487034343424,75435907960602625,75435341005651968,75435349594275840,75435504213426176,75435508508655616,75436028198060033,75435822051426305,75435474148851712,75435491328000000,75435847810023425,75435834927284225,75435456967475200,75435517099638784,75435452672966656,75435916540772353,75435701782380544,75436036789895169,75435310939832320,75436032495648769,75435499916951552,75435512804212736,75435521394475008,75435302348914688,75435482737999872,75435886466629633,75435465558786048,75435306644471808,75435336709505024,75435448377933824,75435839221923841,75435525687541760,75717142414819328,75717151004819456,75717099461279746,75717155295854594,75717103756247042,75998574436417538,75998269493739522,75998256608837634,75998458472300546,75998411227660290,75998467062235138,75998462767267842,75998454177333250,75998252313870338,75998544371646466,75998630270992386,75998278083674114,75998441292431362,75998398342758402,75998617386090498,75998578731384834,75998475652169730,75998419817594882,75998604501188610,75998449882365954,75998286673608706,75998647450861570,75998260903804930,75998406932692994,75998290968576002,75998273788706818,75998445587398658,75998625976025090,75998295263543298,75998424112562178,75998415522627586,75998428407529474,75998402637725698,75998471357202434,75998299558510594,75998436997464066,75998432702496770,75998651745828866,76279911974240258,76279920564174850,76279770240319490,76279735880581122,76280126722605058,76279765945352194,76279903384305666,76279748765483010,76279877614501890,76279899089338370,76279929154109442,76279933449076738,76279916269207554,76279942039011330,76279881909469186,76280049413193730,76279937744044034,76279774535286786,76279924859142146,76280019348422658,76279761650384898,76280105247768578,76279894794371074,76280053708161026,76279744470515714,76279907679272962,76280092362866690,76280079477964802,76279873319534594,76279886204436482,76279727290646530,76280100952801282,76279731585613826,76279946333978626,76280122427637762,76279890499403778,76279950628945922,76279753060450306,76561610299080704,76842677232467968,76842870506651648,76843403081613313,76843076665933824,76842827556519936,76842879096979456,76843218399723521,76842883392208896,76842724477829120,76843222693576705,76842681528025088,76842715889205248,76843196934979585,76842685823385600,76842857621553152,76842698709073920,76843261350182913,76842694412140544,76842840442339328,76843407379202049,76842836147175424,76842823261487104,76843291434352641,76842831851028480,76842887687766016,76842900571095040,76842866211553280,76843209810837505,76842703002140672,76842891983192064,76842849032404992,76842861917896704,76843248465084417,76843411673448449,76842711593058304,76842853327831040,76842896278028288,76842844737372160,76843214105477121,76842874800504832,76842965016772608,77124693376434177,77124152209178624,77124362664476672,77124177978851328,77124766401036289,77124328304541696,77124354073690112,77124199454539776,77124689082187777,77124757816475649,77124358368919552,77124740626579457,77124886650159105,77124375547805696,77124186569768960,77124736326893569,77124783580184577,77124530183077888,77124332598263808,77124324009115648,77124345483362304,77124190865915904,77124160800096256,77124697670287361,77124311123886080,77124744917417985,77124319714082816,77124349777215488,77124671911690241,77124336894607360,77124306827739136,77124173685784576,77124684787548161,77124779291246593,77124156504735744,77124551642644480,77124525888765952,77124482924937216,77124169388851200,77124762105806849,77124517292081152,77124315419049984,77124749227130881,77124371254738944,77124723441795073,77124298238197760,77124882355912705,77124560233889792,77124302533230592,77124878058323969,77124341188263936,77124366959902720,77406258563186689,77405992268791808,77406005155987458,77406219898322945,77406035210600448,77406000865476608,77405949321412610,77687480132304898,77687424297730050,77968955108950018,77968899274375170,78250477323288577,78250541748518913,78250756496621569,78250473029238784,78250752201129985,78250442962305024,78250520273485825,78250460141977600,78250481616748545,78250498797273089,78250082186887168,78250352769368064,78250533158125569,78250455847403520,78250747905310721,78250490211270657,78250507386945537,78250065005969408,78250047826952192,78250425782304768,78250193854857216,78250528862961665,78250464437075968,78250468733026304,78250515978190849,78250537452306433,78250434373353472,78250494502502401,78250357064007680,78250382834794496,78250438668910592,78250107956756480,78250503092109313,78250511681847297,78250524567797761,78250550353854465,78250112250281984,78250546045976577,78531857816289282,78531582938382338,78531909355896834,78531939420667906,78531913650864130,78531917945831426,78531827751518210,78531948010602498,78531943715635202,78531668837728258,78531832046485506,78531587233349634,78531522808840194,78531900765962242,78531539988709378,78531930830733314,78531557168578562,78531935125700610,78813375742541826,78813328497901570,78813195353915394,78813367152607234,78813208238817282,78813036440125442,78813178174046210,78813045030060034,78813397217378306,78813027850190850,78813203943849986,78813324202934274,78813040735092738,78813006375354370,78813221123719170,78813002080387074,78813212533784578,78813294138163202,78813199648882690,78813169584111618,78813401512345602,78813173879078914,78813160994177026,78813354267705346,78813156699209730,78813380037509122,78813216828751874,78813049325027330,78813152404242434,78813019260256258,78813165289144322,78813182469013506,78813225418686466,78813010670321666,78813191058948098,78813186763980802,78813148109275138,78813023555223554,79094846435033088,79375977804070914,79376171077599234,79375973509103618,79376274156814338,79376145307795458,79375952034267138,79376329991389186,79376244092043266,79376123832958978,79376153897730050,79376128127926274,79376102358122498,79376141012828162,79376110948057090,79376106653089794,79375960624201730,79376347171258370,79376115243024386,79376304221585410,79376278451781634,79376119537991682,79376158192697346,79376166782631938,79376325696421890,79375994983940098,79376175372566530,79376149602762754,79376132422893570,79376162487664642,79376136717860866,79375990688972802,79375956329234434,79375999278907394,79376317106487298,79376351466225666,79375986394005506,79376098063155202,79375969214136322,79657809253498882,79657835023302658,79657813548466178,79657839318269954,79657422706442242,79657487130951682,79657817843433474,79657482835984386,79657796388519936,79657731944087554,79657568735330306,79657457066180610,79657800663564290,79657847908204546,79657843613237250,79657830728335362,79657727649120258,79657439886311426,79657757713891330,79939288529174528,79939352952373249,79939606356885505,79939292822568960,79939331477012481,79939391608782849,79939314297339904,79939305707667456,79939357247209473,79939340071534593,79939400214315009,79939374428061697,79939232695058432,79939275642568704,79939597765574657,79938914866233344,79939344362766337,79939202629632000,79939383018389505,79939043715121152,79938932047151104,79939395906240513,79939206924271616,79939370133749761,79939348657537025,79939387312570369,79939365838454785,79939327183552513,79938962110545920,79939310002241536,79939378723225601,79939361542111233,79938957817020416,79938897687216128,79939602061393921,79939322889502720,79939284233617408,79939318593290240,80220531583287298,80220591712829442,80220578827927554,80220553058123778,80220402734268418,80220669022240770,80220596007796738,80220527288320002,80220750626619394,80220574532960258,80220587417862146,80220385554399234,80220419914137602,80220772101455874,80220754921586690,80220424209104898,80220699087011842,80220565943025666,80220742036684802,80220561648058370,80220583122894850,80220398439301122,80220535878254594,80220540173221890,80220544468189186,80220557353091074,80220570237992962,80220600302764034,80220415619170306,80220548763156482,80220522993352706,80220729151782914,80220376964464642,80220381259431938,80220703381979138,80220776396423170,80220411324203010,80220394144333826,80502049497743360,80502298610958337,80502234187038720,80502556310306817,80502599277215745,80502530557607937,80501873406312448,80502113946107904,80502053794217984,80502109650681856,80502337265991681,80502264250761216,80502500491853825,80502436047421441,80502388802715649,80501890586443776,80501851929706496,80502083880222720,80501869109379072,80502397390815233,80502238482595840,80501864819654656,80501907770441728,80501877699379200,80502156877692928,80502423162322945,80502367348588545,80502032318791680,80502096765059072,80502225595990016,80502126830288896,80502079586238464,80502384508076033,80502496196689921,80501997958725632,80502259974340608,80502066680430592,80502070975266816,80502345859661825,80502028025069568,80502294316187649,80502002253758464,80501882000572416,80502341562204161,80502075268333568,80502307200630785,80502272842924032,80502552014815233,80502517671788545,80502148305321984,80502019434610688,80502526262050817,80501912063967232,80502350154366977,80502045203890176,80502040908791808,80502088174862336,80502277136973825,80502062385004544,80501899175067648,80502015139577856,80502393096962049,80502281430433793,80502547718995969,80502315791876097,80502371632807937,80502006548267008,80502036615135232,80502311495532545,80502324381483009,80502118240813056,80502569189638145,80501847640637440,80501886290296832,80501856225263616,80502302905794561,80502251363172352,80502521967149057,80502105354797056,80502290024955905,80502152583053312,80501894878986240,80502328676646913,80502577778851841,80502101060222976,80502582076440577,80502247089045504,80502058089447424,80502268546711552,80502320087171073,80502358758850561,80502143999475712,80502242775990272,80502182648479744,80502122535976960,80502332971810817,80502255661088768,80501860520624128,80502023729643520,80501993668542464,80502010844413952,80502586370686977,80502504787345409,80783734951772160,81065154093973504,81346599005978624,81347092927283201,81346573227524098,81628172749766656,81628245764145153,81628232878653441,81628215698718721,81628241469046785,81628138389438464,81628211402375169,81628194223030273,81627811970809856,81628052489895936,81628456217149441,81627893575385088,81627764726497280,81628177043816449,81628228583489537,81628056784535552,81627781907415040,81628159862505472,81628202812637185,81627807677284352,81628164157603840,81628082555322368,81628237172834305,81628198517800961,81628447625838593,81628189927997441,81628168453554176,81627747547480064,81628142682832896,81628207107473409,81628451921657857,81628181337276417,81628262961381377,81628219994013697,81628155567931392,81628134093881344,81628125502832640,81628224288325633,81909591903961088,81909544659124224,81909969866391553,81909579016175618,82191019633016834,82191053992755202,82191066877657090,82472632037605377,82472666399178753,82472477420027904,82472550432964608,82472232607416320,82472636332507137,82472657808785409,82472597679898624,82472674995208193,82472653513621505,82472593383686144,82472619153162241,82472872555970561,82472614861930497,82472563319570432,82472606267408385,82472589087735808,82472649218457601,82472662102966273,82472567612964864,82472812445696001,82472468836843520,82472881147281409,82472640628850689,82472236900941824,82472481714667520,82472189656629248,82472172477612032,82472627742769153,82472876851789825,82472644924145665,82472623447932929,82472580498063360,82472318505517056,82472507485454336,82472206837547008,82472601973948417,82472559024013312,82472584792637440,82472670696636417,82753948111273986,82753973881077762,83035350066987010,83035320002215938,83035298527379458,83035161088425986,83035143908556802,83035311412281346,83035341477052418,83035131023654914,83035328592150530,83035332887117826,83035294232412162,83035526160646146,83035345772019714,83035148203524098,83035307117314050,83035169678360578,83035324297183234,83035315707248642,83035152498491394,83035302822346754,83035337182085122,83035423081431042,83316618884677634,83316627474612226,83316825043107842,83316816453173250,83316923827355650,83316996841799682,83316769208532994,83316605999775746,83316928122322946,83317009726701570,83316648949448706,83316760618598402,83316764913565698,83316966777028610,83316786388402178,83316777798467586,83316752028663810,83316773503500290,83316803568271362,83316601704808450,83316932417290242,83316640359514114,83316807863238658,83316636064546818,83316794978336770,83316975366963202,83316812158205954,83316979661930498,83316820748140546,83316623179644930,83316756323631106,83316610294743042,83316799273304066,83316790683369474,83317001136766978,83316782093434882,83316747733696514,83598403114958848,83598398805180418,83598471819624450,83879946811211776,84161421772259330,84161348773543936,84442643342491648,84442986939940865,84442918220660736,84442806551642112,84443197392945153,84443012728881153,84442832322428928,84442952579743745,84442974055432193,84442892449939456,84442909629612032,84442561737916416,84442531674521600,84442875269939200,84442943990136833,84442913924710400,84442557444390912,84443201688764417,84442926810923009,84442965465825281,84442922516873216,84442888156545024,84442802257002496,84443205984256001,84442969761120257,84442931104382977,84442982645760001,84442995531251713,84442883860987904,84442948284907521,84442497314586624,84442939695104001,84442905335037952,84442961169481729,84442978350596097,84442991236153345,84442514493603840,84442956874579969,84724298711891970,84724371726336002,85005747934003200,85287222896099330,85287330268512256,85287506373836801,85568775182090242,85568800951894018,85568727937449986,85568577613594626,85568607678365698,85568410109870082,85568560433725442,85568573318627330,85568616268300290,85568401519935490,85568551843790850,85568809541828610,85568590498496514,85568779477057538,85568556138758146,85568796656926722,85568594793463810,85568620563267586,85568427289739266,85568603383398402,85568732232417282,85568599088431106,85568435879673858,85568405814902786,85568564728692738,85568547548823554,85568581908561922,85568418699804674,85568766592155650,85568569023660034,85568611973332994,85568624858234882,85568440174641154,85568586203529218,85568448764575746,85568422994771970,85568723642482690,85850172849782786,85850198619586562,86131673596428290,86131647826624514,86412963880108034,86413144268734466,86412903750565890,86412955290173442,86413148563701762,86413157153636354,86413161448603650,86412929520369666,86412925225402370,86412938110304258,86412920930435074,86412942405271554,86413139973767170,86413204398276610,86413208693243906,86413174333505538,86413195808342018,86412950995206146,86413182923440130,86413191513374722,86412912340500482,86413178628472834,86413165743570946,86413200103309314,86413152858669058,86412882275729410,86413127088865282,86413212988211202,86412946700238850,86412890865664002,86412933815336962,86413135678799874,86412886570696706,86413221578145794,86412895160631298,86412899455598594,86412959585140738,86412916635467778,86412877980762114,86413170038538242,86413122793897986,86412908045533186,86694670785183746,86694357252571138,86694614950608898,86694404497211394,86694425972047874,86694413087145986,86694378727407618,86694597770739714,86694417382113282,86694383022374914,86694696554987522,86694666490216450,86694374432440322,86694395907276802,86694438856949762,86694434561982466,86694391612309506,86694430267015170,86694675080151042,86694636425445378,86694400202244098,86694640720412674,86694387317342210,86694632130478082,86694602065707010,86694610655641602,86694653605314562,86694645015379970,86694421677080578,86694679375118338,86694683670085634,86694623540543490,86694408792178690,86694649310347266,86694365842505730,86694627835510786,86694370137473026,86694687965052930,86694361547538434,86694619245576194,86694352957603842,86694657900281858,86976223075303425,86975836528312320,86976081342038016,86976180125433856,86976193011056640,86976218780532737,86975832234786816,86976472183341057,86976158651383808,86976253140992001,86976214489300993,86976188715106304,86976227370139649,86975918132887552,86976240256221185,86976167240335360,86976248845828097,86976205894778881,86975772104982528,86975806464917504,86976270324006913,86976201601318913,86976257436155905,86976077047398400,86976235959877633,86976197307269120,86976150060335104,86976274634506241,86976476479160321,86976480774651905,86976261730336769,86976162946940928,86976184420007936,86976231664975873,86975789283999744,86976107112824832,86976266026549249,86976244551516161,87257947160051713,87257745300717569,87257732412866561,87257955751362561,87257264260710400,87257637923651584,87257672283979776,87257616461463552,87257307211497472,87257311505022976,87257719528226817,87257706641686529,87257655102144512,87257749599289345,87257642217046016,87257569216626688,87257556318748672,87257728117702657,87257693757243393,87257723822538753,87257676578029569,87257667987767296,87257582089535488,87257633628094464,87257659396718592,87257247081693184,87257281441628160,87257698052014081,87257625037045760,87257715232931841,87257663691816960,87257887044665345,87257891345203201,87257951455870977,87257680871489537,87257710936588289,87257543440924672,87257393109598208,87257990123487233,87257702346850305,87257994418716673,87257972943945729,87257741003259905,87257736707047425,87257689466011649,87257552024109056,87258071728062465,87539082831986690,87539104306823170,87539078537019394,87538846608785410,87538829428916226,87538842313818114,87539052767215618,87538838018850818,87538807954079746,87538812249047042,87539095716888578,87538850903752706,87538859493687298,87539057062182914,87539061357150210,87538833723883522,87538820838981634,87538795069177858,87538863788654594,87539121486692354,87539108601790466,87538855198720002,87539069947084802,87539035587346434,87539065652117506,87538825133948930,87539048472248322,87539022702444546,87538799364145154,87539074242052098,87538803659112450,87539039882313730,87539026997411842,87538816544014338,87538790774210562,87539112896757762,87820497681252354,87820527746023426,87820579285630978,87820570695696386,87820523451056130,87820596465500162,88102054263193602,88102071443062786,88102045673259010,88101998428618754,88102002723586050,88383443355172864,88664737925103618,88664952673468418,88664707860332546,88664974148304898,88664703565365250,88664720745234434,88664763694907394,88664965558370306,88664982738239490,88664750810005506,88664978443272194,88664729335169026,88664939788566530,88664733630136322,88664742220070914,88665004213075970,88664969853337602,88665021392945154,88665008508043266,88664716450267138,88664918331883520,88664712155299842,88664690680463362,88664995623141378,88664725040201730,88665012803010562,88664699270397954,88664961263403010,88664746515038210,88664694975430658,88664755104972802,88664759399940098,88664935493599234,88664926903664642,88664956968435714,88664948378501122,88664922608697346,88946444830113794,88946410470375426,88946195722010626,88946208606912514,88946397585473538,88946401880440834,88946414765342722,88946479189852162,88946187132076034,88946212901879810,88946436240179202,88946221491814402,88946191427043330,88946423355277314,88946453420048386,88946234376716290,88946483484819458,88946457715015682,88946470599917570,88946217196847106,88946182837108738,88946174247174146,88946427650244610,88946204311945218,88946200016977922,88946225786781698,88946487779786754,88946440535146498,88946165657239554,88946230081748994,88946431945211906,88946496369721346,88946169952206850,88946449125081090,88946238671683586,88946178542141442,89227971369107456,89509673979215873,89509785625427969,89509231573532672,89509235869876224,89509588062044161,89509248752484352,89509240163532800,89509085545037824,89509274523074560,89509068364120064,89509265935171584,89509055480004608,89509253048958976,89509218689351680,89509222984384512,89509609536749569,89509257344188416,89509283137257472,89509622417063937,89509076954120192,89509072661053440,89509759878496257,89509635306487809,89509450617913344,89509596645556225,89509227279810560,89509764173660161,89509244458631168,89509261639745536,89509592351703041,89509270230007808,89790934187114496,89790977137246209,89791007203262465,89790856879931392,89791226246266881,89790667899994112,89790938482212864,89791002908098561,89790912714047488,89790521872089088,89790947074375680,89790990023327745,89790831109144576,89790539051106304,89790972842409985,89790985726984193,89790556232024064,89790994318622721,89790964252606465,89790942778163200,89790955661885441,89790899827441664,89791015793655809,89790929892540416,89791230541758465,89790826814504960,89791020107104257,89791011497443329,89790998612934657,89790968547639297,89790981432082433,89790586295418880,89790951368425473,89790908418490368,89790582001893376,89791221950447617,89790917007441920,90072413468164098,90072014036205570,90072391993327618,90072404878229506,90072374813458434,90072301799014402,90072031216074754,90072422058098690,90072142885224450,90072056985878530,90071996856336386,90072387698360322,90072383403393026,90072331863785474,90072061280845826,90072417763131394,90072306093981698,90072409173196802,90353489004527616,90353781062565888,90353957156683777,90353884140535808,90353858371911680,90353849780862976,90353974355558401,90353806833352704,90353914209828865,90353944272044033,90354171903868929,90353927090667521,90353892731584512,90353970044534785,90353506185445376,90353948566355969,90353862667468800,90353536248840192,90353931385503745,90353922795831297,90354180495179777,90353531955314688,90353897027796992,90354176199688193,90353471825510400,90353905615306753,90353617853415424,90353776767926272,90353879845961728,90353866960863232,90353935680405505,90353961450864641,90353918501060609,90353888435634176,90353901321846785,90353965747077121,90353952861519873,90353939976749057,90635277522108418,90635329061715970,90635324766748674,90635273227141122,90635316176814082,90916804039016450,90916799744049154,90916752499408898,90916748204441602,90916791154114562,91198309080236034,91198304785268738,91198283310432258,91197913943244802,91198287605399554,91198313375203330,91198231770824706,91197931123113986,91198317670170626,91198201706053634,91197896763375618,91198321965137922,91198274720497666,91198206001020930,91197956892917762,91198042792263682,91197961187885058,91198270425530370,91198291900366850,91480071810711553,91479844178886657,91479749687705600,91479826997510145,91479745402306562,91479861357707265,91479848473198593,91479869951377409,91479388911370240,91479431862157312,91479792638427136,91479796934639616,91479801228689409,91479865653919745,91479814116671489,91479371732353024,91479857063526401,91479766867705856,91479517760258048,91479758278754304,91479835587248129,91479706740195328,91480179205144577,91479874262532097,91479831292346369,91479839883591681,91479436155682816,91479788342476800,91479852768362497,91479762574311424,91479779752804352,91479818407903233,91479680969408512,91479805522149377,91479406092288000,91479676674768896,91479784047378432,91480076106530817,91480080402022401,91479822702673921,91761177428819970,91761173133852674,91761216083525634,91761228968427522,91761224673460226,92042648112070658,92042703946645506,92042652407037954,92042699651678210,92042691061743618,92324127383027714,92324123088060418,92324178922635266,92324174627667970,92324166037733378,92605331764674562,92605679657025538,92605271635132418,92605606642581506,92605649592254466,92605645320421376,92605417664020482,92605688246960130,92605288815001602,92605692541927426,92605658182189058,92605683951992834,92605666772123650,92605696836894722,92605305994870786,92605662477156354,92605576577810434,92605580872777730,92605336059641858,92887120297197568,93168281730351106,93168255960547330,93168427746197504,93168243068895232,93168526543486978,93168367629697026,93168608147865602,93168638212636674,93168646802571266,93168221600808962,93168642507603970,93168230177243136,93168286025318402,93168633917669378,93168612442832898,93168599557931010,93169016162942977,93168530838454274,93168616737800194,93168629622702082,93168556608258050,93168810004643841,93168827202207745,93168432041426944,93168238780678146,93169033360703489,93450117484511234,93450104599609346,93450083124772866,93450087419740162,93449842606604290,93450001520394242,93450074534838274,93450512632578049,93449696577716226,93450091714707458,93449756707258370,93449761002225666,93450005815361538,93450113189543938,93450121779478530,93449730937454594,93449713757585410,93449855502450688,93450070250881024,93450031585165314,93450108894576642,93731553817657344,94012972949110786,94013028783685634,94013015898783746,94012977244078082,94013024488718338,94294503758430210,94294447923855362,94575978734682114,94857397876948994,94857453711523842,95138920111341568,95420425138601986,95420403663765506,95420034296578050,95420051476447234,95420390778863618,95420420843634690,95420210390237186,95420218980171778,95420214685204482,95420201800302594,95420317764419586,95420240455008258,95420197505335298,95420223275139074,95420347829190658,95420171735531522,95420180325466114,95420193210368002,95420060066381826,95420227570106370,95420249044942850,95420068656316418,95420042886512642,95420184620433410,95420231865073666,95420206095269890,95420030001610754,95420176030498818,95420047181479938,95420188915400706,95420236160040962,95420377893961730,95420399368798210,95420025706643458,95420072951283714,95420352124157954,95420064361349122,95420244749975554,95701685366882306,95701711136686082,95701535043026946,95701900115247106,95701517863157762,95701659597078530,95701504978255874,95701865755508738,95701706841718786,95701500683288578,95701522158125058,95701672481980418,95701878640410626,95701651007143938,95701681071915010,95701719726620674,95701676776947714,95701895820279810,95701693956816898,95701715431653378,95701547927928834,95701539337994242,95701702546751490,95701874345443330,95701526453092354,95701509273223170,95701655302111234,95701646712176642,95701827100803074,95701689661849602,95701668187013122,95701724021587970,95701792741064706,95701663892045826,95701698251784194,95701543632961538,95701822805835778,95701852870606850,95983345041539072,96264472117051394,96264454937182210,96264686865416194,96264446347247618,96264618145939458,96264858664108034,96264755584892930,96264721225154562,96264467822084098,96264824304369666,96264622440906754,96264832894304258,96264626735874050,96264463527116802,96264712635219970,96264867254042626,96264497886855170,96264592376135682,96264485001953282,96264450642214914,96264704045285378,96264673980514306,96264489296920578,96264742699991042,96264605261037570,96264746994958338,96264639620775938,96264837189271554,96264781354696706,96264476412018690,96264600966070274,96264661095612418,96264695455350786,96264506476789762,96264845779206146,96264631030841346,96264652505677826,96264716930187266,96264708340252674,96264850074173442,96264596671102978,96264682570448898,96264459232149506,96264725520121858,96264871549009922,96264510771757058,96264862959075330,96264643915743234,96264854369140738,96264699750318082,96264648210710530,96264493591887874,96264635325808642,96264656800645122,96264669685547010,96264841484238850,96264480706985986,96264751289925634,96264665390579714,96264678275481602,96264609556004866,96264613850972162,96546299289993216,96827877325864961,96827817195929600,96827842965405697,96828104959524865,96827658299899904,96827898803585025,96828049141071873,96827692648693760,96827812899979264,96827838674173953,96828066321006593,96827782836256768,96827873030701057,96827701232271360,96827662595325952,96827542317760512,96827868736389121,96827456419659776,96828044849709057,96827460713185280,96827855849848833,96827774245208064,96827864441094145,96827731297697792,96827675479506944,96827885915209729,96827645414277120,96827808623558656,96827413468872704,96828079206825985,96827907408068609,96827666890031104,96827632529440768,96827821492142080,96827847260176385,96827795738263552,96827860144750593,96827851555012609,96827825786191873,96827791425208320,96828053436563457,96827894508879873,96827649709441024,96828070616367105,96827654004015104,96827705526910976,96828100664033281,96827430649790464,96827804310306816,96827671185195008,96827628235456512,96827636824080384,96828096368214017,96827396289855488,96827881621028865,96827890211422209,96827787131813888,96827830079651841,96828074911268865,97109090319859714,97109017305415682,97109128974565378,97109060255088642,97109176219205634,97109141859467266,97109167629271042,97109257823584258,97109094614827010,97108871276527618,97108884161429506,97109275003453442,97109133269532674,97109021600382978,97109034485284866,97109283593388034,97109206283976706,97108879866462210,97109073139990530,97109270708486146,97109287888355330,97109103204761602,97109068845023234,97108888456396802,97109116089663490,97109051665154050,97109086024892418,97108914226200578,97109249233649666,97109171924238338,97109137564499970,97109180514172930,97109098909794306,97109150449401858,97108875571494914,97109146154434562,97109124679598082,97109120384630786,97109107499728898,97109296478289922,97109043075219458,97108922816135170,97109111794696194,97109279298420738,97109064550055938,97109025895350274,97108905636265986,97109077434957826,97108918521167874,97108935701037058,97108897046331394,97109047370186754,97108909931233282,97108892751364098,97109081729925122,97109262118551554,97109055960121346,97109030190317570,97109266413518850,97109038780252162,97108901341298690,97108931406069762,97109292183322626,97390548116832258,97390573886636034,97390363433238530,97390535231930370,97390621131276290,97390543821864962,97390599656439810,97390603951407106,97390758570229762,97390367728205826,97390754275262466,97390393498009602,97390565296701442,97390616836308994,97390397792976898,97390406382911490,97390518052061186,97390556706766850,97390380613107714,97390578181603330,97390737095393282,97390513757093890,97390552411799554,97390526641995778,97390384908075010,97390724210491394,97390771455131650,97390741390360578,97390732800425986,97390642606112770,97390591066505218,97390569591668738,97390372023173122,97390561001734146,97390530936963074,97390346253369346,97390389203042306,97390762865197058,97390496577224706,97390655491014658,97390681260818434,97390376318140418,97390350548336642,97390492282257410,97390582476570626,97390625426243586,97390410677878786,97390539526897666,97390509462126594,97390586771537922,97390522347028482,97390612541341698,97390749980295170,97390359138271234,97390505167159298,97390500872192002,97390595361472514,97390608246374402,97390745685327874,97390767160164354,97390651196047362,97390354843303938,97390646901080066,97672199196966912,97953626929102848,98235153436377090,98234947277946882,98234792659124226,98235024587358210,98235020292390914,98234784069189634,98234925803110402,98234809838993410,98234960162848770,98235192091082754,98234796954091522,98235041767227394,98234934393044994,98234930098077698,98234822723895298,98234990227619842,98235157731344386,98234942982979586,98234964457816066,98235046062194690,98235080421933058,98235071831998466,98235183501148162,98234973047750658,98234818428928002,98235067537031170,98235050357161986,98235028882325506,98235174911213570,98235037472260098,98234917213175810,98234775479255042,98234985932652546,98234814133960706,98235011702456322,98235166321278978,98234921508143106,98235179206180866,98234938688012290,98235106191736834,98234771184287746,98235033177292802,98234801249058818,98235196386050050,98235162026311682,98235149141409794,98234998817554434,98234968752783362,98235015997423618,98234955867881474,98235170616246274,98234977342717954,98234831313829890,98234981637685250,98234835608797186,98234788364156930,98234951572914178,98235003112521730,98235007407489026,98234994522587138,98234805544026114,98234779774222338,98235076126965762,98235187796115458,98516624127229952,98798142043848706,98797785561563138,98798107684110338,98797935885418498,98797768381693954,98798120569012226,98798111979077634,98798146338816002,98797918705549314,98797897230712834,98798129158946818,98797729726988290,98797940180385794,98797905820647426,98797871460909058,98797978835091458,98797901525680130,98798133453914114,98798137748881410,98797983130058754,98797996014960642,98797931590451202,98797970245156866,98797746906857474,98797892935745538,98797781266595842,98798026079731714,98797965950189570,98797957360254978,98797725432020994,98798056144502786,98797721137053698,98797923000516610,98797953065287682,98797734021955586,98797927295483906,98798116274044930,98798021784764418,98798017489797122,98797991719993346,98797884345810946,98797867165941762,98797880050843650,98798000309927938,98797755496792066,98798124863979522,98798030374699010,98797772676661250,98797910115614722,98797764086726658,98797948770320386,98797944475353090,98797974540124162,98797914410582018,98797759791759362,98797875755876354,98797961655222274,98797751201824770,98797888640778242,98797742611890178,98797738316922882,98797987425026050,98798099094175746,99079440926834690,99079217588535298,99079239063371778,99079260538208258,99079501056376834,99079342142586882,99079415157030914,99079612725526530,99079492466442242,99079586955722754,99079243358339074,99079531121147906,99079234768404482,99079389387227138,99079213293568002,99079346437554178,99079200408666114,99079453811736578,99079445221801986,99079410862063618,99079449516769282,99079247653306370,99079406567096322,99079423746965506,99079256243240962,99079608430559234,99079428041932802,99079208998600706,99079419451998210,99079617020493826,99079385092259842,99079376502325250,99079466696638466,99079226178469890,99079436631867394,99079359322456066,99079355027488770,99079367912390658,99079582660755458,99079432336900098,99079204703633410,99079595545657346,99079393682194434,99079221883502594,99079230473437186,99079363617423362,99079621315461122,99079458106703874,99079574070820866,99079604135591938,99079505351344130,99079397977161730,99079372207357954,99079196113698818,99079380797292546,99079402272129026,99079350732521474,99079496761409538,99079591250690050,99079470991605762,99079475286573058,99079462401671170,99079599840624642,99360903018512386,99360898723545090,99360675385245698,99360980327923714,99361091997073410,99360735514787842,99360877248708610,99360683975180290,99361074817204226,99360821414133762,99360864363806722,99360847183937538,99361096292040706,99360950263152642,99361079112171522,99360851478904834,99360825709101058,99360834299035650,99360920198381570,99360885838643202,99360855773872130,99360967443021826,99360830004068354,99360928788316162,99360731219820546,99360937378250754,99360907313479682,99360881543675906,99360933083283458,99361070522236930,99360860068839426,99361006097727490,99360842888970242,99361061932302338,99360915903414274,99360894428577794,99360709744984066,99361083407138818,99361057637335042,99360976032956418,99360718334918658,99360872953741314,99360722629885954,99360868658774018,99360945968185346,99360705450016770,99360679680212994,99360911608446978,99360941673218050,99360671090278402,99361066227269634,99360688270147586,99360714039951362,99360838594002946,99361049047400450,99360692565114882,99360924493348866,99360696860082178,99360701155049474,99360890133610498,99361087702106114,99360971737989122,99360817119166466,99642163235979264,99642545509040128,99642609911857153,99642622797807617,99642455294017536,99642592732512257,99642571259248640,99642588441280513,99642597027282945,99642180416897024,99642627092971521,99642562667085824,99642575553298433,99642558371987456,99642541192314880,99642635682316289,99642554077413376,99642292084867072,99642850431139841,99642601322119169,99642524012314624,99642648570691585,99642532603363328,99642644275986433,99642618503495681,99642846135320577,99642657178124289,99642631388135425,99642481064804352,99642566963036160,99642605616955393,99642854726631425,99642536898920448,99642639978528769,99642146056962048,99642210480291840,99642450999377920,99642614208200705,99642579846758401,99642206186766336,99923706926596098,99923938854830082,99923749876269058,99923689746726914,99923758466203650,99923698336661506,99924011869274114,99923977509535746,99923968919601154,99923676861825026,99923681156792322,99924007574306818,99923724106465282,99923951766339584,99923728401432578,99923736991367170,99923947444764674,99923943149797378,99923711221563394,99923981804503042,99923715516530690,99923964624633858,99923694041694210,99923956034699266,99923719811497986,99924020459208706,99923702631628802,99923762761170946,99923990394437634,99923925969928194,99923960329666562,99923741286334466,99923934559862786,99923745581301762,99923754171236354,99923685451759618,99923732696399874,99923998984372226,99923973214568450,100205284999692290,100205147560738818,100205108906033154,100205280704724994,100205254934921218,100205319359430658,100205396668841986,100205370899038210,100205353719169026,100205516927926274,100205310769496066,100205375194005506,100205366604070914,100205267819823106,100205156150673410,100205400963809282,100205259229888514,100205263524855810,100205405258776578,100205246344986626,100205499748057090,100205495453089794,100205104611065858,100205392373874690,100205289294659586,100205345129234434,100205491158122498,100205272114790402,100205143265771522,100205431028580354,100205302179561474,100205293589626882,100205332244332546,100205160445640706,100205512632958978,100205358014136322,100205113201000450,100205315064463362,100205138970804226,100205297884594178,100205100316098562,100205126085902338,100205327949365250,100205504043024386,100205508337991682,100205482568187906,100205521222893570,100205276409757698,100205362309103618,100205242050019330,100205349424201730,100205323654397954,100205486863155202,100205306474528770,100205117495967746,100205250639953922,100205134675836930,100205336539299842,100205473978253314,100205121790935042,100205096021131266,100205130380869634,100486759976337410,100486815810912258,100486794336075778,100486601062547458,100486717026664450,100486734206533634,100486867350519810,100486742796468226,100486828695814146,100486979019669506,100486961839800322,100486575292743682,100486747091435522,100486596767580162,100486824400846850,100486738501500930,100486755681370114,100486570997776386,100486991904571394,100486721321631746,100486906005225474,100486622537383938,100486790041108482,100486725616599042,100486729911566338,100486768566272002,100486974724702210,100486811515944962,100486613947449346,100486751386402818,100486579587710978,100486850170650626,100486618242416642,100486880235421698,100486583882678274,100486983314636802,100486841580716034,100486807220977666,100486875940454402,100486592472612866,100486785746141186,100486631127318530,100486605357514754,100486802926010370,100486820105879554,100486987609604098,100486764271304706,100486609652482050,100486635422285826,100486588177645570,100486837285748738,100487425696268290,100486948954898434,100486798631043074,100486957544833026,100486832990781442,100486845875683330,100486871645487106,100486966134767618,100486777156206594,100486781451173890,100486772861239298,100486996199538690,100486970429734914,100768423941177344,101049920392790016,101049847366942720,101331399654440962,101331386769539074,101331141956403202,101331193496010754,101331266510454786,101331060352024578,101331330934964226,101331025992286210,101331219265814530,101331395359473666,101331056057057282,101331167726206978,101331373884637186,101331150546337794,101331249330585602,101331227855749122,101331270805422082,101331184906076162,101331223560781826,101331305165160450,101331253625552898,101331202085945346,101331421129277442,101331163431239682,101331017402351618,101331206380912642,101331004517449730,101331403949408258,101331047467122690,101331262215487490,101331008812417026,101331416834310146,101331210675879938,101331391064506370,101331197790978050,101331000222482434,101331292280258562,101331236445683714,101331038877188098,101331296575225858,101331412539342850,101331176316141570,101331180611108866,101331021697318914,101331030287253506,101331300870193154,101331159136272386,101331172021174274,101331214970847234,101331240740651010,101331189201043458,101331013107384322,101331232150716418,101331245035618306,101331034582220802,101331275100389378,101331257920520194,101331382474571778,101331043172155394,101331154841305090,101330995927515138,101331408244375554,101331146251370498,101612870346276864,101894006010806274,101894246528974850,101893958766166018,101893950176231426,101893997420871682,101894117679955970,101894207874269186,101894121974923266,101894242234007554,101894255118909442,101894332428320770,101894186399432706,101894143449759746,101894126269890562,101894366788059138,101894371083026434,101894358198124546,101893988830937090,101894147744727042,101894353903157250,101894010305773570,101893963061133314,101894212169236482,101893967356100610,101894156334661634,101894341018255362,101894164924596226,101894134859825154,101894139154792450,101893945881264130,101893993125904386,101894130564857858,101894203579301890,101894152039694338,101894336723288066,101893971651067906,101893984535969794,101894225054138370,101894177809498114,101894250823942146,101894091910152194,101894349608189954,101894169219563522,101894216464203778,101894182104465410,101894280888713218,101894096205119490,101893975946035202,101893954471198722,101894113384988674,101894194989367298,101894109090021378,101894345313222658,101893980241002498,101894220759171074,101894100500086786,101894199284334594,101894362493091842,101894160629628930,101894323838386178,101894104795054082,101894173514530818,102175815982710784,102175850343694337,102175828867809280,102175867522908161,102175485270687744,102175730084413440,102175936263880705,102175455207292928,102175420847357952,102175893293891585,102175910472712193,102175480977162240,102175888998596609,102175901883367425,102176120925716481,102175906178531329,102175876112515073,102176129517027329,102175841753432064,102176125221535745,102175854637154305,102175897588203521,102175884702253057,102175863227875329,102175880407351297,102175833162383360,102175846049644544,102175919064023041,102175798802710528,102175837457481728,102175871817678849,102175914768924673,102175438026375168,102175566875262976,102175755855200256,102175807393759232,102175725789773824,102175811689316352,102457295276539904,102738783138217984,103020202269605890,103020215154507778,103020167909867522,103301655771152386,103301745965465602,103301466792591362,103301737375531010,103301715900694530,103301320763703298,103301698720825346,103301707310759938,103301337943572482,103301733080563714,103301728785596418,103301380893245442,103301617116446722,103301625706381314,103301741670498306,103301711605727234,103301630001348610,103301385188212738,103301355123441666,103583092090142720,103583285356265473,103583543067934721,103583190866264064,103583203751362560,103583538772705281,103583293949935617,103583435701747713,103583130738753536,103583173686263808,103583229520707585,103583521601028097,103583272471756801,103583238115229697,103583165110681600,103583250996068353,103583186572869632,103583216636985344,103583242406461441,103583504400580609,103583225227247617,103582830090846208,103582855860715520,103583246701232129,103582941758816256,103583220933197824,103583500105089025,103583620377280513,103583096387731458,103583255290904577,103583212341035008,103583495809269761,103583259585806337,103582860154241024,103582812909928448,103583268177444865,103583182277312512,103582795730911232,103583100673327104,103583117865844736,103583276766920705,103583298248507393,103583281062084609,103583289652477953,103583104967966720,103583263882149889,103583208045936640,103864571376107520,104146119367327744,104427590037864450,104427577152962562,104427542793224194,104709022064640002,104708996294836226,104990647355310081,104990621584785409,104990235037794304,104990638765703169,104990479851520000,104990617290014721,104990578634915840,104990664536031233,104990475556880384,104990187793481728,104990582929489920,104990625879621633,104990548569817088,104990874988642305,104990655945637889,104990634469359617,104990870692823041,104990230744268800,104990587224588288,104990668831129601,104990557160865792,104990686031446017,104990643060998145,104990651650473985,104990660239818753,104990565749817344,104990204974399488,104990600110800897,104990630174457857,104990591520538624,104990316642369536,104990879284133889,104990505622306816,104990604404260865,104990561456422912,104990612994981889,104990170614464512,104990595816751104,105271654183600130,105271860342030338,105271830277259266,105271817392357378,105271675658436610,105271868931964930,105272049320591362,105271838867193858,105271834572226562,105271864636997634,105271856047063042,105271825982291970,105271873226932226,105271671363469314,105271843162161154,105271692838305794,105271821687324674,105271851752095746,105271946241376258,105271847457128450,105271667068502018,105271684248371202,105553498522058752,105553532881666048,105553721860423681,105553455572713472,105553451293605888,105553713286414337,105553691819507713,105553717565194241,105834994979831810,105834921965387778,106116091999879170,106116233733799938,106116298158309378,106116474251968514,106116083409944578,106116255208636418,106116285273407490,106116448482164738,106116109179748354,106116289568374786,106116113474715650,106116250913669122,106116293863342082,106116263798571010,106116280978440194,106116259503603714,106116238028767234,106116452777132034,106116268093538306,106116246618701826,106116405532491778,106116482841903106,106116229438832642,106116242323734530,106116225143865346,106116096294846466,106116396942557186,106116469957001218,106116074820009986,106116079114977282,106116401237524482,106116439892230146,106116100589813762,106116272388505602,106116220848898050,106116122064650242,106116276683472898,106397927745454082,106397871910879234,106679321117523970,106679776410009601,106679346913345536,106960705914732546,106960907778195458,106960894893293570,106960521231138818,106960547000942594,106960559885844482,106960662965059586,106960701619765250,106960744569438210,106960641490223106,106960667260026882,106960525526106114,106960916368130050,106960512641204226,106960538411008002,106960645785190402,106960718799634434,106960800404013058,106960671554994178,106960804698980354,106960882008391682,106960757454340098,106961350159826946,106960499756302338,106960791814078466,106960650080157698,106960761749307394,106960680144928770,106960495461335042,106960912073162754,106960684439896066,106960508346236930,106960693029830658,106960796109045762,106960903483228162,106960774634209282,106960886303358978,106960748864405506,106960555590877186,106960688734863362,106960770339241986,106960714504667138,106960731684536322,106960873418457090,106960658670092290,106960727389569026,106960899188260866,106960766044274690,106960710209699842,106960735979503618,106960529821073410,106960675849961474,106960542705975298,106960654375124994,106960830468784130,106960534116040706,106960920663097346,106960723094601730,106960753159372802,106960516936171522,106960504051269634,106960890598326274,106960697324797954,107242352701407232,107242296866897920,107523776138641408,107805251115417600,108086721770094594,108086777604669442,108368252585377794,108368196750802946,108368269765246978,108368201045770242,108368170980999170,108368243995443202,108649718995288064,108931193972064256,109212668935143426,109494152502050818,109494148207083522,109494096667475970,109494139617148930,109494100962443266,109775627479285762,109775623184318466,109775575939678210,109775571644710914,109775614594383874,110057029441159170,110056720203513858,110056780333056002,110057111045537794,110057141110308866,110056784628023298,110057025146191874,110056737383383042,110056866232401922,110057132520374274,110056754563252226,110057055210962946,110057106750570498,110057128225406978,110057115340505090,110057145405276162,110057098160635906,110057136815341570,110338628961763329,110338229531901952,110338689093533697,110338259595296768,110338667618500609,110338654731960321,110338637556285441,110338341199872000,110338663323205633,110338697704701953,110338650437124097,110338500114382848,110338616078041088,110338581718368256,110338573127319552,110338620374253568,110338504409022464,110338646142287873,110338676207976449,110338624668303361,110338195171966976,110338671912812545,110338899546144769,110338530179809280,110338895250325505,110338212350984192,110338590307319808,110338607486992384,110338903841636353,110338586013925376,110338603192418304,110338659026862081,110338641847517185,110338611782090752,110338680503140353,110338255301771264,110338693390991361,110338684797321217,110620060999155714,110620005164580866,110620091063926786,110620056704188418,110620082473992194,110620095358894082,110620086768959490,110619979394777090,110619730286673922,110620078179024898,110619687337000962,110619704516870146,110619816186019842,110619670157131778,110620048114253826,110619734581641218,110619975099809794,110620065294123010,110901514501160962,110901523091095554,110901471551488002,110901527386062850,110901475846455298,111182998057451520,111183045304385536,111183324476276737,111183032417124352,111182637281116160,111182654462033920,111183010944057344,111183114023665665,111182929339154432,111183122634899457,111183028122550272,111183066777649153,111183105433272321,111183079662092289,111183015237451776,111183071072419841,111182680231903232,111183328771768321,111183092548632577,111182684525428736,111183088253337601,111183096842944513,111183036712222720,111183109727453185,111183083956994049,111182925044514816,111182955109941248,111183049598435329,111183101138108417,111183006648500224,111182766130003968,111183041008173056,111183118321123329,111182620102098944,111183062486417409,111183053891895297,111183320180457473,111183075367256065,111464421505236994,111464425800204290,111464464454909954,111464473044844546,111464477339811842,111745969492721666,111745866413506562,111745952312852482,111745741859454978,111745759039324162,111745600125534210,111745780514160642,111745973787688962,111745608715468802,111745737564487682,111745789104095234,111745591535599618,111745595830566914,111745750449389570,111745746154422274,111745776219193346,111745754744356866,111745939427950594,111745724679585794,111745763334291458,111745793399062530,111745578650697730,111745728974553090,111745613010436098,111745733269520386,111745767629258754,111745621600370690,111745617305403394,111745771924226050,111745797694029826,111745582945665026,111745784809127938,111745926543048706,111745900773244930,111745948017885186,111745896478277634,111745574355730434,111745720384618498,112027216836362242,112027422994792450,112027070807474178,112027195361525762,112027414404857858,112027092282310658,112027444469628930,112027401519955970,112027225426296834,112027242606166018,112027221131329538,112027259786035202,112027083692376066,112027264081002498,112027268375969794,112027234016231426,112027246901133314,112027066512506882,112027272670937090,112027238311198722,112027203951460354,112027057922572290,112027255491067906,112027229721264130,112027096577277954,112027049332637698,112027199656493058,112027208246427650,112027375750152194,112027075102441474,112027448764596226,112027087987343362,112027371455184898,112027053627604994,112027251196100610,112027427289759746,112027341390413826,112027212541394946,112308906555342848,112308949505277953,112308910850899968,112308520008941568,112309009634295809,112308580138745856,112308983863836673,112309001044951041,112308962393260033,112308966684491777,112308975274098689,112308584432271360,112308537187958784,112308996749787137,112308855016783872,112308979568934913,112308824951357440,112308928029392896,112308992455475201,112309013930508289,112309220087300097,112308829245997056,112309228678610945,112308940915015680,112308936619065344,112309018227965953,112308932323966976,112308897964294144,112309031131742209,112308970979262465,112308554368876544,112309022522671105,112308666036846592,112308945211228160,112308988160180225,112309005340114945,112308953798737921,112309224383119361,112308915144294400,112590248410480640,112871946703208449,112871779199418368,112871890868436992,112871963883929601,112871933817257985,112871804970205184,112871615990267904,112871925227520001,112871895164649472,112871899458699265,112871860804321280,112871856508764160,112871865097715712,112871968181387265,112871469962362880,112871920932683777,112871972476092417,112871955293536257,112871886572486656,112871882277388288,112871877982814208,112871950998372353,112871929522356225,112871530092167168,112871487141380096,112871847917715456,112871774904778752,112871534385692672,112871903752159233,112871981085294593,112871916637913089,112871942408896513,112872170040721409,112872174336540673,112871938113601537,112871959587717121,112871912346681345,112871504322297856,112872178632032257,113153649313251329,113153361549197312,113153322894426112,113153425975083009,113153224128724992,113153421679919105,113153447452803073,113153206949117952,113153009362403328,113153176884674560,113153090966978560,113153215539249152,113153181178658816,113153331485474816,113153279946915840,113153597790289921,113152979299008512,113153005068877824,113153619265585153,113153194063495168,113153614970224641,113153378728869889,113153219834413056,113153254176129024,113153344387481600,113153395909394433,113153211244544000,113153357272776704,113153456057286657,113153249881489408,113153202653233152,113153400204230657,113152962118090752,113153623560486913,113153241297911808,113153413090312193,113153198358659072,113153374435409921,113153404499066881,113153645017432065,113153627856044033,113153340074426368,113153365845147648,113153430270246913,113153391614623745,113153185473298432,113153335781031936,113153387323392001,113153602085781505,113152944939073536,113153438860640257,113153593501024257,113153417385607169,113153408793968641,113153352959524864,113153443158097921,113153434564427777,113153370141360128,113153653608742913,113434909541138433,113434913837350913,113434866591334401,113434797871136768,113434840821858304,113434729152839680,113434849412120577,113434900951793665,113434565943689216,113434437094801408,113434883770679297,113434931038846977,113434853705580545,113434918134808577,113434827936235520,113434870886105089,113434905246957569,113434806462185472,113434810757742592,113435119994142721,113434832230809600,113434480045588480,113434454275719168,113434896656629761,113434484339113984,113434724858200064,113434862300102657,113435128585453569,113434922429513729,113434845118070784,113434888067022849,113434875180941313,113434754923626496,113434815051137024,113434879475777537,113434892362317825,113435124289961985,113434836525907968,113434419915784192,113716221318922240,113716294346473472,113997777903026178,113997533089890306,113997434305642498,113997782197993474,113997524499955714,113997387061002242,113997756428189698,113997571744595970,113997374176100354,113997614694268930,113997541679824898,113997679118778370,113997704888582146,113997404240871426,113997545974792194,113997674823811074,113997520204988418,113997563154661378,113997644759040002,113997588924465154,113997369881133058,113997550269759490,113997786492960770,113997670528843778,113997610399301634,113997601809367042,113997769313091586,113997567449628674,113997576039563266,113997558859694082,113997606104334338,113997631874138114,113997649054007298,113997391355969538,113997395650936834,113997430010675202,113997760723156994,113997773608058882,113997765018124290,113997382766034946,113997790787928066,113997618989236226,113997666233876482,113997584629497858,113997421420740610,113997795082895362,113997417125773314,113997640464072706,113997408535838722,113997627579170818,113997399945904130,113997597514399746,113997593219432450,113997537384857602,113997747838255106,113997515910021122,113997636169105410,113997580334530562,113997378471067650,113997623284203522,113997554564726786,113997412830806018,113997528794923010,114279334471270401,114279124035567616,114279149788332032,114279252866367488,114279085380141056,114279295816237057,114279519172427777,114279553515585537,114279261456039936,114278879205851136,114279093970337792,114279278635712513,114279111151386624,114279493408063489,114279076791517184,114279338767482881,114278909269245952,114279102560075776,114279081085501440,114279222801268736,114279179853758464,114279154082971648,114279523467329537,114279312997154817,114279265751990272,114279141204754432,114279497697132545,114279244294324224,114279270048202752,114279119741255680,114279527762886657,114279304405909505,114278844845916160,114278990873821184,114279274342252545,114278904975720448,114279239981268992,114279287230234625,114279501992624129,114279115446091776,114279321586761729,114279355964129281,114279291521466369,114279308700811265,114279514877067265,114279544924274689,114279235687874560,114279343064940545,114279549220093953,114279231392317440,114279330177089537,114279347359645697,114279106855960576,114278862024933376,114279098265501696,114279300111073281,114279325881925633,114279257179619328,114279317292449793,114560843814797313,114560495911632896,114560745024913408,114560895344312321,114560384245956608,114560719271034880,114560517385879552,114560319822626816,114560710664585216,114560740728700928,114560809447981057,114560813744193537,114560483026403328,114560332702613504,114561058552676353,114560543157256192,114560818041651201,114560358472286208,114560727843078144,114560749318963201,114560538862419968,114560547450322944,114560349881368576,114560513090781184,114560371357057024,114560775087783937,114560345588301824,114560989859741697,114560624765042688,114561049960841217,114560534566993920,114560525976207360,114560779382620161,114561024196804609,114560869572804609,114560508797124608,114560856690065409,114560839535820801,114560753612423169,114560783677521921,114560337001644032,114560762206945281,114560474435747840,114560654830469120,114560324111695872,114560521679732736,114560328407252992,114560487321567232,114560367060975616,114560908229410817,114560500207058944,114560732137652224,114560787973865473,114560697777979392,114560706369028096,114560362768433152,114560714957979648,114560530271436800,114560354182561792,114560822336356353,114560766498177025,114560796563472385,114560478730256384,114560723545161728,114561019900985345,114560770792947713,114560504500781056,114560830940839937,114560805153800193,114560470140715008,114560792269160449,114561041371627521,114561054258429953,114560865278951425,114560465850531840,114560491616600064,114560736432750592,114560629059682304,114561028492296193,114560800858636289,114560341291368448,114560860984705025,114560379952431104,114842035328450562,114842177062371330,114842215717076994,114842099752960002,114842211422109698,114841953724071938,114842013853614082,114841816285118466,114842005263679490,114841794810281986,114842091163025410,114842026738515970,114842031033483266,114842043918385154,114841966608973826,114842065393221634,114841988083810306,114841824875053058,114842202832175106,114842172767404034,114842189947273218,114841996673744898,114841979493875714,114842185652305922,114841940839170050,114841854939824130,114842052508319746,114841820580085762,114841846349889538,114841975198908418,114841811990151170,114842039623417858,114842056803287042,114842104047927298,114841829170020354,114842073983156226,114842048213352450,114842000968712194,114841949429104642,114842009558646786,114842129817731074,114842181357338626,114841970903941122,114842198537207810,114841859234791426,114841803400216578,114842061098254338,114842220012044290,114841833464987650,114842018148581378,114842194242240514,114841799105249282,114841958019039234,114841807695183874,114841837759954946,114841992378777602,114842207127142402,114841983788843010,114842022443548674,114842095457992706,114841962314006530,114841842054922242,114842069688188930,114841945134137346,115123420111699970,115123334212354050,115123480241242114,115123463061372930,115123484536209410,115123536075816962,115123690694639618,115123544665751554,115123660629868546,115123669219803138,115123424406667266,115123286967713794,115123514600980482,115123510306013186,115123299852615682,115123432996601858,115123488831176706,115123523190915074,115123656334901250,115123475946274818,115123694989606914,115123682104705026,115123540370784258,115123295557648386,115123518895947778,115123686399672322,115123304147582978,115123566140588034,115123570435555330,115123527485882370,115123269787844610,115123467356340226,115123604795293698,115123329917386754,115123321327452162,115123647744966658,115123454471438338,115123445881503746,115123274082811906,115123450176471042,115123493126144002,115123308442550274,115123317032484866,115123497421111298,115123677809737730,115123282672746498,115123415816732674,115123458766405634,115123531780849666,115123501716078594,115123278377779202,115123437291569154,115123471651307522,115123291262681090,115123441586536450,115123664924835842,115123574730522626,115123506011045890,115123428701634562,115123673514770434,115123312737517570,115123548960718850,115123579025489922,115405075487522816,115686425899761666,115686498914205698,115686619173289986,115686520389042178,115686494619238402,115686395834990594,115686460259500034,115686610583355394,115686271280939010,115686391540023298,115686374360154114,115686528978976770,115686413014859778,115686258396037122,115686370065186818,115686284165840898,115686408719892482,115686623468257282,115686434489696258,115686516094074882,115686636353159170,115686490324271106,115686627763224578,115686279870873602,115686228331266050,115686404424925186,115686486029303810,115686236921200642,115686477439369218,115686249806102530,115686597698453506,115686443079630850,115686219741331458,115686378655121410,115686473144401922,115686365770219522,115686232626233346,115686387245056002,115686451669565442,115686464554467330,115686644943093762,115686430194728962,115686640648126466,115686481734336514,115686266985971714,115686447374598146,115686417309827074,115686382950088706,115686224036298754,115686262691004418,115686614878322690,115686554748780546,115686468849434626,115686455964532738,115686524684009474,115686400129957890,115686632058191874,115686438784663554,115686606288388098,115686241216167938,115686421604794370,115686254101069826,115686245511135234,115968094160486400,116249616358440961,116249560524849152,116249629242884097,116249878352560129,116249466042122240,116249642129424385,116249599179227137,116249663604457473,116249809655431169,116249594885177344,116249633537785857,116249315710795776,116249646423736321,116249169682890752,116249659308244993,116249869761249281,116249603472687105,116249581997916160,116249556229292032,116249624948047873,116249655014064129,116249204042825728,116249650718900225,116249586293014528,116249612067209217,116249478919946240,116249620653211649,116249229812695040,116249590588964864,116249874057068545,116249234106220544,116249577703342080,116249186861907968,116249672200486913,116249504690733056,116249637834129409,116249474625306624,116249564818243584,116249667901915137,116249547638243328,116530971086422018,116530945316618242,116812519077445634,116812420293197826,116812446063001602,117093951105073154,117093963989975042,117093916745334786,117375469025034242,117375396010590210,117656870987104258,117656944001548290,117938320213344256,118219997037461505,118219816654798848,118219554649669632,118220237561659393,118219799462281216,118219790879096832,118219919722151936,118219915425939456,118219975555874817,118219966966398977,118219928309661697,118219949785022465,118219889655218176,118219885361823744,118219795162726402,118219640547770368,118219979851038721,118219924016201729,118219803756920832,118220220389982209,118219945490186241,118220241856888833,118219863899635712,118219984145219585,118220134490701825,118219558943195136,118220203189534721,118219829527707648,118219962671104001,118220198894043137,118219528879800320,118219971260710913,118219941195415553,118219911129989120,118220194598223873,118220319166234625,118219992738889729,118219936904183809,118219902540316672,118219906834890752,118219872475217920,118219494519865344,118219881066266624,118219988441432065,118219511698882560,118219954079858689,118219958374760449,118501063980089346,118501102634795010,118501094044860418,118501351742898178,118501343152963586,118501283023421442,118501270138519554,118501098339827714,118501317383159810,118501033915318274,118501076864991234,118501042505252866,118501295908323330,118501356037865474,118501360332832770,118501051095187458,118501072570023938,118501038210285570,118501274433486850,118501347447930882,118501325973094402,118501029620350978,118501313088192514,118501089749893122,118501085454925826,118501368922767362,118501287318388738,118501338857996290,118501055390154754,118501025325383682,118501304498257922,118501321678127106,118501111224729602,118501308793225218,118501068275056642,118501059685122050,118501300203290626,118501106929762306,118501081159958530,118501291613356034,118501046800220162,118501330268061698,118783007114657793,118782453057912832,118782616267259904,118782470238961664,118782642036539392,118782474532028416,118782680715165696,118782483122946048,118782654922096640,118782663513079808,118782985639952385,118782650626867200,118782633447784448,118783161755369473,118782667807916032,118783019994972161,118782620562292736,118782994223464449,118782646330392576,118783071557124097,118783183203336193,118782659217653760,118783032884396033,118782624857718784,118782848195821568,118782629151440896,118782637741441024,118782672100982784,118782989929611265,118782465942028288,119064344652283904,119064348946333697,119063979579801600,119064387601235969,119064327470448640,119064391896530945,119064336060121088,119064254457839616,119064396190842881,119064370420318209,119064413371564033,119064366125547521,119064379009990657,119064417669021697,119064310291955712,119063919449997312,119064297405349888,119064383304892417,119063983873327104,119064314585350144,119064628119666689,119064065477902336,119064404781170689,119064228687052800,119064224392413184,119063936629014528,119064340356071424,119064353239793665,119063953809932288,119064361834315777,119064623824175105,119064619528355841,119064400486006785,119064374715154433,119064421983780865,119064305996398592,119064331765022720,119064409075351553,119345862577946625,119345699369123840,119345841102258177,119345892645732353,119345866873241601,119345849691865089,119345411605725184,119345828216504321,119345858281603073,119345896960557057,119345871167553537,119345540454612992,119345703663763456,119345853986701313,119345836811026433,119345845397028865,119345458850037760,119345780973109248,119345772382060544,119346094505066497,119345875462717441,119345789562060800,119345394426707968,119345428786642944,119345802447159296,119345729434550272,119345819628994560,119345888348274689,119346103096377345,119345806741733376,119345823923044353,119346098800885761,119345815332782080,119345811036831744,119345879757881345,119345454556512256,119345884052062209,119345785268666368,119627247368142850,119627195828535298,119627200123502594,119627251663110146,119627238778208258,119908713755246594,119908670805573634,119908675100540930,119908726640148482,119908722345181186,120190193041735680,120471668018511872,120753095736688640,120753151585222656,121034622267031552,121316101538775040,121316045690109952,121597202840813570,121597370344538114,121597615157673986,121597378934472706,121597469128785922,121597589387870210,121597460538851330,121597421884145666,121597619452641282,121597430474080258,121597503488524290,121597447653949442,121597220020682754,121597237200551938,121597529258328066,121597340279767042,121597413294211074,121597228610617346,121597357459636226,121597464833818626,121597404704276482,121597361754603522,121597344574734338,121597499193556994,121597439064014850,121597215725715458,121597408999243778,121597387524407298,121597417589178370,121597473423753218,121597426179112962,121597490603622402,121597348869701634,121597597977804802,121597245790486530,121597383229440002,121597580797935618,121597211430748162,121597606567739394,121597207135780866,121597494898589698,121597232905584642,121597194250878978,121597456243884034,121597593682837506,121597602272772098,121597391819374594,121597396114341890,121597353164668930,121597224315650050,121597241495519234,121597400409309186,121597451948916738,121597254380421122,121597585092902914,121597198545846274,121597443358982146,121597366049570818,121597572208001026,121597434769047554,121597258675388418,121597374639505410,121597610862706690,121878995643531264,121879051492261888,122160535047831554,122160384723976194,122160547932733442,122160423378681858,122160479213256706,122160165680644098,122160414788747266,122160148500774914,122160337479335938,122160169975611394,122160307414564866,122160560817635330,122160328889401346,122160401903845378,122160195745415170,122160569407569922,122160187155480578,122160552227700738,122160565112602626,122160182860513282,122160178565545986,122160367544107010,122160191450447874,122160290234695682,122160324594434050,122160294529662978,122160371839074306,122160393313910786,122160389018943490,122160298824630274,122160410493779970,122160397608878082,122160311709532162,122160208630317058,122160530752864258,122160346069270530,122160539342798850,122160449148485634,122160152795742210,122160556522668034,122160354659205122,122160522162929666,122160350364237826,122160174270578690,122160406198812674,122160320299466754,122160144205807618,122160453443452930,122160419083714562,122160444853518338,122160440558551042,122160380429008898,122160161385676802,122160333184368642,122160358954172418,122160363249139714,122160341774303234,122160316004499458,122160543637766146,122160157090709506,122160303119597570,122160204335349762,122160376134041602,122441790979571714,122441872583950338,122441928418525186,122442010022903810,122442018612838402,122441623475847170,122441782389637122,122441649245650946,122441825339310082,122442014317871106,122442031497740290,122441653540618242,122441885468852226,122441838224211970,122441778094669826,122441863994015746,122441859699048450,122441808159440898,122442005727936514,122441821044342786,122441889763819522,122441666425520130,122441894058786818,122441816749375490,122441636360749058,122441833929244674,122441868288983042,122441876878917634,122442027202772994,122441640655716354,122441898353754114,122441670720487426,122441679310422018,122441786684604418,122441799569506306,122441954188328962,122441644950683650,122441855404081154,122441924123557890,122441765209767938,122441851109113858,122441842519179266,122441773799702530,122441619180879874,122441919828590594,122441657835585538,122441769504735234,122441997138001922,122442022907805698,122441662130552834,122441803864473602,122441829634277378,122441627770814466,122441915533623298,122441632065781762,122441812454408194,122442035792707586,122441881173884930,122442044382642178,122441795274539010,122441846814146562,122442040087674882,122441683605389314,122723094147235840,122723596660965377,122723794225594369,122723566593769473,122723399089651712,122723154277040128,122723540822786049,122723592366260225,122723605265448961,122723489282588672,122723583772590081,122723403384291328,122723519349522432,122723480693637120,122723545117556737,122723575183245313,122723549412392961,122723553707229185,122723764185268225,122723158570565632,122723240175140864,122723128507170816,122723429155078144,122723493595643904,122723523643572225,122723562298474497,122723802816905217,122723484989194240,122723588068802561,122723579478409217,122723536531554305,122723506462261248,122723111326253056,122723510757359616,122723502167687168,122723515053309952,122723472102588416,122723558002130945,122723798521413633,122723527937032193,122723570888081409,123004878361001984,123005050159955969,123004968572354560,123005063045513217,123004874066362368,123004904131788800,123004990030020608,123004985734070272,123004947079299072,123005041570480129,123005024389103617,123004981438971904,123004955670347776,123004959965904896,123004586302963712,123005028683939841,123005080242159617,123005058749300737,123004998620282881,123004964259299328,123004977144397824,123005067342970881,123005037275185153,123005269202305025,123004629253750784,123005002913742849,123005020094267393,123005032978841601,123005273498124289,123004994326233088,123005015799496705,123005071637676033,123005239162044417,123004603483881472,123005045864792065,123005054455119873,123004569123946496,123004633547276288,123005011508264961,123004715151851520,123005277793615873,123286061279674368,123286323290308608,123286190128562176,123286538022223873,123286529431830529,123286701247365121,123286512251895809,123286486484975617,123286439236009984,123286525136666625,123286696951873537,123286104230461440,123286714131808257,123286379108499456,123286477890453505,123286692663984129,123286306110701568,123286340459495424,123286555218870273,123286297520242688,123286314700832768,123286499365814273,123286349043073024,123286507955552257,123286310406127616,123286460710780928,123286452121108480,123286301814816768,123286044100657152,123286293225078784,123286430647058432,123286495070978049,123286520841502721,123286456434360320,123286727017627649,123286516547190785,123286503660650497,123286744179015681,123286465006731264,123286353337712640,123286284634882048,123286722722070529,123286108523986944,123286546614386689,123286752770326529,123286533726011393,123286490776207361,123286473596993537,123286422056009728,123286718427168769,123286542319681537,123286443549065216,123286318995996672,123286434942615552,123286078460592128,123286748474834945,123286469302943744,123286276046258176,123286280340242432,123567909931122690,123567939995893762,123567690887790594,123567927110991874,123567742427398146,123567527679033346,123567798261972994,123567531974000642,123567523384066050,123567686592823298,123567579218640898,123567905636155394,123567703772692482,123567733837463554,123567720952561666,123567540563935234,123567557743804418,123567562038771714,123567819736809474,123567931405959170,123567763902234626,123567897046220802,123567536268967938,123567768197201922,123567785377071106,123567918521057282,123567665117986818,123567549153869826,123567751017332738,123567755312300034,123567725247528962,123567824031776770,123567772492169218,123567781082103810,123567570628706306,123567793967005698,123567682297856002,123567699477725186,123567776787136514,123567815441842178,123567738132430850,123567678002888706,123567566333739010,123567673707921410,123567553448837122,123567922816024578,123567712362627074,123567759607267330,123567669412954114,123567544858902530,123567854096547842,123567944290861058,123567746722365442,123567729542496258,123567583513608194,123567716657594370,123567789672038402,123567935700926466,123567828326744066,123567519089098754,123567914226089986,123567695182757890,123567708067659778,123849320481030146,123849294711226370,124130842688159746,124130602169991170,124130584990121986,124130563515285506,124130791148552194,124130868457963522,124130606464958466,124130550630383618,124130821213323266,124130580695154690,124130808328421378,124130782558617602,124130799738486786,124130576400187394,124130589285089282,124130559220318210,124130855573061634,124130825508290562,124130572105220098,124130542040449026,124130524860579842,124130554925350914,124130846983127042,124130812623388674,124130773968683010,124130795443519490,124130610759925762,124130769673715714,124130529155547138,124130859868028930,124130851278094338,124130816918355970,124130537745481730,124130829803257858,124130546335416322,124130593580056578,124130786853584898,124130567810252802,124130838393192450,124130597875023874,124130533450514434,124130804033454082,124412326253953026,124412270419378178,124693745396154370,124693801230729218,124975276207505410,124975220372930562,125256738313142274,125256699658436610,125256746903076866,125256695363469314,125256751198044162,125538221879984130,125538174635343874,125538170340376578,125538226174951426,125538213290049538,125819615249891328,125819804222226433,125820018969411585,125820023265230849,125819464918958080,125819568015474688,125819765566603265,125819559425277952,125819555130638336,125819726911504384,125819748387389441,125819787042291713,125819976037761025,125819988922204161,125819774156210177,125819628128108544,125819572310638592,125819993217564673,125820001808023553,125819589491228672,125819580901097472,125819714026405888,125819799927062529,125819336070070272,125819997512466433,125819761275371521,125819318891053056,125819744093339648,125819812812619777,125819971742269441,125819653898895360,125819808516407297,125819735501176832,125819598080704512,125819696846405632,125819782745948161,125819739797127168,125819817110077441,125819821404782593,125819769861373953,125819383314382848,125819795631898625,125819379020857344,125819623833468928,125819593786392576,125819353250988032,125819585196523520,125820027560722433,125819830009266177,125819705437454336,125819731224756224,125819791337586689,125819718339461120,125819778451046401,125819576605212672,125819967454445569,125819550836654080,125819752680849409,125819709733011456,126101244838084609,126101180414164992,126101240543313921,126100793867763712,126100828227698688,126101219070050304,126101214773837824,126101493946122241,126101249132920833,126101498241941505,126101257722658817,126101103104819200,126101274903773185,126101304992268289,126101206182789120,126101502537433089,126100811046780928,126101270608609281,126101171823116288,126101262019002369,126101279198937089,126100939895668736,126101189003116544,126101210477887488,126101227657560065,126101201888215040,126101098810179584,126101128875606016,126101266314297345,126100858291093504,126100853997568000,126101223364100097,126101184709722112,126101292086788097,126101287789330433,126101296381493249,126101236252082177,126101283493117953,126101253427757057,126382578081529856,126382732699369473,126382543739813888,126382719814795265,126382938875625473,126382500790075392,126382771358203905,126382539444649984,126382328974278656,126382728404467713,126382668292882432,126382977514143745,126382522264059904,126382530854518784,126382698340810753,126382655390875648,126382749880483841,126382681178177536,126382736995713025,126382509378699264,126382724109631489,126382659686432768,126382535149944832,126382548034125824,126382968922832897,126382745585319937,126382303204409344,126382646799826944,126382758469828609,126382517968896000,126382333267804160,126382573786890240,126382767063498753,126382663979827200,126382754175647745,126382685454598144,126382505084059648,126382715520024577,126382565203312640,126382921695690753,126382917407997953,126382689750548480,126382694046760960,126382973218652161,126382603852316672,126382943170985985,126382762766041089,126382947465887745,126382526558633984,126382268844474368,126382925991182337,126382286023491584,126382676864925696,126382951761444865,126382779962687489,126382702634270721,126382741291008001,126382414872379392,126382711228792833,126664010126655488,126664246334914561,126664413852336129,126664426738155521,126664220562030593,126663997240770560,126664443899543553,126664053058240512,126664156154888192,126664452490854401,126664151841636352,126664194791505921,126664237742751745,126663980060770304,126663778181120000,126664169023471616,126664207676080129,126664242040209409,126664023010836480,126664211972423681,126664229152358401,126663992945606656,126664048763600896,126663743821185024,126663975766786048,126664400967892993,126664203381178369,126664005831229440,126664392384774145,126664173317521409,126664078829027328,126664164727259136,126664177610981377,126664233446539265,126664422442598401,126664186205503489,126664418147696641,126664040180023296,126664216267718657,126664121776537600,126663808244514816,126664130367586304,126664224857194497,126663984355409920,126664190496735233,126663889849090048,126664199086342145,126663761000202240,126664014421360640,126664396672401409,126664018716524544,126663803950989312,126664160431308800,126664134663143424,126664138956537856,126664448195362817,126664001535344640,126664254939398145,126664143269593088,126945523740311552,126945283221225472,126945923172073473,126945708423249921,126945601061519362,126945918876254209,126945669768216577,126945553805737984,126945278927699968,126945609639854080,126945644000182272,126945613933248512,126945596753248256,126945678357889025,126945721311625217,126945665473445889,126945686949134337,126945528034951168,126945635408019456,126945626818347008,126945682652790785,126945729922662401,126945691244429313,126945717016920065,126945631112921088,126945674063052801,126945927467565057,126946056340111361,126945712719462401,126945661182214145,126945648294232065,126945639703969792,126945605344296960,126945695538741249,126945253157830656,126945364825800704,126945235976912896,126945704129069057,126945699833905153,126945218797895680,126945652587692033,127227140450156545,127227136158924801,127227084616564736,127227076038033410,127227183399960577,127227144744927233,127227118976892928,127227187696173057,127227088909959168,127227123270942721,127227527021985793,127227003011661824,127227166221139969,127227161925844993,127227127564402689,127227080321007616,127227204899504129,127227170515451905,127227402444275713,127227157629501441,127227191993630721,127227398148784129,127227179105779713,127227101795057664,127227174810615809,127227153334599681,127226758197936128,127227106089631744,127226998717022208,127227071729958912,127226710953623552,127227149039763457,127227110384730112,127227028782448640,127227196288335873,127227393852964865,127226728134541312,127226839802511360,127226753904410624,127227114680680448,127226693774606336,127508190236573698,127508430754742274,127508576783630338,127508194531540994,127508581078597634,127508323380559874,127508404984938498,127508396395003906,127508331970494466,127508426459774978,127508185941606402,127508233186246658,127508319085592578,127508469409447938,127508336265461762,127508572488663042,127508435049709570,127508379215134722,127508203121475586,127508220301344770,127508473704415234,127508568193695746,127508439344676866,127508477999382530,127508211711410178,127508387805069314,127508327675527170,127508409279905794,127508173056704514,127508563898728450,127508585373564930,127508168761737218,127508181646639106,127508344855396354,127508362035265538,127508349150363650,127508207416442882,127508400689971202,127508366330232834,127508353445330946,127508593963499522,127508340560429058,127508422164807682,127508503769186306,127508555308793858,127508465114480642,127508589668532226,127508216006377474,127508443639644162,127508374920167426,127508447934611458,127508357740298242,127508383510102018,127508198826508290,127508177351671810,127508370625200130,127508413574873090,127508546718859266,127508392100036610,127508228891279362,127508417869840386,127508314790625282,127508559603761154,127789695278645250,127789871372304386,127789669508841474,127789879962238978,127790047465963522,127789832717598722,127789819832696834,127790064645832706,127789875667271682,127789952976683010,127789897142108162,127789944386748418,127789708163547138,127789940091781122,127789884257206274,127789905732042754,127790068940800002,127789660918906882,127789703868579842,127790034581061634,127789682393743362,127789837012566018,127789678098776066,127789811242762242,127789824127664130,127789643739037698,127789828422631426,127789789767925762,127789652328972290,127790056055898114,127790038876028930,127789806947794946,127790021696159746,127790051760930818,127789948681715714,127789841307533314,127789815537729538,127789901437075458,127789858487402498,127789686688710658,127790043170996226,127789867077337090,127789910027010050,127789648034004994,127789802652827650,127789862782369794,127789888565018624,127789854192435202,127789845602500610,127789673803808770,127789665213874178,127789690983677954,127789798357860354,127789656623939586,127789849897467906,127790030286094338,127789922911911938,127789914321977346,127789978746486786,127790060350865410,127789794062893058,127789918616944642,127789892847140866,128071500980748288,128071445131165696,128352795556052994,128352971649712130,128352606577491970,128352898635268098,128352744016445442,128352765491281922,128352756901347330,128353006009450498,128352808440954882,128352645232197634,128352902930235394,128352993124548610,128352593692590082,128352847095660546,128352825620824066,128352817030889474,128352872865464322,128352859980562434,128352610872459266,128353014599385090,128352782671151106,128352868570497026,128352786966118402,128352653822132226,128352658117099522,128352752606380034,128352829915791362,128352864275529730,128352855685595138,128352761196314626,128352774081216514,128352988829581314,128353010304417794,128352748311412738,128352851390627842,128352842800693250,128352619462393858,128352640937230338,128352791261085698,128352838505725954,128352628052328450,128353018894352386,128352739721478146,128352636642263042,128352804145987586,128352632347295746,128352894340300802,128352984534614018,128352597987557378,128352769786249218,128352778376183810,128352812735922178,128352890045333506,128352980239646722,128352799851020290,128352623757361154,128352615167426562,128352928700039170,128352834210758658,128352602282524674,128352821325856770,128353001714483202,128352997419515906,128634240468058114,128634274827796482,128634317777469442,128634090144202754,128634077259300866,128634253352960002,128634296302632962,128634468101324802,128634300597600258,128634365022109698,128634309187534850,128634347842240514,128634304892567554,128634489576161282,128634103029104642,128634493871128578,128634218993221634,128634214698254338,128634085849235458,128634292007665666,128634446626488322,128634326367404034,128634287712698370,128634373612044290,128634485281193986,128634227583156226,128634249057992706,128634343547273218,128634257647927298,128634270532829186,128634472396292098,128634334957338626,128634459511390210,128634369317076994,128634068669366274,128634094439170050,128634098734137346,128634128798908418,128634339252305922,128634236173090818,128634231878123522,128634283417731074,128634111619039234,128634133093875714,128634244763025410,128634313482502146,128634476691259394,128634266237861890,128634480986226690,128634322072436738,128634115914006530,128634455216422914,128634330662371330,128634072964333570,128634223288188930,128634107324071938,128634377907011586,128634261942894594,128634081554268162,128634279122763778,128634120208973826,128634403676815362,128634463806357506,128915925910945792,129197345038008320,129197400875270146,129478875864432640,129760294991429632,129760350828494850,130041722731364352,130041915988246529,130042143620071425,130042126458683393,130041860151836672,130041477901647872,130041830088114176,130041714141888512,130041894512033793,130041834383671296,130041885926031361,130041684075937792,130041868743999488,130041675487313920,130041941760737281,130041718437052416,130042096392929281,130041898806870017,130041748484128768,130042152211382273,130041589569617920,130041842990120960,130041838677065728,130041864447787008,130041924577722369,130041679781298176,130041911692951553,130042122163126273,130041821497065472,130042147915890689,130041739900551168,130041946055442433,130041890217263105,130041851562164224,130041503671517184,130041873038049281,130041933167067137,130041752778768384,130041460720730112,130042100688420865,130042113572864001,130041778549555200,130041937463279617,130041928872886273,130041907396608001,130041692666134528,130041954659926017,130041701255872512,130042117868224513,130041507965042688,130041903101706241,130041709847183360,130041705551757312,130041877331509249,130041696961298432,130042092105891841,130041855875416064,130041443541712896,130041920282558465,130323317974564864,130604840170684417,130604896008863745,130604853055127553,130604629734719488,130604689853972480,130604814401208320,130604835879452673,130605050641842177,130605042059444225,130604801515585536,130604848760291329,130604822991470593,130605063526285313,130604646914719744,130604844465455105,130605076412104705,130604865941667841,130604659800604672,130604883120488449,130604393495134208,130604634029359104,130605046346350593,130604878826307585,130604784337092608,130605093573492737,130604887416700929,130604702732189696,130604728502976512,130604792943542272,130604698437550080,130604818697420800,130604810105257984,130604539523039232,130605072116547585,130605097869312001,130604625440735232,130605102164803585,130604672684785664,130604453624938496,130604870235979777,130604891714158593,130604410674151424,130604857350029313,130604805828837376,130604788630487040,130604642619555840,130604655505178624,130604651209293824,130604427855069184,130605067821645825,130604904613347329,130604874531143681,130604771450486784,130604668390473728,130604457918464000,130604780041535488,130604827284930561,130604664095309824,130604861646372865,130885868471844864,130886285081968640,130886319442165761,130886276492296192,130886134777315328,130886328031838209,130886572846022657,130886255018246144,130885928601649152,130886353803018241,130886323737001985,130886521323061249,130886315147395073,130886173414260736,130886203479687168,130885902831779840,130886117596266496,130886542798356481,130886126186004480,130886259313803264,130886577141514241,130886370985574401,130886280805548032,130886263607197696,130886293674131456,130886568550203393,130886121891430400,130886177708900352,130886147661496320,130886362393411585,130886109006069760,130886379590057985,130886164830683136,130886332326739969,130885885650862080,130886289377918976,130886302261641217,130886349507854337,130886267920252928,130886551388815361,130886104711430144,130886310856163329,130886336623083521,130886100417445888,130886246427197440,130886538502995969,130886345212690433,130886525618552833,130886014499749888,130886366690869249,130886547093258241,130885932895174656,130886139072020480,130886358097199105,130886130481889280,130886517036220417,130886143367184384,130886340918378497,130886297968181249,131167652697276418,131167721416753154,131167502373421058,131167614042570754,131167592567734274,131167751481524226,131167575387865090,131167562502963202,131167364934467586,131167360639500290,131167356344532994,131167373524402178,131167536733159426,131167730006687746,131167558207995906,131167605452636162,131167519553290242,131167738596622338,131167588272766978,131167343459631106,131167403589173250,131167609747603458,131167532438192130,131167347754598402,131167622632505346,131167768661393410,131167489488519170,131167579682832386,131167377819369474,131167515258322946,131167571092897794,131167583977799682,131167618337538050,131167549618061314,131167541028126722,131167369229434882,131167498078453762,131167523848257538,131167747186556930,131167566797930498,131167648402309122,131167764366426114,131167755776491522,131167386409304066,131167678467080194,131167553913028610,131167644107341826,131167390704271362,131167382114336770,131167545323094018,131167734301655042,131167394999238658,131167760071458818,131167639812374530,131167742891589634,131167407884140546,131167510963355650,131167601157668866,131167352049565698,131167493783486466,131167596862701570,131167506668388354,131167528143224834,131449239343333378,131449153443987458,131448977350328322,131449058954706946,131449080429543426,131448878566080514,131449071839608834,131448865681178626,131449028889935874,131449084724510722,131449024594968578,131448990235230210,131449067544641538,131449196393660418,131449011710066690,131448981645295618,131448998825164802,131449226458431490,131449217868496898,131449054659739650,131449204983595010,131448861386211330,131449235048366082,131448831321440258,131449020300001282,131448882861047810,131449230753398786,131449119084249090,131449213573529602,131448964465426434,131449063249674242,131448869976145922,131448848501309442,131449076134576130,131448994530197506,131448818436538370,131449007415099394,131449243638300674,131449016005033986,131448985940262914,131449041774837762,131449089019478018,131448857091244034,131448827026472962,131449209278562306,131448835616407554,131449046069805058,131449222163464194,131448852796276738,131448822731505666,131448968760393730,131449003120132098,131449037479870466,131449114789281794,131449093314445314,131448839911374850,131448973055361026,131449050364772354,131449123379216386,131449127674183682,131448844206342146,131449097609412610,131449033184903170,131730546816712706,131730589766385666,131730323478413314,131730525341876226,131730486687170562,131730460917366786,131730293413642242,131730572586516482,131730671370764290,131730718615404546,131730508162007042,131730598356320258,131730714320437250,131730512456974338,131730559701614594,131730705730502658,131730478097235970,131730568291549186,131730319183446018,131730710025469954,131730336363315202,131730452327432194,131730538226778114,131730332068347906,131730594061352962,131730495277105154,131730563996581890,131730499572072450,131730353543184386,131730551111680002,131730297708609538,131730443737497602,131730439442530306,131730503867039746,131730314888478722,131730679960698882,131730448032464898,131730701435535362,131730340658282498,131730465212334082,131730469507301378,131730302003576834,131730310593511426,131730344953249794,131730542521745410,131730692845600770,131730628421091330,131730602651287554,131730306298544130,131730490982137858,131730473802268674,131730516751941634,131730482392203266,131730555406647298,131730327773380610,131730529636843522,131730684255666178,131730357838151682,131730697140568066,131730456622399490,131730688550633474,131730521046908930,131730533931810818,132011931598913538,132012008908324866,132012047563030530,132012172117082114,132012167822114818,132011987433488386,132011970253619202,132011807044861954,132012077627801602,132011832814665730,132011991728455682,132011923008978946,132012189296951298,132012017498259458,132012064742899714,132012073332834306,132011811339829250,132011815634796546,132012163527147522,132011772685123586,132011948778782722,132012021793226754,132011944483815426,132011794159960066,132012180707016706,132012026088194050,132012043268063234,132011974548586498,132011918714011650,132011957368717314,132011789864992770,132012159232180226,132011953073750018,132011776980090882,132012004613357570,132011819929763842,132012034678128642,132011935893880834,132011996023422978,132011802749894658,132011781275058178,132011768390156290,132012069037867010,132011940188848130,132012103397605378,132011927303946242,132012000318390274,132012146347278338,132011983138521090,132011965958651906,132012193591918594,132011785570025474,132011914419044354,132012185001984002,132012038973095938,132012154937212930,132011961663684610,132012013203292162,132012176412049410,132012030383161346,132011828519698434,132011798454927362,132011978843553794,];


fn _semaction_rule_0_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  primary_expression::IDENTIFIER(_item0_) }

fn _semaction_rule_1_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<constant<'lt>>::default()};  primary_expression::primary_expression_1(parser.lbx(0,_item0_)) }

fn _semaction_rule_2_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<stringnt<'lt>>::default()};  primary_expression::primary_expression_2(parser.lbx(0,_item0_)) }

fn _semaction_rule_3_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  primary_expression::primary_expression_3(parser.lbx(1,_item1_)) }

fn _semaction_rule_4_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> primary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<generic_selection<'lt>>::default()};  primary_expression::primary_expression_4(parser.lbx(0,_item0_)) }

fn _semaction_rule_5_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> constant<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<i32>::default()};  constant::I_CONSTANT(_item0_) }

fn _semaction_rule_6_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> constant<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_7(_x_7)=parser.popstack().value { _x_7 } else {<f64>::default()};  constant::F_CONSTANT(_item0_) }

fn _semaction_rule_7_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> constant<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  constant::ENUMERATION_CONSTANT(_item0_) }

fn _semaction_rule_8_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> stringnt<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  stringnt::STRING_LITERAL(_item0_) }

fn _semaction_rule_9_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> stringnt<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  stringnt::FUNC_NAME }

fn _semaction_rule_10_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_selection<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<generic_assoc_list<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  generic_selection {_item2_:parser.lbx(2,_item2_), _item4_:parser.lbx(4,_item4_), } }

fn _semaction_rule_11_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_assoc_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<generic_association<'lt>>::default()};  generic_assoc_list::generic_assoc_list_11(parser.lbx(0,_item0_)) }

fn _semaction_rule_12_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_assoc_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<generic_association<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<generic_assoc_list<'lt>>::default()};  generic_assoc_list::generic_assoc_list_12(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_13_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_association<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<type_name<'lt>>::default()};  generic_association::generic_association_13(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_14_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> generic_association<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  generic_association::DEFAULT_14(parser.lbx(2,_item2_)) }

fn _semaction_rule_15_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<primary_expression<'lt>>::default()};  postfix_expression::postfix_expression_15(parser.lbx(0,_item0_)) }

fn _semaction_rule_16_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_16(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_17_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<postfix_expression<'lt>>::default()};  _item0_ }

fn _semaction_rule_18_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<argument_expression_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_18(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_19_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_19(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_20_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<postfix_expression<'lt>>::default()};  postfix_expression::postfix_expression_20(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_21_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<postfix_expression<'lt>>::default()};  _item0_ }

fn _semaction_rule_22_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<postfix_expression<'lt>>::default()};  _item0_ }

fn _semaction_rule_23_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_24_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_25_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> postfix_expression<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<initializer_list<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<type_name<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  postfix_expression::postfix_expression_25(parser.lbx(1,_item1_),parser.lbx(4,_item4_),_item5_) }

fn _semaction_rule_26_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> argument_expression_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()};  argument_expression_list::argument_expression_list_26(parser.lbx(0,_item0_)) }

fn _semaction_rule_27_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> argument_expression_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<argument_expression_list<'lt>>::default()};  argument_expression_list::argument_expression_list_27(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_28_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<postfix_expression<'lt>>::default()};  unary_expression::unary_expression_28(parser.lbx(0,_item0_)) }

fn _semaction_rule_29_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<unary_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  _item1_ }

fn _semaction_rule_30_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<unary_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  _item1_ }

fn _semaction_rule_31_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<cast_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<unary_operator<'lt>>::default()};  unary_expression::unary_expression_31(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_32_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<unary_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  _item1_ }

fn _semaction_rule_33_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_expression::SIZEOF_33(parser.lbx(2,_item2_)) }

fn _semaction_rule_34_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_expression::ALIGNOF_34(parser.lbx(2,_item2_)) }

fn _semaction_rule_35_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::Amp }

fn _semaction_rule_36_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::Star }

fn _semaction_rule_37_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::unary_operator_37 }

fn _semaction_rule_38_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::unary_operator_38 }

fn _semaction_rule_39_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::unary_operator_39 }

fn _semaction_rule_40_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> unary_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  unary_operator::Bang }

fn _semaction_rule_41_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> cast_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<unary_expression<'lt>>::default()};  cast_expression::cast_expression_41(parser.lbx(0,_item0_)) }

fn _semaction_rule_42_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> cast_expression<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<cast_expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<type_name<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  cast_expression::cast_expression_42(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_43_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> multiplicative_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<cast_expression<'lt>>::default()};  multiplicative_expression::multiplicative_expression_43(parser.lbx(0,_item0_)) }

fn _semaction_rule_44_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> multiplicative_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<cast_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<multiplicative_expression<'lt>>::default()};  multiplicative_expression::multiplicative_expression_44(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> multiplicative_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<cast_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<multiplicative_expression<'lt>>::default()};  multiplicative_expression::multiplicative_expression_45(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> multiplicative_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<cast_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<multiplicative_expression<'lt>>::default()};  multiplicative_expression::multiplicative_expression_46(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_47_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> additive_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<multiplicative_expression<'lt>>::default()};  additive_expression::additive_expression_47(parser.lbx(0,_item0_)) }

fn _semaction_rule_48_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> additive_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<multiplicative_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<additive_expression<'lt>>::default()};  additive_expression::additive_expression_48(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_49_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> additive_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_15(_x_15)=parser.popstack().value { _x_15 } else {<multiplicative_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<additive_expression<'lt>>::default()};  additive_expression::additive_expression_49(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> shift_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<additive_expression<'lt>>::default()};  shift_expression::shift_expression_50(parser.lbx(0,_item0_)) }

fn _semaction_rule_51_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> shift_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<additive_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<shift_expression<'lt>>::default()};  shift_expression::shift_expression_51(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_52_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> shift_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<additive_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<shift_expression<'lt>>::default()};  shift_expression::shift_expression_52(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_53_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<shift_expression<'lt>>::default()};  relational_expression::relational_expression_53(parser.lbx(0,_item0_)) }

fn _semaction_rule_54_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<relational_expression<'lt>>::default()};  relational_expression::relational_expression_54(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_55_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<relational_expression<'lt>>::default()};  relational_expression::relational_expression_55(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_56_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<relational_expression<'lt>>::default()};  relational_expression::relational_expression_56(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_57_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> relational_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_17(_x_17)=parser.popstack().value { _x_17 } else {<shift_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<relational_expression<'lt>>::default()};  relational_expression::relational_expression_57(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_58_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> equality_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<relational_expression<'lt>>::default()};  equality_expression::equality_expression_58(parser.lbx(0,_item0_)) }

fn _semaction_rule_59_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> equality_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<relational_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<equality_expression<'lt>>::default()};  equality_expression::equality_expression_59(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_60_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> equality_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_18(_x_18)=parser.popstack().value { _x_18 } else {<relational_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<equality_expression<'lt>>::default()};  equality_expression::equality_expression_60(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_61_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> and_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<equality_expression<'lt>>::default()};  and_expression::and_expression_61(parser.lbx(0,_item0_)) }

fn _semaction_rule_62_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> and_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<equality_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<and_expression<'lt>>::default()};  and_expression::and_expression_62(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_63_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> exclusive_or_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<and_expression<'lt>>::default()};  exclusive_or_expression::exclusive_or_expression_63(parser.lbx(0,_item0_)) }

fn _semaction_rule_64_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> exclusive_or_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<and_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_21(_x_21)=parser.popstack().value { _x_21 } else {<exclusive_or_expression<'lt>>::default()};  exclusive_or_expression::exclusive_or_expression_64(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_65_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> inclusive_or_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_21(_x_21)=parser.popstack().value { _x_21 } else {<exclusive_or_expression<'lt>>::default()};  inclusive_or_expression::inclusive_or_expression_65(parser.lbx(0,_item0_)) }

fn _semaction_rule_66_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> inclusive_or_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_21(_x_21)=parser.popstack().value { _x_21 } else {<exclusive_or_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_22(_x_22)=parser.popstack().value { _x_22 } else {<inclusive_or_expression<'lt>>::default()};  inclusive_or_expression::inclusive_or_expression_66(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_67_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> logical_and_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_22(_x_22)=parser.popstack().value { _x_22 } else {<inclusive_or_expression<'lt>>::default()};  logical_and_expression::logical_and_expression_67(parser.lbx(0,_item0_)) }

fn _semaction_rule_68_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> logical_and_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_22(_x_22)=parser.popstack().value { _x_22 } else {<inclusive_or_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_23(_x_23)=parser.popstack().value { _x_23 } else {<logical_and_expression<'lt>>::default()};  logical_and_expression::logical_and_expression_68(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_69_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> logical_or_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_23(_x_23)=parser.popstack().value { _x_23 } else {<logical_and_expression<'lt>>::default()};  logical_or_expression::logical_or_expression_69(parser.lbx(0,_item0_)) }

fn _semaction_rule_70_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> logical_or_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_23(_x_23)=parser.popstack().value { _x_23 } else {<logical_and_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_24(_x_24)=parser.popstack().value { _x_24 } else {<logical_or_expression<'lt>>::default()};  logical_or_expression::logical_or_expression_70(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_71_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> conditional_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_24(_x_24)=parser.popstack().value { _x_24 } else {<logical_or_expression<'lt>>::default()};  conditional_expression::conditional_expression_71(parser.lbx(0,_item0_)) }

fn _semaction_rule_72_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> conditional_expression<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_25(_x_25)=parser.popstack().value { _x_25 } else {<conditional_expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_24(_x_24)=parser.popstack().value { _x_24 } else {<logical_or_expression<'lt>>::default()};  conditional_expression::conditional_expression_72(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_73_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_25(_x_25)=parser.popstack().value { _x_25 } else {<conditional_expression<'lt>>::default()};  assignment_expression::assignment_expression_73(parser.lbx(0,_item0_)) }

fn _semaction_rule_74_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_27(_x_27)=parser.popstack().value { _x_27 } else {<assignment_operator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<unary_expression<'lt>>::default()};  assignment_expression::assignment_expression_74(parser.lbx(0,_item0_),parser.lbx(1,_item1_),parser.lbx(2,_item2_)) }

fn _semaction_rule_75_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::Eq1 }

fn _semaction_rule_76_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::MUL_ASSIGN }

fn _semaction_rule_77_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::DIV_ASSIGN }

fn _semaction_rule_78_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::MOD_ASSIGN }

fn _semaction_rule_79_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::ADD_ASSIGN }

fn _semaction_rule_80_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::SUB_ASSIGN }

fn _semaction_rule_81_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::LEFT_ASSIGN }

fn _semaction_rule_82_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::RIGHT_ASSIGN }

fn _semaction_rule_83_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::AND_ASSIGN }

fn _semaction_rule_84_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::XOR_ASSIGN }

fn _semaction_rule_85_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> assignment_operator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  assignment_operator::OR_ASSIGN }

fn _semaction_rule_86_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()};  expression::expression_86(parser.lbx(0,_item0_)) }

fn _semaction_rule_87_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression::expression_87(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_88_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> constant_expression<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_25(_x_25)=parser.popstack().value { _x_25 } else {<conditional_expression<'lt>>::default()};  constant_expression {_item0_:parser.lbx(0,_item0_), } }

fn _semaction_rule_89_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  declaration::DecSpec(parser.lbx(0,_item0_)) }

fn _semaction_rule_90_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut il = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<init_declarator_list<'lt>>::default()}; let mut ds = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  declaration::DecSpecList(parser.lbx(0,ds),parser.lbx(1,il)) }

fn _semaction_rule_91_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<static_assert_declaration<'lt>>::default()};  declaration::Statassert(parser.lbx(0,_item0_)) }

fn _semaction_rule_92_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<storage_class_specifier<'lt>>::default()};  declaration_specifiers::declaration_specifiers_92(parser.lbx(0,_item0_)) }

fn _semaction_rule_93_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<type_specifier<'lt>>::default()};  declaration_specifiers::declaration_specifiers_93(parser.lbx(0,_item0_)) }

fn _semaction_rule_94_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<type_specifier<'lt>>::default()};  declaration_specifiers::declaration_specifiers_94(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_95_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<type_qualifier<'lt>>::default()};  declaration_specifiers::declaration_specifiers_95(parser.lbx(0,_item0_)) }

fn _semaction_rule_96_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<type_qualifier<'lt>>::default()};  declaration_specifiers::declaration_specifiers_96(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_97_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_79(_x_79)=parser.popstack().value { _x_79 } else {<function_specifier<'lt>>::default()};  declaration_specifiers::declaration_specifiers_97(parser.lbx(0,_item0_)) }

fn _semaction_rule_98_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_79(_x_79)=parser.popstack().value { _x_79 } else {<function_specifier<'lt>>::default()};  declaration_specifiers::declaration_specifiers_98(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_99_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_80(_x_80)=parser.popstack().value { _x_80 } else {<alignment_specifier<'lt>>::default()};  declaration_specifiers::declaration_specifiers_99(parser.lbx(0,_item0_)) }

fn _semaction_rule_100_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_80(_x_80)=parser.popstack().value { _x_80 } else {<alignment_specifier<'lt>>::default()};  declaration_specifiers::declaration_specifiers_100(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_101_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declaration_specifiers<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<storage_class_specifier<'lt>>::default()};  declaration_specifiers::DSCDS(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_102_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> init_declarator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<init_declarator<'lt>>::default()};  init_declarator_list::init_declarator_list_102(parser.lbx(0,_item0_)) }

fn _semaction_rule_103_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> init_declarator_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<init_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<init_declarator_list<'lt>>::default()};  init_declarator_list::init_declarator_list_103(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_104_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> init_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<declarator<'lt>>::default()};  init_declarator::init_declarator_104(parser.lbx(0,_item0_)) }

fn _semaction_rule_105_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> init_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<initializer<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<declarator<'lt>>::default()};  init_declarator::init_declarator_105(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_106_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::Typedef }

fn _semaction_rule_107_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::EXTERN }

fn _semaction_rule_108_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::STATIC }

fn _semaction_rule_109_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::AUTO }

fn _semaction_rule_110_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::REGISTER }

fn _semaction_rule_111_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> storage_class_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  storage_class_specifier::THREAD_LOCAL }

fn _semaction_rule_112_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  type_specifier::Typename(_item0_) }

fn _semaction_rule_113_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::VOID }

fn _semaction_rule_114_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::CHAR }

fn _semaction_rule_115_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::SHORT }

fn _semaction_rule_116_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::INT }

fn _semaction_rule_117_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::LONG }

fn _semaction_rule_118_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::FLOAT }

fn _semaction_rule_119_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::DOUBLE }

fn _semaction_rule_120_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::SIGNED }

fn _semaction_rule_121_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::UNSIGNED }

fn _semaction_rule_122_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::BOOL }

fn _semaction_rule_123_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::COMPLEX }

fn _semaction_rule_124_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_specifier::IMAGINARY }

fn _semaction_rule_125_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_36(_x_36)=parser.popstack().value { _x_36 } else {<struct_or_union_specifier<'lt>>::default()};  type_specifier::type_specifier_125(parser.lbx(0,_item0_)) }

fn _semaction_rule_126_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<enum_specifier<'lt>>::default()};  type_specifier::type_specifier_126(parser.lbx(0,_item0_)) }

fn _semaction_rule_127_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_81(_x_81)=parser.popstack().value { _x_81 } else {<atomic_type_specifier<'lt>>::default()};  type_specifier::type_specifier_127(parser.lbx(0,_item0_)) }

fn _semaction_rule_128_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<&'lt str>> {
 None }

fn _semaction_rule_129_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<&'lt str>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_130_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union_specifier<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_38(_x_38)=parser.popstack().value { _x_38 } else {<struct_declaration_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_85(_x_85)=parser.popstack().value { _x_85 } else {<Option<LBox<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<struct_or_union<'lt>>::default()};  struct_or_union_specifier::struct_or_union_specifier_130(parser.lbx(0,_item0_),_item1_,parser.lbx(3,_item3_)) }

fn _semaction_rule_131_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union_specifier<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<struct_or_union<'lt>>::default()};  struct_or_union_specifier::struct_or_union_specifier_131(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_132_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  struct_or_union::STRUCT }

fn _semaction_rule_133_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_or_union<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  struct_or_union::UNION }

fn _semaction_rule_134_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<struct_declarator_list<'lt>>> {
 None }

fn _semaction_rule_135_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<struct_declarator_list<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_41(_x_41)=parser.popstack().value { _x_41 } else {<struct_declarator_list<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_136_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declaration<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_86(_x_86)=parser.popstack().value { _x_86 } else {<Option<LBox<struct_declarator_list<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_40(_x_40)=parser.popstack().value { _x_40 } else {<specifier_qualifier_list<'lt>>::default()};  struct_declaration::struct_declaration_136(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_137_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<static_assert_declaration<'lt>>::default()};  struct_declaration::struct_declaration_137(parser.lbx(0,_item0_)) }

fn _semaction_rule_138_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declaration<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_39(_x_39)=parser.popstack().value { _x_39 } else {<struct_declaration<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_139_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<struct_declaration<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_39(_x_39)=parser.popstack().value { _x_39 } else {<struct_declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_87(_x_87)=parser.popstack().value { _x_87 } else {<Vec<LBox<struct_declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_140_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declaration_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_87(_x_87)=parser.popstack().value { _x_87 } else {<Vec<LBox<struct_declaration<'lt>>>>::default()};  struct_declaration_list {_item0_,} }

fn _semaction_rule_141_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier_list<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_40(_x_40)=parser.popstack().value { _x_40 } else {<specifier_qualifier_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<type_specifier<'lt>>::default()};  specifier_qualifier_list::specifier_qualifier_list_141(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_142_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<type_specifier<'lt>>::default()};  specifier_qualifier_list::specifier_qualifier_list_142(parser.lbx(0,_item0_)) }

fn _semaction_rule_143_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier_list<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_40(_x_40)=parser.popstack().value { _x_40 } else {<specifier_qualifier_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<type_qualifier<'lt>>::default()};  specifier_qualifier_list::specifier_qualifier_list_143(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_144_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> specifier_qualifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<type_qualifier<'lt>>::default()};  specifier_qualifier_list::specifier_qualifier_list_144(parser.lbx(0,_item0_)) }

fn _semaction_rule_145_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_42(_x_42)=parser.popstack().value { _x_42 } else {<struct_declarator<'lt>>::default()};  struct_declarator_list::struct_declarator_list_145(parser.lbx(0,_item0_)) }

fn _semaction_rule_146_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_42(_x_42)=parser.popstack().value { _x_42 } else {<struct_declarator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_41(_x_41)=parser.popstack().value { _x_41 } else {<struct_declarator_list<'lt>>::default()};  struct_declarator_list::struct_declarator_list_146(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_147_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<declarator<'lt>>::default()};  struct_declarator::struct_declarator_147(parser.lbx(0,_item0_)) }

fn _semaction_rule_148_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  struct_declarator::Colon_148(parser.lbx(1,_item1_)) }

fn _semaction_rule_149_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> struct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<declarator<'lt>>::default()};  struct_declarator::struct_declarator_149(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_150_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_151_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_152_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enum_specifier<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<enumerator_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  enum_specifier::ENUM_152(parser.lbx(2,_item2_),_item3_) }

fn _semaction_rule_153_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_154_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_155_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enum_specifier<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<enumerator_list<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  enum_specifier::ENUM_155(_item1_,parser.lbx(3,_item3_),_item4_) }

fn _semaction_rule_156_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enum_specifier<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  enum_specifier::ENUM_156(_item1_) }

fn _semaction_rule_157_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enumerator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<enumerator<'lt>>::default()};  enumerator_list::enumerator_list_157(parser.lbx(0,_item0_)) }

fn _semaction_rule_158_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enumerator_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<enumerator<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<enumerator_list<'lt>>::default()};  enumerator_list::enumerator_list_158(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_159_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enumerator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  enumerator::ENUMERATION_CONSTANT(_item0_) }

fn _semaction_rule_160_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> enumerator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  enumerator::ENUMERATION_CONSTANT_160(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_161_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> atomic_type_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  atomic_type_specifier {_item2_:parser.lbx(2,_item2_), } }

fn _semaction_rule_162_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::CONST }

fn _semaction_rule_163_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::VOLATILE }

fn _semaction_rule_164_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::ATOMIC }

fn _semaction_rule_165_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  type_qualifier::RESTRICT }

fn _semaction_rule_166_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> function_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  function_specifier::INLINE }

fn _semaction_rule_167_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> function_specifier<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  function_specifier::NORETURN }

fn _semaction_rule_168_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> alignment_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<type_name<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  alignment_specifier::ALIGNAS_168(parser.lbx(2,_item2_)) }

fn _semaction_rule_169_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> alignment_specifier<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  alignment_specifier::ALIGNAS_169(parser.lbx(2,_item2_)) }

fn _semaction_rule_170_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<pointer<'lt>>::default()};  declarator::declarator_170(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_171_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  declarator::declarator_171(parser.lbx(0,_item0_)) }

fn _semaction_rule_172_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  direct_declarator::IDENTIFIER(_item0_) }

fn _semaction_rule_173_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_declarator::direct_declarator_173(parser.lbx(1,_item1_)) }

fn _semaction_rule_174_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  _item0_ }

fn _semaction_rule_175_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  _item0_ }

fn _semaction_rule_176_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<type_qualifier_list<'lt>>> {
 None }

fn _semaction_rule_177_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<type_qualifier_list<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_178_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_88(_x_88)=parser.popstack().value { _x_88 } else {<Option<LBox<type_qualifier_list<'lt>>>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_178(parser.lbx(0,_item0_),_item3_,parser.lbx(4,_item4_)) }

fn _semaction_rule_179_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_179(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_180_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_180(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(3,_item3_)) }

fn _semaction_rule_181_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_181(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_182_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_182(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_183_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_183(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_184_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<parameter_type_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_184(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_185_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<identifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  direct_declarator::direct_declarator_185(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_186_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<direct_declarator<'lt>>::default()};  _item0_ }

fn _semaction_rule_187_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<type_qualifier_list<'lt>>> {
 None }

fn _semaction_rule_188_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<type_qualifier_list<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_189_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<pointer<'lt>>> {
 None }

fn _semaction_rule_190_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<pointer<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<pointer<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_191_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> pointer<'lt> {
let mut ptr = if let RetTypeEnum::Enumvariant_89(_x_89)=parser.popstack().value { _x_89 } else {<Option<LBox<pointer<'lt>>>>::default()}; let mut tql = if let RetTypeEnum::Enumvariant_88(_x_88)=parser.popstack().value { _x_88 } else {<Option<LBox<type_qualifier_list<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  pointer {tql,ptr,} }

fn _semaction_rule_192_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<type_qualifier<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_193_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<type_qualifier<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<type_qualifier<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_90(_x_90)=parser.popstack().value { _x_90 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_194_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_qualifier_list<'lt> {
let mut qualifiers = if let RetTypeEnum::Enumvariant_90(_x_90)=parser.popstack().value { _x_90 } else {<Vec<LBox<type_qualifier<'lt>>>>::default()};  type_qualifier_list {qualifiers,} }

fn _semaction_rule_195_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_type_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<parameter_list<'lt>>::default()};  parameter_type_list::parameter_type_list_195(parser.lbx(0,_item0_)) }

fn _semaction_rule_196_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_type_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<parameter_list<'lt>>::default()};  parameter_type_list::parameter_type_list_196(parser.lbx(0,_item0_)) }

fn _semaction_rule_197_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_53(_x_53)=parser.popstack().value { _x_53 } else {<parameter_declaration<'lt>>::default()};  parameter_list::parameter_list_197(parser.lbx(0,_item0_)) }

fn _semaction_rule_198_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_53(_x_53)=parser.popstack().value { _x_53 } else {<parameter_declaration<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<parameter_list<'lt>>::default()};  parameter_list::parameter_list_198(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_199_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  parameter_declaration::parameter_declaration_199(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_200_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_declaration<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  parameter_declaration::parameter_declaration_200(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_201_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> parameter_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  parameter_declaration::parameter_declaration_201(parser.lbx(0,_item0_)) }

fn _semaction_rule_202_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> identifier_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  identifier_list::IDENTIFIER(_item0_) }

fn _semaction_rule_203_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> identifier_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<identifier_list<'lt>>::default()};  identifier_list::identifier_list_203(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_204_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_name<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_40(_x_40)=parser.popstack().value { _x_40 } else {<specifier_qualifier_list<'lt>>::default()};  type_name::type_name_204(parser.lbx(0,_item0_)) }

fn _semaction_rule_205_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> type_name<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_40(_x_40)=parser.popstack().value { _x_40 } else {<specifier_qualifier_list<'lt>>::default()};  type_name::type_name_205(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_206_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> abstract_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<pointer<'lt>>::default()};  abstract_declarator::abstract_declarator_206(parser.lbx(0,_item0_)) }

fn _semaction_rule_207_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> abstract_declarator<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  abstract_declarator::abstract_declarator_207(parser.lbx(0,_item0_)) }

fn _semaction_rule_208_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<pointer<'lt>>::default()};  abstract_declarator::abstract_declarator_208(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_209_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<abstract_declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_209(parser.lbx(1,_item1_)) }

fn _semaction_rule_210_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_210 }

fn _semaction_rule_211_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_211 }

fn _semaction_rule_212_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<type_qualifier_list<'lt>>> {
 None }

fn _semaction_rule_213_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<type_qualifier_list<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_214_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_88(_x_88)=parser.popstack().value { _x_88 } else {<Option<LBox<type_qualifier_list<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_214(_item2_,parser.lbx(3,_item3_)) }

fn _semaction_rule_215_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
 None }

fn _semaction_rule_216_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  Some(_item0_) }

fn _semaction_rule_217_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<assignment_expression<'lt>>> {
 None }

fn _semaction_rule_218_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<assignment_expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_219_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_92(_x_92)=parser.popstack().value { _x_92 } else {<Option<LBox<assignment_expression<'lt>>>>::default()}; let mut s = if let RetTypeEnum::Enumvariant_91(_x_91)=parser.popstack().value { _x_91 } else {<Option<()>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_219(parser.lbx(1,_item1_),parser.lbx(2,s),_item3_) }

fn _semaction_rule_220_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_220(parser.lbx(1,_item1_)) }

fn _semaction_rule_221_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  _item0_ }

fn _semaction_rule_222_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  _item0_ }

fn _semaction_rule_223_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<type_qualifier_list<'lt>>> {
 None }

fn _semaction_rule_224_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<type_qualifier_list<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_225_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_88(_x_88)=parser.popstack().value { _x_88 } else {<Option<LBox<type_qualifier_list<'lt>>>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_225(parser.lbx(0,_item0_),_item3_,parser.lbx(4,_item4_)) }

fn _semaction_rule_226_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
 None }

fn _semaction_rule_227_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<()> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  Some(_item0_) }

fn _semaction_rule_228_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut s = if let RetTypeEnum::Enumvariant_91(_x_91)=parser.popstack().value { _x_91 } else {<Option<()>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_228(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(3,s),parser.lbx(4,_item4_)) }

fn _semaction_rule_229_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<type_qualifier_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_229(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_230_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_230(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_231_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_231 }

fn _semaction_rule_232_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<parameter_type_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  direct_abstract_declarator::direct_abstract_declarator_232(parser.lbx(1,_item1_)) }

fn _semaction_rule_233_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  _item0_ }

fn _semaction_rule_234_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> direct_abstract_declarator<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<parameter_type_list<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<direct_abstract_declarator<'lt>>::default()};  direct_abstract_declarator::direct_abstract_declarator_234(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_235_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<assignment_expression<'lt>>::default()};  initializer::initializer_235(parser.lbx(0,_item0_)) }

fn _semaction_rule_236_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
<()>::default()}

fn _semaction_rule_237_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; <()>::default()}

fn _semaction_rule_238_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<initializer_list<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  initializer::Lbrace_238(parser.lbx(1,_item1_),_item2_) }

fn _semaction_rule_239_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<initializer<'lt>>::default()};  initializer_list::initializer_list_239(parser.lbx(0,_item0_)) }

fn _semaction_rule_240_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer_list<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<initializer<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<initializer_list<'lt>>::default()};  initializer_list::initializer_list_240(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_241_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer_list<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<initializer<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<designation<'lt>>::default()};  initializer_list::initializer_list_241(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_242_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> initializer_list<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<initializer<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<designation<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<initializer_list<'lt>>::default()};  initializer_list::initializer_list_242(parser.lbx(0,_item0_),parser.lbx(2,_item2_),parser.lbx(3,_item3_)) }

fn _semaction_rule_243_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designation<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_82(_x_82)=parser.popstack().value { _x_82 } else {<designator_list<'lt>>::default()};  designation {_item0_:parser.lbx(0,_item0_), } }

fn _semaction_rule_244_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_83(_x_83)=parser.popstack().value { _x_83 } else {<designator<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_245_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<designator<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_83(_x_83)=parser.popstack().value { _x_83 } else {<designator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_93(_x_93)=parser.popstack().value { _x_93 } else {<Vec<LBox<designator<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_246_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designator_list<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_93(_x_93)=parser.popstack().value { _x_93 } else {<Vec<LBox<designator<'lt>>>>::default()};  designator_list {_item0_,} }

fn _semaction_rule_247_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designator<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  designator::designator_247(parser.lbx(1,_item1_)) }

fn _semaction_rule_248_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> designator<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  designator::Dot_248(_item1_) }

fn _semaction_rule_249_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> static_assert_declaration<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<constant_expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  static_assert_declaration {_item2_:parser.lbx(2,_item2_), _item4_,} }

fn _semaction_rule_250_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<labeled_statement<'lt>>::default()};  statement::statement_250(parser.lbx(0,_item0_)) }

fn _semaction_rule_251_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<compound_statement<'lt>>::default()};  statement::statement_251(parser.lbx(0,_item0_)) }

fn _semaction_rule_252_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_65(_x_65)=parser.popstack().value { _x_65 } else {<expression_statement<'lt>>::default()};  statement::statement_252(parser.lbx(0,_item0_)) }

fn _semaction_rule_253_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<selection_statement<'lt>>::default()};  statement::statement_253(parser.lbx(0,_item0_)) }

fn _semaction_rule_254_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<iteration_statement<'lt>>::default()};  statement::statement_254(parser.lbx(0,_item0_)) }

fn _semaction_rule_255_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<jump_statement<'lt>>::default()};  statement::statement_255(parser.lbx(0,_item0_)) }

fn _semaction_rule_256_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> labeled_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()};  labeled_statement::IDENTIFIER_256(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_257_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> labeled_statement<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_29(_x_29)=parser.popstack().value { _x_29 } else {<constant_expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  labeled_statement::CASE_257(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_258_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> labeled_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  labeled_statement::DEFAULT_258(parser.lbx(2,_item2_)) }

fn _semaction_rule_259_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<block_item<'lt>>> {
 Vec::new() }

fn _semaction_rule_260_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<block_item<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_84(_x_84)=parser.popstack().value { _x_84 } else {<block_item<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_94(_x_94)=parser.popstack().value { _x_94 } else {<Vec<LBox<block_item<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_261_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> compound_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut items = if let RetTypeEnum::Enumvariant_94(_x_94)=parser.popstack().value { _x_94 } else {<Vec<LBox<block_item<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  compound_statement {items,} }

fn _semaction_rule_262_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> block_item<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<declaration<'lt>>::default()};  block_item::block_item_262(parser.lbx(0,_item0_)) }

fn _semaction_rule_263_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> block_item<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()};  block_item::block_item_263(parser.lbx(0,_item0_)) }

fn _semaction_rule_264_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression_statement<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  expression_statement::expression_statement_264 }

fn _semaction_rule_265_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> expression_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  expression_statement::expression_statement_265(parser.lbx(0,_item0_)) }

fn _semaction_rule_266_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> selection_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  selection_statement::IF_266(parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_267_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> selection_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  selection_statement::IF_267(parser.lbx(2,_item2_),parser.lbx(4,_item4_),parser.lbx(6,_item6_)) }

fn _semaction_rule_268_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> selection_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  selection_statement::SWITCH_268(parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_269_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::WHILE_269(parser.lbx(2,_item2_),parser.lbx(4,_item4_)) }

fn _semaction_rule_270_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::DO_270(parser.lbx(1,_item1_),parser.lbx(4,_item4_)) }

fn _semaction_rule_271_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
 None }

fn _semaction_rule_272_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_273_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_95(_x_95)=parser.popstack().value { _x_95 } else {<Option<LBox<expression<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_65(_x_65)=parser.popstack().value { _x_65 } else {<expression_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_65(_x_65)=parser.popstack().value { _x_65 } else {<expression_statement<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::FOR_273(parser.lbx(2,_item2_),parser.lbx(3,_item3_),_item4_,parser.lbx(6,_item6_)) }

fn _semaction_rule_274_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
 None }

fn _semaction_rule_275_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Option<LBox<expression<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_276_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> iteration_statement<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<statement<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_95(_x_95)=parser.popstack().value { _x_95 } else {<Option<LBox<expression<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_65(_x_65)=parser.popstack().value { _x_65 } else {<expression_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<declaration<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  iteration_statement::FOR_276(parser.lbx(2,_item2_),parser.lbx(3,_item3_),_item4_,parser.lbx(6,_item6_)) }

fn _semaction_rule_277_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::GOTO_277(_item1_) }

fn _semaction_rule_278_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::CONTINUE_278 }

fn _semaction_rule_279_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::BREAK_279 }

fn _semaction_rule_280_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::RETURN_280 }

fn _semaction_rule_281_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> jump_statement<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<expression<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<()>::default()};  jump_statement::RETURN_281(parser.lbx(1,_item1_)) }

fn _semaction_rule_282_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<external_declaration<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<external_declaration<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_283_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<external_declaration<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<external_declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_96(_x_96)=parser.popstack().value { _x_96 } else {<Vec<LBox<external_declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_284_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> translation_unit<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_96(_x_96)=parser.popstack().value { _x_96 } else {<Vec<LBox<external_declaration<'lt>>>>::default()};  translation_unit {_item0_,} }

fn _semaction_rule_285_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_71(_x_71)=parser.popstack().value { _x_71 } else {<function_definition<'lt>>::default()};  external_declaration::external_declaration_285(parser.lbx(0,_item0_)) }

fn _semaction_rule_286_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> external_declaration<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<declaration<'lt>>::default()};  external_declaration::external_declaration_286(parser.lbx(0,_item0_)) }

fn _semaction_rule_287_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration<'lt>>> {
 Vec::new() }

fn _semaction_rule_288_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> Vec<LBox<declaration<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<declaration<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_97(_x_97)=parser.popstack().value { _x_97 } else {<Vec<LBox<declaration<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_289_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> function_definition<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<compound_statement<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_97(_x_97)=parser.popstack().value { _x_97 } else {<Vec<LBox<declaration<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_47(_x_47)=parser.popstack().value { _x_47 } else {<declarator<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_31(_x_31)=parser.popstack().value { _x_31 } else {<declaration_specifiers<'lt>>::default()};  function_definition {_item0_:parser.lbx(0,_item0_), _item1_:parser.lbx(1,_item1_), _item2_,_item3_:parser.lbx(3,_item3_), } }

fn _semaction_rule_290_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>) -> translation_unit<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<translation_unit<'lt>>::default()}; <translation_unit<'lt>>::default()}

pub fn make_parser<'lt>() -> ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>
{
 let mut parser1:ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>> = ZCParser::new(291,470);
 let mut rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("primary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("constant");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("constant");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("constant");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("stringnt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("stringnt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_selection");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_assoc_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_assoc_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_association");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("generic_association");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_23_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_23_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("postfix_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("argument_expression_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("argument_expression_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("unary_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("cast_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("cast_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_15(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_15(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_15(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("multiplicative_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_15(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("additive_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_16(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("additive_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_16(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("additive_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_16(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("shift_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_17(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("shift_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_17(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("shift_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_17(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_18(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_18(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_18(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_18(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("relational_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_18(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("equality_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("equality_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("equality_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_20(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_20(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("exclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_21(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("exclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_21(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("inclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_22(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("inclusive_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_22(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("logical_and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_23(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("logical_and_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_23(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("logical_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_24(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("logical_or_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_24(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("conditional_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_25(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("conditional_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_25(_semaction_rule_72_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_73_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_74_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_75_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_76_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_77_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_78_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_79_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_80_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_81_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_82_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_83_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_84_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("assignment_operator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_27(_semaction_rule_85_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_86_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_87_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("constant_expression");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_29(_semaction_rule_88_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_89_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_90_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_91_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_92_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_93_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_94_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_95_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_96_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_97_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_98_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_99_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_100_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declaration_specifiers");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_31(_semaction_rule_101_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("init_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_32(_semaction_rule_102_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("init_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_32(_semaction_rule_103_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("init_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_104_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("init_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_105_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_106_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_107_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_108_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_109_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_110_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("storage_class_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_111_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_112_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_113_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_114_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_115_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_116_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_117_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_118_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_119_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_120_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_121_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_122_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_123_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_124_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_125_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_126_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_127_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_128_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_85(_semaction_rule_128_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_128_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_85(_semaction_rule_129_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_130_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_131_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_132_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_or_union");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_133_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_134_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_86(_semaction_rule_134_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_134_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_86(_semaction_rule_135_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_39(_semaction_rule_136_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_39(_semaction_rule_137_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_138_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_87(_semaction_rule_138_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_138_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_87(_semaction_rule_139_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declaration_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_38(_semaction_rule_140_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_40(_semaction_rule_141_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_40(_semaction_rule_142_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_40(_semaction_rule_143_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("specifier_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_40(_semaction_rule_144_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_41(_semaction_rule_145_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_41(_semaction_rule_146_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_42(_semaction_rule_147_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_42(_semaction_rule_148_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("struct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_42(_semaction_rule_149_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_150_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_150_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_150_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_151_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_43(_semaction_rule_152_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_153_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_153_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_153_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_154_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_43(_semaction_rule_155_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enum_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_43(_semaction_rule_156_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enumerator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_44(_semaction_rule_157_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enumerator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_44(_semaction_rule_158_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enumerator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_159_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("enumerator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_160_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("atomic_type_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_81(_semaction_rule_161_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_162_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_163_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_164_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_165_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("function_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_79(_semaction_rule_166_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("function_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_79(_semaction_rule_167_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("alignment_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_80(_semaction_rule_168_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("alignment_specifier");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_80(_semaction_rule_169_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_170_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_47(_semaction_rule_171_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_172_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_173_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_174_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_175_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_176_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_176_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_176_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_177_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_178_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_179_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_180_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_181_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_182_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_183_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_184_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_185_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_186_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_187_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_187_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_187_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_188_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_189_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_89(_semaction_rule_189_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_189_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_89(_semaction_rule_190_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("pointer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_191_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_192_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_90(_semaction_rule_192_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_192_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_90(_semaction_rule_193_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_qualifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_50(_semaction_rule_194_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_type_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_51(_semaction_rule_195_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_type_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_51(_semaction_rule_196_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_52(_semaction_rule_197_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_52(_semaction_rule_198_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_53(_semaction_rule_199_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_53(_semaction_rule_200_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("parameter_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_53(_semaction_rule_201_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("identifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_202_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("identifier_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_203_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_name");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_204_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("type_name");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_205_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_206_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_207_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_208_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_209_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_210_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_211_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_212_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_212_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_212_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_213_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_214_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_215_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_91(_semaction_rule_215_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_215_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_91(_semaction_rule_216_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_217_2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_92(_semaction_rule_217_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_217_2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_92(_semaction_rule_218_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_219_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_220_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_221_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_222_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_223_3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_223_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_223_3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_88(_semaction_rule_224_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_225_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_226_4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_91(_semaction_rule_226_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_226_4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_91(_semaction_rule_227_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_228_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_229_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_230_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_231_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_232_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_233_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("direct_abstract_declarator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_234_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_58(_semaction_rule_235_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_236_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_236_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_236_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_237_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_58(_semaction_rule_238_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_239_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_240_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_241_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("initializer_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_242_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designation");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_243_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_244_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_93(_semaction_rule_244_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_244_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_93(_semaction_rule_245_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designator_list");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_82(_semaction_rule_246_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_83(_semaction_rule_247_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("designator");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_83(_semaction_rule_248_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("static_assert_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_77(_semaction_rule_249_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_250_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_251_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_252_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_253_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_254_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_255_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_256_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_257_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("labeled_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_258_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_259_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_94(_semaction_rule_259_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_259_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_94(_semaction_rule_260_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("compound_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_261_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("block_item");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_84(_semaction_rule_262_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("block_item");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_84(_semaction_rule_263_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_65(_semaction_rule_264_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("expression_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_65(_semaction_rule_265_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_266_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_267_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("selection_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_268_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_269_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_270_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_271_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_95(_semaction_rule_271_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_271_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_95(_semaction_rule_272_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_273_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_274_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_95(_semaction_rule_274_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_274_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_95(_semaction_rule_275_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("iteration_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_276_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_277_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_278_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_279_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_280_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("jump_statement");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_281_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_282_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_282_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_282_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_96(_semaction_rule_283_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("translation_unit");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_284_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_285_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("external_declaration");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_286_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_287_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_287_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("NEWRENT_287_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_97(_semaction_rule_288_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("function_definition");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_71(_semaction_rule_289_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,HashSet<&'lt str>>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_290_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";

 for i in 0..11504 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>, lexer:&mut c11alexer<'lt>) -> Result<translation_unit<'lt>,translation_unit<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse(lexer) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<translation_unit<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>, lexer:&mut c11alexer<'lt>, parserpath:&str) -> Result<translation_unit<'lt>,translation_unit<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(lexer,parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<translation_unit<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_68(jump_statement<'lt>),
  Enumvariant_76(generic_association<'lt>),
  Enumvariant_91(Option<()>),
  Enumvariant_11(argument_expression_list<'lt>),
  Enumvariant_70(external_declaration<'lt>),
  Enumvariant_18(relational_expression<'lt>),
  Enumvariant_72(constant<'lt>),
  Enumvariant_27(assignment_operator<'lt>),
  Enumvariant_90(Vec<LBox<type_qualifier<'lt>>>),
  Enumvariant_49(pointer<'lt>),
  Enumvariant_46(type_qualifier<'lt>),
  Enumvariant_74(generic_selection<'lt>),
  Enumvariant_84(block_item<'lt>),
  Enumvariant_26(assignment_expression<'lt>),
  Enumvariant_41(struct_declarator_list<'lt>),
  Enumvariant_16(additive_expression<'lt>),
  Enumvariant_48(direct_declarator<'lt>),
  Enumvariant_56(abstract_declarator<'lt>),
  Enumvariant_67(iteration_statement<'lt>),
  Enumvariant_71(function_definition<'lt>),
  Enumvariant_6(i32),
  Enumvariant_37(struct_or_union<'lt>),
  Enumvariant_97(Vec<LBox<declaration<'lt>>>),
  Enumvariant_8(&'lt str),
  Enumvariant_28(expression<'lt>),
  Enumvariant_44(enumerator_list<'lt>),
  Enumvariant_45(enumerator<'lt>),
  Enumvariant_66(selection_statement<'lt>),
  Enumvariant_96(Vec<LBox<external_declaration<'lt>>>),
  Enumvariant_19(equality_expression<'lt>),
  Enumvariant_35(type_specifier<'lt>),
  Enumvariant_30(declaration<'lt>),
  Enumvariant_15(multiplicative_expression<'lt>),
  Enumvariant_47(declarator<'lt>),
  Enumvariant_55(type_name<'lt>),
  Enumvariant_57(direct_abstract_declarator<'lt>),
  Enumvariant_36(struct_or_union_specifier<'lt>),
  Enumvariant_60(statement<'lt>),
  Enumvariant_86(Option<LBox<struct_declarator_list<'lt>>>),
  Enumvariant_25(conditional_expression<'lt>),
  Enumvariant_80(alignment_specifier<'lt>),
  Enumvariant_2((usize,usize)),
  Enumvariant_33(init_declarator<'lt>),
  Enumvariant_17(shift_expression<'lt>),
  Enumvariant_52(parameter_list<'lt>),
  Enumvariant_95(Option<LBox<expression<'lt>>>),
  Enumvariant_85(Option<LBox<&'lt str>>),
  Enumvariant_13(unary_operator<'lt>),
  Enumvariant_51(parameter_type_list<'lt>),
  Enumvariant_53(parameter_declaration<'lt>),
  Enumvariant_43(enum_specifier<'lt>),
  Enumvariant_50(type_qualifier_list<'lt>),
  Enumvariant_31(declaration_specifiers<'lt>),
  Enumvariant_40(specifier_qualifier_list<'lt>),
  Enumvariant_58(initializer<'lt>),
  Enumvariant_0(translation_unit<'lt>),
  Enumvariant_94(Vec<LBox<block_item<'lt>>>),
  Enumvariant_82(designator_list<'lt>),
  Enumvariant_32(init_declarator_list<'lt>),
  Enumvariant_63(declaration_list<'lt>),
  Enumvariant_9(primary_expression<'lt>),
  Enumvariant_38(struct_declaration_list<'lt>),
  Enumvariant_62(compound_statement<'lt>),
  Enumvariant_64(statement_list<'lt>),
  Enumvariant_81(atomic_type_specifier<'lt>),
  Enumvariant_87(Vec<LBox<struct_declaration<'lt>>>),
  Enumvariant_78(designation<'lt>),
  Enumvariant_93(Vec<LBox<designator<'lt>>>),
  Enumvariant_10(postfix_expression<'lt>),
  Enumvariant_34(storage_class_specifier<'lt>),
  Enumvariant_42(struct_declarator<'lt>),
  Enumvariant_14(cast_expression<'lt>),
  Enumvariant_73(stringnt<'lt>),
  Enumvariant_79(function_specifier<'lt>),
  Enumvariant_89(Option<LBox<pointer<'lt>>>),
  Enumvariant_21(exclusive_or_expression<'lt>),
  Enumvariant_23(logical_and_expression<'lt>),
  Enumvariant_7(f64),
  Enumvariant_61(labeled_statement<'lt>),
  Enumvariant_77(static_assert_declaration<'lt>),
  Enumvariant_75(generic_assoc_list<'lt>),
  Enumvariant_88(Option<LBox<type_qualifier_list<'lt>>>),
  Enumvariant_12(unary_expression<'lt>),
  Enumvariant_92(Option<LBox<assignment_expression<'lt>>>),
  Enumvariant_83(designator<'lt>),
  Enumvariant_22(inclusive_or_expression<'lt>),
  Enumvariant_20(and_expression<'lt>),
  Enumvariant_29(constant_expression<'lt>),
  Enumvariant_1(()),
  Enumvariant_24(logical_or_expression<'lt>),
  Enumvariant_39(struct_declaration<'lt>),
  Enumvariant_65(expression_statement<'lt>),
  Enumvariant_54(identifier_list<'lt>),
  Enumvariant_59(initializer_list<'lt>),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<translation_unit<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct c11alexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<HashSet<&'lt str>>>,
}
impl<'lt> c11alexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> c11alexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> c11alexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> c11alexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<HashSet<&'lt str>>::default()));
    for kw in ["_Bool","register","restrict","case","default","while","break","_Alignas","short","__func__","goto","_Generic","_Atomic","define","_WILDCARD_TOKEN_","continue","return","enum","struct","extern","else","auto","unsigned","union","do","_Alignof","include","_Complex","static","volatile","_Static_assert","typedef","char","_Noreturn","signed","double","switch","sizeof","inline","_Thread_local","void","const","float","for","int","long","if","_Imaginary",] {keywords.insert(kw);}
    for c in ['[',']','(',')','+','-','~',';','!','.',',','=','|','/','}','{','&',':','%','?','^','#','*','>','<',] {stk.add_single(c);}
    for d in ["-=","+=","||","<<","^=","<=","|=","&&","++",">>",">=","*=","&=","/=","->","!=","--","==","%=",] {stk.add_double(d);}
    for d in [">>=","...","<<=",] {stk.add_triple(d);}
    for (k,v) in [(r"sizeof","SIZEOF"),(r"const","CONST"),(r"-=","SUB_ASSIGN"),(r"static","STATIC"),(r"volatile","VOLATILE"),(r"inline","INLINE"),(r"default","DEFAULT"),(r"_Bool","BOOL"),(r"define","DEFINE"),(r"register","REGISTER"),(r"+=","ADD_ASSIGN"),(r"!","Bang"),(r"struct","STRUCT"),(r"extern","EXTERN"),(r".","Dot"),(r"restrict","RESTRICT"),(r"_Noreturn","NORETURN"),(r"else","ELSE"),(r"||","OR_OP"),(r",","Comma"),(r"<<","LEFT_OP"),(r"signed","SIGNED"),(r"=","Eq1"),(r"continue","CONTINUE"),(r"|","Bar"),(r"_Thread_local","THREAD_LOCAL"),(r"^=","XOR_ASSIGN"),(r"_Complex","COMPLEX"),(r"/","Div"),(r"}","Rbrace"),(r"<=","LE_OP"),(r"goto","GOTO"),(r"{","Lbrace"),(r"__func__","FUNC_NAME"),(r"|=","OR_ASSIGN"),(r"double","DOUBLE"),(r"switch","SWITCH"),(r">>=","RIGHT_ASSIGN"),(r"auto","AUTO"),(r"&","Amp"),(r"enum","ENUM"),(r":","Colon"),(r"&&","AND_OP"),(r"++","INC_OP"),(r">>","RIGHT_OP"),(r">=","GE_OP"),(r"*=","MUL_ASSIGN"),(r"char","CHAR"),(r"unsigned","UNSIGNED"),(r"float","FLOAT"),(r"_Generic","GENERIC"),(r"union","UNION"),(r"void","VOID"),(r"do","DO"),(r"...","ELLIPSIS"),(r"<<=","LEFT_ASSIGN"),(r"_Alignof","ALIGNOF"),(r"&=","AND_ASSIGN"),(r"return","RETURN"),(r"%","Percent"),(r"for","FOR"),(r"?","Quest"),(r"/=","DIV_ASSIGN"),(r"case","CASE"),(r"->","PTR_OP"),(r"include","INCLUDE"),(r"int","INT"),(r"^","Hat"),(r"!=","NE_OP"),(r"_Alignas","ALIGNAS"),(r"_Atomic","ATOMIC"),(r"break","BREAK"),(r"--","DEC_OP"),(r"#","Hash"),(r"while","WHILE"),(r"*","Star"),(r"long","LONG"),(r"short","SHORT"),(r"if","IF"),(r"==","EQ_OP"),(r">","Gt"),(r"%=","MOD_ASSIGN"),(r"_Static_assert","STATIC_ASSERT"),(r"_Imaginary","IMAGINARY"),(r"<","Lt"),(r"typedef","TYPEDEF"),] {lexnames.insert(k,v);}
    c11alexer {stk,keywords,lexnames,shared_state}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for c11alexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Alphanum(n) if self.shared_state.borrow().contains(n) => Some(TerminalToken::from_raw(token,"TYPEDEF_NAME",RetTypeEnum::Enumvariant_8( n
))),
      RawToken:: Alphanum(n) => Some(TerminalToken::from_raw(token,"ENUMERATION_CONSTANT",RetTypeEnum::Enumvariant_8( n
))),
      RawToken:: Alphanum(n) => Some(TerminalToken::from_raw(token,"IDENTIFIER",RetTypeEnum::Enumvariant_8( n
))),
      RawToken:: Num(n) => Some(TerminalToken::from_raw(token,"I_CONSTANT",RetTypeEnum::Enumvariant_6( (n as i32)
))),
      RawToken:: Float(n) => Some(TerminalToken::from_raw(token,"F_CONSTANT",RetTypeEnum::Enumvariant_7( n
))),
      RawToken:: Strlit(s) => Some(TerminalToken::from_raw(token,"STRING_LITERAL",RetTypeEnum::Enumvariant_8( s
))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_2((self.stk.previous_position(),self.stk.current_position())),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,HashSet<&'lt str>>)
{
}//end of load_extras: don't change this line as it affects augmentation
