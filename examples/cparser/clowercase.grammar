# ANSI C YACC Grammar, adopted to rustlr syntax

lifetime 'lt
typedterminal IDENTIFIER &'lt str
typedterminal CONSTANT i32
typedterminal STRING_LITERAL &'lt str
typedterminal TYPE_NAME &'lt str

terminals PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
terminals AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
terminals SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
terminals XOR_ASSIGN OR_ASSIGN

terminals typedef extern static auto register sizeof
terminals char short int long signed unsigned float double const volatile void
terminals struct union enum ELLIPSIS

terminals case default if else switch while do for goto continue break return
terminals [ ] ( )  Lbrace Rbrace Amp + - ~ Bang Bar Hat ; Dot Comma Colon
terminals Star Div Percent Lt Gt Eq1 Quest Hash

nonterminals primary_expression postfix_expression argument_expression_list
nonterminals unary_expression unary_operator cast_expression multiplicative_expression
nonterminals additive_expression shift_expression relational_expression equality_expression
nonterminals and_expression exclusive_or_expression inclusive_or_expression
nonterminals logical_and_expression logical_or_expression conditional_expression

nonterminals assignment_expression assignment_operator expression constant_expression
nonterminals declaration declaration_specifiers init_declarator_list init_declarator
nonterminals storage_class_specifier type_specifier struct_or_union_specifier
nonterminals struct_or_union struct_declaration_list struct_declaration
nonterminals specifier_qualifier_list struct_declarator_list struct_declarator
nonterminals enum_specifier enumerator_list enumerator type_qualifier
nonterminals declarator direct_declarator pointer type_qualifier_list
nonterminals parameter_type_list parameter_list parameter_declaration
nonterminals identifier_list type_name abstract_declarator
nonterminals direct_abstract_declarator initializer initializer_list
nonterminals statement labeled_statement compound_statement declaration_list
nonterminals statement_list expression_statement selection_statement
nonterminals iteration_statement jump_statement translation_unit
nonterminals external_declaration function_definition

topsym translation_unit

# added for Rustlr edition to resolve dangling else problem:
left if 100
left else 200

primary_expression ==>
	 IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	| ( expression )
	<==

postfix_expression ==>
	 primary_expression
	| postfix_expression [ expression ]
	| postfix_expression ( )
	| postfix_expression ( argument_expression_list )
	| postfix_expression Dot IDENTIFIER
	| postfix_expression PTR_OP IDENTIFIER
	| postfix_expression INC_OP
	| postfix_expression DEC_OP
	<==

argument_expression_list --> assignment_expression | argument_expression_list Comma assignment_expression

unary_expression ==>
	 postfix_expression
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator cast_expression
	| sizeof unary_expression
	| sizeof ( type_name )
	<==

unary_operator ==>
	 Amp
	| Star
	| +
	| -
	| ~
	| Bang
	<==

cast_expression ==>
	 unary_expression
	| ( type_name ) cast_expression
	<==

multiplicative_expression ==>
	 cast_expression
	| multiplicative_expression Star cast_expression
	| multiplicative_expression Div cast_expression
	| multiplicative_expression Percent cast_expression
	<==

additive_expression ==>
	 multiplicative_expression
	| additive_expression + multiplicative_expression
	| additive_expression - multiplicative_expression
	<==

shift_expression ==>
	 additive_expression
	| shift_expression LEFT_OP additive_expression
	| shift_expression RIGHT_OP additive_expression
	<==

relational_expression ==>
	 shift_expression
	| relational_expression Lt shift_expression
	| relational_expression Gt shift_expression
	| relational_expression LE_OP shift_expression
	| relational_expression GE_OP shift_expression
        <==
        
equality_expression ==>
	 relational_expression
	| equality_expression EQ_OP relational_expression
	| equality_expression NE_OP relational_expression
	<==

and_expression ==>
	 equality_expression
	| and_expression Amp equality_expression
	<==

exclusive_or_expression ==>
	 and_expression
	| exclusive_or_expression Hat and_expression
	<==

inclusive_or_expression ==>
	 exclusive_or_expression
	| inclusive_or_expression Bar exclusive_or_expression
	<==

logical_and_expression ==>
	 inclusive_or_expression
	| logical_and_expression AND_OP inclusive_or_expression
	<==

logical_or_expression ==>
	 logical_and_expression
	| logical_or_expression OR_OP logical_and_expression
	<==

conditional_expression ==>
	 logical_or_expression
	| logical_or_expression Quest expression Colon conditional_expression
	<==

assignment_expression ==>
	 conditional_expression
	| unary_expression assignment_operator assignment_expression
	<==

assignment_operator ==>
	 Eq1
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	<==

expression ==>
	 assignment_expression
	| expression Comma assignment_expression
	<==

constant_expression --> conditional_expression


declaration ==>
	 declaration_specifiers ;
	| declaration_specifiers init_declarator_list ;
	<==

declaration_specifiers ==>
	 storage_class_specifier
	| storage_class_specifier declaration_specifiers
	| type_specifier
	| type_specifier declaration_specifiers
	| type_qualifier
	| type_qualifier declaration_specifiers
	<==

init_declarator_list ==>
	 init_declarator
	| init_declarator_list Comma init_declarator
	<==

init_declarator ==>
	 declarator
	| declarator Eq1 initializer
	<==

storage_class_specifier ==>
	 typedef
	| extern
	| static
	| auto
	| register
	<==

type_specifier ==>
	 void
	| char
	| short
	| int
	| long
	| float
	| double
	| signed
	| unsigned
	| struct_or_union_specifier
	| enum_specifier
	| TYPE_NAME
	<==

# new rule
#type_name --> TYPE_NAME

struct_or_union_specifier ==>
	 struct_or_union IDENTIFIER Lbrace struct_declaration_list Rbrace
	| struct_or_union Lbrace struct_declaration_list Rbrace
	| struct_or_union IDENTIFIER
	<==

struct_or_union --> struct | union

struct_declaration_list ==>
	 struct_declaration
	| struct_declaration_list struct_declaration
	<==

struct_declaration --> specifier_qualifier_list struct_declarator_list ;

specifier_qualifier_list ==>
	 type_specifier specifier_qualifier_list
	| type_specifier
	| type_qualifier specifier_qualifier_list
	| type_qualifier
	<==

struct_declarator_list ==>
	 struct_declarator
	| struct_declarator_list Comma struct_declarator
	<==

struct_declarator ==>
	 declarator
	| Colon constant_expression
	| declarator Colon constant_expression
	<==

enum_specifier ==>
	 enum Lbrace enumerator_list Rbrace
	| enum IDENTIFIER Lbrace enumerator_list Rbrace
	| enum IDENTIFIER
	<==

enumerator_list ==>
	 enumerator
	| enumerator_list Comma enumerator
	<==

enumerator ==>
	 IDENTIFIER
	| IDENTIFIER Eq1 constant_expression
	<==

type_qualifier --> const | volatile

declarator ==>
	 pointer direct_declarator
	| direct_declarator
	<==

direct_declarator ==>
	 IDENTIFIER
	| ( declarator )
	| direct_declarator [ constant_expression ]
	| direct_declarator [ ]
	| direct_declarator ( parameter_type_list )
	| direct_declarator ( identifier_list )
	| direct_declarator ( )
	<==

pointer ==>
	 Star
	| Star type_qualifier_list
	| Star pointer
	| Star type_qualifier_list pointer
	<==

type_qualifier_list ==>
	 type_qualifier
	| type_qualifier_list type_qualifier
	<==


parameter_type_list ==>
	 parameter_list
	| parameter_list Comma ELLIPSIS
	<==

parameter_list ==>
	 parameter_declaration
	| parameter_list Comma parameter_declaration
	<==

parameter_declaration ==>
	 declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	<==

identifier_list ==>
	 IDENTIFIER
	| identifier_list Comma IDENTIFIER
	<==

type_name ==>
	 specifier_qualifier_list
	| specifier_qualifier_list abstract_declarator
	<==

abstract_declarator ==>
	 pointer
	| direct_abstract_declarator
	| pointer direct_abstract_declarator
	<==

direct_abstract_declarator ==>
	 ( abstract_declarator )
	| [ ]
	| [ constant_expression ]
	| direct_abstract_declarator [ ]
	| direct_abstract_declarator [ constant_expression ]
	| ( )
	| ( parameter_type_list )
	| direct_abstract_declarator ( )
	| direct_abstract_declarator ( parameter_type_list )
	<==

initializer ==>
	 assignment_expression
	| Lbrace initializer_list Rbrace
	| Lbrace initializer_list Comma Rbrace
	<==

initializer_list ==>
	 initializer
	| initializer_list Comma initializer
	<==

statement ==>
	 labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	<==

labeled_statement ==>
	 IDENTIFIER Colon statement
	| case constant_expression Colon statement
	| default Colon statement
	<==

compound_statement ==>
	 Lbrace Rbrace
	| Lbrace statement_list Rbrace
	| Lbrace declaration_list Rbrace
	| Lbrace declaration_list statement_list Rbrace
	<==

declaration_list ==>
	 declaration
	| declaration_list declaration
	<==

statement_list ==>
	 statement
	| statement_list statement
	<==

expression_statement --> ; | expression ;

selection_statement ==>
	 if ( expression ) statement
	| if ( expression ) statement else statement
	| switch ( expression ) statement
	<==

iteration_statement ==>
	 while ( expression ) statement
	| do statement while ( expression ) ;
	| for ( expression_statement expression_statement ) statement
	| for ( expression_statement expression_statement expression ) statement
	<==

jump_statement ==>
	 goto IDENTIFIER ;
	| continue ;
	| break ;
	| return ;
	| return expression ;
	<==

translation_unit ==>
	 external_declaration
	| translation_unit external_declaration
	<==

external_declaration ==>
	 function_definition
	| declaration
	<==

function_definition ==>
	 declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	| declarator declaration_list compound_statement
	| declarator compound_statement
	<==


# Rustlr StrTokenizer specs

lexname PTR_OP ->
lexname INC_OP ++
lexname DEC_OP --
lexname LEFT_OP <<
lexname RIGHT_OP >>
lexname LE_OP <=
lexname GE_OP >=
lexname EQ_OP ==
lexname NE_OP !=
lexname AND_OP &&
lexname OR_OP ||
lexname MUL_ASSIGN *=
lexname DIV_ASSIGN /=
lexname MOD_ASSIGN %=
lexname ADD_ASSIGN +=
lexname SUB_ASSIGN -=
lexname LEFT_ASSIGN <<=
lexname RIGHT_ASSIGN >>=
lexname AND_ASSIGN &=
lexname XOR_ASSIGN ^=
lexname OR_ASSIGN |=
lexname ELLIPSIS ...
lexname Lbrace {
lexname Rbrace }
lexname Amp &
lexname Bang !
lexname Bar |
lexname Hat ^
lexname Dot .
lexname Comma ,
lexname Colon :
lexname Star *
lexname Div /
lexname Percent %
lexname Lt <
lexname Gt >
lexname Eq1 =
lexname Quest ?
lexname Hash #

lexvalue IDENTIFIER Alphanum(s) s
lexvalue CONSTANT Num(n) (n as i32)
lexvalue STRING_LITERAL Strlit(n) n
lexvalue TYPE_NAME Alphanum(s) s

EOF

ANSI C Yacc grammar
In 1985, Jeff Lee published his Yacc grammar (which is accompanied by a matching Lex specification) for the April 30, 1985 draft version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in 1987; that original, as mentioned in the answer to question 17.25 of the comp.lang.c FAQ, can be ftp'ed from ftp.uu.net, file usenet/net.sources/ansi.c.grammar.Z.

Jutta Degener, 1995

Grammar was modified for Rustlr.  AST automatically generated.
