//Abstract syntax types generated by rustlr for grammar java14auto
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(dead_code)]
use std::marker::PhantomData;
extern crate rustlr;
use rustlr::LBox;

#[derive(Debug)]
pub enum primary_no_new_array {
  primary_no_new_array_250(LBox<array_access>),
  primary_no_new_array_247(LBox<class_instance_creation_expression>),
  THIS,
  primary_no_new_array_251(LBox<primitive_type>),
  primary_no_new_array_244(LBox<literal>),
  VOID_252,
  primary_no_new_array_254(LBox<name>),
  primary_no_new_array_255(LBox<name>),
  LPAREN_246(LBox<expression>),
  primary_no_new_array_249(LBox<method_invocation>),
  primary_no_new_array_253(LBox<array_type>),
  primary_no_new_array_248(LBox<field_access>),
  primary_no_new_array_Nothing,
}
impl Default for primary_no_new_array { fn default()->Self { primary_no_new_array::primary_no_new_array_Nothing } }

#[derive(Debug)]
pub enum modifiers {
  modifiers_53(LBox<modifiers>,LBox<modifier>),
  modifiers_52(LBox<modifier>),
  modifiers_Nothing,
}
impl Default for modifiers { fn default()->Self { modifiers::modifiers_Nothing } }

#[derive(Debug)]
pub enum statement {
  statement_164(LBox<if_then_else_statement>),
  statement_162(LBox<labeled_statement>),
  statement_161(LBox<statement_without_trailing_substatement>),
  statement_166(LBox<for_statement>),
  statement_163(LBox<if_then_statement>),
  statement_165(LBox<while_statement>),
  statement_Nothing,
}
impl Default for statement { fn default()->Self { statement::statement_Nothing } }

#[derive(Default,Debug)]
pub struct static_initializer {
  pub _item1_:LBox<block>,
}
#[derive(Debug)]
pub enum variable_declarator_id {
  IDENTIFIER_93(String),
  variable_declarator_id_Nothing,
}
impl Default for variable_declarator_id { fn default()->Self { variable_declarator_id::variable_declarator_id_Nothing } }

#[derive(Default,Debug)]
pub struct while_statement {
  pub _item2_:LBox<expression>,
  pub _item4_:LBox<statement>,
}
#[derive(Debug)]
pub enum modifier {
  PROTECTED,
  STRICTFP,
  PUBLIC,
  STATIC,
  ABSTRACT,
  PRIVATE,
  SYNCHRONIZED,
  VOLATILE,
  TRANSIENT,
  FINAL,
  NATIVE,
  modifier_Nothing,
}
impl Default for modifier { fn default()->Self { modifier::modifier_Nothing } }

#[derive(Default,Debug)]
pub struct do_statement {
  pub _item1_:LBox<statement>,
  pub _item4_:LBox<expression>,
}
#[derive(Debug)]
pub enum floating_point_type {
  DOUBLE,
  FLOAT,
  floating_point_type_Nothing,
}
impl Default for floating_point_type { fn default()->Self { floating_point_type::floating_point_type_Nothing } }

#[derive(Debug)]
pub enum constructor_body {
  LBRACE_120(LBox<block_statements>),
  LBRACE_121,
  LBRACE_118(LBox<explicit_constructor_invocation>,LBox<block_statements>),
  LBRACE_119(LBox<explicit_constructor_invocation>),
  constructor_body_Nothing,
}
impl Default for constructor_body { fn default()->Self { constructor_body::constructor_body_Nothing } }

#[derive(Debug)]
pub enum throws_opt {
  throws_opt_109(LBox<throws>),
  throws_opt_108,
  throws_opt_Nothing,
}
impl Default for throws_opt { fn default()->Self { throws_opt::throws_opt_Nothing } }

#[derive(Debug)]
pub enum postfix_expression {
  postfix_expression_289(LBox<postincrement_expression>),
  postfix_expression_290(LBox<postdecrement_expression>),
  postfix_expression_287(LBox<primary>),
  postfix_expression_288(LBox<name>),
  postfix_expression_Nothing,
}
impl Default for postfix_expression { fn default()->Self { postfix_expression::postfix_expression_Nothing } }

#[derive(Debug)]
pub enum modifiers_opt {
  modifiers_opt_51(LBox<modifiers>),
  modifiers_opt_50,
  modifiers_opt_Nothing,
}
impl Default for modifiers_opt { fn default()->Self { modifiers_opt::modifiers_opt_Nothing } }

#[derive(Debug)]
pub enum switch_block_statement_groups {
  switch_block_statement_groups_204(LBox<switch_block_statement_groups>,LBox<switch_block_statement_group>),
  switch_block_statement_groups_203(LBox<switch_block_statement_group>),
  switch_block_statement_groups_Nothing,
}
impl Default for switch_block_statement_groups { fn default()->Self { switch_block_statement_groups::switch_block_statement_groups_Nothing } }

#[derive(Default,Debug)]
pub struct postincrement_expression {
  pub _item0_:LBox<postfix_expression>,
}
#[derive(Debug)]
pub enum interface_member_declarations_opt {
  interface_member_declarations_opt_132,
  interface_member_declarations_opt_133(LBox<interface_member_declarations>),
  interface_member_declarations_opt_Nothing,
}
impl Default for interface_member_declarations_opt { fn default()->Self { interface_member_declarations_opt::interface_member_declarations_opt_Nothing } }

#[derive(Debug)]
pub enum statement_no_short_if {
  statement_no_short_if_169(LBox<if_then_else_statement_no_short_if>),
  statement_no_short_if_167(LBox<statement_without_trailing_substatement>),
  statement_no_short_if_170(LBox<while_statement_no_short_if>),
  statement_no_short_if_171(LBox<for_statement_no_short_if>),
  statement_no_short_if_168(LBox<labeled_statement_no_short_if>),
  statement_no_short_if_Nothing,
}
impl Default for statement_no_short_if { fn default()->Self { statement_no_short_if::statement_no_short_if_Nothing } }

#[derive(Debug)]
pub enum reference_type {
  reference_type_20(LBox<class_or_interface_type>),
  reference_type_21(LBox<array_type>),
  reference_type_Nothing,
}
impl Default for reference_type { fn default()->Self { reference_type::reference_type_Nothing } }

#[derive(Default,Debug)]
pub struct preincrement_expression {
  pub _item1_:LBox<unary_expression>,
}
#[derive(Debug)]
pub enum literal {
  INTEGER_LITERAL_1(i32),
  FLOATING_POINT_LITERAL_2(f64),
  CHARACTER_LITERAL_4(char),
  STRING_LITERAL_5(String),
  BOOLEAN_LITERAL_3(bool),
  NULL_LITERAL,
  literal_Nothing,
}
impl Default for literal { fn default()->Self { literal::literal_Nothing } }

#[derive(Default,Debug)]
pub struct if_then_else_statement_no_short_if {
  pub _item2_:LBox<expression>,
  pub _item4_:LBox<statement_no_short_if>,
  pub _item6_:LBox<statement_no_short_if>,
}
#[derive(Default,Debug)]
pub struct super {
  pub _item1_:LBox<class_type>,
}
#[derive(Default,Debug)]
pub struct labeled_statement {
  pub _item0_:String,
  pub _item2_:LBox<statement>,
}
#[derive(Debug)]
pub enum switch_block {
  LBRACE_202,
  LBRACE_201(LBox<switch_labels>),
  LBRACE_200(LBox<switch_block_statement_groups>),
  LBRACE_199(LBox<switch_block_statement_groups>,LBox<switch_labels>),
  switch_block_Nothing,
}
impl Default for switch_block { fn default()->Self { switch_block::switch_block_Nothing } }

#[derive(Debug)]
pub enum class_body_declarations {
  class_body_declarations_77(LBox<class_body_declaration>),
  class_body_declarations_78(LBox<class_body_declarations>,LBox<class_body_declaration>),
  class_body_declarations_Nothing,
}
impl Default for class_body_declarations { fn default()->Self { class_body_declarations::class_body_declarations_Nothing } }

#[derive(Debug)]
pub enum variable_initializer {
  variable_initializer_95(LBox<expression>),
  variable_initializer_96(LBox<array_initializer>),
  variable_initializer_Nothing,
}
impl Default for variable_initializer { fn default()->Self { variable_initializer::variable_initializer_Nothing } }

#[derive(Default,Debug)]
pub struct break_statement {
  pub _item1_:LBox<identifier_opt>,
}
#[derive(Default,Debug)]
pub struct for_statement {
  pub _item2_:LBox<for_init_opt>,
  pub _item4_:LBox<expression_opt>,
  pub _item6_:LBox<for_update_opt>,
  pub _item8_:LBox<statement>,
}
#[derive(Debug)]
pub enum assert_statement {
  ASSERT_240(LBox<expression>,LBox<expression>),
  ASSERT_239(LBox<expression>),
  assert_statement_Nothing,
}
impl Default for assert_statement { fn default()->Self { assert_statement::assert_statement_Nothing } }

#[derive(Debug)]
pub enum block_statements {
  block_statements_153(LBox<block_statements>,LBox<block_statement>),
  block_statements_152(LBox<block_statement>),
  block_statements_Nothing,
}
impl Default for block_statements { fn default()->Self { block_statements::block_statements_Nothing } }

#[derive(Debug)]
pub enum dims {
  LBRACK_275,
  dims_Nothing,
}
impl Default for dims { fn default()->Self { dims::dims_Nothing } }

#[derive(Default,Debug)]
pub struct interfaces {
  pub _item1_:LBox<interface_type_list>,
}
#[derive(Debug)]
pub enum shift_expression {
  shift_expression_314(LBox<additive_expression>),
  shift_expression_315(LBox<shift_expression>,LBox<additive_expression>),
  shift_expression_316(LBox<shift_expression>,LBox<additive_expression>),
  shift_expression_317(LBox<shift_expression>,LBox<additive_expression>),
  shift_expression_Nothing,
}
impl Default for shift_expression { fn default()->Self { shift_expression::shift_expression_Nothing } }

#[derive(Default,Debug)]
pub struct class_declaration {
  pub _item0_:LBox<modifiers_opt>,
  pub _item2_:String,
  pub _item3_:LBox<super_opt>,
  pub _item4_:LBox<interfaces_opt>,
  pub _item5_:LBox<class_body>,
}
#[derive(Debug)]
pub enum type {
  type_7(LBox<primitive_type>),
  type_8(LBox<reference_type>),
  type_Nothing,
}
impl Default for type { fn default()->Self { type::type_Nothing } }

#[derive(Debug)]
pub enum package_declaration_opt {
  package_declaration_opt_33,
  package_declaration_opt_32(LBox<package_declaration>),
  package_declaration_opt_Nothing,
}
impl Default for package_declaration_opt { fn default()->Self { package_declaration_opt::package_declaration_opt_Nothing } }

#[derive(Debug)]
pub enum variable_declarator {
  variable_declarator_92(LBox<variable_declarator_id>,LBox<variable_initializer>),
  variable_declarator_91(LBox<variable_declarator_id>),
  variable_declarator_Nothing,
}
impl Default for variable_declarator { fn default()->Self { variable_declarator::variable_declarator_Nothing } }

#[derive(Default,Debug)]
pub struct while_statement_no_short_if {
  pub _item2_:LBox<expression>,
  pub _item4_:LBox<statement_no_short_if>,
}
#[derive(Debug)]
pub enum super_opt {
  super_opt_67,
  super_opt_68(LBox<super>),
  super_opt_Nothing,
}
impl Default for super_opt { fn default()->Self { super_opt::super_opt_Nothing } }

#[derive(Default,Debug)]
pub struct local_variable_declaration_statement {
  pub _item0_:LBox<local_variable_declaration>,
}
#[derive(Default,Debug)]
pub struct continue_statement {
  pub _item1_:LBox<identifier_opt>,
}
#[derive(Default,Debug)]
pub struct finally {
  pub _item1_:LBox<block>,
}
#[derive(Debug)]
pub enum type_declaration {
  SEMICOLON,
  type_declaration_48(LBox<interface_declaration>),
  type_declaration_47(LBox<class_declaration>),
  type_declaration_Nothing,
}
impl Default for type_declaration { fn default()->Self { type_declaration::type_declaration_Nothing } }

#[derive(Default,Debug)]
pub struct constructor_declaration {
  pub _item0_:LBox<modifiers_opt>,
  pub _item1_:LBox<constructor_declarator>,
  pub _item2_:LBox<throws_opt>,
  pub _item3_:LBox<constructor_body>,
}
#[derive(Default,Debug)]
pub struct qualified_name {
  pub _item0_:LBox<name>,
  pub _item2_:String,
}
#[derive(Default,Debug)]
pub struct type_import_on_demand_declaration {
  pub _item1_:LBox<name>,
}
#[derive(Debug)]
pub enum class_instance_creation_expression {
  NEW_257(LBox<class_or_interface_type>,LBox<argument_list_opt>,LBox<class_body>),
  class_instance_creation_expression_258(LBox<primary>,String,LBox<argument_list_opt>),
  class_instance_creation_expression_259(LBox<primary>,String,LBox<argument_list_opt>,LBox<class_body>),
  NEW_256(LBox<class_or_interface_type>,LBox<argument_list_opt>),
  class_instance_creation_expression_260(LBox<name>,String,LBox<argument_list_opt>),
  class_instance_creation_expression_261(LBox<name>,String,LBox<argument_list_opt>,LBox<class_body>),
  class_instance_creation_expression_Nothing,
}
impl Default for class_instance_creation_expression { fn default()->Self { class_instance_creation_expression::class_instance_creation_expression_Nothing } }

#[derive(Default,Debug)]
pub struct constant_declaration {
  pub _item0_:LBox<field_declaration>,
}
#[derive(Debug)]
pub enum import_declaration {
  import_declaration_43(LBox<single_type_import_declaration>),
  import_declaration_44(LBox<type_import_on_demand_declaration>),
  import_declaration_Nothing,
}
impl Default for import_declaration { fn default()->Self { import_declaration::import_declaration_Nothing } }

#[derive(Default,Debug)]
pub struct class_type {
  pub _item0_:LBox<class_or_interface_type>,
}
#[derive(Debug)]
pub enum inclusive_or_expression {
  inclusive_or_expression_331(LBox<exclusive_or_expression>),
  inclusive_or_expression_332(LBox<inclusive_or_expression>,LBox<exclusive_or_expression>),
  inclusive_or_expression_Nothing,
}
impl Default for inclusive_or_expression { fn default()->Self { inclusive_or_expression::inclusive_or_expression_Nothing } }

#[derive(Debug)]
pub enum unary_expression_not_plus_minus {
  NOT_302(LBox<unary_expression>),
  unary_expression_not_plus_minus_300(LBox<postfix_expression>),
  unary_expression_not_plus_minus_303(LBox<cast_expression>),
  COMP_301(LBox<unary_expression>),
  unary_expression_not_plus_minus_Nothing,
}
impl Default for unary_expression_not_plus_minus { fn default()->Self { unary_expression_not_plus_minus::unary_expression_not_plus_minus_Nothing } }

#[derive(Debug)]
pub enum variable_declarators {
  variable_declarators_89(LBox<variable_declarator>),
  variable_declarators_90(LBox<variable_declarators>,LBox<variable_declarator>),
  variable_declarators_Nothing,
}
impl Default for variable_declarators { fn default()->Self { variable_declarators::variable_declarators_Nothing } }

#[derive(Default,Debug)]
pub struct dim_expr {
  pub _item1_:LBox<expression>,
}
#[derive(Default,Debug)]
pub struct predecrement_expression {
  pub _item1_:LBox<unary_expression>,
}
#[derive(Default,Debug)]
pub struct switch_statement {
  pub _item2_:LBox<expression>,
  pub _item4_:LBox<switch_block>,
}
#[derive(Debug)]
pub enum formal_parameter_list_opt {
  formal_parameter_list_opt_102,
  formal_parameter_list_opt_103(LBox<formal_parameter_list>),
  formal_parameter_list_opt_Nothing,
}
impl Default for formal_parameter_list_opt { fn default()->Self { formal_parameter_list_opt::formal_parameter_list_opt_Nothing } }

#[derive(Debug)]
pub enum for_init {
  for_init_218(LBox<local_variable_declaration>),
  for_init_217(LBox<statement_expression_list>),
  for_init_Nothing,
}
impl Default for for_init { fn default()->Self { for_init::for_init_Nothing } }

#[derive(Default,Debug)]
pub struct single_type_import_declaration {
  pub _item1_:LBox<name>,
}
#[derive(Debug)]
pub enum dim_exprs {
  dim_exprs_270(LBox<dim_expr>),
  dim_exprs_271(LBox<dim_exprs>,LBox<dim_expr>),
  dim_exprs_Nothing,
}
impl Default for dim_exprs { fn default()->Self { dim_exprs::dim_exprs_Nothing } }

#[derive(Default,Debug)]
pub struct block {
  pub _item1_:LBox<block_statements_opt>,
}
#[derive(Default,Debug)]
pub struct method_declaration {
  pub _item0_:LBox<method_header>,
  pub _item1_:LBox<method_body>,
}
#[derive(Default,Debug)]
pub struct empty_statement {
}
#[derive(Debug)]
pub enum array_creation_init {
  NEW_268(LBox<primitive_type>,LBox<dims>,LBox<array_initializer>),
  NEW_269(LBox<class_or_interface_type>,LBox<dims>,LBox<array_initializer>),
  array_creation_init_Nothing,
}
impl Default for array_creation_init { fn default()->Self { array_creation_init::array_creation_init_Nothing } }

#[derive(Debug)]
pub enum statement_without_trailing_substatement {
  statement_without_trailing_substatement_177(LBox<break_statement>),
  statement_without_trailing_substatement_181(LBox<throw_statement>),
  statement_without_trailing_substatement_178(LBox<continue_statement>),
  statement_without_trailing_substatement_174(LBox<expression_statement>),
  statement_without_trailing_substatement_179(LBox<return_statement>),
  statement_without_trailing_substatement_172(LBox<block>),
  statement_without_trailing_substatement_180(LBox<synchronized_statement>),
  statement_without_trailing_substatement_182(LBox<try_statement>),
  statement_without_trailing_substatement_173(LBox<empty_statement>),
  statement_without_trailing_substatement_175(LBox<switch_statement>),
  statement_without_trailing_substatement_176(LBox<do_statement>),
  statement_without_trailing_substatement_183(LBox<assert_statement>),
  statement_without_trailing_substatement_Nothing,
}
impl Default for statement_without_trailing_substatement { fn default()->Self { statement_without_trailing_substatement::statement_without_trailing_substatement_Nothing } }

#[derive(Debug)]
pub enum type_declarations {
  type_declarations_40(LBox<type_declaration>),
  type_declarations_41(LBox<type_declarations>,LBox<type_declaration>),
  type_declarations_Nothing,
}
impl Default for type_declarations { fn default()->Self { type_declarations::type_declarations_Nothing } }

#[derive(Default,Debug)]
pub struct class_or_interface_type {
  pub _item0_:LBox<name>,
}
#[derive(Default,Debug)]
pub struct postdecrement_expression {
  pub _item0_:LBox<postfix_expression>,
}
#[derive(Debug)]
pub enum argument_list_opt {
  argument_list_opt_262,
  argument_list_opt_263(LBox<argument_list>),
  argument_list_opt_Nothing,
}
impl Default for argument_list_opt { fn default()->Self { argument_list_opt::argument_list_opt_Nothing } }

#[derive(Debug)]
pub enum local_variable_declaration {
  local_variable_declaration_159(LBox<type>,LBox<variable_declarators>),
  FINAL_160(LBox<type>,LBox<variable_declarators>),
  local_variable_declaration_Nothing,
}
impl Default for local_variable_declaration { fn default()->Self { local_variable_declaration::local_variable_declaration_Nothing } }

#[derive(Debug)]
pub enum dims_opt {
  dims_opt_273,
  dims_opt_274(LBox<dims>),
  dims_opt_Nothing,
}
impl Default for dims_opt { fn default()->Self { dims_opt::dims_opt_Nothing } }

#[derive(Debug)]
pub enum interface_member_declarations {
  interface_member_declarations_135(LBox<interface_member_declarations>,LBox<interface_member_declaration>),
  interface_member_declarations_134(LBox<interface_member_declaration>),
  interface_member_declarations_Nothing,
}
impl Default for interface_member_declarations { fn default()->Self { interface_member_declarations::interface_member_declarations_Nothing } }

#[derive(Debug)]
pub enum interfaces_opt {
  interfaces_opt_70,
  interfaces_opt_71(LBox<interfaces>),
  interfaces_opt_Nothing,
}
impl Default for interfaces_opt { fn default()->Self { interfaces_opt::interfaces_opt_Nothing } }

#[derive(Debug)]
pub enum multiplicative_expression {
  multiplicative_expression_308(LBox<multiplicative_expression>,LBox<unary_expression>),
  multiplicative_expression_307(LBox<unary_expression>),
  multiplicative_expression_309(LBox<multiplicative_expression>,LBox<unary_expression>),
  multiplicative_expression_310(LBox<multiplicative_expression>,LBox<unary_expression>),
  multiplicative_expression_Nothing,
}
impl Default for multiplicative_expression { fn default()->Self { multiplicative_expression::multiplicative_expression_Nothing } }

#[derive(Debug)]
pub enum statement_expression_list {
  statement_expression_list_222(LBox<statement_expression>),
  statement_expression_list_223(LBox<statement_expression_list>,LBox<statement_expression>),
  statement_expression_list_Nothing,
}
impl Default for statement_expression_list { fn default()->Self { statement_expression_list::statement_expression_list_Nothing } }

#[derive(Debug)]
pub enum method_header {
  method_header_98(LBox<modifiers_opt>,LBox<type>,LBox<method_declarator>,LBox<throws_opt>),
  method_header_99(LBox<modifiers_opt>,LBox<method_declarator>,LBox<throws_opt>),
  method_header_Nothing,
}
impl Default for method_header { fn default()->Self { method_header::method_header_Nothing } }

#[derive(Debug)]
pub enum formal_parameter_list {
  formal_parameter_list_104(LBox<formal_parameter>),
  formal_parameter_list_105(LBox<formal_parameter_list>,LBox<formal_parameter>),
  formal_parameter_list_Nothing,
}
impl Default for formal_parameter_list { fn default()->Self { formal_parameter_list::formal_parameter_list_Nothing } }

#[derive(Default,Debug)]
pub struct constructor_declarator {
  pub _item0_:LBox<simple_name>,
  pub _item2_:LBox<formal_parameter_list_opt>,
}
#[derive(Default,Debug)]
pub struct interface_type {
  pub _item0_:LBox<class_or_interface_type>,
}
#[derive(Debug)]
pub enum additive_expression {
  additive_expression_313(LBox<additive_expression>,LBox<multiplicative_expression>),
  additive_expression_311(LBox<multiplicative_expression>),
  additive_expression_312(LBox<additive_expression>,LBox<multiplicative_expression>),
  additive_expression_Nothing,
}
impl Default for additive_expression { fn default()->Self { additive_expression::additive_expression_Nothing } }

#[derive(Debug)]
pub enum class_type_list {
  class_type_list_112(LBox<class_type_list>,LBox<class_type>),
  class_type_list_111(LBox<class_type>),
  class_type_list_Nothing,
}
impl Default for class_type_list { fn default()->Self { class_type_list::class_type_list_Nothing } }

#[derive(Debug)]
pub enum extends_interfaces_opt {
  extends_interfaces_opt_128(LBox<extends_interfaces>),
  extends_interfaces_opt_127,
  extends_interfaces_opt_Nothing,
}
impl Default for extends_interfaces_opt { fn default()->Self { extends_interfaces_opt::extends_interfaces_opt_Nothing } }

#[derive(Debug)]
pub enum relational_expression {
  relational_expression_323(LBox<relational_expression>,LBox<reference_type>),
  relational_expression_319(LBox<relational_expression>,LBox<shift_expression>),
  relational_expression_320(LBox<relational_expression>,LBox<shift_expression>),
  relational_expression_321(LBox<relational_expression>,LBox<shift_expression>),
  relational_expression_318(LBox<shift_expression>),
  relational_expression_322(LBox<relational_expression>,LBox<shift_expression>),
  relational_expression_Nothing,
}
impl Default for relational_expression { fn default()->Self { relational_expression::relational_expression_Nothing } }

#[derive(Default,Debug)]
pub struct interface_body {
  pub _item1_:LBox<interface_member_declarations_opt>,
}
#[derive(Debug)]
pub enum and_expression {
  and_expression_327(LBox<equality_expression>),
  and_expression_328(LBox<and_expression>,LBox<equality_expression>),
  and_expression_Nothing,
}
impl Default for and_expression { fn default()->Self { and_expression::and_expression_Nothing } }

#[derive(Debug)]
pub enum variable_initializers {
  variable_initializers_147(LBox<variable_initializer>),
  variable_initializers_148(LBox<variable_initializers>,LBox<variable_initializer>),
  variable_initializers_Nothing,
}
impl Default for variable_initializers { fn default()->Self { variable_initializers::variable_initializers_Nothing } }

#[derive(Debug)]
pub enum class_body_declaration {
  class_body_declaration_82(LBox<block>),
  class_body_declaration_81(LBox<constructor_declaration>),
  class_body_declaration_79(LBox<class_member_declaration>),
  class_body_declaration_80(LBox<static_initializer>),
  class_body_declaration_Nothing,
}
impl Default for class_body_declaration { fn default()->Self { class_body_declaration::class_body_declaration_Nothing } }

#[derive(Debug)]
pub enum argument_list {
  argument_list_265(LBox<argument_list>,LBox<expression>),
  argument_list_264(LBox<expression>),
  argument_list_Nothing,
}
impl Default for argument_list { fn default()->Self { argument_list::argument_list_Nothing } }

#[derive(Debug)]
pub enum assignment_expression {
  assignment_expression_339(LBox<conditional_expression>),
  assignment_expression_340(LBox<assignment>),
  assignment_expression_Nothing,
}
impl Default for assignment_expression { fn default()->Self { assignment_expression::assignment_expression_Nothing } }

#[derive(Debug)]
pub enum class_body_declarations_opt {
  class_body_declarations_opt_75,
  class_body_declarations_opt_76(LBox<class_body_declarations>),
  class_body_declarations_opt_Nothing,
}
impl Default for class_body_declarations_opt { fn default()->Self { class_body_declarations_opt::class_body_declarations_opt_Nothing } }

#[derive(Debug)]
pub enum for_update_opt {
  for_update_opt_219,
  for_update_opt_220(LBox<for_update>),
  for_update_opt_Nothing,
}
impl Default for for_update_opt { fn default()->Self { for_update_opt::for_update_opt_Nothing } }

#[derive(Default,Debug)]
pub struct synchronized_statement {
  pub _item2_:LBox<expression>,
  pub _item4_:LBox<block>,
}
#[derive(Debug)]
pub enum interface_type_list {
  interface_type_list_73(LBox<interface_type_list>,LBox<interface_type>),
  interface_type_list_72(LBox<interface_type>),
  interface_type_list_Nothing,
}
impl Default for interface_type_list { fn default()->Self { interface_type_list::interface_type_list_Nothing } }

#[derive(Debug)]
pub enum exclusive_or_expression {
  exclusive_or_expression_329(LBox<and_expression>),
  exclusive_or_expression_330(LBox<exclusive_or_expression>,LBox<and_expression>),
  exclusive_or_expression_Nothing,
}
impl Default for exclusive_or_expression { fn default()->Self { exclusive_or_expression::exclusive_or_expression_Nothing } }

#[derive(Debug)]
pub enum explicit_constructor_invocation {
  SUPER_123(LBox<argument_list_opt>),
  explicit_constructor_invocation_124(LBox<primary>,LBox<argument_list_opt>),
  explicit_constructor_invocation_125(LBox<primary>,LBox<argument_list_opt>),
  THIS_122(LBox<argument_list_opt>),
  explicit_constructor_invocation_Nothing,
}
impl Default for explicit_constructor_invocation { fn default()->Self { explicit_constructor_invocation::explicit_constructor_invocation_Nothing } }

#[derive(Default,Debug)]
pub struct catch_clause {
  pub _item2_:LBox<formal_parameter>,
  pub _item4_:LBox<block>,
}
#[derive(Default,Debug)]
pub struct assignment {
  pub _item0_:LBox<postfix_expression>,
  pub _item1_:LBox<assignment_operator>,
  pub _item2_:LBox<assignment_expression>,
}
#[derive(Default,Debug)]
pub struct throw_statement {
  pub _item1_:LBox<expression>,
}
#[derive(Default,Debug)]
pub struct expression {
  pub _item0_:LBox<assignment_expression>,
}
#[derive(Debug)]
pub enum method_invocation {
  SUPER_282(String,LBox<argument_list_opt>),
  method_invocation_280(LBox<name>,LBox<argument_list_opt>),
  method_invocation_283(LBox<name>,String,LBox<argument_list_opt>),
  method_invocation_281(LBox<primary>,String,LBox<argument_list_opt>),
  method_invocation_Nothing,
}
impl Default for method_invocation { fn default()->Self { method_invocation::method_invocation_Nothing } }

#[derive(Debug)]
pub enum import_declarations {
  import_declarations_39(LBox<import_declarations>,LBox<import_declaration>),
  import_declarations_38(LBox<import_declaration>),
  import_declarations_Nothing,
}
impl Default for import_declarations { fn default()->Self { import_declarations::import_declarations_Nothing } }

#[derive(Debug)]
pub enum block_statement {
  block_statement_155(LBox<statement>),
  block_statement_157(LBox<interface_declaration>),
  block_statement_154(LBox<local_variable_declaration_statement>),
  block_statement_156(LBox<class_declaration>),
  block_statement_Nothing,
}
impl Default for block_statement { fn default()->Self { block_statement::block_statement_Nothing } }

#[derive(Debug)]
pub enum field_access {
  field_access_277(LBox<primary>,String),
  SUPER_278(String),
  field_access_279(LBox<name>,String),
  field_access_Nothing,
}
impl Default for field_access { fn default()->Self { field_access::field_access_Nothing } }

#[derive(Default,Debug)]
pub struct if_then_else_statement {
  pub _item2_:LBox<expression>,
  pub _item4_:LBox<statement_no_short_if>,
  pub _item6_:LBox<statement>,
}
#[derive(Debug)]
pub enum method_declarator {
  IDENTIFIER_100(String,LBox<formal_parameter_list_opt>),
  method_declarator_Nothing,
}
impl Default for method_declarator { fn default()->Self { method_declarator::method_declarator_Nothing } }

#[derive(Debug)]
pub enum array_creation_uninit {
  NEW_266(LBox<primitive_type>,LBox<dim_exprs>,LBox<dims_opt>),
  NEW_267(LBox<class_or_interface_type>,LBox<dim_exprs>,LBox<dims_opt>),
  array_creation_uninit_Nothing,
}
impl Default for array_creation_uninit { fn default()->Self { array_creation_uninit::array_creation_uninit_Nothing } }

#[derive(Debug)]
pub enum catches {
  catches_235(LBox<catch_clause>),
  catches_236(LBox<catches>,LBox<catch_clause>),
  catches_Nothing,
}
impl Default for catches { fn default()->Self { catches::catches_Nothing } }

#[derive(Debug)]
pub enum unary_expression {
  unary_expression_293(LBox<preincrement_expression>),
  unary_expression_297(LBox<unary_expression_not_plus_minus>),
  unary_expression_294(LBox<predecrement_expression>),
  unary_expression_Nothing,
}
impl Default for unary_expression { fn default()->Self { unary_expression::unary_expression_Nothing } }

#[derive(Default,Debug)]
pub struct class_body {
  pub _item1_:LBox<class_body_declarations_opt>,
}
#[derive(Debug)]
pub enum switch_labels {
  switch_labels_207(LBox<switch_labels>,LBox<switch_label>),
  switch_labels_206(LBox<switch_label>),
  switch_labels_Nothing,
}
impl Default for switch_labels { fn default()->Self { switch_labels::switch_labels_Nothing } }

#[derive(Debug)]
pub enum type_declarations_opt {
  type_declarations_opt_37,
  type_declarations_opt_36(LBox<type_declarations>),
  type_declarations_opt_Nothing,
}
impl Default for type_declarations_opt { fn default()->Self { type_declarations_opt::type_declarations_opt_Nothing } }

#[derive(Default,Debug)]
pub struct interface_declaration {
  pub _item0_:LBox<modifiers_opt>,
  pub _item2_:String,
  pub _item3_:LBox<extends_interfaces_opt>,
  pub _item4_:LBox<interface_body>,
}
#[derive(Debug)]
pub enum name {
  name_28(LBox<qualified_name>),
  name_27(LBox<simple_name>),
  name_Nothing,
}
impl Default for name { fn default()->Self { name::name_Nothing } }

#[derive(Debug)]
pub enum array_initializer {
  LBRACE_145,
  LBRACE_146,
  LBRACE_143(LBox<variable_initializers>),
  LBRACE_144(LBox<variable_initializers>),
  array_initializer_Nothing,
}
impl Default for array_initializer { fn default()->Self { array_initializer::array_initializer_Nothing } }

#[derive(Debug)]
pub enum class_member_declaration {
  class_member_declaration_84(LBox<method_declaration>),
  class_member_declaration_86(LBox<interface_declaration>),
  SEMICOLON,
  class_member_declaration_85(LBox<modifiers_opt>,String,LBox<super_opt>,LBox<interfaces_opt>,LBox<class_body>),
  class_member_declaration_83(LBox<field_declaration>),
  class_member_declaration_Nothing,
}
impl Default for class_member_declaration { fn default()->Self { class_member_declaration::class_member_declaration_Nothing } }

#[derive(Debug)]
pub enum cast_expression {
  LPAREN_304(LBox<primitive_type>,LBox<dims_opt>,LBox<unary_expression>),
  LPAREN_306(LBox<name>,LBox<dims>,LBox<unary_expression_not_plus_minus>),
  LPAREN_305(LBox<expression>,LBox<unary_expression_not_plus_minus>),
  cast_expression_Nothing,
}
impl Default for cast_expression { fn default()->Self { cast_expression::cast_expression_Nothing } }

#[derive(Debug)]
pub enum import_declarations_opt {
  import_declarations_opt_34(LBox<import_declarations>),
  import_declarations_opt_35,
  import_declarations_opt_Nothing,
}
impl Default for import_declarations_opt { fn default()->Self { import_declarations_opt::import_declarations_opt_Nothing } }

#[derive(Debug)]
pub enum statement_expression {
  statement_expression_190(LBox<predecrement_expression>),
  statement_expression_192(LBox<postdecrement_expression>),
  statement_expression_193(LBox<method_invocation>),
  statement_expression_188(LBox<assignment>),
  statement_expression_191(LBox<postincrement_expression>),
  statement_expression_194(LBox<class_instance_creation_expression>),
  statement_expression_189(LBox<preincrement_expression>),
  statement_expression_Nothing,
}
impl Default for statement_expression { fn default()->Self { statement_expression::statement_expression_Nothing } }

#[derive(Debug)]
pub enum try_statement {
  TRY_231(LBox<block>,LBox<catches>),
  TRY_232(LBox<block>,LBox<catches_opt>,LBox<finally>),
  try_statement_Nothing,
}
impl Default for try_statement { fn default()->Self { try_statement::try_statement_Nothing } }

#[derive(Debug)]
pub enum formal_parameter {
  FINAL_107(LBox<type>,LBox<variable_declarator_id>),
  formal_parameter_106(LBox<type>,LBox<variable_declarator_id>),
  formal_parameter_Nothing,
}
impl Default for formal_parameter { fn default()->Self { formal_parameter::formal_parameter_Nothing } }

#[derive(Debug)]
pub enum equality_expression {
  equality_expression_324(LBox<relational_expression>),
  equality_expression_325(LBox<equality_expression>,LBox<relational_expression>),
  equality_expression_326(LBox<equality_expression>,LBox<relational_expression>),
  equality_expression_Nothing,
}
impl Default for equality_expression { fn default()->Self { equality_expression::equality_expression_Nothing } }

#[derive(Debug)]
pub enum block_statements_opt {
  block_statements_opt_151(LBox<block_statements>),
  block_statements_opt_150,
  block_statements_opt_Nothing,
}
impl Default for block_statements_opt { fn default()->Self { block_statements_opt::block_statements_opt_Nothing } }

#[derive(Default,Debug)]
pub struct constant_expression {
  pub _item0_:LBox<expression>,
}
#[derive(Debug)]
pub enum primary {
  primary_242(LBox<array_creation_init>),
  primary_243(LBox<array_creation_uninit>),
  primary_241(LBox<primary_no_new_array>),
  primary_Nothing,
}
impl Default for primary { fn default()->Self { primary::primary_Nothing } }

#[derive(Default,Debug)]
pub struct simple_name {
  pub _item0_:String,
}
#[derive(Default,Debug)]
pub struct labeled_statement_no_short_if {
  pub _item0_:String,
  pub _item2_:LBox<statement_no_short_if>,
}
#[derive(Default,Debug)]
pub struct field_declaration {
  pub _item0_:LBox<modifiers_opt>,
  pub _item1_:LBox<type>,
  pub _item2_:LBox<variable_declarators>,
}
#[derive(Debug)]
pub enum array_type {
  array_type_26(LBox<name>,LBox<dims>),
  array_type_25(LBox<primitive_type>,LBox<dims>),
  array_type_Nothing,
}
impl Default for array_type { fn default()->Self { array_type::array_type_Nothing } }

#[derive(Debug)]
pub enum array_access {
  array_access_284(LBox<name>,LBox<expression>),
  array_access_285(LBox<primary_no_new_array>,LBox<expression>),
  array_access_286(LBox<array_creation_init>,LBox<expression>),
  array_access_Nothing,
}
impl Default for array_access { fn default()->Self { array_access::array_access_Nothing } }

#[derive(Debug)]
pub enum extends_interfaces {
  extends_interfaces_130(LBox<extends_interfaces>,LBox<interface_type>),
  EXTENDS_129(LBox<interface_type>),
  extends_interfaces_Nothing,
}
impl Default for extends_interfaces { fn default()->Self { extends_interfaces::extends_interfaces_Nothing } }

#[derive(Default,Debug)]
pub struct compilation_unit {
  pub _item0_:LBox<package_declaration_opt>,
  pub _item1_:LBox<import_declarations_opt>,
  pub _item2_:LBox<type_declarations_opt>,
}
#[derive(Debug)]
pub enum conditional_and_expression {
  conditional_and_expression_334(LBox<conditional_and_expression>,LBox<inclusive_or_expression>),
  conditional_and_expression_333(LBox<inclusive_or_expression>),
  conditional_and_expression_Nothing,
}
impl Default for conditional_and_expression { fn default()->Self { conditional_and_expression::conditional_and_expression_Nothing } }

#[derive(Debug)]
pub enum numeric_type {
  numeric_type_12(LBox<floating_point_type>),
  numeric_type_11(LBox<integral_type>),
  numeric_type_Nothing,
}
impl Default for numeric_type { fn default()->Self { numeric_type::numeric_type_Nothing } }

#[derive(Debug)]
pub enum conditional_expression {
  conditional_expression_338(LBox<conditional_or_expression>,LBox<expression>,LBox<conditional_expression>),
  conditional_expression_337(LBox<conditional_or_expression>),
  conditional_expression_Nothing,
}
impl Default for conditional_expression { fn default()->Self { conditional_expression::conditional_expression_Nothing } }

#[derive(Debug)]
pub enum switch_label {
  CASE_208(LBox<constant_expression>),
  DEFAULT_209,
  switch_label_Nothing,
}
impl Default for switch_label { fn default()->Self { switch_label::switch_label_Nothing } }

#[derive(Debug)]
pub enum method_body {
  method_body_113(LBox<block>),
  SEMICOLON,
  method_body_Nothing,
}
impl Default for method_body { fn default()->Self { method_body::method_body_Nothing } }

#[derive(Debug)]
pub enum conditional_or_expression {
  conditional_or_expression_336(LBox<conditional_or_expression>,LBox<conditional_and_expression>),
  conditional_or_expression_335(LBox<conditional_and_expression>),
  conditional_or_expression_Nothing,
}
impl Default for conditional_or_expression { fn default()->Self { conditional_or_expression::conditional_or_expression_Nothing } }

#[derive(Debug)]
pub enum for_init_opt {
  for_init_opt_216(LBox<for_init>),
  for_init_opt_215,
  for_init_opt_Nothing,
}
impl Default for for_init_opt { fn default()->Self { for_init_opt::for_init_opt_Nothing } }

#[derive(Debug)]
pub enum interface_member_declaration {
  interface_member_declaration_137(LBox<abstract_method_declaration>),
  SEMICOLON,
  interface_member_declaration_136(LBox<constant_declaration>),
  interface_member_declaration_139(LBox<interface_declaration>),
  interface_member_declaration_138(LBox<class_declaration>),
  interface_member_declaration_Nothing,
}
impl Default for interface_member_declaration { fn default()->Self { interface_member_declaration::interface_member_declaration_Nothing } }

#[derive(Default,Debug)]
pub struct switch_block_statement_group {
  pub _item0_:LBox<switch_labels>,
  pub _item1_:LBox<block_statements>,
}
#[derive(Default,Debug)]
pub struct for_statement_no_short_if {
  pub _item2_:LBox<for_init_opt>,
  pub _item4_:LBox<expression_opt>,
  pub _item6_:LBox<for_update_opt>,
  pub _item8_:LBox<statement_no_short_if>,
}
#[derive(Debug)]
pub enum identifier_opt {
  IDENTIFIER_225(String),
  identifier_opt_224,
  identifier_opt_Nothing,
}
impl Default for identifier_opt { fn default()->Self { identifier_opt::identifier_opt_Nothing } }

#[derive(Debug)]
pub enum assignment_operator {
  PLUSEQ,
  OREQ,
  ANDEQ,
  RSHIFTEQ,
  MODEQ,
  LSHIFTEQ,
  MULTEQ,
  XOREQ,
  EQ,
  MINUSEQ,
  URSHIFTEQ,
  DIVEQ,
  assignment_operator_Nothing,
}
impl Default for assignment_operator { fn default()->Self { assignment_operator::assignment_operator_Nothing } }

#[derive(Default,Debug)]
pub struct package_declaration {
  pub _item1_:LBox<name>,
}
#[derive(Default,Debug)]
pub struct if_then_statement {
  pub _item2_:LBox<expression>,
  pub _item4_:LBox<statement>,
}
#[derive(Default,Debug)]
pub struct for_update {
  pub _item0_:LBox<statement_expression_list>,
}
#[derive(Default,Debug)]
pub struct goal {
  pub _item0_:LBox<compilation_unit>,
}
#[derive(Default,Debug)]
pub struct return_statement {
  pub _item1_:LBox<expression_opt>,
}
#[derive(Debug)]
pub enum integral_type {
  BYTE,
  SHORT,
  CHAR,
  INT,
  LONG,
  integral_type_Nothing,
}
impl Default for integral_type { fn default()->Self { integral_type::integral_type_Nothing } }

#[derive(Default,Debug)]
pub struct throws {
  pub _item1_:LBox<class_type_list>,
}
#[derive(Debug)]
pub enum catches_opt {
  catches_opt_233,
  catches_opt_234(LBox<catches>),
  catches_opt_Nothing,
}
impl Default for catches_opt { fn default()->Self { catches_opt::catches_opt_Nothing } }

#[derive(Debug)]
pub enum expression_opt {
  expression_opt_354,
  expression_opt_355(LBox<expression>),
  expression_opt_Nothing,
}
impl Default for expression_opt { fn default()->Self { expression_opt::expression_opt_Nothing } }

#[derive(Default,Debug)]
pub struct abstract_method_declaration {
  pub _item0_:LBox<method_header>,
}
#[derive(Default,Debug)]
pub struct expression_statement {
  pub _item0_:LBox<statement_expression>,
}
#[derive(Debug)]
pub enum primitive_type {
  BOOLEAN,
  primitive_type_9(LBox<numeric_type>),
  primitive_type_Nothing,
}
impl Default for primitive_type { fn default()->Self { primitive_type::primitive_type_Nothing } }

