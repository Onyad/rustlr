//Parser generated by rustlr for grammar mjenum
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::any::Any;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::enumabsyn::*;
use crate::enumabsyn::Declaration::*;
use crate::enumabsyn::Expr::*;
use crate::enumabsyn::Stat::*;

static SYMBOLS:[&'static str;58] = ["ID","STRING","BOOL","INTEGER","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

static TABLE:[u64;1285] = [171798757377,176093790209,17180065792,281719789846531,562967133421570,563194766688258,563134637277185,844424930459648,1126080295927809,1125917087105024,1126144719978498,1407473668325376,1688849860853760,1970569650307074,1970342017040386,2251821289177088,2533463769677825,2533373575036930,2533317740855296,2814775537762304,3096323528982528,3377811390660608,3377738376347648,3377914470137857,3377699721707520,3377729786609664,3377815685693440,3659204763385856,3940761343754242,3940688329310210,3940851538853889,3940679739375618,3940671149441026,3940765638721538,3940649674604546,3940752753819650,4222189076676608,4222223436218370,4222124651970562,4503599628550146,4503655463124994,4503698412797954,4785074605326338,4785173389574146,4785130439901186,5066549582233602,5066605416808450,5066648366481410,5348123342077954,5629598319837186,5629499535589378,5629555370164226,5911008872235008,6192642762801153,6192664237768705,6192449488814080,6192565452800000,6192561157767168,6192479553716224,6192647057965057,6192552568750080,6192488143454208,6192470964174848,6473993185787904,6755455277662208,7036977497702402,7036990382604290,7036986087636994,7036904483258370,7036895893323778,7036874418487298,7036913073192962,7318461064609792,7318564144939009,7318465359642624,7318388050296832,7318379460558848,7318349395656704,7599824373350400,7881402427899906,7881299348684802,7881338003390466,7881415312801794,7881329413455874,7881411017834498,7881320823521282,8162791504740354,8163019138007042,8444305137008642,8444249302433794,8444348086681602,8725762934964224,9007199257034752,9288811672764416,9288747248320512,9570213635162112,9851680022003712,10133107754139648,10133112049500160,10133154999042048,10133189358714880,10133193653551104,10133180769042432,10133099164729344,10133103459500032,10133326797602817,10414587023654914,10414574138753026,10414612793458690,10414655743131650,10414621383393282,10414595613589506,10414578433720322,10414694397837314,10414604203524098,10414582728687618,10414672923000834,10414702987771906,10414668628033538,10414629973327874,10414664333066242,10414685807902722,10414677217968130,10414690102870018,10414698692804610,10696117837692928,10977554157797376,10977635761848320,10977524092895232,10977730253422593,10977640056881152,10977738843422721,10977562747535360,10977584222109698,11259063496146946,11259140805558274,11259132215623682,11259072086081538,11259059201179650,11259076381048834,11259153690460162,11259084970983426,11259145100525570,11259067791114242,11259157985427458,11259166575362050,11259149395492866,11259106445819906,11259162280394754,11540620077367298,11540538472988674,11540641552203778,11540637257236482,11540628667301890,11540547062923266,11540551357890562,11540607192465410,11540581422661634,11540632962269186,11540624372334594,11540534178021378,11540542767955970,11540559947825154,11540615782400002,11822095054471168,11822090759766016,11822103644602368,11822013450027008,11822112234471424,11822056399634432,11822107939700736,11822022039764992,11822026334797824,11822099349504000,11822116528979968,11822082169962496,12103454064640000,12103638751182849,12103535671902208,12103462654377984,12103539963723776,12103423999737856,12384993467236352,12384898978414592,12384903273185280,12384911863185408,12384954812727296,12384980582727680,12384907567824896,12384989172400128,12385126612860929,12666528573947906,12666519984013314,12666537163882498,12666442674601986,12666532868915202,12666451264536578,12666459854471170,12666541458849794,12666524278980610,12666507099111426,12666446969569282,12666438379634690,12666515689046018,12666434084667394,12666481329307650,12947934831116290,12947956305952770,12948003550593026,12947994960658434,12947917651247106,12947990665691138,12948016435494914,12948007845560322,12947999255625730,12947913356279810,12947921946214402,12948012140527618,12947982075756546,12947909061312514,12947926241181698,13229379742859264,13229323908546560,13229328203317248,13229418397368320,13229332497956864,13229414102532096,13229405512859648,13229551543058433,13229336793317376,13510944914276354,13510863309897730,13510871899832322,13510962094145538,13510957799178242,13510966389112834,13510867604865026,13510953504210946,13510859014930434,13510906259570690,13510932029374466,13510949209243650,13510876194799618,13510940619309058,13510884784734210,13792273863278592,14073808969596928,14355223816830976,14636788986085376,14636793280921600,14636703086870528,14636698792099840,14636707381510144,14636754626412544,14636711676870656,14636926426873857,14636780396412928,14918272550436866,14918229600763906,14918212420894722,14918221010829314,14918268255469570,14918195241025538,14918263960502274,14918255370567682,14918178061156354,14918289730306050,14918182356123650,14918173766189058,14918285435338754,14918302615207938,14918294025273346,14918276845404162,14918298320240642,14918186651090946,14918203830960130,15199648747094016,15481136607002624,15481128017002496,15481213916217344,15481132311642112,15481205326544896,15481351357136897,15481179556544512,15481218211053568,15481123722231808,15762607288352768,15762611583713280,15762826333913089,15762602993713152,15762693187764224,15762598698942464,15762680303255552,15762688892928000,15762654533255168,16044155279966208,16044163869638656,16044301310689281,16044082265063424,16044086560423936,16044077970423808,16044129509965824,16044168164474880,16044073675653120,16325630256676864,16325548652363776,16325643141185536,16325552947134464,16325557241774080,16325604486676480,16325561537134592,16325638846349312,16325776287465473,16607079463387136,16607032218484736,16607251264241665,16607023629074432,16607027923845120,16607113823059968,16607118117896192,16607105233387520,16607036513845248,16888498605785088,16888507195195392,16888588799770624,16888554440097792,16888580210098176,16888511490555904,16888726241017857,16888593094606848,16888502900555776,17169986467266560,17169977877266432,17170201217794049,17170029416808448,17169973582495744,17170068071317504,17170063776481280,17169982171906048,17170055186808832,17451538753191936,17451543048028160,17451504393519104,17451676194570241,17451448559206400,17451452853977088,17451457148616704,17451461443977216,17451530163519488,17732927830687744,17732932125327360,17732923535917056,17733018024738816,17732936420687872,17733013729902592,17733005140230144,17733151171346433,17732979370229760,18014454345367554,18014462939365376,18295929326206976,18577515970035712,18577425775853568,18577494495526912,18577507380756480,18577408597950464,18577503085658112,18577498790559744,18577455840690176,18577481611018240,18577490200821760,18577412891082752,18577511675527168,18858965177532416,18858883571777538,18858930816417794,18858969472237568,18858896456679426,18858892161712130,18858900752564224,18858986650992642,18858909341581314,18858973767270400,18858956586221570,18858982356025346,18858887866744834,18858978062368768,18858990946746368,19140358551437312,19421872182919168,19703334274793472,19703458828910593,19703308500271106,19984890852933634,19984869378097154,19984865083129858,19984783478751234,19984796363653122,19984830723391490,19984873673064450,19984882262999042,19984809248555010,19984856493195266,19984877969211392,19984886557966338,19984792068685826,19984787773718530,19984800659406848,20266357239906306,20266262750625794,20266361534873602,20266275635527682,20266348649971714,20266331470102530,20266271340560386,20266352944939010,20266365829840898,20266258455658498,20266254163574784,20266340060037122,20266284225462274,20266267045593090,20266344355004418,20266305700298754,20547815037796352,20547737726943234,20547742021910530,20547827922632704,20547746316877826,20547832216223746,20547823627534336,20547750612828160,20547759201779714,20547819332501504,20547733431975938,20547836512501760,20547780676616194,20547840807010304,20547806446419970,20829302899343360,20829225589538816,20829255654375424,20829217001963520,20829290014507008,20829307194441728,20829315783720960,20829298604244992,20829311489212416,20829281424703488,20829294309212160,20829212704768000,21110700566249472,21110777876054016,21110764989644802,21110790760431616,21110709155069954,21110696270168066,21110756399710210,21110786464481282,21110773580955648,21110683385266178,21110691975200770,21110730629906434,21110687680233474,21110782169513986,21110769284612098,21392252852764672,21392248556093442,21392166951714818,21392175542960128,21392265737142272,21392158361780226,21392244261126146,21392171246682114,21392162656747522,21392239966158850,21392231376224258,21392184131584002,21392257146028034,21392205606420482,21392261440995330,21673719239344128,21673646223654914,21673736417968130,21673706353197058,21673732123000834,21673723534376960,21673727829475328,21673641928687618,21673714944638976,21673659108556802,21673633338753026,21673650519670784,21673740713852928,21673680583393282,21673637633720322,21955194214678530,21955181329776642,21955108315332610,21955121200234498,21955189919711234,21955202804613122,21955125496381440,21955198509645826,21955211394547714,21955215689515010,21955112610299906,21955134085136386,21955155559972866,21955207099580418,21955116905267202,22236600473092096,22236669192765440,22236686371192834,22236591881912322,22236583291977730,22236609061781506,22236596176879618,22236630536617986,22236656306421762,22236673487798272,22236677782896640,22236682076225538,22236664896356354,22236587586945026,22236690667274240,22518152759607296,22518084038885378,22518075449802752,22518058269081602,22518161349476352,22518131284967424,22518165643984896,22518139874770944,22518148464508928,22518157053329410,22518144169476096,22518105514639360,22518066859016194,22518062564048898,22518071153983490,22799541835857922,22799619146186752,22799550426513408,22799546130825218,22799533245923330,22799614851481600,22799559015727106,22799636326187008,22799640620695552,22799606260367362,22799537540890626,22799632030171138,22799623441219584,22799627736317952,22799580491350016,23081042582241280,23080956682829824,23080948093419520,23081016811716608,23081038287405056,23080960978190336,23081175729504257,23081003927732224,23081029697732608,23080952388190208,23362483202555904,23644044076122114,23643958176776194,23643971061678082,23643962471743490,23644039781154818,23644065550958594,23644005421416450,23644048371089410,23644052666056706,23643975356645378,23643983946579970,23644056961024002,23643966766710786,23644031191220226,23644061255991298,23925471810748416,24206963962740738,24207071341576193,24206938192936962,24206951077838850,24206847998623746,24206856588558338,24206886653329410,24206929603002370,24206852293591042,24206942487904258,24206878063394818,24206976847642626,24206959667773442,24206895243264002,24206946782871554,24206903833198594,24206860883525634,24206968257708034,24488434643959808,24488322975006720,24488537728417793,24488353039908864,24488438938992640,24488361629646848,24769858080997378,25051333060395010,25051504861839361,25051500566806529,25051328764706816,25051363124379648,25051277225164800,25051285815164928,25051272930394112,25051367419215872,25051354534707200,25051281519804416,25332911115599874,25332833806188546,25332881050828802,25332808036384770,25332855281025026,25332902525665282,25332906820632578,25332816626319362,25332812331352066,25332893935730690,25332889640763394,25332915410567170,25332820921286658,25332825216253954,25332898230697986,25614390387802112,25614377503424512,25614381798522880,25614373208326144,25614330258456576,25614386093293568,25614356028784640,25614368913293312,25614291606568960,25614364618588160,25614287308849152,25614300193619968,25895775170265090,25895843889741826,25895762285363202,25895783760199682,25895852479676418,25895766580330498,25895831004839938,25895839594774530,25895805235036162,25895757990395906,25895861069611010,25895848184709122,25895856774643714,25895865364578306,25895770875297794,26177263029911554,26177267324878850,26177185720500226,26177396178878465,26177293094682626,26177211490304002,26177228670173186,26177288799715330,26177220080238594,26177301684617218,26177172835598338,26177284504748034,26177275914813442,26177202900369410,26177254439976962,26177181425532930,26177177130565634,26177271619846146,26458746602061824,26458763775967232,26458866860883969,26458647817682944,26458742302769152,26458677876883456,26458686466621440,26458768076570624,26458695062388736,26458656403357696,26458875450687489,26458750897094656,26458776666374144,26458652108718080,26458841091145729,26458660698718208,26458738007932928,26458759480934400,26458703648260096,26458729418260480,26458862560935937,26740122794655744,27021765271355392,27021662192402432,27021705142009856,27021683670843392,27021739502141440,27021730912337920,27021657897500674,27021748091879424,27021760976846848,27021675077173248,27021756682076160,27021743796846592,27021752386977792,27021833994633217,27303132877815808,27584689454972930,27584612145561602,27584698044907522,27584702339874818,27584680865038338,27584633620398082,27584607850594306,27584706634842114,27584715224776706,27584710929809410,27584693749940226,27584616440528898,27584625030463490,27584620735496194,27584655095234562,27866035582271488,27866061350174720,27866237444489217,27866241744437249,27866026992271360,27866142960123904,27866134364487680,27866031286910976,27866117186322432,27866112891486208,27866215974699009,27866069945942016,27866121485615104,27866052760436736,27866104301813760,27866078531813376,27866250334240769,27866125780975616,27866022701236224,27866151549927424,27866138659520512,28147553513111552,28429114385694720,28429049964724224,28429037079887872,28429135860400128,28429105795891200,28429118680399872,28429140154908672,28429131565629440,28429127270531072,28429080025563136,28429122975432704,28710503466729472,28991952667541506,28991926897737730,28992051451789314,28992042861854722,28992038566887426,28992017092050946,28991961257476098,28992025681985538,28991922602770434,28991935487672322,28992021387018242,28991969847410690,28991978437345282,28992004207149058,28992012797083650,28992034271920130,28991931192705026,29273500659286018,29273453414645762,29273479184449538,29273436234776578,29273406170005506,29273513544187906,29273410464972802,29273444824711170,29273509249220610,29273526429089794,29273517839155202,29273427644841986,29273522134122498,29273492069351426,29273496364318722,29273401875038210,29273397580070914,29273487774384130,29554872556060674,29555040061620226,29555031471685634,29555035766652930,29555010001305600,29554936982405122,29554949867307010,29555014291816450,29555018586783746,29555022881751042,29555005701881858,29555027176718338,29554979932078082,29836403368787968,29836360419246080,29836347534475264,29836356123885568,29836442023297024,29836575172395009,29836429138788352,29836437728460800,29836351829245952,30117826804514818,30117916998828034,30118045854203905,30117904113926146,30117934178697218,30117921293795330,30117869754187778,30117925588762626,30117912703860738,30117861164253186,30117942768631810,30117835394449410,30117831099482114,30117852574318594,30117822509547522,30117878344122370,30117951358566402,30117938473664514,30399413449457666,30399400564555778,30399336140046338,30399409154490370,30399318960177154,30399297485340674,30399327550111746,30680982922788865,30680832591986690,30680858366509056,30962307571384322,31243950056144897,31243735302799360,31243726712799232,31243722418028544,31243778252341248,31243804022341632,31243816906850304,31243731007438848,31243812612014080,31525347718463490,31525364898332674,31525304768790530,31525356308398082,31525343423496194,31525330538594306,31525352013430786,31525360603365378,31525261819117570,31525274704019458,31525339128528898,31525266114084866,31525257524150274,31525283293954050,31525270409052162,31806775455580160,32088228952473600,32088147348160512,32088155937570816,32088374986407937,32088203182473216,32088151642931200,32088241836982272,32088237542146048,32088160232931328,32369622329917440,32651097301581824,32651178905894912,32651101596352512,32651153135894528,32651324939960321,32651110186352640,32651105890992128,32651191790403584,32651187495567360,32932572278292480,32932628112605184,32932585163063296,32932653882605568,32932580867702784,32932799916736513,32932576573063168,32932666767114240,32932662472278016,33214051549773824,33214103089315840,33214060139773952,33214128859316224,33214137448988672,33214141743824896,33214274893512705,33214055844413440,33214047255003136,33495681146421248,33495689735700480,33495599541518336,33495655376683008,33495663966486528,33495668261191680,33495586656747520,33495676851322880,33495672556224512,33495595251466240,33495629606354944,33495685441191936,33777211955412993,33777095996538880,33777216255361025,33777190485622785,33777044456865792,33777078812737536,33777001503195136,33777035861098496,33777087402409984,33777126060851200,33777010093195264,33776997212160000,33777113170444288,33777224845164545,33777100293013504,33777005797834752,33777053042737152,33777117471047680,33777108875411456,33777091697246208,33777027271360512,34058532312580098,34340011586879488,34340106076553216,34340033065320448,34340080306814976,34340093191323648,34340110371323904,34340054536486912,34340097486356480,34340183390486529,34340024471650304,34340007291977730,34340114665832448,34340101781454848,34340088896618496,34621439315345410,34621666948612098,34903064619253760,34902957250314240,34903043144744960,34903038850039808,34903056029974528,34903030260236288,34903047439777792,34902961540300800,34903004489908224,34903051734876160,34902974425071616,34903060324745216,35184526710603778,35184531005571074,35184535300538370,35184436516290562,35184479465963522,35184539595505666,35184522415636482,35184427932123136,35184513825701890,35184518120669186,35184449401192450,35184505235767298,35465924378492928,35465915793801216,35466001688297472,35466014572675072,35465980213657600,35466005983395840,35465988803461120,35465997393199104,35466010278166528,35465993098166272,35465954443329536,35465911493722112,35747489549385728,35747399355203584,35747455190368256,35747480960106496,35747429420040192,35747472369909760,35747468074876928,35747382180642816,35747485254877184,35747386470432768,35747463780171776,35747476665008128,36028874331914240,36028943051587584,36028870042320896,36028960231587840,36028955936817152,36028861447143424,36028904396750848,36028938756882432,36028947346620416,36028930167078912,36028951641718784,36028964526096384,36310366487052290,36310353602150402,36310400846790658,36310375076986882,36310387961888770,36310310652477442,36310271997771778,36310392256856066,36310280587706370,36310396551823362,36310383666921474,36310302062542850,36310370782019586,36310327832346626,36310284882673666,36310319242412034,36310276292739074,36310362192084994,36591751268990978,36591858643173378,36591794218663938,36591785628729346,36591867233107970,36591841463304194,36591871528075266,36591746974023682,36591777038794754,36591862938140674,36591845758271490,36591755563958274,36591837168336898,36591850053238786,36591759858925570,36591802808598530,36591828578402306,36591875823042562,36873282082439170,37154915978117121,37154701223723008,37154778533265408,37154911675940865,37154812890972160,37154808595939328,37154744177393664,37154696932687872,37154791417774080,37154787122937856,37154735581626368,37154825781379072,37154817191575552,37154924565692417,37154705518362624,37154890206150657,37154726991888384,37154709813723136,37154752763265024,37154795717066752,37436180495073280,37436232035663874,37436403839795201,37436184790433792,37436262099648512,37436171905662976,37436253509976064,37436176200433664,37436266394484736,37436399542075393,37436227739975680,37717805795901442,37717711306620930,37717724191522818,37717780026097666,37717810090868738,37717784327290880,37717788616032258,37717792910999554,37717801500934146,37717797205966850,37717814385836034,37717754256293890,37999237821104128,37999250711511040,37999130448494592,37999151922020352,37999216347906048,37999169107525632,37999220647198720,37999315136282625,37999126153854976,37999177693396992,37999212053069824,37999121862819840,37999134743855104,37999340908445697,37999336606072833,37999203463397376,37999349495824385,37999233526071296,37999242121707520,37999160511758336,38280596834549762,38280601129517058,38280691323830274,38280644079190018,38280708503699458,38280605424484354,38280712798666754,38280678438928386,38280652669124610,38280626899320834,38280695618797570,38280687028862978,38280635489255426,38280699913764866,38280717093634050,38280609719451650,38280725683568642,38280721388601346,38562162005508098,38562196365246466,38562119055835138,38562183480344578,38562084696096770,38562187775311874,38562101875965954,38562110465900546,38562200660213762,38562153415573506,38562071811194882,38562127645769730,38562170595442690,38562080401129474,38562192070279170,38562174890409986,38562166300475394,38562076106162178,38843606924853248,39125249405353985,39125111959912448,39125034650697728,39125116254748672,39125103370240000,39125077600239616,39125026060697600,39125030355337216,39125021765926912,39406552575836162,39406617000345602,39406535395966978,39406621302915072,39406591230541826,39406501036228610,39406543985901570,39406578345639938,39406625590280194,39406608410411010,39406509626163202,39406496741261314,39406526806032386,39406599820476418,39406505331195906,39406595525509122,39406586935574530,39406612705378306,39688117748105218,39688139222941698,39688049028628482,39688036143726594,39688122043072514,39688044740083712,39688113453137922,39688126338039810,39688104863203330,39688134927974402,39688130633007106,39688079093399554,39969601315667968,39969511121092608,39969554070700032,39969588430831616,39969605610766336,39969614200045568,39969609905537024,39969524005863424,39969519716859904,39969592725536768,39969597020569600,39969579841028096,40251050525196288,40251033339756544,40251140722524161,40251003277082624,40250951735705600,40251016161591296,40251114949967873,40251149309509633,40251041935392768,40250930262179840,40251020460883968,40250934557540352,40250921676505088,40251136419758081,40251011866755072,40250925967540224,40250977507082240,40250968921210880,40251037634789376,40250960325443584,40532435303071746,40532521202417666,40532525497384962,40532516907450370,40532396648366082,40532478252744706,40532486842679298,40532452482940930,40532508317515778,40532499727581186,40532495432613890,40532512612483074,40532443893006338,40532405238300674,40532426713137154,40532409533267970,40532491137646594,40532400943333378,40813987589128194,40813884509913090,40813880214945794,40813875919978498,40813966114291714,40813918869651458,40813910279716866,40813871625011202,40813974704226306,40813953229389826,40813970409259010,40813983294160898,40814000474030082,40813996179062786,40813901689782274,40813961819324418,40813991884095490,40813927459586050,41095428205838338,41095458270609410,41095441090740226,41095359486361602,41095355191394306,41095393846099970,41095436795772930,41095402436034562,41095462565576706,41095449680674818,41095350896427010,41095475450478594,41095445385707522,41095376666230786,41095466860544002,41095385256165378,41095346601459714,41095471155511298,];


fn _semaction_rule_0_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Program<'lt> {
let mut cs = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<Vec<LBox<ClassDec<'lt>>>>::default()}; let mut _mc_ = if let RetTypeEnum::Enumvariant_4(_x_4)=parser.popstack().value { _x_4 } else {<Mainclass<'lt>>::default()};  let mut mc = parser.lbx(0,_mc_);   Program {mainclass:mc, otherclasses:cs } }

fn _semaction_rule_1_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Mainclass<'lt> {
let mut _item16_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item15_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut thebody = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<Vec<LBox<Stat<'lt>>>>::default()}; let mut _item13_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item12_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut an = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item10_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item9_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item8_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item7_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item6_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut cn = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; 
   Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    }
  }

fn _semaction_rule_2_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<ClassDec<'lt>>> {
 Vec::new() }

fn _semaction_rule_3_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<ClassDec<'lt>>> {
let mut _cl_ = if let RetTypeEnum::Enumvariant_5(_x_5)=parser.popstack().value { _x_5 } else {<ClassDec<'lt>>::default()};  let mut cl = parser.lbx(1,_cl_);  let mut cs = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<Vec<LBox<ClassDec<'lt>>>>::default()};  cs.push(cl); cs }

fn _semaction_rule_4_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> ClassDec<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut ds = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<Vec<LBox<Declaration<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut sup = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut name = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  ClassDec {superclass:sup,
            classname:name,
            vars:vdecs,
            methods:mdecs}
  }

fn _semaction_rule_5_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut sup = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  sup }

fn _semaction_rule_6_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
 "Object" }

fn _semaction_rule_7_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> VarDec<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut v = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut t = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  VarDec{dname:v,dtype:t,initval:Nothing,} }

fn _semaction_rule_8_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> VarDec<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut e = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut v = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut t = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; VarDec{dname:v,dtype:t,initval:e}}

fn _semaction_rule_9_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> MethodDec<'lt> {
let mut _item8_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut mbody = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<Vec<LBox<Stat<'lt>>>>::default()}; let mut _item6_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut args = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<Vec<LBox<VarDec<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut name = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; 
  MethodDec{ formals:args,
             body: mbody,
             classname:ty,
	     methodname:name, }
  }

fn _semaction_rule_10_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Declaration<'lt>>> {
 Vec::new() }

fn _semaction_rule_11_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Declaration<'lt>>> {
let mut v = if let RetTypeEnum::Enumvariant_7(_x_7)=parser.popstack().value { _x_7 } else {<VarDec<'lt>>::default()}; let mut ds = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<Vec<LBox<Declaration<'lt>>>>::default()};  ds.push(parser.lbx(1,Vdec(v))); ds }

fn _semaction_rule_12_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Declaration<'lt>>> {
let mut m = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<MethodDec<'lt>>::default()}; let mut ds = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<Vec<LBox<Declaration<'lt>>>>::default()};  ds.push(parser.lbx(1,Mdec(m))); ds }

fn _semaction_rule_13_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<VarDec<'lt>>> {
 Vec::new() }

fn _semaction_rule_14_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<VarDec<'lt>>> {
let mut frs = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<Vec<LBox<VarDec<'lt>>>>::default()}; let mut a = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  frs 
  }

fn _semaction_rule_15_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<VarDec<'lt>>> {
 Vec::new() }

fn _semaction_rule_16_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<VarDec<'lt>>> {
let mut frs = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<Vec<LBox<VarDec<'lt>>>>::default()}; let mut a = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  frs 
  }

fn _semaction_rule_17_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "int[]"; }

fn _semaction_rule_18_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "boolean"; }

fn _semaction_rule_19_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "String"; }

fn _semaction_rule_20_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "int"; }

fn _semaction_rule_21_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "void"; }

fn _semaction_rule_22_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut c = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  c }

fn _semaction_rule_23_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Stat<'lt>>> {
 Vec::new() }

fn _semaction_rule_24_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Stat<'lt>>> {
let mut _s_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut s = parser.lbx(1,_s_);  let mut sv = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<Vec<LBox<Stat<'lt>>>>::default()};  sv.push(s); sv }

fn _semaction_rule_25_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut sv = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<Vec<LBox<Stat<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Blockst(sv) }

fn _semaction_rule_26_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut b = parser.lbx(6,_b_);  let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut a = parser.lbx(4,_a_);  let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _c_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut c = parser.lbx(2,_c_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Ifstat(c, a, b) }

fn _semaction_rule_27_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _a_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut a = parser.lbx(4,_a_);  let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _c_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut c = parser.lbx(2,_c_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Ifstat(c,a,parser.lb(Nopst)) }

fn _semaction_rule_28_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _s_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut s = parser.lbx(4,_s_);  let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _c_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut c = parser.lbx(2,_c_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Whilest(c,s) }

fn _semaction_rule_29_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(2,_e_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut v = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  Assignst(v,e) }

fn _semaction_rule_30_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(5,_e_);  let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _i_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut i = parser.lbx(2,_i_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _v_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut v = parser.lbx(0,_v_);   ArAssignst(v,i,e) }

fn _semaction_rule_31_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut args = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut m = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _obj_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut obj = parser.lbx(0,_obj_);  Callstat(obj,m,args)}

fn _semaction_rule_32_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(1,_e_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Returnst(e) }

fn _semaction_rule_33_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut v = if let RetTypeEnum::Enumvariant_7(_x_7)=parser.popstack().value { _x_7 } else {<VarDec<'lt>>::default()}; Vardecst(v.dname,v.dtype,parser.lb(v.initval))}

fn _semaction_rule_34_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("*",a,b) }

fn _semaction_rule_35_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("+",a,b) }

fn _semaction_rule_36_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("/",a,b) }

fn _semaction_rule_37_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("-",a,b) }

fn _semaction_rule_38_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("&&",a,b) }

fn _semaction_rule_39_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("OROR",a,b) }

fn _semaction_rule_40_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(1,_a_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Notexp(a) }

fn _semaction_rule_41_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("<",a,b) }

fn _semaction_rule_42_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("%",a,b) }

fn _semaction_rule_43_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("==",a,b) }

fn _semaction_rule_44_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _i_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut i = parser.lbx(2,_i_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("[]",a,i) }

fn _semaction_rule_45_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut field = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _obj_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut obj = parser.lbx(0,_obj_);   Field(field,obj) }

fn _semaction_rule_46_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut args = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut f = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _obj_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut obj = parser.lbx(0,_obj_);   Callexp(obj,f,args) }

fn _semaction_rule_47_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut i = if let RetTypeEnum::Enumvariant_3(_x_3)=parser.popstack().value { _x_3 } else {<i32>::default()};  Int(i) }

fn _semaction_rule_48_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut s = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  Strlit(s) }

fn _semaction_rule_49_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut b = if let RetTypeEnum::Enumvariant_2(_x_2)=parser.popstack().value { _x_2 } else {<bool>::default()};  Bool(b) }

fn _semaction_rule_50_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut x = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  Var(x) }

fn _semaction_rule_51_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Thisptr }

fn _semaction_rule_52_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _s_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut s = parser.lbx(3,_s_);  let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Newarray(s) }

fn _semaction_rule_53_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut x = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Newobj(x) }

fn _semaction_rule_54_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut e = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  e }

fn _semaction_rule_55_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_56_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Expr<'lt>>> {
let mut er = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(0,_e_);   er.push(e); er }

fn _semaction_rule_57_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_58_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Expr<'lt>>> {
let mut er = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(1,_e_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  er.push(e); er }

fn _semaction_rule_59_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Program<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; <Program<'lt>>::default()}

pub fn make_parser<'lt>() -> ZCParser<RetTypeEnum<'lt>,Program<'lt>>
{
 let mut parser1:ZCParser<RetTypeEnum<'lt>,Program<'lt>> = ZCParser::new(60,147);
 let mut rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_4(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_6(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_6(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_5(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_7(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_7(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_8(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1285 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>, lexer:&mut mjenumlexer<'lt>) -> Result<Program<'lt>,Program<'lt>>
{
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse(lexer) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>, lexer:&mut mjenumlexer<'lt>, parserpath:&str) -> Result<Program<'lt>,Program<'lt>>
{
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(lexer,parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_11(Stat<'lt>),
  Enumvariant_3(i32),
  Enumvariant_10(Vec<LBox<VarDec<'lt>>>),
  Enumvariant_5(ClassDec<'lt>),
  Enumvariant_2(bool),
  Enumvariant_4(Mainclass<'lt>),
  Enumvariant_0(Program<'lt>),
  Enumvariant_14(Vec<LBox<Expr<'lt>>>),
  Enumvariant_6(Vec<LBox<ClassDec<'lt>>>),
  Enumvariant_9(Vec<LBox<Declaration<'lt>>>),
  Enumvariant_13(Expr<'lt>),
  Enumvariant_12(Vec<LBox<Stat<'lt>>>),
  Enumvariant_7(VarDec<'lt>),
  Enumvariant_8(MethodDec<'lt>),
  Enumvariant_1(&'lt str),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Program<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct mjenumlexer<'t> {
   stk: StrTokenizer<'t>,
   keywords: HashSet<&'static str>,
}
impl<'t> mjenumlexer<'t> 
{
  pub fn from_str(s:&'t str) -> mjenumlexer<'t>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'t LexSource<'t>) -> mjenumlexer<'t>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'t>) -> mjenumlexer<'t> {
    let mut keywords = HashSet::with_capacity(16);
    for kw in ["class","public","static","void","main","String","extends","return","length","new","this","int","boolean","if","else","while",] {keywords.insert(kw);}
    for c in ['(',')','[',']',';','!',',','=','+','-','*','/','<','.','%','{','}',] {stk.add_single(c);}
    for d in ["==","&&","||",] {stk.add_double(d);}
    mjenumlexer {stk,keywords}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for mjenumlexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => Some(TerminalToken::from_raw(token,sym,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum("true") => Some(TerminalToken::from_raw(token,"BOOL",RetTypeEnum::Enumvariant_2(true))),
      RawToken::Alphanum("false") => Some(TerminalToken::from_raw(token,"BOOL",RetTypeEnum::Enumvariant_2(false))),
      RawToken::Alphanum(x) => Some(TerminalToken::from_raw(token,"ID",RetTypeEnum::Enumvariant_1(x))),
      RawToken::Num(n) => Some(TerminalToken::from_raw(token,"INTEGER",RetTypeEnum::Enumvariant_3((n as i32)))),
      RawToken::Strlit(s) => Some(TerminalToken::from_raw(token,"STRING",RetTypeEnum::Enumvariant_1(s))),
      RawToken::Symbol(r".") => Some(TerminalToken::from_raw(token,"DOT",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(r"%") => Some(TerminalToken::from_raw(token,"MOD",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(r"{") => Some(TerminalToken::from_raw(token,"LBR",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(r"}") => Some(TerminalToken::from_raw(token,"RBR",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(r"||") => Some(TerminalToken::from_raw(token,"OROR",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
}//impl Tokenizer

fn load_extras<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>)
{
}//end of load_extras: don't change this line as it affects augmentation
