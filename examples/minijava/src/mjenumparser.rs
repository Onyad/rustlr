//Parser generated by rustlr for grammar mjenum
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::any::Any;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::enumabsyn::*;
use crate::enumabsyn::Declaration::*;
use crate::enumabsyn::Expr::*;
use crate::enumabsyn::Stat::*;

static SYMBOLS:[&'static str;58] = ["ID","STRING","BOOL","INTEGER","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

static TABLE:[u64;1285] = [176093855745,171798822913,17179934720,281474976972800,563194766557187,844669743398914,844442110132226,844609614053377,1125998691483648,1407392063946752,1407619696689154,1407555272638465,1688871335690240,1970342017040386,1970569650307074,2251799814340608,2533300560920576,2814848551747586,2814938746454017,2814792717631488,3096254809505792,3377798505758720,3659204763123712,3659286367567872,3659389446914049,3659213353320448,3659174698287104,3659290662600704,3940684035129344,4222146126151682,4222163306020866,4222240615432194,4222154716086274,4222326515630081,4222236320464898,4222124651315202,4222227730530306,4503655463387138,4503698413060098,4503599628812290,4785074605457410,4785130440032258,4785173389705218,5066648366350338,5066549582102530,5066614006874112,5348080393256962,5348123342929922,5348024558682114,5629598318788610,5911030346743810,5911073296416770,5910974512168962,6192505323847680,6474027545526272,6473963120427008,6474036134674432,6474040429707264,6474117739773953,6474139214479361,6473954530230272,6473945940885504,6474122034675713,6473924465393664,6755468162564096,7036913074569216,7318465359839232,7318379460362240,7318564145004545,7318461064806400,7318349395525632,7318388050558976,7599824373415936,7881299348684802,7881320823521282,7881402427899906,7881338003390466,7881329413455874,7881411017834498,7881415312801794,8162795800166402,8162812980035586,8162885994479618,8162774325329922,8162804390100994,8162890289446914,8162877404545026,8444266481451010,8444494114717698,8725780113719298,8725724279144450,8725823063392258,9007263681544192,9288674233810944,9570222225096704,9570286649540608,9851692906905600,10133154998779904,10414655745753088,10414668630261760,10414801774313473,10414629975818240,10414574141308928,10414587026079744,10414578436472832,10414664335425536,10414582731374592,10696139309776898,10696057705398274,10696160784613378,10696104950038530,10696087770169346,10696169374547970,10696173669515266,10696062000365570,10696049115463682,10696177964482562,10696130719842306,10696152194678786,10696079180234754,10696147899711490,10696070590300162,10696096360103938,10696053410430978,10696165079580674,10696143604744194,10977524094992384,11259213820198913,11259115033788416,11259037724508160,11259059198820354,11259110738755584,11258999069474816,11259205230198785,11259029134311424,11540547062923266,11540534178021378,11540620077367298,11540559947825154,11540607192465410,11540615782400002,11540542767955970,11540581422661634,11540624372334594,11540538472988674,11540551357890562,11540637257236482,11540628667301890,11540632962269186,11540641552203778,11822013450420224,11822022040420352,11822099349307392,11822112234536960,11822056400027648,11822026334732288,11822116529242112,11822090759307264,11822103644864512,11822107939438592,11822095054602240,11822082169569280,12103423999606784,12103535672033280,12103454064443392,12103462654640128,12103638751182849,12103539963920384,12384976287760386,12384971992793090,12384963402858498,12385032122335234,12385053597171714,12385049302204418,12385045007237122,12385062187106306,12384967697825794,12384959107891202,12384984877694978,12385057892139010,12385006352531458,12385040712269826,12385066482073602,12666382545059840,12666601589637121,12666429789503488,12666455559438336,12666378250158080,12666386839764992,12666373954994176,12666464149110784,12666468443947008,12947926241378306,12947982075953154,12947994960855042,12948003550789634,12948016435691522,12947999255822338,12947921946411010,12948012140724226,12947913356476418,12947956306149378,12948007845756930,12947990665887746,12947917651443714,12947909061509122,12947934831312898,13229336793186304,13229414102532096,13229379742924800,13229418397368320,13229405512859648,13229551543123969,13229323908415488,13229328203579392,13229332498481152,13510966389047298,13510944914210818,13510871899766786,13510949209178114,13510859014864898,13510940619243522,13510962094080002,13510957799112706,13510884784668674,13510876194734082,13510953504145410,13510932029308930,13510906259505154,13510867604799490,13510863309832194,13792381236150274,13792333991510018,13792432775757826,13792441365692418,13792338286477314,13792415595888642,13792351171379202,13792437070725122,13792428480790530,13792346876411906,13792407005954050,13792359761313794,13792342581444610,13792424185823234,13792419890855938,14073808969596928,14355283946373120,14636698793607168,14918173770383360,15199657335455744,15199738939506688,15199876380426241,15199743234342912,15199653040553984,15199704579899392,15199730349834240,15199661630160896,15199648745390080,15481179556610048,15481205326544896,15481351357202433,15481213916217344,15481128017264640,15481132312166400,15481136606871552,15481218211053568,15481123722100736,15762680303255552,15762826333978625,15762598698811392,15762611583582208,15762602993975296,15762693187764224,15762688892928000,15762607288877056,15762654533320704,16044163869638656,16044301310754817,16044129510031360,16044082265587712,16044077970685952,16044168164474880,16044086560292864,16044155279966208,16044073675522048,16325638846349312,16325561537003520,16325776287531009,16325548652232704,16325604486742016,16325552947396608,16325557242298368,16325643141185536,16325630256676864,16607032219009024,16607105233387520,16607023628943360,16607118117896192,16607113823059968,16607036513714176,16607027924107264,16607079463452672,16607251264307201,16888726241083393,16888580210098176,16888593094606848,16888554440163328,16888507195719680,16888588799770624,16888502900817920,16888511490424832,16888498605654016,17170055186808832,17170201217859585,17169986467135488,17170068071317504,17170029416873984,17169973582364672,17169982172430336,17170063776481280,17169977877528576,17451452854239232,17451538753191936,17451504393584640,17451543048028160,17451448559075328,17451530163519488,17451676194635777,17451457149140992,17451461443846144,17733022317543426,17732936418197506,17732953598066690,17732932123230210,17733052382314498,17733043792379906,17733018022576130,17732970777935874,17733005137674242,17732979367870466,17732923533295618,17733035202445314,17733048087347202,17732962188001282,17733039497412610,17732945008132098,17732927828262914,17733026612510722,17733013727608834,18014454347005952,18014626148122625,18014411397267456,18014402807660544,18014493001449472,18014480116940800,18014488706613248,18014398512496640,18014407102562304,18295929326206976,18577404298788866,18577412892917760,18858930817794048,18858978062630912,18858973767073792,18858956587335680,18858990947008512,18858900752498688,18858883574726656,18858969472368640,18858965177073664,18858986652303360,18858887868186624,18858982357204992,19140431562932226,19140457332736002,19140371433390082,19140465923719168,19140444449079296,19140453039341568,19140375729209344,19140461627703298,19140367138422786,19140384318291970,19140440153784320,19140362843455490,19140358548488194,19140405793128450,19140448743784448,19421872182919168,19703347159695360,19984809251569664,19984783476981762,19984933805686785,20266361534873602,20266340060037122,20266344355004418,20266284225462274,20266348649971714,20266365829840898,20266262750625794,20266271340560386,20266267045593090,20266331470102530,20266254163640320,20266357239906306,20266275635527682,20266258455658498,20266352944939010,20266305700298754,20547806446157826,20547750612762624,20547742021648386,20547827922894848,20547840807272448,20547823627337728,20547815036092418,20547836510928898,20547733431713794,20547759201517570,20547832215961602,20547780676354050,20547819332632576,20547737726681090,20547746316615682,20829234178162690,20829294307704834,20829315783983104,20829311487574018,20829302899605504,20829212703326210,20829290012737538,20829298602672130,20829221293260802,20829281422802946,20829216998293506,20829208408358914,20829225589473280,20829307192606722,20829255652999170,21110764989972482,21110777876316160,21110700566183936,21110756400037890,21110769284939778,21110782169841666,21110786464808962,21110730630234114,21110687680561154,21110773579907074,21110696270495746,21110691975528450,21110790759776258,21110683385593858,21110709155397634,21392244262764544,21392166952304642,21392239967469568,21392261442699264,21392171247271938,21392162657337346,21392158362370050,21392252853026816,21392205608189952,21392257146617858,21392184132173826,21392248557469696,21392175542894592,21392231376814082,21392265737404416,21673736419409920,21673680584900608,21673650519605248,21673714944180224,21673740714115072,21673646223851522,21673706354442240,21673732123197442,21673659108753410,21673633338949634,21673727829737472,21673637633916930,21673723534180352,21673719239475200,21673641928884226,21955134085201922,21955207099645954,21955125496315904,21955116905332738,21955108315398146,21955211394613250,21955181329842178,21955194214744066,21955121200300034,21955198510891008,21955155560038402,21955215690825728,21955202806448128,21955112610365442,21955189919776770,22236682076422146,22236583292174338,22236673487601664,22236591882108930,22236686371389442,22236690667536384,22236669192896512,22236656306618370,22236677783158784,22236596177076226,22236630536814594,22236587587141634,22236609061978114,22236664897601536,22236600473026560,22518139874312192,22518062563917826,22518165644247040,22518152759869440,22518131283394562,22518144169607168,22518071153852418,22518084038754306,22518075449737216,22518161349541888,22518058268950530,22518157053198338,22518105513590786,22518148464312320,22518066858885122,22799640620957696,22799632031154176,22799541839003648,22799550426447872,22799627736580096,22799623441022976,22799619146317824,22799636326252544,22799537542135808,22799580491743232,22799606261284864,22799614851022848,23081055466815490,23081102711455746,23081089826553858,23081094121521154,23081012517142530,23081081236619266,23081111301390338,23081033991979010,23081115596357634,23081107006423042,23081016812109826,23081008222175234,23081098416488450,23081021107077122,23081025403158528,23362483202555904,23643953881219072,23643898046709760,23643979651153920,23643910931480576,23643966765203456,23643902341873664,23643988240826368,23643992535662592,23643906636775424,23644125683056641,23925441743421442,23925437448454146,23925514757865474,23925531937734658,23925450333356034,23925523347800066,23925540527669250,23925519052832770,23925480398127106,23925458923290626,23925446038388738,23925536232701954,23925506167930882,23925527642767362,23925433153486850,24206942487904258,24206938192936962,24206852293591042,24206929603002370,24206860883525634,24206951077838850,24206878063394818,24206959667773442,24206968257708034,24206886653329410,24206946782871554,24207071341576193,24206976847642626,24206895243264002,24206903833198594,24206856588558338,24206963962740738,24206847998623746,24488451824353282,24488426054549506,24488322975334402,24488404579713026,24488370219974658,24488443234418690,24488327270301698,24488417464614914,24488331565268994,24488335860236290,24488353040105474,24488361630040066,24488434644484098,24488413169647618,24488421759582210,24488546318352385,24488378809909250,24488438939451394,24769797951586304,24769913915899904,24770012705193985,24769909620867072,24769836606619648,24769828016422912,25051333057708034,25332752202137600,25332979838615553,25332756497039360,25332808037105666,25332975543582721,25332838101090304,25332842395926528,25332747906973696,25332829511417856,25332760791744512,25332803741483008,25614291603030018,25614330257735682,25614295897997314,25614386092310530,25614377502375938,25614390387277826,25614356027539458,25614373207408642,25614283013095426,25614368912441346,25614287308062722,25614381797343234,25614364617474050,25614300192964610,25614308782899202,25895852479676418,25895757990395906,25895770875297794,25895775170265090,25895839594774530,25895831004839938,25895843889741826,25895762285363202,25895865364578306,25895848184709122,25895766580330498,25895861069611010,25895805235036162,25895856774643714,25895783760199682,26177327457107968,26177340341485568,26177237262663680,26177280212271104,26177336046780416,26177305981812736,26177318866845696,26177331751682048,26177323161550848,26177241560055808,26177314571550720,26177250146975744,26458647817682944,26458738007932928,26458866860949505,26458746601668608,26458841091276801,26458686466883584,26458750897094656,26458656403881984,26458768076570624,26458759481131008,26458677876686848,26458703648325632,26458729418260480,26458862560935937,26458875450621953,26458695062192128,26458742302769152,26458776666832896,26458660698587136,26458652108980224,26458763776163840,26740221578379264,26740212984643584,26740243053281280,26740170038902784,26740225873870848,26740251643543552,26740122794393600,26740337537646593,26740152853397504,26740234457841664,26740217279479808,26740131380592640,26740127085690880,26740341837660161,26740350427332609,26740161443594240,26740316067987457,26740238752874496,26740204394971136,26740135675297792,26740178625036288,27021597771431936,27303205888655360,27303240248328192,27303308971409409,27303218773688320,27303158647619584,27303223068393472,27303227363950592,27303214478393344,27303137169506304,27303132874211330,27303235953623040,27303150053818368,27303231658524672,27303180119113728,27584607854592000,27866181611552770,27866091417239554,27866087122272258,27866082827304962,27866100007174146,27866095712206850,27866168726650882,27866177316585474,27866173021618178,27866185906520066,27866190201487362,27866130071945218,27866108597108738,27866164431683586,27866155841748994,28147647998525440,28147643703820288,28147656588656640,28147605049245696,28147639408525312,28147652294082560,28147660883755008,28147562103111680,28147665178460160,28147574987948032,28147630818787328,28429054253662210,28429088613400578,28429075728498690,28429084318433282,28429002714054658,28429195993677825,28428985534185474,28429019893923842,28428972649283586,28429071433531394,28428981239218178,28429011303989250,28429062843596802,28429028483858434,28429101498302466,28429092908367874,28428976944250882,28429067138564098,28710503466729472,28991926899376128,28992004208656384,28991935488983040,28992150242197505,28991931194277888,28992017093165056,28992012798328832,28991978438721536,28991922604212224,29273496363728898,29273436234186754,29273397579481090,29273500658696194,29273517838565378,29273479183859714,29273406169415682,29273513543598082,29273427644252162,29273492068761602,29273453414055938,29273509248630786,29273487773794306,29273444824121346,29273410464382978,29273401874448386,29273526428499970,29555014291816450,29554949867307010,29554979932078082,29555035766652930,29555027176718338,29555022881751042,29555040061620226,29555031471685634,29554872556060674,29555010001371136,29554936982405122,29555018586783746,29555005701881858,29836437727805442,29836356123426818,29836467792576514,29836429137870850,29836351828459522,29836463497609218,29836360418394114,29836450612707330,29836459202641922,29836403368067074,29836476382511106,29836386188197890,29836347533492226,29836377598263298,29836442022772738,29836472087543810,29836394778132482,29836446317740034,30117878350479360,30399400571895808,30680888426168322,30680884131201026,30680772462051330,30680802526822402,30680875541266434,30680811116756994,30680793936887810,30962457899565057,30962333343285248,30962307568697346,31243782548094978,31525425032921089,31525201689772032,31525205984673792,31525278999052288,31525197394608128,31525253229117440,31525210279378944,31525287588724736,31525291883560960,31806822695174146,31806839875043330,31806745385762818,31806831285108738,31806826990141442,31806741090795522,31806749680730114,31806835580076034,31806736795828226,31806732500860930,31806805515304962,31806779745501186,31806758270664706,31806814105239554,31806818400206850,32088147353141248,32369703929184256,32369626619904000,32369712518856704,32369622324740096,32369678159249408,32369635209510912,32369849963184129,32369630914805760,32369716813692928,32651200385908736,32651187495567360,32651191790403584,32651324938256385,32651135954518016,32651110186221568,32651144549826560,32651196089303040,32651105891516416,32651178905894912,32651101596614656,32651153135960064,32651290578911233,32651213263798272,32651217564205056,32651226154467328,32651127364321280,32651208968765440,32651312048570369,32651316348583937,32651097305317376,32932585162932224,32932628112670720,32932572278161408,32932662472278016,32932576573325312,32932653882605568,32932666767114240,32932799916736513,32932580868227072,33214201874874368,33214188989317120,33214124564742144,33214111680430080,33214214759251968,33214206169448448,33214180399579136,33214154630037504,33214210464546816,33214193284612096,33214197579317248,33214120274690048,33495530821648384,33495612425699328,33495749870288897,33495616720535552,33495535116353536,33495603836026880,33495578066092032,33495522231582720,33495526526746624,33777087402409984,33777001503457280,33777010093064192,33777224847065089,33776997208293376,33777091697246208,33777078812737536,33777005798359040,33777053042802688,34058489361924098,34058716995190786,34340007289290754,34621563872870400,34621581053001728,34621589642805248,34621568168165376,34621658367197185,34621555283132416,34621499448295424,34621576758427648,34621486563983360,34621585348100096,34621508042096640,34621572462870528,34621529513590784,34621482268688386,34903056028860418,34902974424481794,34902961539579906,34903060323827714,34902952955346944,34903047438925826,34903030259056642,34903051733893122,34903038848991234,34903064618795010,34903004489252866,34903043143958530,35184436517404672,35184479467012096,35184526711848960,35184539596226560,35184440817025024,35184522416291840,35184505236553728,35184513826291712,35184518121586688,35184531006423040,35184449401716736,35184535301521408,35465859952082946,35465928671559682,35465855657115650,35465963031298050,35465975916199938,35465937261494274,35465950146396162,35465945851428866,35465941556461570,35465847067181058,35465958736330754,35465877131952130,35465967326265346,35465902901755906,35465894311821314,35465971621232642,35465885721886722,35465851362148354,35747386470825984,35747463779713024,35747468075008000,35747476665270272,35747455189975040,35747429420433408,35747399355138048,35747480959844352,35747472369713152,35747382180577280,35747489549647872,35747485254942720,36028852855635970,36028844265701378,36028801316028418,36028900100276226,36028827085832194,36028908690210818,36028891510341634,36028835675766786,36028912985178114,36028809905963010,36028797021061122,36028925870080002,36028887215374338,36028917280145410,36028878625439746,36028805610995714,36028921575112706,36028895805308930,36310435208364032,36310426618691584,36310413733134336,36310345018966016,36310430913265664,36310336424247296,36310405143396352,36310349308559360,36310379373854720,36310422323134464,36310418028429312,36310439503069184,36591914479779840,36591905889976320,36591893005139968,36591897299845120,36591811400957952,36591854350565376,36591910185074688,36591888709844992,36591824285270016,36591807110840320,36591901595402240,36591880120107008,36873282082439170,37154928863019009,37154778533265408,37154705518886912,37154752763330560,37154791417774080,37154709813592064,37154696928821248,37154924565430273,37154757058953218,37154701223985152,37154787122937856,37436322229256194,37436305049387010,37436279279583234,37436249214812162,37436309350514688,37436236329910274,37436339409125378,37436317934288898,37436326524223490,37436335114158082,37436330819190786,37436313639321602,37717676945113088,37717865931669505,37717737076359168,37717840159703041,37717874519048193,37717646886109184,37717861629362177,37717685535309824,37717694130618368,37717745670094848,37717767144996864,37717758549557248,37717702716751872,37717655472308224,37717762844590080,37717651177406464,37717728486686720,37717741371195392,37717659767013376,37717775735259136,37999212052152322,37999242116923394,37999216347119618,37999250706857986,37999203462217730,37999177692413954,37999246411890690,37999233526988802,37999130447773698,37999121857839106,37999224937054210,37999151922610178,37999237821956098,37999160512544770,37999126152806402,37999220642086914,37999169102479362,37999134742740994,38280815885156353,38280687029780480,38280712798011392,38280601130827776,38280609720434688,38280824472469505,38280725688680448,38280790113124353,38280635488731136,38280605425729536,38280652670173184,38280644084039680,38280678440108032,38280811582783489,38280695623516160,38280717098418176,38280626898534400,38280691324616704,38280596839530496,38280708502978560,38562131948142592,38843641278038016,38843628393529344,38843559673856000,38843774428643329,38843602623594496,38843636983201792,38843555379150848,38843551084249088,38843546789085184,39125060419256322,39125124843765762,39125137728667650,39125103368929282,39125120548798466,39125026059517954,39125111958863874,39125116253831170,39125021764550658,39125077599125506,39125146326204416,39125133433700354,39125150613569538,39125142023634946,39125051829321730,39125034649452546,39125030354485250,39125069009190914,39406509626228738,39406496741326850,39406535396032514,39406526806097922,39406617000411138,39406608410476546,39406586935640066,39406505331261442,39406552575901698,39406621295378434,39406591230607362,39406578345705474,39406612705443842,39406501036294146,39406599820541954,39406625590345730,39406595525574658,39406543985967106,39688130633007106,39688122043072514,39688044740083712,39688036143726594,39688113453137922,39688117748105218,39688104863203330,39688126338039810,39688139222941698,39688134927974402,39688049028628482,39688079093399554,39969597020372992,39969601315930112,39969554071093248,39969588430372864,39969605610504192,39969614200307712,39969592725667840,39969511121485824,39969519716859904,39969524005797888,39969579840634880,39969609905602560,40250951735508992,40251020460490752,40251114950098945,40251041935392768,40250925967802368,40251050525655040,40250921676505088,40250960325705728,40250977507147776,40251037634985984,40250930262704128,40251016161591296,40251149309444097,40250934557409280,40251033339953152,40250968921014272,40251003277082624,40251136419758081,40251140722524161,40251011866755072,40532443893006338,40532486842679298,40532435303071746,40532396648366082,40532491137646594,40532478252744706,40532516907450370,40532525497384962,40532426713137154,40532512612483074,40532452482940930,40532495432613890,40532508317515778,40532405238300674,40532400943333378,40532499727581186,40532409533267970,40532521202417666,40813996179062786,40813884509913090,40814000474030082,40813901689782274,40813880214945794,40813966114291714,40813987589128194,40813927459586050,40813961819324418,40813871625011202,40813953229389826,40813875919978498,40813983294160898,40813910279716866,40813918869651458,40813991884095490,40813970409259010,40813974704226306,41095466860544002,41095385256165378,41095359486361602,41095445385707522,41095436795772930,41095402436034562,41095471155511298,41095458270609410,41095441090740226,41095462565576706,41095350896427010,41095376666230786,41095475450478594,41095449680674818,41095355191394306,41095393846099970,41095346601459714,41095428205838338,];


fn _semaction_rule_0_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Program<'lt> {
let mut cs = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<Vec<LBox<ClassDec<'lt>>>>::default()}; let mut _mc_ = if let RetTypeEnum::Enumvariant_4(_x_4)=parser.popstack().value { _x_4 } else {<Mainclass<'lt>>::default()};  let mut mc = parser.lbx(0,_mc_);   Program {mainclass:mc, otherclasses:cs } }

fn _semaction_rule_1_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Mainclass<'lt> {
let mut _item16_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item15_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut thebody = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<Vec<LBox<Stat<'lt>>>>::default()}; let mut _item13_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item12_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut an = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item10_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item9_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item8_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item7_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item6_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut cn = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; 
   Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    }
  }

fn _semaction_rule_2_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<ClassDec<'lt>>> {
 Vec::new() }

fn _semaction_rule_3_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<ClassDec<'lt>>> {
let mut _cl_ = if let RetTypeEnum::Enumvariant_5(_x_5)=parser.popstack().value { _x_5 } else {<ClassDec<'lt>>::default()};  let mut cl = parser.lbx(1,_cl_);  let mut cs = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<Vec<LBox<ClassDec<'lt>>>>::default()};  cs.push(cl); cs }

fn _semaction_rule_4_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> ClassDec<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut ds = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<Vec<LBox<Declaration<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut sup = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut name = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  ClassDec {superclass:sup,
            classname:name,
            vars:vdecs,
            methods:mdecs}
  }

fn _semaction_rule_5_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut sup = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  sup }

fn _semaction_rule_6_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
 "Object" }

fn _semaction_rule_7_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> VarDec<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut v = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut t = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  VarDec{dname:v,dtype:t,initval:Nothing,} }

fn _semaction_rule_8_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> VarDec<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut e = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut v = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut t = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; VarDec{dname:v,dtype:t,initval:e}}

fn _semaction_rule_9_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> MethodDec<'lt> {
let mut _item8_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut mbody = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<Vec<LBox<Stat<'lt>>>>::default()}; let mut _item6_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut args = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<Vec<LBox<VarDec<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut name = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; 
  MethodDec{ formals:args,
             body: mbody,
             classname:ty,
	     methodname:name, }
  }

fn _semaction_rule_10_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Declaration<'lt>>> {
 Vec::new() }

fn _semaction_rule_11_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Declaration<'lt>>> {
let mut v = if let RetTypeEnum::Enumvariant_7(_x_7)=parser.popstack().value { _x_7 } else {<VarDec<'lt>>::default()}; let mut ds = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<Vec<LBox<Declaration<'lt>>>>::default()};  ds.push(parser.lbx(1,Vdec(v))); ds }

fn _semaction_rule_12_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Declaration<'lt>>> {
let mut m = if let RetTypeEnum::Enumvariant_8(_x_8)=parser.popstack().value { _x_8 } else {<MethodDec<'lt>>::default()}; let mut ds = if let RetTypeEnum::Enumvariant_9(_x_9)=parser.popstack().value { _x_9 } else {<Vec<LBox<Declaration<'lt>>>>::default()};  ds.push(parser.lbx(1,Mdec(m))); ds }

fn _semaction_rule_13_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<VarDec<'lt>>> {
 Vec::new() }

fn _semaction_rule_14_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<VarDec<'lt>>> {
let mut frs = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<Vec<LBox<VarDec<'lt>>>>::default()}; let mut a = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  frs 
  }

fn _semaction_rule_15_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<VarDec<'lt>>> {
 Vec::new() }

fn _semaction_rule_16_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<VarDec<'lt>>> {
let mut frs = if let RetTypeEnum::Enumvariant_10(_x_10)=parser.popstack().value { _x_10 } else {<Vec<LBox<VarDec<'lt>>>>::default()}; let mut a = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  frs 
  }

fn _semaction_rule_17_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "int[]"; }

fn _semaction_rule_18_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "boolean"; }

fn _semaction_rule_19_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "String"; }

fn _semaction_rule_20_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "int"; }

fn _semaction_rule_21_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  return "void"; }

fn _semaction_rule_22_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> &'lt str {
let mut c = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  c }

fn _semaction_rule_23_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Stat<'lt>>> {
 Vec::new() }

fn _semaction_rule_24_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Stat<'lt>>> {
let mut _s_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut s = parser.lbx(1,_s_);  let mut sv = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<Vec<LBox<Stat<'lt>>>>::default()};  sv.push(s); sv }

fn _semaction_rule_25_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut sv = if let RetTypeEnum::Enumvariant_12(_x_12)=parser.popstack().value { _x_12 } else {<Vec<LBox<Stat<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Blockst(sv) }

fn _semaction_rule_26_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut b = parser.lbx(6,_b_);  let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut a = parser.lbx(4,_a_);  let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _c_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut c = parser.lbx(2,_c_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Ifstat(c, a, b) }

fn _semaction_rule_27_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _a_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut a = parser.lbx(4,_a_);  let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _c_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut c = parser.lbx(2,_c_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Ifstat(c,a,parser.lb(Nopst)) }

fn _semaction_rule_28_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _s_ = if let RetTypeEnum::Enumvariant_11(_x_11)=parser.popstack().value { _x_11 } else {<Stat<'lt>>::default()};  let mut s = parser.lbx(4,_s_);  let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _c_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut c = parser.lbx(2,_c_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Whilest(c,s) }

fn _semaction_rule_29_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(2,_e_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut v = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  Assignst(v,e) }

fn _semaction_rule_30_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(5,_e_);  let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _i_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut i = parser.lbx(2,_i_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _v_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut v = parser.lbx(0,_v_);   ArAssignst(v,i,e) }

fn _semaction_rule_31_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut args = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut m = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _obj_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut obj = parser.lbx(0,_obj_);  Callstat(obj,m,args)}

fn _semaction_rule_32_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(1,_e_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Returnst(e) }

fn _semaction_rule_33_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Stat<'lt> {
let mut v = if let RetTypeEnum::Enumvariant_7(_x_7)=parser.popstack().value { _x_7 } else {<VarDec<'lt>>::default()}; Vardecst(v.dname,v.dtype,parser.lb(v.initval))}

fn _semaction_rule_34_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("*",a,b) }

fn _semaction_rule_35_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("+",a,b) }

fn _semaction_rule_36_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("/",a,b) }

fn _semaction_rule_37_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("-",a,b) }

fn _semaction_rule_38_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("&&",a,b) }

fn _semaction_rule_39_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("OROR",a,b) }

fn _semaction_rule_40_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(1,_a_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Notexp(a) }

fn _semaction_rule_41_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("<",a,b) }

fn _semaction_rule_42_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("%",a,b) }

fn _semaction_rule_43_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _b_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut b = parser.lbx(2,_b_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("==",a,b) }

fn _semaction_rule_44_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _i_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut i = parser.lbx(2,_i_);  let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _a_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut a = parser.lbx(0,_a_);   Binop("[]",a,i) }

fn _semaction_rule_45_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut field = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _obj_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut obj = parser.lbx(0,_obj_);   Field(field,obj) }

fn _semaction_rule_46_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut args = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut f = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _obj_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut obj = parser.lbx(0,_obj_);   Callexp(obj,f,args) }

fn _semaction_rule_47_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut i = if let RetTypeEnum::Enumvariant_3(_x_3)=parser.popstack().value { _x_3 } else {<i32>::default()};  Int(i) }

fn _semaction_rule_48_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut s = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  Strlit(s) }

fn _semaction_rule_49_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut b = if let RetTypeEnum::Enumvariant_2(_x_2)=parser.popstack().value { _x_2 } else {<bool>::default()};  Bool(b) }

fn _semaction_rule_50_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut x = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()};  Var(x) }

fn _semaction_rule_51_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Thisptr }

fn _semaction_rule_52_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _s_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut s = parser.lbx(3,_s_);  let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Newarray(s) }

fn _semaction_rule_53_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut x = if let RetTypeEnum::Enumvariant_1(_x_1)=parser.popstack().value { _x_1 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  Newobj(x) }

fn _semaction_rule_54_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; let mut e = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  e }

fn _semaction_rule_55_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_56_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Expr<'lt>>> {
let mut er = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(0,_e_);   er.push(e); er }

fn _semaction_rule_57_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_58_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Vec<LBox<Expr<'lt>>> {
let mut er = if let RetTypeEnum::Enumvariant_14(_x_14)=parser.popstack().value { _x_14 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _e_ = if let RetTypeEnum::Enumvariant_13(_x_13)=parser.popstack().value { _x_13 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(1,_e_);  let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()};  er.push(e); er }

fn _semaction_rule_59_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>) -> Program<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; <Program<'lt>>::default()}

pub fn make_parser<'lt>() -> ZCParser<RetTypeEnum<'lt>,Program<'lt>>
{
 let mut parser1:ZCParser<RetTypeEnum<'lt>,Program<'lt>> = ZCParser::new(60,147);
 let mut rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_4(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_6(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_6(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_5(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_7(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_7(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_8(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_9(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_10(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_1(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_12(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_11(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_13(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_14(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Program<'lt>>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1285 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>, lexer:&mut mjenumlexer<'lt>) -> Program<'lt>
{
  if let RetTypeEnum::Enumvariant_0(_x_) = parser.parse(lexer) { _x_ } else { <Program<'lt>>::default()}
}//parse_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_14(Vec<LBox<Expr<'lt>>>),
  Enumvariant_8(MethodDec<'lt>),
  Enumvariant_7(VarDec<'lt>),
  Enumvariant_3(i32),
  Enumvariant_11(Stat<'lt>),
  Enumvariant_12(Vec<LBox<Stat<'lt>>>),
  Enumvariant_2(bool),
  Enumvariant_9(Vec<LBox<Declaration<'lt>>>),
  Enumvariant_13(Expr<'lt>),
  Enumvariant_5(ClassDec<'lt>),
  Enumvariant_1(&'lt str),
  Enumvariant_10(Vec<LBox<VarDec<'lt>>>),
  Enumvariant_0(Program<'lt>),
  Enumvariant_4(Mainclass<'lt>),
  Enumvariant_6(Vec<LBox<ClassDec<'lt>>>),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Program<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct mjenumlexer<'t> {
   stk: StrTokenizer<'t>,
   keywords: HashSet<&'static str>,
}
impl<'t> mjenumlexer<'t> 
{
  pub fn from_str(s:&'t str) -> mjenumlexer<'t>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'t LexSource<'t>) -> mjenumlexer<'t>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'t>) -> mjenumlexer<'t> {
    let mut keywords = HashSet::with_capacity(16);
    for kw in ["class","public","static","void","main","String","extends","return","length","new","this","int","boolean","if","else","while",] {keywords.insert(kw);}
    for c in ['(',')','[',']',';','!',',','=','+','-','*','/','<','.','%','{','}',] {stk.add_single(c);}
    for d in ["==","&&","||",] {stk.add_double(d);}
    mjenumlexer {stk,keywords}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for mjenumlexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => Some(TerminalToken::from_raw(token,sym,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum("true") => Some(TerminalToken::from_raw(token,"BOOL",RetTypeEnum::Enumvariant_2(true))),
      RawToken::Alphanum("false") => Some(TerminalToken::from_raw(token,"BOOL",RetTypeEnum::Enumvariant_2(false))),
      RawToken::Alphanum(x) => Some(TerminalToken::from_raw(token,"ID",RetTypeEnum::Enumvariant_1(x))),
      RawToken::Num(n) => Some(TerminalToken::from_raw(token,"INTEGER",RetTypeEnum::Enumvariant_3((n as i32)))),
      RawToken::Strlit(s) => Some(TerminalToken::from_raw(token,"STRING",RetTypeEnum::Enumvariant_1(s))),
      RawToken::Symbol(r".") => Some(TerminalToken::from_raw(token,"DOT",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(r"%") => Some(TerminalToken::from_raw(token,"MOD",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(r"{") => Some(TerminalToken::from_raw(token,"LBR",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(r"}") => Some(TerminalToken::from_raw(token,"RBR",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(r"||") => Some(TerminalToken::from_raw(token,"OROR",<RetTypeEnum<'lt>>::default())),
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
}//impl Tokenizer

fn load_extras<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Program<'lt>>)
{
}//end of load_extras: don't change this line as it affects augmentation
