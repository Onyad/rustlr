//Parser generated by rustlr

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{RuntimeParser,RProduction,Stateaction,decode_action};
use rustlr::LBox;
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [17179934720,176093855745,171798822913,281474976972800,563194766557187,844442110132226,844669743398914,844609614053377,1125998691483648,1407392063946752,1407619696689154,1407555272638465,1688871335690240,1970342017040386,1970569650307074,2251799814340608,2533300560920576,2814792717631488,2814848551747586,2814938746454017,3096254809505792,3377798505758720,3659174698287104,3940684034801664,4222227730530306,4222240615432194,4222146126151682,4222154716086274,4222163306020866,4222124651315202,4222326515302401,4222236320464898,4503698411945986,4785130439901184,5066747150729217,5066549582168064,5066652661776384,5066571057201152,5066588237398016,5066742856024065,5066661251579904,5066579647070208,5066665546743808,5066764330467329,5348063214174208,5629499536244736,5910974512365570,6192470963257346,6192561157570562,6192479553191938,6192565452537858,6192449488420866,6192552567635970,6192488143126530,6473924465721346,6755399442432000,6755515407007744,6755511111843840,6755614191517697,6755438097661952,6755429507334144,7036874419077122,7036938844438528,7318349395197954,7318461064347650,7318379459969026,7318465359314946,7318370870034434,7318452474413058,7318388049903618,7599841551319042,7600069184585730,7881299349078018,8162774325854210,8444313728057344,8725861719343104,8725797294768128,9007199257165824,9288742953418752,9570217930194944,9851645660168194,9851637070233602,9851662840037378,9851654250102786,9851735854481410,9851632775266306,9851714379644930,9851722969579522,9851628480299010,9851718674612226,9851748739383298,9851680019906562,9851671429971970,9851624185331714,9851753034350594,9851740149448706,9851744444416002,9851727264546818,9851705789710338,10133193653944320,10133326797537281,10133099164401664,10133154998779904,10133107754467328,10133189358649344,10133180768976896,10133103459434496,10133112049631232,10414629976080384,10696049116119042,10977524094992384,11259089265491968,11259080675819520,11258999071244288,11259011956473856,11259093560786944,11259226705035265,11259007661309952,11259003366277120,11259054905622528,11540641552334848,11540620077826048,11540615782662144,11540547063578624,11540538473709568,11540581423054848,11540632963055616,11540607193055232,11540551358087168,11540628667826176,11540624372662272,11540637257302016,11821949026107392,11822060695191552,12103587210592258,12103557145821186,12103501311246338,12103578620657666,12103582915624962,12103574325690370,12103591505559554,12103565735755778,12103570030723074,12103488426344450,12103509901180930,12103497016279042,12103492721311746,12103531376017410,12103484131377154,12385057892139010,12384976287760386,12385053597171714,12385066482073602,12385049302204418,12384963402858498,12384967697825794,12385032122335234,12385062187106306,12384984877694978,12385006352531458,12384971992793090,12384959107891202,12385045007237122,12385040712269826,12666434084667394,12666524278980610,12666541458849794,12666438379634690,12666451264536578,12666519984013314,12666537163882498,12666532868915202,12666459854471170,12666507099111426,12666442674601986,12666515689046018,12666446969569282,12666528573947906,12666481329307650,12948076566282241,12947861816737792,12947943421050880,12947904765886464,12947930536083456,12947848931508224,12947939125755904,12947857521573888,12947853226541056,13229491412467714,13229409808089090,13229457052729346,13229469937631234,13229431282925570,13229474232598530,13229388333252610,13229487117500418,13229482822533122,13229478527565826,13229392628219906,13229396923187202,13229401218154498,13229465642663938,13229384038285314,13510962094080002,13510949209178114,13510884784668674,13510871899766786,13510932029308930,13510940619243522,13510863309832194,13510867604799490,13510859014864898,13510906259505154,13510966389047298,13510957799112706,13510953504145410,13510876194734082,13510944914210818,13792389824774144,13792488611643393,13792273860198400,13792312515428352,13792385529610240,13792333989216258,13792303925100544,13792480021643265,14073808969596928,14355283946373120,14355378434932736,14355369844932608,14355387024408576,14355356960161792,14355391319441408,14355382730162176,14355301125193728,14355331190161408,14355288240816128,14355374139768832,14355365549768704,14636698791772160,14636780396347392,14636754626150400,14636793281314816,14636926426873857,14636703086804992,14636711677001728,14636707381837824,14636788986019840,14918173768482816,14918178063515648,14918182358548480,14918186653712384,14918263962730496,14918229602861056,14918401403650049,14918255373058048,14918268258025472,15199648747159552,15481128016936960,15481136607133696,15481213916151808,15481351357202433,15481132311969792,15481205326479360,15481123721904128,15481218211446784,15481179556282368,15762680303190016,15762607288680448,15762826333978625,15762611583844352,15762654532993024,15762598698614784,15762688892862464,15762693188157440,15762602993647616,16044301310754817,16044077970358272,16044168164868096,16044155279900672,16044129509703680,16044082265391104,16044073675325440,16044163869573120,16044086560555008,16325548652036096,16325643141578752,16325776287531009,16325630256611328,16325557242101760,16325638846283776,16325552947068928,16325561537265664,16325604486414336,16607036513976320,16607027923779584,16607023628746752,16607251264307201,16607079463124992,16607118118289408,16607032218812416,16607113822994432,16607105233321984,16888726241083393,16888588799705088,16888507195523072,16888511490686976,16888593095000064,16888502900490240,16888580210032640,16888498605457408,16888554439835648,17170068069154818,17169977874841602,17170085249024002,17169973579874306,17170020824514562,17170072364122114,17169982169808898,17170063774187522,17170003644645378,17170029414449154,17170055184252930,17170012234579970,17169995054710786,17170098133925890,17170102428893186,17170089543991298,17170093838958594,17169986464776194,17170076659089410,17451452853911552,17451504393256960,17451676194570241,17451543048421376,17451457148944384,17451538753126400,17451530163453952,17451461444108288,17451448558878720,17732927830622208,17733005140164608,17732936420818944,17732932125655040,17733151171346433,17732923535589376,17733018025132032,17732979369967616,17733013729837056,18014462939365376,18295929326206976,18577511674281986,18577515970101248,18577507379314690,18577498790428672,18577425775853568,18577455839707138,18577417185001474,18577421479968770,18577503085592576,18577408595066882,18577412890034178,18577490200428544,18577434364870658,18577481609510914,18577494495592448,18858883574661120,19140298421895168,19421872182919168,19703325682696194,19703394402172930,19703415877009410,19703308502827010,19703321387728898,19703334272630786,19703411582042114,19703312797794306,19703317092761602,19703402992107522,19703390107205634,19703407287074818,19703398697140226,19703381517271042,19703355747467266,19984787773456386,19984865083981824,19984873673981952,19984886557704194,19984809248292866,19984792068423682,19984869379145728,19984856492933122,19984830723129346,19984800659406848,19984783478489090,19984882262736898,19984890853654528,19984877969145856,19984796363390978,20266271340363778,20266262750429186,20266361534676994,20266348649775106,20266331469905922,20266305700102146,20266352945856512,20266357239709698,20266258455461890,20266340059840514,20266284225265666,20266275636117504,20266365829644290,20266267045396482,20266344354807810,20547827921649666,20547815036747778,20547780677009410,20547836511584258,20547759202172930,20547750612238338,20547819331715074,20547840806551554,20547737727336450,20547729140154368,20547806446813186,20547733432369154,20547742022303746,20547823626682370,20547832216616962,20547746317271042,20829281422868482,20829225589538816,20829208408424450,20829234178228226,20829212703391746,20829221293326338,20829255653064706,20829311487639554,20829302899277824,20829216998359042,20829290012803074,20829315783786496,20829294309277696,20829298604113920,20829307192672258,21110700566249472,21110709154873346,21110769284415490,21110696269971458,21110687680036866,21110730629709826,21110786464284674,21110777875988480,21110773579382786,21110790760497152,21110683385069570,21110782169317378,21110756399513602,21110764989448194,21110691975004162,21392265737207808,21392205606748162,21392175542960128,21392166952042498,21392158362107906,21392231376551938,21392252852699136,21392248557535232,21392257146355714,21392184131911682,21392162657075202,21392244262699008,21392239967535104,21392261442174976,21392171247009794,21673680583327746,21673732122935298,21673706353131522,21673740713918464,21673714943066114,21673633338687490,21673650519670784,21673659108491266,21673736417902594,21673727829409792,21673723534245888,21673646223589378,21673719238033410,21673641928622082,21673637633654786,21955134085136386,21955155559972866,21955121200234498,21955194214678530,21955198509645826,21955181329776642,21955112610299906,21955116905267202,21955202804613122,21955207099580418,21955211394547714,21955189919711234,21955125496381440,21955215689515010,21955108315332610,22236690667339776,22236682076749826,22236664897667072,22236656306946050,22236600473092096,22236591882436610,22236677782831104,22236686372306944,22236630538059776,22236596177403906,22236673487667200,22236587587469314,22236609062305794,22236669192830976,22236583292502018,22518105514770432,22518148464377856,22518157054771200,22518165644050432,22518144169541632,22518131284770816,22518161349017600,22518062565425152,22518066862096384,22518075449802752,22518152759541760,22518139874377728,22799627736252416,22799619146252288,22799533245792258,22799541835726850,22799632030040066,22799537540759554,22799640620761088,22799614851088384,22799550426513408,22799606261481472,22799559015596034,22799546130694146,22799623441088512,22799580491481088,22799636325728256,23080952388124672,23081003927470080,23080956683157504,23080960978321408,23081042582634496,23081175729373185,23081038287339520,23080948093091840,23081029697667072,23362483202424832,23643996833906688,23925458925780992,23925433150930946,23925583479898113,24206878063394818,24206856588558338,24206886653329410,24206895243264002,24206903833198594,24206976847642626,24207071341576193,24206860883525634,24206942487904258,24206938192936962,24206946782871554,24206852293591042,24206847998623746,24206963962740738,24206951077838850,24206968257708034,24206959667773442,24206929603002370,24488335861874688,24488417466187776,24488322976645120,24488554908352513,24488404581220352,24488413170892800,24488550613319681,24488378811023360,24488327271677952,24488331566710784,24488383106973698,24769858082963458,24769862377930754,24769883852767234,24769905327603714,24769866672898050,24769956867211266,24769952572243970,24769961162178562,24769870967865346,24769965457145858,24769943982309378,24769948277276674,24769875262832642,24769931097407490,24769939687342082,25051380305166336,25051341653082112,25051440434446336,25051418959937536,25051423254773760,25051406075166720,25051350240198656,25051431845167104,25051337355821056,25051427549937664,25051414664773632,25051436139413504,25332915411156994,25332816626909186,25332833806778370,25332881051418626,25332906821222402,25332898231287810,25332825216843778,25332911116189698,25332889641353218,25332820921876482,25332808036974594,25332855281614850,25332812331941890,25332902526255106,25332893936320514,25614278716751874,25614351731195906,25614270126817282,25614446225391617,25614235767078914,25614338846294018,25614334551326722,25614231472111618,25614252946948098,25614321666424834,25614261536882690,25614313076490242,25614304486555650,25614317371457538,25614325961392130,25614343141261314,25614222882177026,25614227177144322,25895727923658752,25895697858756608,25895809528168448,25895912612233217,25895813823332352,25895736513986560,26177232964550658,26458768076439552,26458652108652544,26458750897094656,26458647817551872,26458759481589760,26458686467407872,26458742303162368,26458656403685376,26458746601930752,26458738007867392,26458875450753025,26458660698849280,26458862560477185,26458866860949505,26458677877080064,26458841091276801,26458776666439680,26458763776753664,26458729418194944,26458695062454272,26458703647997952,26740182920790018,26740200100462592,26740273115037696,26740277410201600,26740268820201472,26740230165430272,26740290294710272,26740208694067200,26740264525037568,26740285999677440,26740281705431040,26740359017857025,26740187216084992,26740255935430656,27021657901039616,27303137168850946,27303235953098754,27303150053752834,27303231658131458,27303145758785538,27303141463818242,27303158643687426,27303227363164162,27303218773229570,27303223068196866,27303240248066050,27303205888327682,27303214478262274,27303180118523906,27303132873883650,27584547724394496,27584603554840576,27584629325037568,27584740998119425,27584663683596288,27584762467319809,27584642210004992,27584659388432384,27584667983282176,27584766767792129,27584577783922688,27584646508773376,27584586374250496,27584552015495168,27584775357595649,27584676573282304,27584556310528000,27584560605691904,27584594969296896,27584650804199424,27584637914710016,27866022701760512,28147553513111552,28429028489887744,28710606542405632,28710512056664064,28710597952012288,28710580772405248,28710589362012160,28710555002404864,28710593657176064,28710615131684864,28710524941500416,28710610836652032,28710602247176192,28991987028983810,28992064338395138,28992085813231618,28992029978656770,28992090108198914,28992060047884288,28991999913885698,28991922602639362,28992072928329730,28992055748460546,28992081518264322,28992068633362434,28992077223297026,29273427644252162,29273397579481090,29273492068761602,29273487773794306,29273401874448386,29273513543598082,29273436234186754,29273410464382978,29273526428499970,29273509248630786,29273517838565378,29273406169415682,29273444824121346,29273496363728898,29273500658696194,29273453414055938,29273479183859714,29554967045406722,29554988520243202,29554971340374018,29554954160504834,29555095900717057,29554881146060802,29554902620897282,29554928390701058,29554885441028098,29554919800766466,29554984225275906,29555001405145090,29554911210831874,29554876851093506,29554962750439426,29554992815210498,29554872556126210,29554975635341314,29836450612707330,29836377598263298,29836437727805442,29836467792576514,29836356123426818,29836403368067074,29836360418394114,29836394778132482,29836463497609218,29836446317740034,29836442022772738,29836386188197890,29836476382511106,29836459202641922,29836472087543810,29836351828459522,29836347533492226,29836429137870850,30117917000400896,30117912705105920,30117878345236480,30117822510858240,30118050149171201,30117835396087808,30117831100923904,30117904115433472,30117826805891072,30399400571895808,30680832594673666,30962260326219776,30962256031055872,30962251736023040,30962337635237888,30962329045565440,30962341930532864,30962303275368448,30962475079434241,30962247440990208,31243782547439618,31243864151818242,31243791137374210,31243881331687426,31243889921622018,31243872741752834,31243795432341506,31243855561883650,31243786842406914,31243808317243394,31243885626654722,31243799727308802,31243868446785538,31243829792079874,31243877036720130,31525309061332994,31525236046888962,31525227456954370,31525300471398402,31525313356300290,31525197392183298,31525218867019778,31806882829762561,31806758273679360,31806732498829314,32088241837375488,32088203182211072,32088160233062400,32088374986407937,32088147347832832,32088237542080512,32088151642865664,32088228952408064,32088155937898496,32369849963184129,32369626619576320,32369630914609152,32369712518791168,32369716814086144,32369678158921728,32369635209773056,32369622324543488,32369703929118720,32651097306693632,32932572277964800,32932580868030464,32932662472212480,32932666767507456,32932628112343040,32932653882540032,32932585163194368,32932576572997632,32932799916736513,33214051549708288,33214274893512705,33214128859250688,33214055844741120,33214137448923136,33214103089053696,33214141744218112,33214047254675456,33214060139905024,33495715509043201,33495642494205952,33495569480220672,33495530821451776,33495552294846464,33495535116615680,33495612425633792,33495633899356160,33495625316237312,33495621019697152,33495638194520064,33495560885174272,33495736978243585,33495741278715905,33495578065764352,33495526526418944,33495603835961344,33495522235318272,33495749868519425,33495616720928768,33495651084206080,33777164712476672,33777074518228992,33777151827968000,33777130353197056,33777061633851392,33777104583196672,33777143237967872,33777138942803968,33777070228242432,33777156123197440,33777160417443840,33777147532804096,34058716995190786,34058489361924098,34340011587272704,34340054536617984,34340033065254912,34340007291977730,34340114665897984,34340080306618368,34340024471650304,34340110370865152,34340101781389312,34340106076618752,34340097486225408,34340093191389184,34340183390486529,34340088896225280,34621482266001410,34903056030040064,34903064619319296,34903047439646720,34903030260039680,34902961540694016,34903051734810624,34903043144810496,34903038849646592,34903004490039296,34902974425071616,34902957250314240,34903060324286464,35184522416357376,35184535300997120,35184479466749952,35184505236750336,35184513826357248,35184518121521152,35184432227090432,35184526711521280,35184531006750720,35184449401782272,35184436517404672,35184539596029952,35466010277249026,35465902908899328,35465924377903106,35466005982281730,35465954442674178,35465993097379842,35465980212477954,35465997392347138,35465911493001218,35466001687314434,35465988802412546,35466014572216322,35747476664942592,35747399355203584,35747455190171648,35747390770577408,35747489549451264,35747463779778560,35747429420171264,35747480960172032,35747485254418432,35747468074942464,35747472369778688,35747386470825984,36028874331914240,36028943051653120,36028955936882688,36028861447536640,36028951641653248,36028964526161920,36028904396881920,36028938756489216,36028870042320896,36028947346489344,36028960231129088,36028930166882304,36310310652018690,36310387961430018,36310302062084098,36310284882214914,36310366486593538,36310327831887874,36310370781560834,36310396551364610,36310383666462722,36310400846331906,36310375076528130,36310392256397314,36310362191626242,36310276292280322,36310353601691650,36310271997313026,36310319241953282,36310280587247618,36591858643632130,36591746974482434,36591802809057282,36591850053697538,36591845758730242,36591759859384322,36591828578861058,36591867233566722,36591794219122690,36591751269449730,36591785629188098,36591755564417026,36591862938599426,36591841463762946,36591837168795650,36591777039253506,36591871528534018,36591875823501314,36873282082439170,37154812891758592,37154890206281729,37154817191444480,37154709813854208,37154744177459200,37154701223657472,37154752763002880,37154735582412800,37154705518690304,37154696932556800,37154915978117121,37154825781444608,37154924565757953,37154791418167296,37154778533199872,37154726992084992,37154787122872320,37154808596594688,37154795716935680,37154911675482113,37436184790564864,37436227739713536,37436386652192769,37436180495400960,37436176200368128,37436262099582976,37436390954893313,37436171909267456,37436270693646336,37436300758155264,37436292168155136,37436210559123456,37436399542468609,37436266394877952,37436253509910528,37436365182992385,37436219154169856,37436283573305344,37436201968795648,37436287868469248,37717728486621184,37717702716424192,37717737076293632,37717659767275520,37717646882045952,37717874518720513,37717878816571393,37717651177078784,37717707012374530,37717741371588608,37717655472111616,37999186283331586,37999199168233474,37999255002808322,37999263592742914,37999289362546690,37999276477644802,37999285067579394,37999229233004546,37999280772612098,37999267887710210,37999259304067072,37999272182677506,38280609719451650,38280695618797570,38280708503699458,38280687028862978,38280626899320834,38280691323830274,38280601129517058,38280712798666754,38280699913764866,38280678438928386,38280721388601346,38280725683568642,38280596834549762,38280652669124610,38280644079190018,38280605424484354,38280635489255426,38280717093634050,38562170595377154,38562162005442562,38562076106096642,38562119055769602,38562127645704194,38562192070213634,38562080401063938,38562084696031234,38562187775246338,38562174890344450,38562196372652032,38562183480279042,38562200660148226,38562153415507970,38562110465835010,38562071811129346,38562101875900418,38562166300409858,38843645572153346,38843662752022530,38843602622480386,38843649867120642,38843671341957122,38843594032545794,38843641277186050,38843585442611202,38843559672807426,38843675636924418,38843576852676610,38843628392284162,38843546787905538,38843555377840130,38843667046989826,38843551082872834,38843636982218754,38843658457055234,39125081901629440,39406724382130177,39406509627539456,39406578346885120,39406505332375552,39406501037342720,39406586936557568,39406496742309888,39406591231852544,39406552576688128,39688066208563200,39687976014053376,39687980309086208,39688164996677633,39688010372808704,39688186465878017,39688001782480896,39688199356153857,39688083386990592,39687984604250112,39688018967855104,39688087682154496,39688070507331584,39688027553398784,39687971722952704,39688091981840384,39688053323595776,39688100571840512,39688190768971777,39688061913268224,39969511120437250,39969614199652354,39969592724815874,39969609904685058,39969579839913986,39969519716859904,39969588429848578,39969554070110210,39969597019783170,39969605609717762,39969601314750466,39969524005339138,40251076292313088,40250998982574080,40251089176821760,40251080587542528,40251029047541760,40251071997149184,40251084881788928,40250986098196480,40251063407149056,40250994693636096,40251054817542144,40251067702312960,40532405237972994,40532426712809474,40532495432286210,40532478252417026,40532499727253506,40532409532940290,40532486842351618,40532521202089986,40532491137318914,40532443892678658,40532452482613250,40532508317188098,40532435302744066,40532512612155394,40532525497057282,40532516907122690,40532396648038402,40532400943005698,40813871625076738,40813987589193730,40814000474095618,40813953229455362,40813961819389954,40813927459651586,40813901689847810,40813970409324546,40813875920044034,40813983294226434,40813974704291842,40813966114357250,40813996179128322,40813884509978626,40813918869716994,40813910279782402,40813991884161026,40813880215011330,41095458270871554,41095350896689154,41095385256427522,41095462565838850,41095449680936962,41095402436296706,41095475450740738,41095466860806146,41095346601721858,41095441091002370,41095471155773442,41095436796035074,41095445385969666,41095359486623746,41095393846362114,41095428206100482,41095376666492930,41095355191656450,];

pub fn make_parser() -> RuntimeParser<Construct,Construct>
{
 let mut parser1:RuntimeParser<Construct,Construct> = RuntimeParser::new(60,147);
 let mut rule = RProduction::<Construct,Construct>::new_skeleton("start");
 rule = RProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Classes(cs),Maincl(mc),)=(_vflab_1,_vflab_0,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_14=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_11=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(thebody),Id(an),Id(cn),)=(_vflab_14,_vflab_11,_vflab_1,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Class(cl),Classes(mut cs),)=(_vflab_1,_vflab_0,) { 
  cs.push(parser.lb(cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Decs(mut ds),Id(sup),Id(name),)=(_vflab_4,_vflab_2,_vflab_1,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  let sup:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   sup };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(v),Id(t),)=(_vflab_1,_vflab_0,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Id(v),Id(t),)=(_vflab_3,_vflab_1,_vflab_0,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_7=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_vflab_7,_vflab_4,_vflab_2,_vflab_1,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let v:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(v)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let m:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(m)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_2,_vflab_1,_vflab_0,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  let mut _vflab_3=parser.stack.pop().unwrap().value;   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_3,_vflab_2,_vflab_1,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  let c:Construct=parser.stack.pop().unwrap().value;   c };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Stm(s),Stms(mut sv),)=(_vflab_1,_vflab_0,) {  sv.push(parser.lb(s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(sv),)=(_vflab_1,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_6=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(b),Stm(a),Exp(c),)=(_vflab_6,_vflab_4,_vflab_2,) { 
  Stm(Ifstat(parser.lb(c), parser.lb(a), parser.lb(b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(a),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Ifstat(parser.lb(c),parser.lb(a),parser.lb(Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(s),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Whilest(parser.lb(c),parser.lb(s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Id(v),)=(_vflab_2,_vflab_0,) {  Stm(Assignst(v,parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_5=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Exp(i),Exp(v),)=(_vflab_5,_vflab_2,_vflab_0,) { 
  Stm(ArAssignst(parser.lb(v),parser.lb(i),parser.lb(e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(args),Id(m),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exp(e),)=(_vflab_1,) {  Stm(Returnst(parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Vdec(v),)=(_vflab_0,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exp(a),)=(_vflab_1,) {  Exp(Notexp(parser.lb(a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("<",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("%",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("==",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(i),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("[]",parser.lb(a),parser.lb(i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(field),Exp(obj),)=(_vflab_2,_vflab_0,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(args),Id(f),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let i:Construct=parser.stack.pop().unwrap().value;   i };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let s:Construct=parser.stack.pop().unwrap().value;   s };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let b:Construct=parser.stack.pop().unwrap().value;   b };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(x),)=(_vflab_0,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  
  if let (Exp(s),)=(_vflab_3,) {  Exp(Newarray(parser.lb(s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Id(x),)=(_vflab_1,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let e:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   e };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(mut er),Exp(e),)=(_vflab_1,_vflab_0,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exps(mut er),Exp(e),)=(_vflab_2,_vflab_1,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ parser.stack.pop();  return <Construct>::default();};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras(parser:&mut RuntimeParser<Construct,Construct>)
{
}//end of load_extras: don't change this line as it affects augmentation
