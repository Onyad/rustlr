//Parser generated by rustlr

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{RuntimeParser,RProduction,Stateaction,decode_action};
use rustlr::LBox;
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [176093855745,171798822913,17179934720,281474976972800,563194766557187,844669743398914,844609614053377,844442110132226,1125998691483648,1407555272638465,1407392063946752,1407619696689154,1688871335690240,1970569650307074,1970342017040386,2251799814340608,2533300560920576,2814792717565952,2814848551747586,2814938746519553,3096254809505792,3377699721510912,3659273482534912,3940684034801664,4222223435235330,4503715592142850,4503629692796930,4503702707240962,4503711297175554,4503621102862338,4503599628025858,4503638282731522,4503801492013057,4785130439901184,5066549582495744,5066747150925825,5066652661907456,5066579647332352,5066764330532865,5066588237070336,5066665546743808,5066571057135616,5066661251252224,5066742855761921,5348063214174208,5629499535523842,5629563960754176,5910974513020928,6192565452472322,6192479553126402,6192552567570434,6192470963191810,6192488143060994,6192449488355330,6192561157505026,6474036134805504,6473924466049024,6474139214872577,6473954530885632,6473963120623616,6474040430297088,6755399442300930,7036977497767938,7036895893389314,7036990382669826,7036904483323906,7036874418552834,7036913073258498,7036986087702530,7318349395918850,7599824372563970,7881299349078018,8162791504740354,8163019138007042,8444313728057344,8725792999800832,9007336696119296,9007272271544320,9288674233942016,9570217930194944,9851624185987074,10133107751976962,10133210831192066,10133099162042370,10133120636878850,10133189356355586,10133129226813442,10133193651322882,10133197946290178,10133215126159362,10133202241257474,10133112046944258,10133223716093954,10133219421126658,10133103457009666,10133180766420994,10133154996617218,10133146406682626,10133228011061250,10133137816748034,10414801774182401,10414664335753216,10414655745490944,10414587025948672,10414578436341760,10414582731177984,10414574141308928,10414668630261760,10414629975752704,10696104952791040,10977524094992384,11259157986213888,11259072086933504,11259106446409728,11259076381179904,11259145100722176,11259153691115520,11259166575689728,11259149395755008,11259132216147968,11259140806017024,11259162281115648,11259063496540160,11540607192465410,11540542767955970,11540551357890562,11540559947825154,11540632962269186,11540581422661634,11540628667301890,11540615782400002,11540637257236482,11540641552203778,11540534178021378,11540547062923266,11540620077367298,11540538472988674,11540624372334594,11822026334470146,11822022039502850,11822116528783362,11822103643881474,11822082169044994,11822095053946882,11822009154600962,11822112233816066,11822013449568258,11822099348914178,11822034924404738,11822056399241218,11822107938848770,11822017744535554,11822090758979586,12103424001572864,12103518490525696,12103514196017152,12103651635953665,12103428296605696,12103432591441920,12103436886212608,12103505605754880,12103479836016640,12384980582465536,12384907568152576,12384898978283520,12384911862923264,12384993467236352,12384954812727296,12385126612729857,12384989172727808,12384903273316352,12666446969569282,12666519984013314,12666541458849794,12666459854471170,12666507099111426,12666451264536578,12666537163882498,12666524278980610,12666434084667394,12666532868915202,12666528573947906,12666438379634690,12666481329307650,12666442674601986,12666515689046018,12947926241378306,12947956306149378,12947994960855042,12947917651443714,12947921946411010,12948016435691522,12948003550789634,12948007845756930,12947982075953154,12947999255822338,12948012140724226,12947909061509122,12947934831312898,12947990665887746,12947913356476418,13229482822270978,13229409807826946,13229465642401794,13229401217892354,13229469937369090,13229388332990466,13229474232336386,13229431282663426,13229384038023170,13229491412205570,13229396922925058,13229392627957762,13229457052467202,13229487117238274,13229478527303682,13510798886436864,13510910555521024,13792333989216258,13792488611643393,13792480021643265,13792389824774144,13792385529282560,13792312515100672,13792273860526080,13792303925362688,14073808969596928,14355223816830976,14636926426873857,14636703087001600,14636707381837824,14636780396150784,14636698791968768,14636754626412544,14636788986413056,14636711676608512,14636793280921600,14918229603123200,14918182358548480,14918255372861440,14918173768679424,14918263963123712,14918186653319168,14918178063712256,14918401403650049,14918268257632256,15199661630029824,15199657335259136,15199743234342912,15199730349572096,15199876380426241,15199704579833856,15199738939834368,15199653040422912,15199648745390080,15481213916545024,15481179556544512,15481132311969792,15481128017133568,15481351357202433,15481136606740480,15481123722100736,15481218211053568,15481205326282752,15762680302993408,15762826333978625,15762598698811392,15762693187764224,15762611583451136,15762688893255680,15762654533255168,15762602993844224,15762607288680448,16044163869966336,16044168164474880,16044155279704064,16044077970554880,16044073675522048,16044082265391104,16044301310754817,16044129509965824,16044086560161792,16325561536872448,16325604486676480,16325552947265536,16325557242101760,16325630256414720,16325548652232704,16325643141185536,16325638846676992,16325776287531009,16607036513583104,16607105233125376,16607113823387648,16607118117896192,16607251264307201,16607079463387136,16607023628943360,16607032218812416,16607027923976192,16888593094606848,16888502900686848,16888511490293760,16888554440097792,16888580209836032,16888726241083393,16888588800098304,16888507195523072,16888498605654016,17170201217859585,17170029416808448,17169982172233728,17169973582364672,17170055186546688,17170063776808960,17169977877397504,17169986467004416,17170068071317504,17451577405603842,17451551635800066,17451452851552258,17451470031421442,17451495801225218,17451573110636546,17451448556584962,17451543045865474,17451547340832770,17451478621356034,17451530160963586,17451560225734658,17451487211290626,17451568815669250,17451504391159810,17451461441486850,17451564520701954,17451457146519554,17451538750898178,17732996549836802,17733065270362112,17733000845524992,17733082449182722,17733091040034816,17732983664934914,17733009434738690,17732987959902210,17733069565067264,17733086744150018,17732992254869506,17733030909575170,17733056679378946,17733073860100096,17733078155460608,18014462937595904,18014557427269632,18014540247072768,18014553132171264,18014566016745472,18014505887465472,18014548836810752,18014475822235648,18014561722171392,18014531657203712,18014458644332544,18014544541777920,18295937916076032,18577404302917632,18858883574661120,19140298421895168,19421872182919168,19703390106615810,19703317092171778,19703355746877442,19703407286484994,19703411581452290,19703325682106370,19703402991517698,19703312797204482,19703308502237186,19703381516681218,19703334272040962,19703394401583106,19703304210022400,19703415876419586,19703398696550402,19703321387139074,19984792068358146,19984783478423554,19984787773390850,19984830723063810,19984886557638658,19984877969145856,19984869377769474,19984796363325442,19984890853720064,19984882262671362,19984800659210240,19984856492867586,19984809248227330,19984873673785344,19984865082802178,20266348649250818,20266352945856512,20266305699577858,20266262749904898,20266344354283522,20266340059316226,20266331469381634,20266258454937602,20266275635920896,20266365830430720,20266267044872194,20266284224741378,20266357239185410,20266271339839490,20266361534152706,20547737727139842,20547806446616578,20547750612631552,20547780676812802,20547746317074434,20547759201976322,20547827922567168,20547815036551170,20547840806354946,20547832216420354,20547836511387650,20547742022107138,20547819331518466,20547823626485762,20547733432172546,20829212704702464,20829281424310272,20829217001832448,20829225589342208,20829290014179328,20829298603917312,20829302899277824,20829255654572032,20829294308884480,20829307194376192,20829315783852032,20829311489277952,21110687680102402,21110700566052864,21110683385135106,21110730629775362,21110773580627968,21110696270036994,21110709154938882,21110691975069698,21110756399579138,21110782169382914,21110777875988480,21110764989513730,21110790760562688,21110786464350210,21110769285595136,21392248557338624,21392261442699264,21392265737273344,21392175542763520,21392166952304642,21392239967600640,21392231376814082,21392184132173826,21392257146617858,21392171247271938,21392244262305792,21392158362370050,21392205607993344,21392162657337346,21392252852699136,21673637633785858,21673719239016448,21673714944311296,21673732123066370,21673740713984000,21673680583458818,21673646223720450,21673736419409920,21673633338818562,21673641928753154,21673659108622338,21673706353262594,21673650519474176,21673723534049280,21673727829409792,21955189919711234,21955116905267202,21955181329776642,21955202804613122,21955211394547714,21955108315332610,21955207099580418,21955125496184832,21955215689515010,21955194214678530,21955198509645826,21955112610299906,21955155559972866,21955121200234498,21955134085136386,22236600472895488,22236664897732608,22236609061978114,22236673487470592,22236656306618370,22236686371389442,22236677782831104,22236669192437760,22236682076422146,22236583292174338,22236587587141634,22236596177076226,22236690667405312,22236591882108930,22236630536814594,22518152759541760,22518161349541888,22518058269081602,22518105514835968,22518084038885378,22518062564048898,22518157053329410,22518071153983490,22518148464181248,22518165644115968,22518131284574208,22518066859016194,22518075449606144,22518139874443264,22518144169148416,22799537541611522,22799533246644226,22799640620826626,22799619145990146,22799546131546114,22799614851022850,22799580491284482,22799550426513410,22799606261088258,22799541836578818,22799636325859330,22799623440957442,22799559016448002,22799632030892034,22799627735924738,23081029697470464,23080952388321280,23081038287732736,23080956683157504,23081003927732224,23081042582241280,23080948093288448,23080960977928192,23081175729373185,23362483202424832,23643996833906688,23925458925780992,23925583479898113,23925433150930946,24206860883525634,24206942487904258,24207071341576193,24206938192936962,24206968257708034,24206929603002370,24206856588558338,24206959667773442,24206895243264002,24206963962740738,24206878063394818,24206951077838850,24206847998623746,24206976847642626,24206886653329410,24206903833198594,24206946782871554,24206852293591042,24488331566710784,24488554908352513,24488335861481472,24488383106973698,24488322976841728,24488550613319681,24488327271874560,24488413171286016,24488417465794560,24488378811285504,24488404581023744,24769948277276674,24769965457145858,24769952572243970,24769862377930754,24769883852767234,24769905327603714,24769858082963458,24769875262832642,24769866672898050,24769939687342082,24769943982309378,24769961162178562,24769956867211266,24769870967865346,24769931097407490,25051431845036032,25051406074970112,25051337355362304,25051414664839168,25051341653082112,25051427549937664,25051423254577152,25051436139937792,25051380305231872,25051440434511872,25051418959544320,25051350240002048,25332820921876482,25332808036974594,25332898231287810,25332889641353218,25332915411156994,25332906821222402,25332893936320514,25332881051418626,25332825216843778,25332833806778370,25332855281614850,25332902526255106,25332812331941890,25332816626909186,25332911116189698,25614325961392130,25614252946948098,25614334551326722,25614227177144322,25614338846294018,25614317371457538,25614278716751874,25614235767078914,25614343141261314,25614304486555650,25614351731195906,25614261536882690,25614446225391617,25614222882177026,25614313076490242,25614231472111618,25614321666424834,25614270126817282,25895912612233217,25895813823332352,25895809527840768,25895727923920896,25895736513658880,25895697859084288,26177232964550658,26458759481262080,26458686467080192,26458660698456064,26458875450687489,26458695062454272,26458677877342208,26458647817355264,26458703648260096,26458746601930752,26458652108849152,26458776666636288,26458768076570624,26458742302769152,26458738008260608,26458656403685376,26458841091080193,26458862560542721,26458763776753664,26458729417998336,26458750897094656,26458866861080577,26740200100265984,26740281705299968,26740230165495808,26740359017922561,26740182920790018,26740268819808256,26740208694001664,26740264525103104,26740255935234048,26740286000201728,26740273114841088,26740187215626240,26740290294775808,26740277410201600,27021657901039616,27303218773229570,27303223068196866,27303205888327682,27303180118523906,27303231658131458,27303240248066050,27303141463818242,27303132873883650,27303235953098754,27303150053752834,27303158643687426,27303214478262274,27303227363164162,27303145758785538,27303137168850946,27584586373922816,27584594969296896,27584552015691776,27584646508773376,27584659388104704,27584556310528000,27584762467385345,27584775357530113,27584547724197888,27584577784184832,27584603555102720,27584667983413248,27584642209611776,27584629324840960,27584676573478912,27584663683596288,27584560605298688,27584766767923201,27584650804199424,27584740997922817,27584637915103232,27866022701760512,28147665178066946,28147497672507394,28147643703230466,28147639408263170,28147562098851842,28147605048524802,28147656588132354,28147660883099650,28147630818328578,28147635117490176,28147647998197762,28147574983753730,28147652293165058,28429127270465536,28429122975105024,28429037079822336,28429135860465664,28429140155039744,28429118680072192,28429080025759744,28429131565563904,28429114385367040,28429049964789760,28429105795497984,28710503466729472,28991961258065922,28991952668131330,28992017092640770,28992034272509954,28991922603360258,28991931193294850,28991935488262146,28992042862444546,28991926898327554,28992047157411842,28992051452379138,28992038567477250,28992012797673474,28991969848000514,28991978437935106,28992025682575362,28992021387608066,28992004207738882,29273453420216320,29555095900717057,29554988520243202,29554919800766466,29554984225275906,29554954160504834,29554876851093506,29554881146060802,29554902620897282,29554911210831874,29554967045406722,29554975635341314,29554992815210498,29554971340374018,29555001405145090,29554928390701058,29554962750439426,29554872556126210,29554885441028098,29836351827869698,29836360417804290,29836450612117506,29836356122836994,29836429137281026,29836347532902402,29836394777542658,29836377597673474,29836446317150210,29836386187608066,29836463497019394,29836476381921282,29836459202052098,29836403367477250,29836442022182914,29836467791986690,29836437727215618,30117878345498624,30117831100923904,30117912705499136,30118050149171201,30117835395694592,30117826806087680,30117917000007680,30117904115236864,30117822511054848,30399400571895808,30680828298919936,30680854068658176,30681000102723585,30680776759508992,30680866953428992,30680772464476160,30680862658920448,30680781054345216,30680785349115904,30962307571384322,31243868446785538,31243799727308802,31243829792079874,31243885626654722,31243864151818242,31243795432341506,31243881331687426,31243808317243394,31243872741752834,31243877036720130,31243782547439618,31243855561883650,31243786842406914,31243791137374210,31243889921622018,31525227456954370,31525197392183298,31525313356300290,31525236046888962,31525218867019778,31525300471398402,31525309061332994,31806758273679360,31806732498829314,31806882829762561,32088241836982272,32088228952211456,32088237542473728,32088155937898496,32088160232669184,32088147348029440,32088151643062272,32088374986407937,32088203182473216,32369622324740096,32369703928922112,32369630914609152,32369849963184129,32369635209379840,32369626619772928,32369678159183872,32369716813692928,32369712519184384,32651097306693632,32932666767114240,32932580868030464,32932572278161408,32932799916736513,32932585162801152,32932628112605184,32932576573194240,32932653882343424,32932662472605696,33214274893512705,33214051549904896,33214137449316352,33214103089315840,33214055844741120,33214141743824896,33214128859054080,33214060139511808,33214047254872064,33495638194520064,33495530821451776,33495552295108608,33495616720535552,33495578066026496,33495625316237312,33495741278846977,33495651084402688,33495633899028480,33495621019697152,33495612426027008,33495526526615552,33495569480220672,33495736978309121,33495560884846592,33495715508846593,33495603835764736,33495522235121664,33495642494337024,33495535116222464,33495749868453889,33777143237574656,33777156123066368,33777147532607488,33777074518032384,33777160417968128,33777070228242432,33777104583262208,33777138942869504,33777151827968000,33777164712542208,33777130353000448,33777061633392640,34058489361924098,34058716995190786,34340033065189376,34340101781389312,34340080306421760,34340106076487680,34340183390486529,34340054536683520,34340114665963520,34340007291977730,34340024471453696,34340093190995968,34340097486028800,34340110371389440,34340088896290816,34340011586813952,34621482266001410,34903004490104832,34903064619384832,34903056029908992,34902974424875008,34902961540235264,34903038849712128,34903030259843072,34903043144417280,34903047439450112,34903060324810752,34903051734810624,34902970135216128,35184479466815488,35184518121127936,35184513826422784,35184522416160768,35184526711521280,35184449401585664,35184505236553728,35184436516945920,35184440817025024,35184531006619648,35184539596095488,35184535301521408,35466010277249026,35465911493001218,35466005982281730,35465902908899328,35465980212477954,35465954442674178,35465997392347138,35465993097379842,35466014572216322,35465988802412546,35465924377903106,35466001687314434,35747480960040960,35747455189975040,35747476664942592,35747472369582080,35747463779844096,35747468074549248,35747485254942720,35747429420236800,35747399355006976,35747386470367232,35747489549516800,35747382180642816,36028930166685696,36028938756554752,36028960231653376,36028861447077888,36028904396947456,36028951641653248,36028874331717632,36028947346292736,36028955936751616,36028857157419008,36028964526227456,36028943051259904,36310396551364610,36310400846331906,36310302062084098,36310387961430018,36310370781560834,36310271997313026,36310327831887874,36310280587247618,36310383666462722,36310366486593538,36310375076528130,36310319241953282,36310284882214914,36310276292280322,36310353601691650,36310362191626242,36310310652018690,36310392256397314,36591785629188098,36591858643632130,36591862938599426,36591871528534018,36591755564417026,36591850053697538,36591845758730242,36591777039253506,36591802809057282,36591794219122690,36591759859384322,36591875823501314,36591867233566722,36591828578861058,36591746974482434,36591841463762946,36591751269449730,36591837168795650,36873282082439170,37154752762281986,37154735582412802,37154778532085762,37154709812609026,37154701222674434,37154825776726018,37154800006922242,37154744172347394,37154821481758722,37154791416987650,37154812891824130,37154787122020354,37154705517641730,37154817186791426,37154726992478210,37154808596856834,37154696927707138,37154795711954946,37436317934288898,37436309350449152,37436330819190786,37436335114158082,37436249214812162,37436279279583234,37436322229256194,37436305049387010,37436236329910274,37436326524223490,37436313639321602,37436339409125378,37717874518720513,37717651177275392,37717655472111616,37717646882242560,37717737076686848,37717702716686336,37717659766882304,37717878816505857,37717707012374530,37717741371195392,37717728486424576,37999160512217088,37999212053397504,37999151922479104,37999134743592960,37999336605679617,37999220647067648,37999216347906048,37999130448822272,37999349495824385,37999340908380161,37999169107591168,37999250711773184,37999126153986048,37999315136217089,37999233526398976,37999237821890560,37999177693396992,37999203463135232,37999242121707520,37999121862492160,38280626899189760,38280644084301824,38280712798601216,38280635488927744,38280815885156353,38280811582390273,38280708503109632,38280725688483840,38280601130696704,38280695623778304,38280790112927745,38280596839202816,38280609720303616,38280824472535041,38280678439845888,38280652670107648,38280605425532928,38280687030108160,38280717098418176,38280691324616704,38562127646818304,38562162006818816,38562166301327360,38562071812374528,38562084697014272,38562299451867137,38562076107407360,38562080402243584,38562153416556544,38843606924918784,39125051829321730,39125133433700354,39125111958863874,39125077599125506,39125030354485250,39125120548798466,39125146326204416,39125116253831170,39125103368929282,39125142023634946,39125069009190914,39125150613569538,39125124843765762,39125060419256322,39125034649452546,39125137728667650,39125021764550658,39125026059517954,39406552575901698,39406617000411138,39406586935640066,39406505331261442,39406578345705474,39406543985967106,39406612705443842,39406608410476546,39406496741326850,39406591230607362,39406595525574658,39406526806097922,39406501036294146,39406625590345730,39406599820541954,39406509626228738,39406535396032514,39406621295378434,39688134928891904,39688044740083712,39688122043531264,39688130633990144,39688117748498432,39688139223465984,39688036144316416,39688049028956160,39688079094185984,39688113453793280,39688126338891776,39688104863924224,39969588429848578,39969605609717762,39969554070110210,39969519716859904,39969511120437250,39969597019783170,39969579839913986,39969609904685058,39969524005339138,39969601314750466,39969592724815874,39969614199652354,40251114949902337,40250960325902336,40251016161591296,40251003276820480,40251033340084224,40251020460752896,40251149309509633,40251050525458432,40250968921276416,40251037635575808,40250930262507520,40251136419364865,40251011867082752,40251041935392768,40250934557278208,40251140722524161,40250925967671296,40250951736164352,40250977507082240,40250921676177408,40532491137581058,40532495432548354,40532426713071618,40532452482875394,40532525497319426,40532443892940802,40532521202352130,40532516907384834,40532478252679170,40532486842613762,40532435303006210,40532508317450242,40532499727515650,40532405238235138,40532400943267842,40532512612417538,40532396648300546,40532409533202434,40813996179128322,40813983294226434,40813961819389954,40813880215011330,40813953229455362,40813871625076738,40814000474095618,40813987589193730,40813927459651586,40813991884161026,40813884509978626,40813974704291842,40813910279782402,40813901689847810,40813966114357250,40813875920044034,40813918869716994,40813970409324546,41095436795772930,41095350896427010,41095462565576706,41095449680674818,41095393846099970,41095346601459714,41095385256165378,41095471155511298,41095466860544002,41095359486361602,41095445385707522,41095475450478594,41095376666230786,41095402436034562,41095428205838338,41095458270609410,41095441090740226,41095355191394306,];

pub fn make_parser() -> RuntimeParser<Construct,Construct>
{
 let mut parser1:RuntimeParser<Construct,Construct> = RuntimeParser::new(60,147);
 let mut rule = RProduction::<Construct,Construct>::new_skeleton("start");
 rule = RProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Classes(cs),Maincl(mc),)=(_vflab_1,_vflab_0,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_14=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_11=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(thebody),Id(an),Id(cn),)=(_vflab_14,_vflab_11,_vflab_1,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Class(cl),Classes(mut cs),)=(_vflab_1,_vflab_0,) { 
  cs.push(parser.lb(cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Decs(mut ds),Id(sup),Id(name),)=(_vflab_4,_vflab_2,_vflab_1,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  let sup:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   sup };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(v),Id(t),)=(_vflab_1,_vflab_0,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Id(v),Id(t),)=(_vflab_3,_vflab_1,_vflab_0,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_7=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_vflab_7,_vflab_4,_vflab_2,_vflab_1,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let v:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(v)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let m:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(m)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_2,_vflab_1,_vflab_0,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  let mut _vflab_3=parser.stack.pop().unwrap().value;   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_3,_vflab_2,_vflab_1,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  let c:Construct=parser.stack.pop().unwrap().value;   c };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Stm(s),Stms(mut sv),)=(_vflab_1,_vflab_0,) {  sv.push(parser.lb(s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(sv),)=(_vflab_1,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_6=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(b),Stm(a),Exp(c),)=(_vflab_6,_vflab_4,_vflab_2,) { 
  Stm(Ifstat(parser.lb(c), parser.lb(a), parser.lb(b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(a),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Ifstat(parser.lb(c),parser.lb(a),parser.lb(Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(s),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Whilest(parser.lb(c),parser.lb(s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Id(v),)=(_vflab_2,_vflab_0,) {  Stm(Assignst(v,parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_5=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Exp(i),Exp(v),)=(_vflab_5,_vflab_2,_vflab_0,) { 
  Stm(ArAssignst(parser.lb(v),parser.lb(i),parser.lb(e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(args),Id(m),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exp(e),)=(_vflab_1,) {  Stm(Returnst(parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Vdec(v),)=(_vflab_0,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exp(a),)=(_vflab_1,) {  Exp(Notexp(parser.lb(a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("<",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("%",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("==",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(i),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("[]",parser.lb(a),parser.lb(i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(field),Exp(obj),)=(_vflab_2,_vflab_0,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(args),Id(f),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let i:Construct=parser.stack.pop().unwrap().value;   i };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let s:Construct=parser.stack.pop().unwrap().value;   s };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let b:Construct=parser.stack.pop().unwrap().value;   b };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(x),)=(_vflab_0,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  
  if let (Exp(s),)=(_vflab_3,) {  Exp(Newarray(parser.lb(s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Id(x),)=(_vflab_1,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let e:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   e };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(mut er),Exp(e),)=(_vflab_1,_vflab_0,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exps(mut er),Exp(e),)=(_vflab_2,_vflab_1,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ parser.stack.pop();  return <Construct>::default();};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras(parser:&mut RuntimeParser<Construct,Construct>)
{
}//end of load_extras: don't change this line as it affects augmentation
