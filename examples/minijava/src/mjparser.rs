//Parser generated by rustlr for grammar mj

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{LBox,makelbox};
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [17180000256,171798888449,176093724673,281492156710914,281719789977602,281659660566529,562949953748992,844669743267843,1126144719978498,1126080295862273,1125917087170560,1407473668325376,1689094673596418,1688867040329730,1970324837564416,2251821289177088,2533373575036930,2533463769677825,2533317740855296,2814775537762304,3096323528982528,3377699721510912,3659204763058176,3940851538526209,3940752753819650,3940765638721538,3940761343754242,3940688329310210,3940671149441026,3940649674604546,3940679739375618,4222223435235330,4503633988288512,4785104670556160,4785074605391872,4785096080162816,4785267879051265,4785272174084097,4785186274869248,4785289353822209,4785190570033152,4785113260556288,4785177684869120,5066605417267200,5348024558813184,5348136228290560,5348239307833345,5348140523454464,5348054623977472,5348063213977600,5629499535654914,5910974512955392,6192561157505026,6192552567570434,6192470963191810,6192449488355330,6192565452472322,6192479553126402,6192488143060994,6473924465131522,6474027544346626,6473954529902594,6474040429248514,6474036134281218,6473963119837186,6473945939968002,6755416621187074,6755644254453762,7036938844372992,7036874419077122,7318349395853314,7599824372432898,7881299349078018,8162812981477376,8444249303547904,8725861719343104,8725797294768128,9007267976642560,9288738658451456,9570205045293056,9851637070233602,9851645660168194,9851654250102786,9851727264546818,9851705789710338,9851718674612226,9851662840037378,9851735854481410,9851722969579522,9851628480299010,9851740149448706,9851624185331714,9851744444416002,9851671429971970,9851680019906562,9851632775266306,9851714379644930,9851753034350594,9851748739383298,10133112049369088,10133107754270720,10133154999173120,10133189358977024,10133103459696640,10133193653551104,10133326797471745,10133180768780288,10133099164532736,10414574139408386,10696117837692928,10977738843422721,10977640057667584,10977562748190720,10977584222109698,10977524093026304,10977635762503680,10977554158190592,10977730253422593,11259063496343552,11259072086474752,11259145101443072,11259076381310976,11259132216410112,11259153690984448,11259162280984576,11259140806279168,11259166576214016,11259106446475264,11259157985886208,11259149395820544,11540559947825154,11540547062923266,11540624372334594,11540637257236482,11540551357890562,11540581422661634,11540641552203778,11540620077367298,11540632962269186,11540538472988674,11540542767955970,11540607192465410,11540534178021378,11540628667301890,11540615782400002,11822034924339202,11822013449502722,11822022039437314,11822009154535426,11822107938783234,11822099348848642,11822017744470018,11822103643815938,11822112233750530,11822095053881346,11822116528717826,11822056399175682,11822090758914050,11822026334404610,11822082168979458,12103505605754880,12103479836147712,12103518490525696,12103428296671232,12103432591245312,12103424001507328,12103514195951616,12103651636019201,12103436886343680,12385053597302786,12384971992924162,12384959108022274,12385049302335490,12384984877826050,12385045007368194,12384963402989570,12385040712400898,12384967697956866,12385006352662530,12384976287891458,12385066482204674,12385062187237378,12385032122466306,12385057892270082,12666459854602242,12666446969700354,12666442674733058,12666438379765762,12666434084798466,12666515689177090,12666532869046274,12666507099242498,12666537164013570,12666481329438722,12666541458980866,12666528574078978,12666451264667650,12666524279111682,12666519984144386,12947848931639296,12947861816475648,12947930535886848,12947857521377280,12947943420657664,12947853226803200,12947904766279680,12948076566216705,12947939126083584,13229323909791744,13229435578875904,13510962093948930,13510953504014338,13510949209047042,13510871899635714,13510863309701122,13510932029177858,13510884784537602,13510867604668418,13510859014733826,13510876194603010,13510906259374082,13510957798981634,13510944914079746,13510940619112450,13510966388916226,13792273863278592,14073808969596928,14355223816830976,14636711676739584,14636703087067136,14636788986347520,14636793280921600,14636698791903232,14636780396150784,14636926426873857,14636707381641216,14636754626543616,14918173770383360,15199704579964928,15199730349572096,15199657335062528,15199648745324544,15199743234342912,15199661630160896,15199876380426241,15199738939768832,15199653040488448,15481162374316034,15481239683727362,15481128014577666,15481136604512258,15481243978694658,15481153784381442,15481248273661954,15481205323988994,15481123719610370,15481222503858178,15481235388760066,15481213913923586,15481179554185218,15481170964250626,15481226798825474,15481145194446850,15481132309544962,15481252568629250,15481218208890882,15762607288483840,15762611583582208,15762602993909760,15762688893190144,15762598698745856,15762693187764224,15762654533386240,15762826333913089,15762680302993408,16044073675456512,16044086560292864,16044082265194496,16044129510096896,16044168164474880,16044301310689281,16044155279704064,16044163869900800,16044077970620416,16325604486807552,16325643141185536,16325638846611456,16325776287465473,16325630256414720,16325561537003520,16325548652167168,16325557241905152,16325552947331072,16607105233125376,16607251264241665,16607032218615808,16607118117896192,16607036513714176,16607079463518208,16607113823322112,16607027924041728,16607023628877824,16888726241017857,16888507195326464,16888593094606848,16888511490424832,16888588800032768,16888580209836032,16888554440228864,16888498605588480,16888502900752384,17169977877463040,17170063776743424,17170029416939520,17170201217794049,17169973582299136,17170055186546688,17169982172037120,17170068071317504,17169986467135488,17451452854173696,17451530163257344,17451457148747776,17451504393650176,17451676194570241,17451543048028160,17451448559009792,17451461443846144,17451538753454080,17732979370360832,17733005139968000,17732932125458432,17732923535720448,17733013730164736,17732927830884352,17732936420556800,17733151171346433,17733018024738816,18014505886285826,18014475822366720,18014553132040192,18014531656089602,18014566017269760,18014462936612866,18014540247334912,18014544542498816,18014471526547458,18014548836876288,18014561720860674,18014467231580162,18014484411449346,18014557425893378,18014458641645570,18296036698750976,18296019519209472,18295950799077376,18296023813586944,18295933621108736,18295980864241664,18295937914109952,18296032403652608,18296040993980416,18296015224045568,18296028108750848,18296006634176512,18577412892852224,18858879279693824,19140358551437312,19421872182919168,19703458828910593,19703334274793472,19703308500271106,19984787774373888,19984877969014784,19984865084309504,19984800659341312,19984873673850880,19984882263916544,19984869379473408,19984830724505600,19984856494440448,19984890854244352,19984792071766016,19984886559014912,20266357239906306,20266348649971714,20266267045593090,20266361534873602,20266365829840898,20266284225462274,20266331470102530,20266275635527682,20266262750625794,20266344355004418,20266305700298754,20266271340560386,20266352944939010,20266340060037122,20266258455658498,20266254163640320,20547836510863362,20547780676288514,20547827922436096,20547742021582850,20547832215896066,20547746316550146,20547823625961474,20547840807665664,20547815036026882,20547759201452034,20547733431648258,20547737726615554,20547806446092290,20547819330994178,20547750612762624,20829302899146752,20829290014441472,20829298603982848,20829234178621442,20829255654637568,20829315784376320,20829281424572416,20829221293719554,20829225589473280,20829208408817666,20829216998752258,20829307193065474,20829294309605376,20829311489146880,20829212703784962,21110700566183936,21110777874481154,21110786464415746,21110709155004418,21110773579513858,21110683385200642,21110790759383042,21110730629840898,21110687680167938,21110769284546562,21110764989579266,21110696270102530,21110782169448450,21110691975135234,21110756399644674,21392252852568064,21392261441257474,21392162657009666,21392239967862784,21392265737797632,21392248557404160,21392171246944258,21392184131846146,21392257146290178,21392166951976962,21392158362042370,21392175542894592,21392205606682626,21392244263026688,21392231376486402,21673736419278848,21673719239737344,21673714944573440,21673633338818562,21673646223720450,21673740714508288,21673732123066370,21673637633785858,21673723534114816,21673659108622338,21673641928753154,21673706353262594,21673650519605248,21673680583458818,21673727829278720,21955121200168962,21955181329711106,21955155559907330,21955198510825472,21955112610234370,21955211394482178,21955116905201666,21955134085070850,21955108315267074,21955189919645698,21955215691218944,21955194216448000,21955202805989376,21955207099514882,21955125496315904,22236596177403906,22236656306946050,22236630538190848,22236690667929600,22236664897994752,22236583292502018,22236673487536128,22236587587469314,22236591882436610,22236682076749826,22236686372700160,22236669193158656,22236609062305794,22236600473026560,22236677782700032,22518058269147138,22518165643329538,22518148463460354,22518157053394946,22518161348362242,22518084038950914,22518062564114434,22518066859081730,22518075449737216,22518105513787394,22518152759410688,22518139873525762,22518131283591170,22518144168493058,22518071154049026,22799533245530114,22799623440957440,22799640621350912,22799537540497410,22799627736121344,22799550426447872,22799559015333890,22799541835464706,22799546130432002,22799632029777922,22799606259974146,22799580490170370,22799619144876034,22799614849908738,22799636324745218,23081016813289474,23081107007602690,23081008223354882,23081055467995138,23081094122700802,23081115597537282,23081012518322178,23081025403224066,23081111302569986,23081081237798914,23081102712635394,23081089827733506,23081033993158658,23081021108256770,23081098417668098,23362423069933568,23362517558951936,23362478904573952,23362513264377856,23362431659671552,23362504674181120,23362650706214913,23362435954769920,23362427365097472,23643958179266560,23925471810748416,24206976847642626,24207071341576193,24206860883525634,24206946782871554,24206929603002370,24206951077838850,24206959667773442,24206903833198594,24206886653329410,24206938192936962,24206968257708034,24206852293591042,24206895243264002,24206963962740738,24206942487904258,24206856588558338,24206878063394818,24206847998623746,24488438939779072,24488353040302080,24488537728417793,24488361630302208,24488434644615168,24488322975137792,24769858080997378,25051414664052738,25051358829477890,25051406074118146,25051440433856514,25051431843921922,25051380304314370,25051423253987330,25051418959020034,25051427548954626,25051333059674114,25051436138889218,25051350239543298,25051345944576002,25051341649608706,25051337354641410,25332760791744512,25332842395926528,25332838101352448,25332808037105666,25332975543517185,25332979838550017,25332803741548544,25332752202072064,25332756496646144,25332747906908160,25332829511155712,25614381798129664,25614368913686528,25614377503227904,25614330258718720,25614287308587008,25614390388457472,25614373208064000,25614291606568960,25614364618522624,25614386093228032,25614300193554432,25614356028653568,25895757990395906,25895775170265090,25895843889741826,25895865364578306,25895805235036162,25895856774643714,25895831004839938,25895852479676418,25895783760199682,25895762285363202,25895839594774530,25895766580330498,25895861069611010,25895770875297794,25895848184709122,26177267324878850,26177271619846146,26177177130565634,26177254439976962,26177211490304002,26177228670173186,26177284504748034,26177172835598338,26177288799715330,26177396178878465,26177181425532930,26177263029911554,26177301684617218,26177202900369410,26177185720500226,26177275914813442,26177293094682626,26177220080238594,26458776666701824,26458841091407873,26458759481589760,26458750896832512,26458742302769152,26458660698587136,26458647817420800,26458862560542721,26458695062126592,26458875450621953,26458746601799680,26458686467276800,26458652108914688,26458866861080577,26458768076898304,26458738008195072,26458703648391168,26458763776753664,26458677877276672,26458656403488768,26458729417998336,26740122794655744,27021662192140288,27021833994633217,27021739502075904,27021748091617280,27021657897500674,27021756681682944,27021705142272000,27021730912206848,27021743797239808,27021752386781184,27021760976781312,27021765272010752,27021683670843392,27021675077107712,27303132877815808,27584698044907522,27584710929809410,27584633620398082,27584620735496194,27584689454972930,27584715224776706,27584625030463490,27584702339874818,27584693749940226,27584607850594306,27584612145561602,27584616440528898,27584655095234562,27584680865038338,27584706634842114,27866078531944448,27866215974961153,27866052760829952,27866061350830080,27866031287042048,27866125780975616,27866250334175233,27866026992467968,27866134365143040,27866117186322432,27866142960451584,27866104301551616,27866022700974080,27866121485352960,27866069945679872,27866035582140416,27866138660306944,27866241744633857,27866237444096001,27866112891748352,27866151550255104,28147652293623808,28147639408918528,28147665178853376,28147643704082432,28147656588525568,28147574987948032,28147647998459904,28147660883623936,28147562103111680,28147630819049472,28147605049114624,28429122974908418,28429080025235458,28429049960464386,28429037075562498,28429105795039234,28429127269875714,28429131564843010,28428972649218050,28429118679941122,28429114384973826,28429110094331904,28429140154777602,28429135859810306,28710537821880320,28710675265421313,28710503462076416,28710447627436032,28710529231683584,28710451922599936,28710542116454400,28710460512272384,28710456217174016,28991931192639490,28991926897672194,28992038566821890,28992042861789186,28991935487606786,28992021386952706,28992051451723778,28992034271854594,28992145947230209,28992004207083522,28991978437279746,28991969847345154,28992025681920002,28992017091985410,28991952667475970,28992012797018114,28991961257410562,28991922602704898,29273427643269122,29273436233203714,29273513542615042,29273397578498050,29273509247647746,29273500657713154,29273419053334530,29554928396992512,29836356122836994,29836459202052098,29836476381921282,29836442022182914,29836429137281026,29836360417804290,29836403367477250,29836467791986690,29836377597673474,29836347532902402,29836351827869698,29836450612117506,29836394777542658,29836437727215618,29836386187608066,29836463497019394,29836446317150210,30117878350479360,30399387681226754,30399310371815426,30399400566128642,30399426335932418,30399344731553794,30399353321488386,30399336141619202,30399409156063234,30399327551684610,30399306076848130,30399422040965122,30399391976194050,30399417745997826,30399396271161346,30399301781880834,30399379091292162,30399297486913538,30399413451030530,30680858366509056,30680982922788865,30680832591986690,30962307571384322,31243816906850304,31243731007569920,31243804022079488,31243950056144897,31243722417831936,31243726712995840,31243778252472320,31243735302668288,31243812612276224,31525274704019458,31525343423496194,31525364898332674,31525356308398082,31525360603365378,31525347718463490,31525257524150274,31525330538594306,31525261819117570,31525283293954050,31525339128528898,31525304768790530,31525266114084866,31525352013430786,31525270409052162,31806775455580160,32088147353141248,32369678159314944,32369626619838464,32369630914412544,32369622324674560,32369716813692928,32369703928922112,32369849963184129,32369712519118848,32369635209510912,32651110186221568,32651105891123200,32651187495829504,32651178905632768,32651101596549120,32651153136025600,32651191790403584,32651097301385216,32651324939960321,32932731192606720,32932714012999680,32932636703064064,32932726897704960,32932739782934528,32932705423130624,32932679653195776,32932645297913856,32932649588031488,32932722602541056,32932735487705088,32932718308163584,33214085908332544,33214094503182336,33214150339461120,33214060139642880,33214141743824896,33214262001598465,33214077318332416,33214055844544512,33214047258476544,33214163217809408,33214103089446912,33214137449250816,33214051549970432,33214128859054080,33214146042855424,33214240532463617,33214167517954048,33214266302136321,33214158922645504,33214274891677697,33214176107757568,33495522231517184,33495612425961472,33495530821255168,33495526526681088,33495603835764736,33495749870288897,33495578066157568,33495616720535552,33495535116353536,33777005797965824,33777091697246208,33777053042868224,33776997208227840,33777224847065089,33777001503391744,33777010093064192,33777078812475392,33777087402672128,34058532312580098,34340080306683904,34340097486094336,34340024471584768,34340054536749056,34340093191716864,34340007291977730,34340106076160000,34340110371258368,34340114666487808,34340101781258240,34340011586617344,34340033065320448,34340088896552960,34340183390486529,34621439315345410,34621666948612098,34903051733893122,34903047438925826,34903064618795010,34903004489252866,34903030259056642,34902952955346944,34903043143958530,34902961539579906,34902974424481794,34903038848991234,34903060323827714,34903056028860418,35184479466881024,35184539596619776,35184513826684928,35184440817025024,35184522416226304,35184531006291968,35184518121848832,35184449401716736,35184526711390208,35184505236815872,35184436516749312,35184535301390336,35465911493459968,35466001688100864,35465988803395584,35466010278100992,35465920088768512,35465980213526528,35466014573330432,35465924378427392,35465993098559488,35466005983002624,35465997392936960,35465954443591680,35747416533630978,35747360699056130,35747326339317762,35747369288990722,35747412238663682,35747352109121538,35747433713500162,35747322044350466,35747377878925314,35747438008467458,35747446598402050,35747420828598274,35747425123565570,35747450893369346,35747442303434754,35747334929252354,35747330634285058,35747403648729090,36028925869621250,36028835675308034,36028844265242626,36028921574653954,36028805610536962,36028908689752066,36028801315569666,36028827085373442,36028878624980994,36028891509882882,36028809905504258,36028900099817474,36028887214915586,36028797020602370,36028852855177218,36028895804850178,36028912984719362,36028917279686658,36310422323068928,36310336423591936,36310426618232832,36310379373723648,36310418028691456,36310413733527552,36310439503462400,36310430913134592,36310349308559360,36310435208232960,36310405143658496,36310332134064128,36591807110840320,36591901594943488,36591910184943616,36591824285270016,36591880120369152,36591905889845248,36591888710238208,36591897299779584,36591893005402112,36591811400302592,36591914480173056,36591854350434304,36873282082439170,37154928863019009,37154791417774080,37154696928755712,37154924565364737,37154778533003264,37154701223919616,37154757058953218,37154705518493696,37154787123200000,37154709813592064,37154752763396096,37436313639321602,37436326524223490,37436236329910274,37436279279583234,37436317934288898,37436339409125378,37436305049387010,37436249214812162,37436309350514688,37436322229256194,37436330819190786,37436335114158082,37717737075441666,37717745665376258,37717771435180034,37717694125768706,37717749960343554,37717728485507074,37717741370408962,37717762845245442,37717655471063042,37717685535834114,37717775730147330,37717659766030338,37717646881128450,37717702715703298,37717676945899522,37717758550278146,37717767140212738,37717651176095746,37999151922413568,37999126154051584,37999134743724032,37999315136544769,37999130448625664,37999237821890560,37999220646936576,37999233526726656,37999203463135232,37999160512413696,37999216347906048,37999212053331968,37999336605679617,37999121862557696,37999340908380161,37999177693528064,37999169107263488,37999349495758849,37999250711838720,37999242122035200,38280609720434688,38280790113255425,38280652670238720,38280596839268352,38280717098745856,38280626899124224,38280824472469505,38280725688549376,38280601130762240,38280811582390273,38280687030042624,38280691324616704,38280635489124352,38280815885156353,38280712798601216,38280644083974144,38280708503437312,38280605425336320,38280695623647232,38280678439845888,38562131948142592,38843602623660032,38843559673856000,38843546789019648,38843774428643329,38843636983463936,38843628393267200,38843555378757632,38843551084183552,38843641278038016,39125142023700482,39125146318667778,39125077599191042,39125120548864002,39125030354550786,39125060419321858,39125124843831298,39125133433765890,39125026059583490,39125137728733186,39125150613635074,39125069009256450,39125116253896706,39125021764616194,39125051829387266,39125111958929410,39125034649518082,39125103368994818,39406535395966978,39406617000345602,39406612705378306,39406552575836162,39406625590280194,39406543985901570,39406608410411010,39406505331195906,39406599820476418,39406578345639938,39406621302915072,39406526806032386,39406509626163202,39406586935574530,39406595525509122,39406591230541826,39406501036228610,39406496741261314,39688049028628482,39688130633007106,39688117748105218,39688044740083712,39688134927974402,39688126338039810,39688113453137922,39688104863203330,39688079093399554,39688122043072514,39688139222941698,39688036143726594,39969519716859904,39969579840897024,39969601315471360,39969588430766080,39969614200700928,39969524005797888,39969609905471488,39969592725929984,39969511120830464,39969597020307456,39969554070962176,39969605610373120,40251140722524161,40251011867017216,40251114950230017,40250921676242944,40250951736098816,40251016161591296,40250977507213312,40250968920948736,40251136419364865,40250925967736832,40250960326098944,40251003276820480,40250930262310912,40251050525523968,40251033340411904,40251037635575808,40250934557409280,40251020460621824,40251041935720448,40251149309444097,40532435303071746,40532516907450370,40532499727581186,40532426713137154,40532486842679298,40532508317515778,40532495432613890,40532478252744706,40532409533267970,40532396648366082,40532521202417666,40532443893006338,40532452482940930,40532512612483074,40532400943333378,40532491137646594,40532525497384962,40532405238300674,40813974704226306,40814000474030082,40813953229389826,40813871625011202,40813901689782274,40813987589128194,40813961819324418,40813983294160898,40813966114291714,40813991884095490,40813996179062786,40813910279716866,40813918869651458,40813884509913090,40813875919978498,40813880214945794,40813927459586050,40813970409259010,41095471155511298,41095393846099970,41095436795772930,41095458270609410,41095402436034562,41095466860544002,41095359486361602,41095346601459714,41095376666230786,41095449680674818,41095445385707522,41095428205838338,41095475450478594,41095350896427010,41095385256165378,41095462565576706,41095355191394306,41095441090740226,];

pub fn make_parser<'lt>() -> ZCParser<Construct<'lt>,Construct<'lt>>
{
 let mut parser1:ZCParser<Construct<'lt>,Construct<'lt>> = ZCParser::new(60,147);
 let mut rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("start");
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Program");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Classes(cs),Maincl(mc),)=(_item1_.value,_item0_.value,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ let mut _item16_ = parser.popstack(); let mut _item15_ = parser.popstack(); let mut _item14_ = parser.popstack(); let mut _item13_ = parser.popstack(); let mut _item12_ = parser.popstack(); let mut _item11_ = parser.popstack(); let mut _item10_ = parser.popstack(); let mut _item9_ = parser.popstack(); let mut _item8_ = parser.popstack(); let mut _item7_ = parser.popstack(); let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stms(thebody),Id(an),Id(cn),)=(_item14_.value,_item11_.value,_item1_.value,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Class(cl),Classes(mut cs),)=(_item1_.value,_item0_.value,) { 
  cs.push(parser.lbx(1,cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Decs(mut ds),Id(sup),Id(name),)=(_item4_.value,_item2_.value,_item1_.value,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{ let mut sup = parser.popstack(); let mut _item0_ = parser.popstack();  sup.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object") };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Id(v),Id(t),)=(_item1_.value,_item0_.value,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),Id(t),)=(_item3_.value,_item1_.value,_item0_.value,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ let mut _item8_ = parser.popstack(); let mut _item7_ = parser.popstack(); let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_item7_.value,_item4_.value,_item2_.value,_item1_.value,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let mut v = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Decs(mut ds),)=(_item0_.value,) {  ds.push(parser.lbx(1,v.value)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let mut m = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Decs(mut ds),)=(_item0_.value,) {  ds.push(makelbox!(m,m.value)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item2_.value,_item1_.value,_item0_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item3_.value,_item2_.value,_item1_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack();  return Id("int[]"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("boolean"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("String"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("int"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("void"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut c = parser.popstack();  c.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(s),Stms(mut sv),)=(_item1_.value,_item0_.value,) {  sv.push(makelbox!(_item1_,s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stms(sv),)=(_item1_.value,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(b),Stm(a),Exp(c),)=(_item6_.value,_item4_.value,_item2_.value,) { 
  Stm(Ifstat(makelbox!(_item2_,c), makelbox!(_item4_,a), makelbox!(_item6_,b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(a),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Ifstat(makelbox!(_item2_,c),makelbox!(_item4_,a),parser.lbx(5,Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(s),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Whilest(parser.lbx(2,c),parser.lbx(4,s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),)=(_item2_.value,_item0_.value,) {  Stm(Assignst(v,parser.lbx(2,e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),Exp(i),Exp(v),)=(_item5_.value,_item2_.value,_item0_.value,) { 
  Stm(ArAssignst(parser.lbx(0,v),parser.lbx(2,i),parser.lbx(5,e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(args),Id(m),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),)=(_item1_.value,) {  Stm(Returnst(parser.lbx(1,e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (Vdec(v),)=(_item0_.value,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(a),)=(_item1_.value,) {  Exp(Notexp(parser.lbx(1,a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("<",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("%",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("==",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(i),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("[]",parser.lbx(0,a),parser.lbx(2,i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Id(field),Exp(obj),)=(_item2_.value,_item0_.value,) {  Exp(Field(field,parser.lbx(0,obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(args),Id(f),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (i,)=(_item0_.value,) {  i }  else {parser.bad_pattern("(i,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut s = parser.popstack();  s.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (b,)=(_item0_.value,) {  b }  else {parser.bad_pattern("(b,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item0_.value,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(s),)=(_item3_.value,) {  Exp(Newarray(parser.lbx(3,s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item1_.value,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut e = parser.popstack(); let mut _item0_ = parser.popstack();  e.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item1_.value,_item0_.value,) {  er.push(parser.lbx(0,e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item2_.value,_item1_.value,) {  er.push(parser.lbx(1,e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("START");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); <Construct<'lt>>::default()};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras<'lt>(parser:&mut ZCParser<Construct<'lt>,Construct<'lt>>)
{
}//end of load_extras: don't change this line as it affects augmentation
