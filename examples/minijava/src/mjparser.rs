//Parser generated by rustlr for grammar mj

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{LBox,makelbox};
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [176093855745,17179934720,171798822913,281474976972800,563194766557187,844442110132226,844669743398914,844609614053377,1125998691483648,1407392063946752,1407619696689154,1407555272638465,1688871335690240,1970342017040386,1970569650307074,2251799814340608,2533300560920576,2814938746519553,2814792717565952,2814848551747586,3096254809505792,3377699721510912,3659273482534912,3940684034801664,4222223435235330,4503629692796930,4503702707240962,4503801492013057,4503621102862338,4503711297175554,4503638282731522,4503715592142850,4503599628025858,4785130439901184,5066588236873728,5066661251710976,5066579647463424,5066652661645312,5066747150860289,5066764330598401,5066549582495744,5066665546743808,5066571057135616,5066742855630849,5348063214174208,5629602614149122,5629611204083714,5629529599705090,5629538189639682,5629499534934018,5629615499051010,5629521009770498,5910974512168962,6192449489666048,6474040430297088,6473924466049024,6473963120427008,6474139214807041,6474036135264256,6473954531016704,6755399441842178,6755420916678658,6755515405959170,6755429506613250,6755511110991874,6755438096547842,6755502521057282,7036891597897730,7037119231164418,7318349395918850,7599824372498434,7599888797859840,7881299349078018,8162774325985282,8444313728057344,8725861719277568,8725797294833664,9007199257165824,9288742953418752,9570217930194944,9851637072461824,9851624187953152,9851714381938688,9851851820761089,9851680022331392,9851632777822208,9851705792069632,9851718677102592,9851628482985984,10133228011061250,10133112046944258,10133210831192066,10133154996617218,10133202241257474,10133180766420994,10133215126159362,10133189356355586,10133099162042370,10133107751976962,10133193651322882,10133219421126658,10133146406682626,10133137816748034,10133223716093954,10133129226813442,10133120636878850,10133197946290178,10133103457009666,10414629976080384,10696049116119042,10977524094992384,11259145100918784,11259076381573120,11259157986213888,11259140805885952,11259166576017408,11259063496605696,11259072086671360,11259162281246720,11259132216344576,11259106446082048,11259149395689472,11259153690591232,11540542767824898,11540632962138114,11540581422530562,11540559947694082,11540641552072706,11540624372203522,11540615782268930,11540547062792194,11540551357759490,11540628667170818,11540620077236226,11540534177890306,11540607192334338,11540637257105410,11540538472857602,11821949025976320,11822060695191552,12103518490787840,12103432591507456,12103428296671232,12103436886147072,12103651636084737,12103505605754880,12103424001638400,12103514195623936,12103479836016640,12384903273381888,12384907568218112,12384980582465536,12384954812727296,12384989172334592,12385126612860929,12384911862857728,12384993467498496,12384898978349056,12666515689242626,12666528574144514,12666524279177218,12666541459046402,12666446969765890,12666537164079106,12666481329504258,12666451264733186,12666438379831298,12666459854667778,12666507099308034,12666434084864002,12666519984209922,12666532869111810,12666442674798594,12948016435560450,12948003550658562,12947926241247234,12948012140593154,12947917651312642,12947909061378050,12947994960723970,12947982075822082,12947999255691266,12947956306018306,12948007845625858,12947921946279938,12947934831181826,12947913356345346,12947990665756674,13229392628154370,13229482822467586,13229474232532994,13229465642598402,13229409808023554,13229388333187074,13229469937565698,13229478527500290,13229401218088962,13229396923121666,13229457052663810,13229491412402178,13229487117434882,13229431282860034,13229384038219778,13510859014733826,13510949209047042,13510966388916226,13510932029177858,13510876194603010,13510871899635714,13510940619112450,13510884784537602,13510863309701122,13510944914079746,13510953504014338,13510957798981634,13510906259374082,13510867604668418,13510962093948930,13792385529741312,13792303925493760,13792480021643265,13792333989216258,13792488611643393,13792273860526080,13792312514904064,13792389824774144,14073808969596928,14355279649701888,14355305419440128,14355223815323648,14355232405192704,14355236699832320,14355228110356480,14355314009309184,14355318304473088,14355451450097665,14636698792034304,14636926426873857,14636707381903360,14636754626412544,14636788986019840,14636711676542976,14636780396150784,14636703087067136,14636793281183744,14918268257894400,14918255372861440,14918178063777792,14918229603123200,14918186653253632,14918182358614016,14918263962730496,14918173768744960,14918401403650049,15199738939441152,15199657335324672,15199648745455616,15199730349572096,15199661629964288,15199743234605056,15199653040488448,15199876380426241,15199704579833856,15481136606674944,15481128017199104,15481213916151808,15481351357202433,15481205326282752,15481123722166272,15481179556544512,15481132312035328,15481218211315712,15762688892862464,15762826333978625,15762611583385600,15762607288745984,15762654533255168,15762602993909760,15762598698876928,15762693188026368,15762680302993408,16044073677488128,16325630254120962,16325604484317186,16325664613859330,16325643139022850,16325638844055554,16325677498761218,16325660318892034,16325548649742338,16325557239676930,16325668908826626,16325570124578818,16325595894382594,16325673203793922,16325561534644226,16325552944709634,16325578714513410,16325587304448002,16325651728957442,16325647433990146,16607251264241665,16607118118158336,16607113822994432,16607027924041728,16607079463387136,16607023629008896,16607032218877952,16607105233125376,16607036513517568,16888580209836032,16888593094868992,16888498605719552,16888726241017857,16888588799705088,16888507195588608,16888511490228224,16888502900752384,16888554440097792,17170063776415744,17170201217794049,17170029416808448,17169986466938880,17169977877463040,17169973582430208,17169982172299264,17170068071579648,17170055186546688,17451530163257344,17451676194570241,17451448559140864,17451538753126400,17451452854173696,17451457149009920,17451461443649536,17451504393519104,17451543048290304,17732979372654592,18014462939365376,18296028108357632,18295980862996482,18296015223652352,18296006632800258,18295933618356226,18296023813455872,18295937913323522,18295959388160002,18296032402604034,18296019518685184,18296036697571330,18296040993783808,18295950799339520,18295942208290818,18295946503258114,18577425776050176,18577494495395840,18577498790166528,18577511675723776,18577481610821632,18577455840559104,18577515970494464,18577412891082752,18577503085068288,18577408597884928,18577490200363008,18577507380690944,18858883574661120,19140298421895168,19421872182919168,19703317091581954,19703308501647362,19703325682892800,19703402990927874,19703390106025986,19703394400993282,19703381516091394,19703415875829762,19703355746287618,19703411580862466,19703334271451138,19703312796614658,19703321386549250,19703407285895170,19703398695960578,19984873672540162,19984886557442050,19984882262474754,19984783478226946,19984856492670978,19984890854047744,19984787773194242,19984830722867202,19984792068161538,19984869377572866,19984809248030722,19984877968621568,19984865082605570,19984796363128834,19984800659603456,20266267045199874,20266361535987712,20266271340167170,20266331469709314,20266344355659776,20266305699905538,20266348650430464,20266357239513090,20266365830758400,20266258455265282,20266340060626944,20266284225069058,20266352945332224,20266275636314112,20266262750232578,20547733431713794,20547832215961602,20547746316615682,20547836510928898,20547819332370432,20547806446157826,20547815036092418,20547780676354050,20547823627141120,20547827922042880,20547737726681090,20547840807469056,20547742021648386,20547750613024768,20547759201517570,20829315784179712,20829216998490114,20829302898753536,20829307192803330,20829311487770626,20829281422999554,20829208408555522,20829298603851776,20829221293457410,20829290012934146,20829234178359298,20829294307901442,20829212703522818,20829225589735424,20829255653195778,21110786466119680,21110769285791744,21110691978477568,21110764990758912,21110756401217536,21110777875464192,21110730630955008,21110782171086848,21110700566446080,21110790760890368,21110773580562432,21110687681478656,21392257146748930,21392166952435714,21392244261847042,21392261441716226,21392248556814338,21392231376945154,21392205607141378,21392265736683522,21392171247403010,21392154070351872,21392158362501122,21392184132304898,21392239966879746,21392252851781634,21392162657468418,21392175542370306,21673637633982466,21673736418230274,21673706353459202,21673680583655426,21673740713197570,21673723533328386,21673719238361090,21673641928949762,21673633339015170,21673727828885504,21673659108818946,21673646223917058,21673732123262978,21673650519867392,21673714943393794,21955189920890880,21955121200693250,21955112610758658,21955194215923712,21955108315791362,21955181330235394,21955155561086976,21955207100039170,21955202805596160,21955198510694400,21955134085595138,21955125496578048,21955116905725954,21955211396251648,21955215691022336,22236673487405056,22236656308060160,22236669192634368,22236677782306816,22236690667732992,22236609062174722,22236630537797632,22236596177272834,22236686372962304,22236591882305538,22236587587338242,22236583292370946,22236600473288704,22236682076618754,22236664897601536,22518062563852290,22518071153786882,22518066858819586,22518148464115712,22518058268884994,22518165644443648,22518075449999360,22518131283329026,22518157053132802,22518161348100098,22518139874312192,22518084038688770,22518152759017472,22518144169345024,22518105513525250,22799533248937984,23081042582503424,23081003927732224,23080952388386816,23081029697470464,23081175729438721,23080960977862656,23081038287339520,23080956683223040,23080948093353984,23362569099411458,23362573394378754,23362508969869314,23362483200065538,23362491790000130,23362586279280642,23362581984313346,23362500379934722,23362496084967426,23362577689346050,23362564804444162,23362556214509570,23362530444705794,23362487495032834,23362590574247938,23643996833906688,23925433150930946,23925458925780992,23925583479898113,24206852293591042,24206938192936962,24206951077838850,24207071341576193,24206942487904258,24206903833198594,24206847998623746,24206929603002370,24206878063394818,24206856588558338,24206976847642626,24206895243264002,24206946782871554,24206963962740738,24206860883525634,24206968257708034,24206959667773442,24206886653329410,24488486185467906,24488391696187394,24488473300566018,24488387401220098,24488430350893058,24488469005598722,24488383106252802,24488490480435202,24488395991154690,24488408876056578,24488456120696834,24488481890500610,24488400286121986,24488464710631426,24488477595533314,24770029885063169,24769858083684354,24769888147603456,24770025590030337,24769810838126592,24769853787996160,24769892442767360,24769879557734400,24769802248650752,24769806543486976,24769797953617920,25051431844511746,25051337355231234,25051423254577154,25051333060263938,25051427549544450,25051406074707970,25051440434446338,25051341650198530,25051436139479042,25051414664642562,25051358830067714,25051380304904194,25051418959609858,25051345945165826,25051350240133122,25332911116779520,25332855281614848,25332893936451584,25332816629792768,25332906821746688,25332812332138496,25332902526124032,25332915411550208,25332898231222272,25332889641418752,25332825217105920,25332881051877376,25614231472111618,25614270126817282,25614313076490242,25614222882177026,25614446225391617,25614334551326722,25614304486555650,25614252946948098,25614278716751874,25614325961392130,25614351731195906,25614317371457538,25614338846294018,25614227177144322,25614343141261314,25614235767078914,25614321666424834,25614261536882690,25895736513462272,25895697859084288,25895813823332352,25895809528299520,25895727924051968,25895912612233217,26177232964550658,26458695062257664,26458841091342337,26458656403750912,26458677877473280,26458729417998336,26458686466883584,26458768076636160,26458647817682944,26458660698390528,26458776666767360,26458750897094656,26458738007867392,26458763776753664,26458759481720832,26458862560608257,26458746601668608,26458703648260096,26458875450621953,26458866860818433,26458742303031296,26458652108914688,26740277409677312,26740286000332800,26740268820004864,26740290295103488,26740208694067200,26740182920790018,26740230165168128,26740281705299968,26740187215691776,26740359017857025,26740273114775552,26740255935430656,26740200100659200,26740264524972032,27021657901039616,27303231658131458,27303235953098754,27303223068196866,27303180118523906,27303240248066050,27303150053752834,27303132873883650,27303205888327682,27303141463818242,27303137168850946,27303227363164162,27303158643687426,27303214478262274,27303218773229570,27303145758785538,27584637914710016,27584663683596288,27584650804199424,27584594969100288,27584586373726208,27584629324840960,27584775357464577,27584642209873920,27584603555102720,27584762467450881,27584547724525568,27584552015757312,27584676573609984,27584766767661057,27584740998184961,27584577784315904,27584659388563456,27584560605233152,27584556310593536,27584667983478784,27584646508511232,27866022701760512,28147562103111680,28147665178656768,28147605048721408,28147639408525312,28147656588853248,28147652293230592,28147660883886080,28147647998328832,28147643703558144,28147574987948032,28147630818983936,28429011303989250,28429075728498690,28429062843596802,28428985534185474,28429101498302466,28429088613400578,28429084318433282,28428981239218178,28429092908367874,28429019893923842,28429071433531394,28429067138564098,28429195993677825,28429028483858434,28428972649283586,28429054253662210,28429002714054658,28428976944250882,28710494870700034,28710563590176770,28710576475078658,28710537820372994,28710503460634626,28710546410307586,28710567885144066,28710456215994370,28710486280765442,28710550705274882,28710542115340290,28710451921027074,28710559295209474,28710477690830850,28710460510961666,28710529230438402,28710447626059778,28991978443440128,29273479185104896,29273492070137856,29273487774973952,29273401876021248,29273397580988416,29273406170857472,29273410465497088,29273625218908161,29273453415366656,29555014291816450,29554979932078082,29555027176718338,29555031471685634,29555010001371136,29554949867307010,29555040061620226,29555005701881858,29555035766652930,29555022881751042,29554936982405122,29554872556060674,29555018586783746,29836403373768704,30117878344777730,30117934179352578,30117947064254466,30117904114581506,30117912704516098,30117822510202882,30117826805170178,30117916999483394,30117852574973954,30117831100137474,30117925589417986,30117942769287170,30117835395104770,30117938474319874,30117921294450690,30117951359221762,30117869754843138,30117861164908546,30399400571895808,30680832594673666,30962260325761024,30962329045368832,30962475079434241,30962341930401792,30962303275630592,30962337635237888,30962256031121408,30962247441252352,30962251736285184,31243881331687426,31243791137374210,31243808317243394,31243868446785538,31243864151818242,31243872741752834,31243782547439618,31243885626654722,31243855561883650,31243877036720130,31243795432341506,31243799727308802,31243829792079874,31243889921622018,31243786842406914,31525236046888962,31525309061332994,31525197392183298,31525218867019778,31525313356300290,31525300471398402,31525227456954370,31806758273679360,31806882829762561,31806732498829314,32088147353141248,32369712518791168,32369716813955072,32369678159183872,32369626619838464,32369849963184129,32369703928922112,32369635209314304,32369630914674688,32369622324805632,32651290578976769,32651316348452865,32651324938256385,32651196089303040,32651101596549120,32651187495501824,32651105891385344,32651097305317376,32651153135894528,32651312048242689,32651135954518016,32651213264388096,32651127365107712,32651178905632768,32651191790665728,32651144549892096,32651200385908736,32651226154401792,32651208969355264,32651110186024960,32651217564270592,32932662472212480,32932628112605184,32932799916736513,32932666767376384,32932585162735616,32932580868096000,32932576573259776,32932572278226944,32932653882343424,33214214759448576,33214120274690048,33214193284349952,33214197579120640,33214180399775744,33214111680036864,33214201874022400,33214210464677888,33214206169645056,33214188989317120,33214124565004288,33214154629513216,33495578066026496,33495603835764736,33495616720797696,33495749870288897,33495522231648256,33495612425633792,33495526526681088,33495535116156928,33495530821517312,33777091697508352,33777053042737152,33777078812475392,33777224847065089,33776997208358912,33777087402344448,33777010092867584,33777001503391744,33777005798227968,34058716995190786,34058489361924098,34340088896159744,34340007291977730,34340054536355840,34340024471846912,34340093191192576,34340106076487680,34340033065254912,34340183390486529,34340011586879488,34340080306618368,34340110371520512,34340114666291200,34340101780865024,34340097485963264,34621482266001410,34903043143958530,34902961539579906,34903064618795010,34903047438925826,34903056028860418,34902974424481794,34903060323827714,34902952955346944,34903004489252866,34903038848991234,34903030259056642,34903051733893122,35184449401978880,35184440817025024,35184526710996992,35184535301652480,35184436517011456,35184479466487808,35184513826291712,35184531006619648,35184539596423168,35184522416095232,35184518121324544,35184505236750336,35465937261494274,35465950146396162,35465877131952130,35465847067181058,35465963031298050,35465975916199938,35465958736330754,35465945851428866,35465902901755906,35465928671559682,35465885721886722,35465894311821314,35465971621232642,35465967326265346,35465851362148354,35465855657115650,35465859952082946,35465941556461570,35747468074745856,35747480960040960,35747429419909120,35747472369516544,35747476664418304,35747485255073792,35747463779713024,35747455190171648,35747382180577280,35747399355400192,35747386470432768,35747489549844480,36028912985178114,36028887215374338,36028925870080002,36028908690210818,36028852855635970,36028809905963010,36028835675766786,36028921575112706,36028878625439746,36028805610995714,36028801316028418,36028900100276226,36028891510341634,36028844265701378,36028797021061122,36028895805308930,36028827085832194,36028917280145410,36310426617839616,36310379373330432,36310405143592960,36310349308821504,36310430913462272,36310345018966016,36310336423854080,36310422322937856,36310418028167168,36310413733134336,36310435208495104,36310439503265792,36591880120303616,36591901594550272,36591811400564736,36591854350041088,36591897299648512,36591905890172928,36591807110840320,36591914479976448,36591910185205760,36591824285532160,36591888709844992,36591893004877824,36873282082439170,37154787122872320,37154709813395456,37154778533003264,37154924565299201,37154701223919616,37154752763265024,37154757058953218,37154696928886784,37154791418036224,37154705518755840,37154928863019009,37436305049387010,37436279279583234,37436339409125378,37436249214812162,37436317934288898,37436326524223490,37436322229256194,37436330819190786,37436236329910274,37436313639321602,37436335114158082,37436309350514688,37717702716686336,37717651177340928,37717694130683904,37717767145062400,37717762845179904,37717840159768577,37717741371457536,37717865931669505,37717676945899520,37717646886109184,37717728486424576,37717874519048193,37717685535309824,37717758550147072,37717737076293632,37717775735193600,37717659766816768,37717655472177152,37717861629034497,37717745670094848,37999220642086914,37999160512544770,37999246411890690,37999126152806402,37999250706857986,37999121857839106,37999151922610178,37999237821956098,37999233526988802,37999242116923394,37999224937054210,37999134742740994,37999130447773698,37999177692413954,37999212052152322,37999169102479362,37999203462217730,37999216347119618,38280691324878848,38280695623516160,38280609720238080,38280678439845888,38280652670107648,38280635488731136,38280708503568384,38280712798601216,38280717098483712,38280601130762240,38280725688614912,38280605425598464,38280687029714944,38280596839530496,38280815885156353,38280811582455809,38280644084105216,38280626899320832,38280824472469505,38280790113189889,38562131948142592,38843551084183552,38843559673659392,38843628393267200,38843636983136256,38843555379019776,38843602623528960,38843546789150720,38843774428643329,38843641278300160,39125021764550658,39125077599125506,39125030354485250,39125103368929282,39125069009190914,39125150613569538,39125146326204416,39125060419256322,39125142023634946,39125026059517954,39125137728667650,39125116253831170,39125124843765762,39125120548798466,39125051829321730,39125111958863874,39125034649452546,39125133433700354,39406526806097922,39406501036294146,39406543985967106,39406505331261442,39406612705443842,39406496741326850,39406599820541954,39406621295378434,39406535396032514,39406578345705474,39406617000411138,39406591230607362,39406608410476546,39406586935640066,39406509626228738,39406552575901698,39406595525574658,39406625590345730,39688130633007106,39688117748105218,39688049028628482,39688104863203330,39688044740083712,39688134927974402,39688139222941698,39688113453137922,39688079093399554,39688122043072514,39688126338039810,39688036143726594,39969588430372864,39969554070568960,39969519716859904,39969601315078144,39969597020176384,39969609905733632,39969614200504320,39969605610700800,39969524006060032,39969511121092608,39969592725405696,39969579840831488,40250930262573056,40250934557212672,40250921676505088,40251149309444097,40250925967736832,40250951736295424,40251033340542976,40251037635575808,40251020460490752,40251140722524161,40250960325705728,40251003276820480,40251050525589504,40251011866689536,40251114950164481,40250968921079808,40251136419430401,40251016161853440,40251041935458304,40250977507082240,40532478252744706,40532396648366082,40532405238300674,40532499727581186,40532435303071746,40532512612483074,40532508317515778,40532426713137154,40532400943333378,40532443893006338,40532486842679298,40532495432613890,40532525497384962,40532491137646594,40532516907450370,40532409533267970,40532521202417666,40532452482940930,40813974704226306,40813996179062786,40813961819324418,40814000474030082,40813875919978498,40813987589128194,40813991884095490,40813871625011202,40813966114291714,40813927459586050,40813953229389826,40813884509913090,40813880214945794,40813918869651458,40813970409259010,40813983294160898,40813910279716866,40813901689782274,41095385256165378,41095428205838338,41095458270609410,41095359486361602,41095376666230786,41095393846099970,41095436795772930,41095466860544002,41095475450478594,41095471155511298,41095441090740226,41095350896427010,41095402436034562,41095449680674818,41095355191394306,41095462565576706,41095445385707522,41095346601459714,];

pub fn make_parser<'lt>() -> ZCParser<Construct<'lt>,Construct<'lt>>
{
 let mut parser1:ZCParser<Construct<'lt>,Construct<'lt>> = ZCParser::new(60,147);
 let mut rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("start");
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Program");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Classes(cs),Maincl(mc),)=(_item1_.value,_item0_.value,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ let mut _item16_ = parser.popstack(); let mut _item15_ = parser.popstack(); let mut _item14_ = parser.popstack(); let mut _item13_ = parser.popstack(); let mut _item12_ = parser.popstack(); let mut _item11_ = parser.popstack(); let mut _item10_ = parser.popstack(); let mut _item9_ = parser.popstack(); let mut _item8_ = parser.popstack(); let mut _item7_ = parser.popstack(); let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stms(thebody),Id(an),Id(cn),)=(_item14_.value,_item11_.value,_item1_.value,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Class(cl),Classes(mut cs),)=(_item1_.value,_item0_.value,) { 
  cs.push(parser.lbx(1,cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Decs(mut ds),Id(sup),Id(name),)=(_item4_.value,_item2_.value,_item1_.value,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{ let mut sup = parser.popstack(); let mut _item0_ = parser.popstack();  sup.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object") };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Id(v),Id(t),)=(_item1_.value,_item0_.value,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),Id(t),)=(_item3_.value,_item1_.value,_item0_.value,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ let mut _item8_ = parser.popstack(); let mut _item7_ = parser.popstack(); let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_item7_.value,_item4_.value,_item2_.value,_item1_.value,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let mut v = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Decs(mut ds),)=(_item0_.value,) {  ds.push(parser.lbx(1,v.value)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let mut m = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Decs(mut ds),)=(_item0_.value,) {  ds.push(makelbox!(m,m.value)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item2_.value,_item1_.value,_item0_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item3_.value,_item2_.value,_item1_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack();  return Id("int[]"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("boolean"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("String"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("int"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("void"); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut c = parser.popstack();  c.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(s),Stms(mut sv),)=(_item1_.value,_item0_.value,) {  sv.push(makelbox!(_item1_,s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stms(sv),)=(_item1_.value,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(b),Stm(a),Exp(c),)=(_item6_.value,_item4_.value,_item2_.value,) { 
  Stm(Ifstat(makelbox!(_item2_,c), makelbox!(_item4_,a), makelbox!(_item6_,b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(a),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Ifstat(makelbox!(_item2_,c),makelbox!(_item4_,a),parser.lbx(5,Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(s),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Whilest(parser.lbx(2,c),parser.lbx(4,s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),)=(_item2_.value,_item0_.value,) {  Stm(Assignst(v,parser.lbx(2,e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),Exp(i),Exp(v),)=(_item5_.value,_item2_.value,_item0_.value,) { 
  Stm(ArAssignst(parser.lbx(0,v),parser.lbx(2,i),parser.lbx(5,e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(args),Id(m),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),)=(_item1_.value,) {  Stm(Returnst(parser.lbx(1,e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (Vdec(v),)=(_item0_.value,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("+",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("/",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("-",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("&&",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("OROR",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(a),)=(_item1_.value,) {  Exp(Notexp(parser.lbx(1,a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("<",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("%",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("==",parser.lbx(0,a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(i),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("[]",parser.lbx(0,a),parser.lbx(2,i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Id(field),Exp(obj),)=(_item2_.value,_item0_.value,) {  Exp(Field(field,parser.lbx(0,obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(args),Id(f),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (i,)=(_item0_.value,) {  i }  else {parser.bad_pattern("(i,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut s = parser.popstack();  s.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (b,)=(_item0_.value,) {  b }  else {parser.bad_pattern("(b,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item0_.value,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(s),)=(_item3_.value,) {  Exp(Newarray(parser.lbx(3,s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item1_.value,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut e = parser.popstack(); let mut _item0_ = parser.popstack();  e.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item1_.value,_item0_.value,) {  er.push(parser.lbx(0,e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item2_.value,_item1_.value,) {  er.push(parser.lbx(1,e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct<'lt>,Construct<'lt>>::new_skeleton("START");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); <Construct<'lt>>::default()};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras<'lt>(parser:&mut ZCParser<Construct<'lt>,Construct<'lt>>)
{
}//end of load_extras: don't change this line as it affects augmentation
