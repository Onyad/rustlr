//Parser generated by rustlr

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{RuntimeParser,RProduction,Stateaction,decode_action};
use rustlr::LBox;
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;60] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","boolean","void","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [17179934720,180388823041,184683724801,281474976972800,562967133421570,563203356622850,563143227277313,844678333202435,1126007281418240,1407563862573057,1407392063946752,1407628286623746,1688871335690240,1970578240241666,1970342017040386,2251799814340608,2533300560920576,2814947336388609,2814792717631488,2814857141682178,3096327823949824,3377807095693312,3659174698287104,3940684034801664,4222244910399490,4222236320464898,4222227730530306,4222124651315202,4222146126151682,4222335105236993,4222163306020866,4222249205366786,4503707001880578,4785130439901184,5066661251645440,5066674136678400,5066755740729345,5066652661645312,5066751445630977,5066669841448960,5066571056939008,5066772920532993,5066549582692352,5066588237266944,5348063214174208,5629619794870272,5629624090099712,5629602615066624,5629722874544129,5629499536113664,5629538190688256,5911094770728962,5910974511644674,5911013166350338,5911086180794370,5911077590859778,5911099065696258,5910995986481154,6192449489731584,6473924465131522,6474044724215810,6474027544346626,6474049019183106,6473963119837186,6473945939968002,6474036134281218,6755463867727872,6755399442366466,7036874419142658,7318602797809666,7318366574608386,7599824372432898,7881299349078018,8162774326050818,8444313728057344,8725724280324096,9007345286053888,9007272271544320,9288742953418752,9570217930194944,9851680022069248,10133206536224770,10133103457009666,10133193651322882,10133146406682626,10133137816748034,10133112046944258,10133210831192066,10133236600995842,10133228011061250,10133219421126658,10133154996617218,10133202241257474,10133099162042370,10133189356355586,10133120636878850,10133223716093954,10133180766420994,10133107751976962,10133232306028546,10414655745753088,10414629975621632,10414582731112448,10414668630720512,10414810364182529,10414587026014208,10414578436276224,10414574141505536,10414664335556608,10696049116119042,10977524094992384,11259037724901376,11259102149279744,11259222410133505,11259059198820354,11259213820133377,11259123624312832,11259119329083392,11258999070326784,11540615782858752,11540645847891968,11540551358414848,11540538473185280,11540628667957248,11540590013382656,11540632962662400,11540624372924416,11540641552465920,11540547063775232,11540650142269440,11540637257564160,11822185249308673,11822030629306368,11821949025058816,11822004859174912,11821961909567488,11821953319829504,11821957614665728,11822043514273792,11822039219109888,12103492721246210,12103591505494018,12103595800461314,12103574325624834,12103497016213506,12103582915559426,12103488426278914,12103484131311618,12103578620592130,12103565735690242,12103501311180802,12103587210526722,12103509901115394,12103539965886466,12103600095428610,12384976287825922,12385062187171842,12384963402924034,12385075072073730,12385057892204546,12385014942531586,12385040712335362,12385066482139138,12384984877760514,12384971992858626,12385053597237250,12385070777106434,12385049302269954,12384967697891330,12384959107956738,12666373956304896,12666494215454720,12948012140527618,12947964895887362,12947999255625730,12947909061312514,12947934831116290,12947926241181698,12948003550593026,12948020730462210,12948007845560322,12947990665691138,12948016435494914,12947913356279810,12947921946214402,12948025025429506,12947917651247106,13229379742728192,13229414102663168,13229560133058561,13229323908612096,13229328203382784,13229336793120768,13229405512859648,13229418397827072,13229332498219008,13510966389178370,13510949209309186,13510863309963266,13510957799243778,13510859014995970,13510876194865154,13510884784799746,13510867604930562,13510953504276482,13510940619374594,13510970684145666,13510914849570818,13510974979112962,13510962094211074,13510871899897858,13792445660790786,13792449955758082,13792342581575682,13792428480921602,13792424185954306,13792351171510274,13792333991641090,13792432775888898,13792389826215938,13792415596019714,13792346876542978,13792441365823490,13792437070856194,13792338286608386,13792359761444866,14073808969596928,14355283946373120,14636698793607168,14918409993584641,14918229602992128,14918263962927104,14918255373123584,14918268258091008,14918182358482944,14918186653384704,14918173768876032,14918178063646720,15199657335193600,15199743234801664,15199704579702784,15199648745586688,15199661630095360,15199738939637760,15199884970360833,15199730349834240,15199653040357376,15481218211512320,15481132311904256,15481213916348416,15481179556413440,15481359947137025,15481136606806016,15481128017068032,15481123722297344,15481205326544896,15762688893059072,15762611583516672,15762654533124096,15762834923913217,15762598699008000,15762693188222976,15762607288614912,15762680303255552,15762602993778688,16044129509834752,16044309900689409,16044168164933632,16044086560227328,16044077970489344,16044073675718656,16044155279966208,16044163869769728,16044082265325568,16325643141644288,16325604486545408,16325638846480384,16325552947200000,16325561536937984,16325630256676864,16325557242036224,16325784877465601,16325548652429312,16607023631040512,16888580210098176,16888507195457536,16888502900621312,16888511490359296,16888554439966720,16888498605850624,16888734831017985,16888593095065600,16888588799901696,17170029416677376,17169977877331968,17169986467069952,17170209807794177,17170055186808832,17170068071776256,17170063776612352,17169982172168192,17169973582561280,17451452854042624,17451504393388032,17451538753323008,17451530163519488,17451684784570369,17451461443780608,17451457148878848,17451543048486912,17451448559271936,17732932125589504,17732979370098688,17733013730033664,17732927830753280,17732936420491264,17732923535982592,17733018025197568,17733159761346561,17733005140230144,18014531653992450,18014505884188674,18014480114384898,18014501589221378,18014398510006274,18014518769090562,18014419984842754,18014437164711938,18014454344581122,18014407099940866,18014488704319490,18014402804973570,18014510179155970,18014527359025154,18014445754646530,18014492999286786,18014535948959746,18014523064057858,18014411394908162,18295950799470592,18295937914241024,18296049583325184,18296032403718144,18296015223914496,18296036698619904,18296040993521664,18296023813980160,18295989454438400,18295933621174272,18296045288947712,18296028109012992,18577404302983168,18858887869693952,19140371433390082,19140362843455490,19140465922670594,19140448744112128,19140384318291970,19140474513457152,19140470217637890,19140457333850112,19140358548488194,19140414383063042,19140461628751872,19140440152866818,19140453039144960,19140367138422786,19140375729602560,19421880772853760,19703355749629952,19984809251635200,19984783476981762,19984942395555841,20266340059840514,20266284225265666,20266365829644290,20266370124611586,20266352944742402,20266267045396482,20266262750429186,20266374419578882,20266357239709698,20266348649775106,20266314290036738,20266275636445184,20266258455461890,20266361535594496,20266271340363778,20547737727926272,20547789268123648,20547836512305152,20547827922698240,20547742025252864,20547750613155840,20547840807206912,20547849397010432,20547823627665408,20547832217403392,20547845102632960,20547815037599744,20829221293719554,20829208408817666,20829302899408896,20829324373721088,20829311489015808,20829234178621442,20829264244834304,20829225589866496,20829307194114048,20829216998752258,20829315783000066,20829320079343616,20829290014310400,20829298604376064,20829212703784962,21110782169448450,21110687680167938,21110795054350338,21110700566577152,21110709155004418,21110764989579266,21110739219775490,21110691975135234,21110790759383042,21110696270102530,21110777874481154,21110773579513858,21110799349317634,21110786464415746,21110683385200642,21392166951714818,21392162656747522,21392248556093442,21392184131584002,21392252851060738,21392265735962626,21392214196355074,21392171246682114,21392257146028034,21392239966158850,21392175543287808,21392274327142400,21392261442437120,21392270030929922,21392158361780226,21673646223982594,21673641929015298,21673740713263106,21673637634048002,21673723534508032,21673633339080706,21673689174966272,21673745009475584,21673749303853056,21673659108884482,21673650519998464,21673714943459330,21673727829540864,21673732124246016,21673736419147776,21955164150497282,21955207100170242,21955219985072130,21955116905857026,21955134085726210,21955104023969792,21955121200824322,21955189920301058,21955215690104834,21955112610889730,21955108315922434,21955125495791618,21955202805202946,21955224280039426,21955198510235650,21955211395137538,22236673486290946,22236699257274368,22236694961127426,22236587586945026,22236591881912322,22236596176879618,22236600473419776,22236677782962176,22236583291977730,22236664896356354,22236686372569088,22236690666160130,22236639126552578,22236609061781506,22236682077667328,22518165643001858,22518075450130432,22518114103394306,22518174233985024,22518161349279744,22518058268819458,22518157054377984,22518139873198082,22518071153721346,22518084038623234,22518062563786754,22518066858754050,22518152758099970,22518148463132674,22518169937969154,22799550426841088,22799623441350656,22799541835530242,22799636325990400,22799533245595650,22799627736383488,22799614849974274,22799644914745346,22799559015399426,22799649210695680,22799537540562946,22799589080170498,22799632031088640,22799640619778050,22799546130497538,23081033992175618,23081016812306434,23081008222371842,23081124187406336,23081064056946690,23081021107273730,23081102713094144,23081098418061312,23081107007799296,23081119893028864,23081012517339138,23081025403551744,23081111302701056,23081089826750466,23081115596554242,23362586279280642,23362594869215234,23362599164182530,23362577689346050,23362573394378754,23362590574247938,23362500379934722,23362564804444162,23362508969869314,23362581984313346,23362496084967426,23362483200065538,23362491790000130,23362539034640386,23362487495032834,23643958179266560,23925428857733120,23925454627864576,23925609249701889,23925385908125696,23925381613223936,23925467512832000,23925377318387712,23925373023617024,23925463217668096,24206929603002370,24206968257708034,24206972552675330,24206942487904258,24206976847642626,24207079931510785,24206903833198594,24206959667773442,24206938192936962,24206895243264002,24206856588558338,24206951077838850,24206955372806146,24206847998623746,24206860883525634,24206852293591042,24206985437577218,24206886653329410,24488361630040066,24488430349516802,24488443234418690,24488447529385986,24488460414287874,24488378809909250,24488370219974658,24488327270301698,24488413169647618,24488434644484098,24488331565268994,24488451824353282,24488335860236290,24488404579713026,24488417464614914,24488554908286977,24488426054549506,24488322975334402,24769858080997378,25051496271839233,25051397483134976,25051272929148928,25051393187905536,25051376008101888,25051311583723520,25332808036384770,25332924000501762,25332863870959618,25332816626319362,25332919705534466,25332911115599874,25332889640763394,25332898230697986,25332915410567170,25332820921286658,25332833806188546,25332906820632578,25332825216253954,25332812331352066,25332902525665282,25614459110227969,25614283013816322,25614222883880960,25614231473487872,25614227178651648,25614317373095936,25614304488128512,25614278717997056,25614313077932032,25614463405260801,25614235768389632,25895757990395906,25895762285363202,25895848184709122,25895775170265090,25895766580330498,25895865364578306,25895783760199682,25895770875297794,25895873954512898,25895813824970754,25895861069611010,25895839594774530,25895856774643714,25895869659545602,25895852479676418,26177250147368960,26177327456911360,26177323161878528,26177348931223552,26177340341420032,26177336046518272,26177331751616512,26177237262139392,26177288802336768,26177344636846080,26177241560055808,26177314571812864,26458884040622081,26458647817551872,26458785256570880,26458695062126592,26458776666701824,26458742303227904,26458772366688256,26458750891655168,26458755191537664,26458875451015169,26458652108783616,26458871150542849,26458729418260480,26458660698521600,26458759487029248,26458686467276800,26458703648129024,26458849681276929,26458768071458816,26458656403619840,26458738008064000,26740260233281536,26740131380330496,26740243048169472,26740251643412480,26740161443987456,26740170038837248,26740324657987585,26740135675232256,26740359017332737,26740212984774656,26740178624839680,26740225868365824,26740346127253505,26740230168248320,26740234463805440,26740122794262528,26740204394971136,26740350427725825,26740217279938560,26740247343398912,26740127085494272,27021597771431936,27303132874211330,27303248838066176,27303317561409537,27303240248262656,27303158647554048,27303137168982016,27303223068721152,27303150054211584,27303188709179392,27303214478655488,27303235953360896,27303244543688704,27303231658459136,27303227363753984,27584607854592000,27866194496454658,27866173021618178,27866138661879810,27866164431683586,27866185906520066,27866181611552770,27866190201487362,27866082827304962,27866108597108738,27866095712206850,27866177316585474,27866087122272258,27866100007174146,27866091417239554,27866198791421954,28147592161853442,28147635111526402,28147497672572930,28147579276951554,28147536327278594,28147605046755330,28147626521591810,28147622226624514,28147609341722626,28147587866886146,28147544917213186,28147506262507522,28147600751788034,28147617931657218,28147553507147778,28147501967540226,28147510557474818,28147729606770689,28429037079887872,28429135860203520,28429049964724224,28429127270596608,28429148744908800,28429131565301760,28429144450531328,28429122975563776,28429114385498112,28429088616022016,28429140155105280,28710542116913152,28710683855355905,28710460512206848,28710537821749248,28710529231945728,28710456217305088,28710451922468864,28710503461814272,28710447627698176,28991922602639362,28992068637818880,28992072928329730,28992098698133506,28992077223297026,28992094403166210,28991999913885698,28992064338395138,28992085813231618,28991987028983810,28992038568591362,28992081518264322,28992090108198914,29273453420281856,29554928397058048,29836347532902402,29836351827869698,29836467791986690,29836484971855874,29836476381921282,29836450612117506,29836459202052098,29836360417804290,29836437727215618,29836442022182914,29836472086953986,29836356122836994,29836386187608066,29836403367477250,29836429137281026,29836394777542658,29836454907084802,30117831100137474,30117955654189058,30117861164908546,30117826805170178,30117835395104770,30117951359221762,30117959949156354,30117925589417986,30117912704516098,30117878344777730,30117822510202882,30117929884385282,30117942769287170,30117869754843138,30117904114581506,30117934179352578,30117947064254466,30117916999483394,30399409161830400,30680884131201026,30680811116756994,30680875541266434,30680897016102914,30680892721135618,30680793936887810,30680772462051330,30962466489499649,30962307568697346,30962333343350784,31243726712864768,31243804022341632,31243731007700992,31243722418094080,31243778252210176,31243735302602752,31243812612145152,31243816907309056,31243958646145025,31525257524805634,31806741090795522,31806758270664706,31806835580076034,31806839875043330,31806749680730114,31806732500860930,31806822695174146,31806831285108738,31806844170010626,31806736795828226,31806848464977922,31806826990141442,31806814105239554,31806788335435778,31806745385762818,32088259022290944,32088151642996736,32088241837441024,32088186001489920,32088237542277120,32088374985228289,32088254725750784,32088276200914944,32088228952473600,32088250425868288,32088194596339712,32088155937832960,32088284790784000,32088267605671936,32088271900901376,32088383574835201,32088349215490049,32088203182342144,32088147351764992,32088370684755969,32088160232734720,32369622329917440,32651333529894913,32651191790862336,32651187495698432,32651153135763456,32651178905894912,32651097301647360,32651105891254272,32651110186156032,32651101596418048,32932649588424704,32932735487574016,32932645297913856,32932744077901824,32932722602934272,32932748372279296,32932726897967104,32932688243392512,32932731192672256,32932714012868608,32932739782475776,32932636703195136,33214051549839360,33214128859316224,33214283483447297,33214055844675584,33214047255068672,33214137449119744,33214103089184768,33214060139577344,33214141744283648,33495612425830400,33495522231779328,33495535116288000,33495758460223489,33495578065895424,33495616720994304,33495530821386240,33495603836026880,33495526526550016,33777001503260672,33776997208489984,33777233436999681,33777091697704960,33777005798096896,33777078812737536,33777010092998656,33777087402541056,33777053042606080,34058725585125378,34058489361924098,34340007289290754,34621589642739712,34621482268688386,34621593938165760,34621508042031104,34621598232543232,34621666957131777,34621538103656448,34621486563459072,34621585347837952,34621572463198208,34621499448688640,34621581052936192,34621563873132544,34621576758231040,34902944358400002,34902905703694338,34903017372844034,34903034552713218,34902901408727042,34902909998661634,34902987308072962,34902991603040258,34902978718138370,34903004487942146,34902897113759746,34903000192974850,34902952948334594,34902935768465410,34903025962778626,34903030257745922,34903008782909442,34903021667811330,35184436516290562,35184488055898114,35184522415636482,35184526710603778,35184543890472962,35184548185440258,35184539595505666,35184449401192450,35184535300538370,35184513825701890,35184531005571074,35184427932057600,35465924378820608,35465988803264512,35466018868297728,35465911493591040,35466001688363008,35466010277969920,35465915793735680,35466014572871680,35465997393330176,35466005983068160,35466023162675200,35465963033788416,35747433713500162,35747429418532866,35747326339317762,35747425123565570,35747459483303938,35747455188336642,35747377878925314,35747416533630978,35747446598402050,35747334929252354,35747369288990722,35747360699056130,35747412238663682,35747322044350466,35747450893369346,35747330634285058,35747442303434754,35747403648729090,36028951641784320,36028861447012352,36028955936489472,36028870042189824,36028938756685824,36028874332241920,36028964526292992,36028968821719040,36028947346751488,36028973116096512,36028912987209728,36028960231391232,36310430913200128,36310387963920384,36310349308952576,36310448092807168,36310426618494976,36310422323462144,36310336423723008,36310413733396480,36310443798429696,36310435208101888,36310439503003648,36310332134064128,36591811400433664,36591910184812544,36591905889910784,36591807110840320,36591914479714304,36591862940631040,36591897300172800,36591888710107136,36591918775140352,36591824285663232,36591901595205632,36591923069517824,36873282082439170,37154937452953601,37154705518624768,37154787123068928,37154778533265408,37154696929017856,37154701223788544,37154791418232832,37154752763133952,37154709813526528,37154933155364865,37154757058953218,37436249214812162,37436287869517826,37436322229256194,37436343704092674,37436335114158082,37436330819190786,37436339409125378,37436347999059970,37436236329910274,37436326524223490,37436313639321602,37436317940449280,37717767140212738,37717737075441666,37717659766030338,37717780025114626,37717694125768706,37717754255310850,37717741370408962,37717651176095746,37717685535834114,37717728485507074,37717655471063042,37717758550278146,37717784320081922,37717771435180034,37717775730147330,37717749960343554,37717646881128450,37717702715703298,37999130448756736,37999203463397376,37999126153920512,37999358085758977,37999169107263488,37999246411825152,37999323726413825,37999250711838720,37999212053200896,37999224936792064,37999121862688768,37999259301707776,37999216348364800,37999160512413696,37999349498314753,37999177693265920,37999242116595712,37999345195679745,37999229236674560,37999134743658496,38280678440108032,38280605425467392,38280717093306368,38280652669976576,38280833062469633,38280725688549376,38280721388535808,38280798703124481,38280635489124352,38280687029911552,38280704213385216,38280609720369152,38280820172390401,38280699913502720,38280596839399424,38280644083974144,38280691325075456,38280601130631168,38280824475090945,38280734278418432,38562131948142592,38843555378888704,38843546789281792,38843636983332864,38843641278496768,38843559673790464,38843783018577921,38843628393529344,38843602623397888,38843551084052480,39125116253896706,39125146318667778,39125150613635074,39125021764616194,39125069009256450,39125111958929410,39125129138798594,39125030354550786,39125034649518082,39125103368994818,39125077599191042,39125124843831298,39125026059583490,39125060419321858,39125154908602370,39125142023700482,39125159203569666,39125133433765890,39406501036228610,39406599820476418,39406509626163202,39406617000345602,39406625590280194,39406634180214786,39406578345639938,39406505331195906,39406535395966978,39406496741261314,39406586935574530,39406629892849664,39406543985901570,39406591230541826,39406608410411010,39406621295312898,39406604115443714,39406552575836162,39688143517908994,39688134927974402,39688036143726594,39688130633007106,39688087683334146,39688122043072514,39688049028628482,39688147812876290,39688139222941698,39688126338039810,39688044740083712,39688113453137922,39969519716859904,39969601315733504,39969609905340416,39969562661158912,39969605610438656,39969622790045696,39969597020700672,39969511120961536,39969588430635008,39969618495668224,39969614200242176,39969524006191104,40251157899444225,40251011866886144,40251029050359808,40251059115393024,40251046225510400,40250921676374016,40251024750477312,40250930262441984,40251145009364993,40250977506951168,40251016162050048,40251123540099073,40251041930280960,40250960326098944,40251149312458753,40251003277082624,40250934557343744,40250925967605760,40250968920948736,40251050525523968,40532452482940930,40532396648366082,40532443893006338,40532534087319554,40532521202417666,40532405238300674,40532525497384962,40532478252744706,40532508317515778,40532529792352258,40532486842679298,40532491137646594,40532409533267970,40532504022548482,40532499727581186,40532435303071746,40532516907450370,40532400943333378,40813927459586050,40813991884095490,40813880214945794,40813961819324418,40813983294160898,40814004768997378,40813974704226306,40813871625011202,40813910279716866,40813978999193602,40813966114291714,40813918869651458,40813953229389826,40814000474030082,40813875919978498,40813884509913090,40813996179062786,40814009063964674,41095346601459714,41095436795772930,41095350896427010,41095385256165378,41095475450478594,41095393846099970,41095402436034562,41095453975642114,41095484040413186,41095441090740226,41095359486361602,41095479745445890,41095466860544002,41095355191394306,41095428205838338,41095449680674818,41095471155511298,41095458270609410,];

pub fn make_parser() -> RuntimeParser<Construct,Construct>
{
 let mut parser1:RuntimeParser<Construct,Construct> = RuntimeParser::new(60,147);
 let mut rule = RProduction::<Construct,Construct>::new_skeleton("start");
 rule = RProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Classes(cs),Maincl(mc),)=(_vflab_1,_vflab_0,) {  Program(mc,cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_14=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_11=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  if let (Stms(thebody),Id(an),Id(cn),)=(_vflab_14,_vflab_11,_vflab_1,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Class(cl),Classes(mut cs),)=(_vflab_1,_vflab_0,) { 
  cs.push(cl); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  if let (Decs(ds),Id(sup),Id(name),)=(_vflab_4,_vflab_2,_vflab_1,) { 
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:Vec::new(),
		  methods:Vec::new()})
  }  else {parser.bad_pattern("(Decs(ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  let sup:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   sup };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Id(v),Id(t),)=(_vflab_1,_vflab_0,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(e),Id(v),Id(t),)=(_vflab_3,_vflab_1,_vflab_0,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_7=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_vflab_7,_vflab_4,_vflab_2,_vflab_1,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let v:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(v)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let m:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(m)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_2,_vflab_1,_vflab_0,) { 
  frs.push(VarDec{dname:a,dtype:ty,initval:Nothing});
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  let mut _vflab_3=parser.stack.pop().unwrap().value;   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_3,_vflab_2,_vflab_1,) { 
  frs.push(VarDec{dname:a,dtype:ty,initval:Nothing});
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  let c:Construct=parser.stack.pop().unwrap().value;   c };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Stm(s),Stms(mut sv),)=(_vflab_1,_vflab_0,) {  sv.push(parser.lb(s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  if let (Stms(sv),)=(_vflab_1,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_6=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  if let (Stm(b),Stm(a),Exp(c),)=(_vflab_6,_vflab_4,_vflab_2,) { 
  Stm(Ifstat(parser.lb(c), parser.lb(a), parser.lb(b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  if let (Stm(a),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Ifstat(parser.lb(c),parser.lb(a),parser.lb(Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  if let (Stm(s),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Whilest(parser.lb(c),parser.lb(s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(e),Id(v),)=(_vflab_2,_vflab_0,) {  Stm(Assignst(v,parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_5=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(e),Exp(i),Exp(v),)=(_vflab_5,_vflab_2,_vflab_0,) { 
  Stm(ArAssignst(parser.lb(v),parser.lb(i),parser.lb(e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exps(args),Id(m),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) { 
  Methodcall(parser.lb(obj),m,args)
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  if let (Exp(e),)=(_vflab_1,) {  Stm(Returnst(parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let v:Construct=parser.stack.pop().unwrap().value;   return v; };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  if let (Exp(a),)=(_vflab_1,) {  Exp(Notexp(parser.lb(a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("<",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("%",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("==",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exp(i),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("[]",parser.lb(a),parser.lb(i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Id(field),Exp(obj),)=(_vflab_2,_vflab_0,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exps(args),Id(f),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) {  Methodcall(parser.lb(obj),f,args) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let i:Construct=parser.stack.pop().unwrap().value;   i };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let s:Construct=parser.stack.pop().unwrap().value;   s };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let b:Construct=parser.stack.pop().unwrap().value;   b };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Id(x),)=(_vflab_0,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  if let (Exp(s),)=(_vflab_3,) {  Exp(Newarray(parser.lb(s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  if let (Id(x),)=(_vflab_1,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let e:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   e };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  if let (Exps(mut er),Exp(e),)=(_vflab_1,_vflab_0,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  if let (Exps(mut er),Exp(e),)=(_vflab_2,_vflab_1,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ parser.stack.pop();  return <Construct>::default();};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras(parser:&mut RuntimeParser<Construct,Construct>)
{
}//end of load_extras: don't change this line as it affects augmentation
