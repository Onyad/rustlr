//Parser generated by rustlr

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{RuntimeParser,RProduction,Stateaction,decode_action};
use rustlr::LBox;
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [171798888449,176093790209,17179934720,281474976972800,563134637342721,563194766688258,562967133421570,844669743267843,1125998691483648,1407619696689154,1407555272638465,1407392063946752,1688871335690240,1970342017040386,1970569650307074,2251799814340608,2533300560920576,2814792717565952,2814848551747586,2814938746519553,3096254809505792,3377699721510912,3659273482534912,3940684034801664,4222223435235330,4503715592142850,4503711297175554,4503801492013057,4503702707240962,4503621102862338,4503638282731522,4503599628025858,4503629692796930,4785130439901184,5066549582692352,5066665546678272,5066579647201280,5066742855696385,5066588237201408,5066747150729217,5066571057135616,5066652661579776,5066764330467329,5066661251776512,5348063214174208,5629499536244736,5911013166350338,5911090475761666,5911077590859778,5910974511644674,5911004576415746,5911086180794370,5910995986481154,6192449488420866,6192488143126530,6192552567635970,6192479553191938,6192470963257346,6192561157570562,6192565452537858,6474036135329792,6473954530754560,6474040430231552,6473924466245632,6473963120754688,6474139214807041,6755416621187074,6755644254453762,7036874419142658,7318349395722242,7599824372367362,7881363774570496,7881299349209090,8162774326050818,8444313728057344,8725861719343104,8725797294768128,9007199257165824,9288742953418752,9570217930194944,9851735854481410,9851654250102786,9851748739383298,9851740149448706,9851744444416002,9851632775266306,9851722969579522,9851753034350594,9851662840037378,9851637070233602,9851680019906562,9851645660168194,9851718674612226,9851727264546818,9851671429971970,9851624185331714,9851628480299010,9851714379644930,9851705789710338,10133107754663936,10133112049434624,10133099164663808,10133326797537281,10133103459303424,10133193653682176,10133189358518272,10133180768976896,10133154999042048,10414629976080384,10696049116119042,10977524094992384,11259110740918272,11258999071834112,11540581422989312,11540620078022656,11540641552662528,11540615782596608,11540624372727808,11540547063709696,11540607193186304,11540628667891712,11540538473840640,11540637257498624,11540632962793472,11540551358021632,11822034924273666,11822099348783106,11822082168913922,11822103643750402,11822022039371778,11822116528652290,11822056399110146,11822107938717698,11822095053815810,11822112233684994,11822013449437186,11822009154469890,11822090758848514,11822026334339074,11822017744404482,12103501311311874,12103574325755906,12103582915690498,12103509901246466,12103565735821314,12103557145886722,12103591505625090,12103488426409986,12103492721377282,12103578620723202,12103484131442690,12103587210657794,12103570030788610,12103497016344578,12103531376082946,12384903272988672,12385126612795393,12384898978349056,12384980582662144,12384993467367424,12384989172203520,12384907568349184,12384911863119872,12384954812727296,12666451264602114,12666442674667522,12666537163948034,12666507099176962,12666528574013442,12666434084732930,12666446969634818,12666541458915330,12666515689111554,12666519984078850,12666481329373186,12666459854536706,12666438379700226,12666532868980738,12666524279046146,12947853226409984,12948076566282241,12947848931770368,12947861816541184,12947904766148608,12947857521770496,12947943420788736,12947930536083456,12947939125624832,13229392628154370,13229457052663810,13229431282860034,13229469937565698,13229474232532994,13229478527500290,13229491412402178,13229401218088962,13229487117434882,13229409808023554,13229465642598402,13229388333187074,13229396923121666,13229482822467586,13229384038219778,13510966388981762,13510871899701250,13510876194668546,13510906259439618,13510859014799362,13510962094014466,13510953504079874,13510884784603138,13510863309766658,13510867604733954,13510932029243394,13510940619177986,13510957799047170,13510949209112578,13510944914145282,13792333989216258,13792273860722688,13792303925231616,13792480021643265,13792385529806848,13792488611643393,13792312515231744,13792389824708608,14073808969596928,14355288241340416,14636754628182016,14918173770383360,15199661630226432,15199653040095232,15199738939310080,15199648745455616,15199743234473984,15199657335455744,15199704579833856,15199730349768704,15199876380426241,15481218211184640,15481123722166272,15481132312166400,15481351357202433,15481179556544512,15481205326479360,15481128016805888,15481213916020736,15481136606937088,15762611583647744,15762688892731392,15762693187895296,15762654533255168,15762826333978625,15762602993516544,15762607288877056,15762680303190016,15762598698876928,16044073675587584,16044129509965824,16044077970227200,16044082265587712,16044163869442048,16044168164605952,16044086560358400,16044155279900672,16044301310754817,16325604486676480,16325557242298368,16325643141316608,16325552946937856,16325776287531009,16325638846152704,16325561537069056,16325630256611328,16325548652298240,16607027923648512,16607251264307201,16607118118027264,16607105233321984,16607036513779712,16607023629008896,16607079463387136,16607113822863360,16607032219009024,16888554440097792,16888726241083393,16888511490490368,16888502900359168,16888588799574016,16888580210032640,16888507195719680,16888593094737920,16888498605719552,17169982172430336,17170201217859585,17170029416808448,17169977877069824,17170068071448576,17169973582430208,17169986467201024,17170055186743296,17170063776284672,17451457149140992,17451461443911680,17451452853780480,17451676194635777,17451448559140864,17451504393519104,17451530163453952,17451543048159232,17451538752995328,17732970777935874,17732927828262914,17733022317543426,17733005137674242,17733048087347202,17732936418197506,17733026612510722,17733052382314498,17732953598066690,17732932123230210,17733043792379906,17732923533295618,17733018022576130,17732962188001282,17733035202445314,17733013727608834,17732945008132098,17733039497412610,17732979367870466,18014454346940416,18014488706416640,18014398512562176,18014411397332992,18014402807201792,18014407102562304,18014493001580544,18014626148122625,18014480116875264,18296015223652352,18296032403849216,18296040993718272,18296019519078400,18295980864045056,18296036698554368,18295950799077376,18296023813783552,18295937914896384,18295933621174272,18296028108947456,18296006634242048,18577425775788032,18577434364870658,18577498790494208,18577408595066882,18577490200363008,18577494495789056,18577481609510914,18577511674281986,18577412890034178,18577515970428928,18577503085658112,18577421479968770,18577507379314690,18577455839707138,18577417185001474,18858883574661120,19140298421895168,19421872182919168,19703261257596928,19703476008714241,19703329977139200,19703252667465728,19703338566680576,19703304207204352,19703342861844480,19703256962826240,19703248372826112,19984783481765888,20266254163574784,20266348649971714,20266340060037122,20266361534873602,20266365829840898,20266344355004418,20266267045593090,20266271340560386,20266357239906306,20266284225462274,20266305700298754,20266352944939010,20266258455658498,20266275635527682,20266262750625794,20266331470102530,20547750612762624,20547815036092418,20547840807403520,20547832215961602,20547737726681090,20547746316615682,20547836510928898,20547806446157826,20547733431713794,20547780676354050,20547823627468800,20547759201517570,20547742021648386,20547819332763648,20547827922632704,20829281423065090,20829290014048256,20829298604179456,20829216998555650,20829307192868866,20829315784114176,20829302899343360,20829294309474304,20829212703588354,20829225589473280,20829234178424834,20829208408621058,20829221293522946,20829255653261314,20829311487836162,21110696270299138,21110730630037506,21110769286184960,21110756399841282,21110790760824832,21110687680364546,21110782169645058,21110700566183936,21110773580890112,21110691975331842,21110683385397250,21110709155201026,21110764990758912,21110777876054016,21110786465660928,21392166951714818,21392205606420482,21392158361780226,21392175542894592,21392261440995330,21392265737535488,21392252852764672,21392239966158850,21392231376224258,21392257146028034,21392184131584002,21392248556093442,21392171246682114,21392244261126146,21392162656747522,21673723533328386,21673650519605248,21673646223917058,21673732123262978,21673641928949762,21673719238361090,21673714943393794,21673633339015170,21673659108818946,21673637633982466,21673706353459202,21673727829475328,21673680583655426,21673740713197570,21673736418230274,21955211395792896,21955112610627586,21955215690956800,21955181331480576,21955198511022080,21955202806185984,21955116905594882,21955121200562178,21955134085464066,21955108315660290,21955125496315904,21955155561283584,21955189920890880,21955207099908098,21955194216316928,22236587587010562,22236656306487298,22236677781323778,22236583292043266,22236609061847042,22236673486356482,22236690666225666,22236591881977858,22236669191389186,22236686371258370,22236664896421890,22236630536683522,22236600473026560,22236596176945154,22236682076291074,22518144168165378,22518139873198082,22518105513459714,22518157053067266,22518165644378112,22518131283263490,22518084038623234,22518062563786754,22518075449737216,22518161348034562,22518148464443392,22518152759607296,22518066858754050,22518071153721346,22518058268819458,22799632030171138,22799550426447872,22799619146448896,22799533245923330,22799546130825218,22799640621088768,22799636325924864,22799580491415552,22799623441154048,22799537540890626,22799559015727106,22799606260367362,22799541835857922,22799627736317952,22799614851022848,23081025403158528,23081012518977536,23081115597799424,23081016815648768,23081098417864704,23081111302635520,23081102713028608,23081107007930368,23081081238323200,23081089827733504,23081094123159552,23081055468126208,23362508969869314,23362577689346050,23362573394378754,23362569099411458,23362581984313346,23362590574247938,23362483200065538,23362556214509570,23362491790000130,23362487495032834,23362586279280642,23362530444705794,23362500379934722,23362564804444162,23362496084967426,23643996833906688,23925458925780992,23925583479898113,23925433150930946,24206895243264002,24207071341576193,24206968257708034,24206951077838850,24206903833198594,24206976847642626,24206847998623746,24206878063394818,24206959667773442,24206886653329410,24206860883525634,24206852293591042,24206963962740738,24206856588558338,24206942487904258,24206938192936962,24206929603002370,24206946782871554,24488391699529728,24488430351679488,24488486186188800,24488490481352704,24488456121876480,24488464711286784,24488400286711808,24488387402530816,24488473301417984,24488477596581888,24488469006712832,24488481891483648,24769939687931906,24769883853357058,24769952572833794,24769858083553282,24769948277866498,24769866673487874,24769870968455170,24769961162768386,24769931097997314,24769905328193538,24769965457735682,24769875263422466,24769943982899202,24769862378520578,24769956867801090,25051328764706816,25051504861839361,25051272930328576,25051500566806529,25051363124183040,25051285815099392,25051333060395010,25051281520328704,25051277224968192,25051354534641664,25051367419346944,25332898230697986,25332812331352066,25332906820632578,25332820921286658,25332893935730690,25332825216253954,25332911115599874,25332915410567170,25332889640763394,25332816626319362,25332855281025026,25332833806188546,25332902525665282,25332808036384770,25332881050828802,25614270126817282,25614317371457538,25614278716751874,25614222882177026,25614338846294018,25614261536882690,25614313076490242,25614446225391617,25614351731195906,25614325961392130,25614227177144322,25614343141261314,25614252946948098,25614334551326722,25614235767078914,25614321666424834,25614304486555650,25614231472111618,25895809528365056,25895912612233217,25895697859280896,25895813823266816,25895736513789952,25895727923789824,26177232964550658,26458703648260096,26458742302900224,26458750897094656,26458776666832896,26458746601865216,26458768076570624,26458677877211136,26458875450621953,26458763776688128,26458660698652672,26458841091276801,26458738007736320,26458656403881984,26458686467211264,26458652108521472,26458862560477185,26458695062061056,26458759481786368,26458647817682944,26458729418194944,26458866860883969,26740277409742850,26740268819808258,26740255934906370,26740187215429634,26740273114775554,26740182920462338,26740191510396930,26740285999677442,26740208690266114,26740230165102594,26740195805364226,26740200100331522,26740281704710146,26740264524840962,26740290294644738,27021657897500674,27021743797108736,27021765271748608,27021683670712320,27021833994633217,27021662192926720,27021739501682688,27021752386977792,27021705142075392,27021675077107712,27021730912272384,27021760976584704,27021748091813888,27021756681879552,27303132877750272,27584659388628992,27584676573675520,27584650804199424,27584667983413248,27584740998119425,27584637914578944,27584762467319809,27584560605495296,27584594968903680,27584766767726593,27584556310724608,27584663683530752,27584552015364096,27584646508707840,27584775357464577,27584629325037568,27584577784053760,27584603555102720,27584547724525568,27584586374053888,27584642209742848,27866022701760512,28147605048918016,28147630819115008,28147562103111680,28147665178591232,28147652293820416,28147647998656512,28147639408525312,28147656588722176,28147660883427328,28147574987948032,28147643703951360,28428985535627264,28429067139874816,28429200288645121,28429028485234688,28428981240856576,28428972650856448,28428976945496064,28429062844710912,28429054255169536,28710503466729472,28992051451789314,28992017092050946,28991978437345282,28991926897737730,28991952667541506,28992042861854722,28992021387018242,28992025681985538,28991969847410690,28992004207149058,28991961257476098,28992038566887426,28991931192705026,28991935487672322,28991922602770434,28992012797083650,28992034271920130,29273397579415554,29273453413990402,29273509248565250,29273479183794178,29273410464317442,29273444824055810,29273496363663362,29273513543532546,29273620923940865,29273427644186626,29273401874382850,29273500658630658,29273487773728770,29273492068696066,29273517838499842,29273526428434434,29273406169350146,29273436234121218,29554872556060674,29554949867307010,29555014291816450,29554979932078082,29555027176718338,29555022881751042,29555005701881858,29555031471685634,29555018586783746,29555035766652930,29555010001371136,29555040061620226,29554936982405122,29836429137870850,29836467792576514,29836356123426818,29836459202641922,29836394778132482,29836351828459522,29836476382511106,29836347533492226,29836386188197890,29836446317740034,29836377598263298,29836463497609218,29836472087543810,29836450612707330,29836442022772738,29836403368067074,29836360418394114,29836437727805442,30117878350479360,30399400571895808,30680781054541824,30681000102723585,30680866953560064,30680828298919936,30680854068854784,30680785349312512,30680862658396160,30680772464541696,30680776759181312,30962307571384322,31243829792079874,31243799727308802,31243782547439618,31243889921622018,31243808317243394,31243881331687426,31243855561883650,31243872741752834,31243795432341506,31243885626654722,31243877036720130,31243864151818242,31243868446785538,31243786842406914,31243791137374210,31525236046888962,31525313356300290,31525309061332994,31525300471398402,31525197392183298,31525227456954370,31525218867019778,31806882829762561,31806758273679360,31806732498829314,32088147353141248,32369712518660096,32369635209576448,32369849963184129,32369622324805632,32369630914805760,32369678159183872,32369716813824000,32369626619445248,32369703929118720,32651260510797824,32651247626027008,32651161727139840,32651256216092672,32651239035895808,32651230446485504,32651174611320832,32651243331321856,32651264805961728,32651170321137664,32651251921190912,32651204676288512,32932662472081408,32932572278226944,32932653882540032,32932576572866560,32932628112605184,32932580868227072,32932666767245312,32932799916736513,32932585162997760,33214055844937728,33214128859250688,33214163217743872,33214150339461120,33214262001532929,33214094503116800,33214176107888640,33214077318266880,33214051549577216,33214137448792064,33214274891677697,33214266301939713,33214141743955968,33214103089315840,33214146042920960,33214240532332545,33214167517626368,33214060139708416,33214158922842112,33214085908267008,33214047258738688,33495616720666624,33495612425502720,33495603835961344,33495526526287872,33495535116419072,33495522231648256,33495530821648384,33495578066026496,33495749870288897,33777224847065089,33777001502998528,33777091697377280,33777010093129728,33777005798359040,33777087402213376,33777078812672000,33776997208358912,33777053042737152,34058489361924098,34058716995190786,34340088896159744,34340080306749440,34340114666225664,34340007291977730,34340183390486529,34340011587403776,34340093191585792,34340106076356608,34340110371061760,34340097486290944,34340024471584768,34340054536552448,34340101781454848,34340033065189376,34621482266001410,34903004489252866,34903038848991234,34902961539579906,34903056028860418,34903030259056642,34903043143958530,34903047438925826,34902952955346944,34902974424481794,34903060323827714,34903064618795010,34903051733893122,35184539596357632,35184436517535744,35184513826291712,35184479466684416,35184526711586816,35184535301193728,35184440817025024,35184531006488576,35184522416422912,35184518121717760,35184449401716736,35184505236881408,35465847067639810,35465950146854914,35465963031756802,35465937261953026,35465885722345474,35465851362607106,35465902902214658,35465859952541698,35465945851887618,35465928672018434,35465941556920322,35465967326724098,35465958736789506,35465971621691394,35465855657574402,35465894312280066,35465975916658690,35465877132410882,35747455190302720,35747472369844224,35747429420105728,35747476665008128,35747480959909888,35747386470957056,35747382180577280,35747399355138048,35747485254615040,35747468075139072,35747489549778944,35747463779713024,36028925869621250,36028917279686658,36028912984719362,36028797020602370,36028805610536962,36028887214915586,36028835675308034,36028809905504258,36028852855177218,36028844265242626,36028827085373442,36028895804850178,36028801315569666,36028921574653954,36028891509882882,36028878624980994,36028900099817474,36028908689752066,36310345018966016,36310349308559360,36310435208036352,36310439503200256,36310379373527040,36310422323265536,36310426618429440,36310413733134336,36310336424378368,36310418028560384,36310430913331200,36310405143724032,36591824285270016,36591897299976192,36591914479910912,36591854350237696,36591807110840320,36591888709844992,36591910184747008,36591880120434688,36591905890041856,36591893005271040,36591811401089024,36591901595140096,36873282082439170,37154701223526400,37154924565364737,37154778533199872,37154928863019009,37154709813657600,37154791417905152,37154757058953218,37154705518886912,37154752763265024,37154787122741248,37154696928886784,37436236329910274,37436322229256194,37436330819190786,37436305049387010,37436326524223490,37436279279583234,37436335114158082,37436339409125378,37436249214812162,37436317934288898,37436309350514688,37436313639321602,37717728486621184,37717694130487296,37717659767078912,37717646886109184,37717655472308224,37717741371326464,37717874519048193,37717676945637376,37717737076162560,37717685535637504,37717758550212608,37717861628903425,37717775735259136,37717745670291456,37717762845114368,37717840159703041,37717865931669505,37717702716686336,37717651176947712,37717767144996864,37999224937054210,37999130447773698,37999212052152322,37999237821956098,37999177692413954,37999121857839106,37999246411890690,37999126152806402,37999220642086914,37999250706857986,37999203462217730,37999169102479362,37999216347119618,37999160512544770,37999233526988802,37999134742740994,37999242116923394,37999151922610178,38280605425729536,38280790113124353,38280708503633920,38280626899058688,38280712798535680,38280596839530496,38280678440042496,38280695623712768,38280815885156353,38280609720500224,38280644083908608,38280687029583872,38280811582324737,38280725688680448,38280824472469505,38280691324747776,38280652670107648,38280601130369024,38280717098418176,38280635489058816,38562131948142592,38843602623528960,38843559673921536,38843641278169088,38843555379150848,38843628393463808,38843774428643329,38843551083790336,38843546789150720,38843636983005184,39125133433700354,39125069009190914,39125120548798466,39125146326204416,39125111958863874,39125103368929282,39125150613569538,39125051829321730,39125124843765762,39125116253831170,39125034649452546,39125077599125506,39125142023634946,39125060419256322,39125030354485250,39125137728667650,39125021764550658,39125026059517954,39406599820541954,39406526806097922,39406586935640066,39406509626228738,39406612705443842,39406543985967106,39406621295378434,39406505331261442,39406535396032514,39406578345705474,39406617000411138,39406552575901698,39406625590345730,39406501036294146,39406496741326850,39406595525574658,39406591230607362,39406608410476546,39688117748105218,39688104863203330,39688130633007106,39688049028628482,39688126338039810,39688113453137922,39688122043072514,39688044740083712,39688036143726594,39688134927974402,39688079093399554,39688139222941698,39969519716859904,39969601315667968,39969524005797888,39969579840962560,39969609905274880,39969511121616896,39969592725798912,39969588430372864,39969614200438784,39969554070765568,39969605610569728,39969597020504064,40250968920883200,40251114950098945,40250930262704128,40251003277017088,40250977507082240,40251016161722368,40251020460687360,40250925967343616,40250951736033280,40251136419299329,40251149309444097,40251050525655040,40251041935392768,40251033340608512,40250921676505088,40250934557474816,40251011866558464,40250960326033408,40251037635510272,40251140722524161,40532495432613890,40532409533267970,40532512612483074,40532508317515778,40532443893006338,40532435303071746,40532499727581186,40532491137646594,40532521202417666,40532426713137154,40532396648366082,40532516907450370,40532405238300674,40532525497384962,40532452482940930,40532486842679298,40532400943333378,40532478252744706,40813970409259010,40813974704226306,40813983294160898,40813966114291714,40813871625011202,40814000474030082,40813961819324418,40813927459586050,40813987589128194,40813910279716866,40813901689782274,40813880214945794,40813953229389826,40813918869651458,40813884509913090,40813875919978498,40813996179062786,40813991884095490,41095350896427010,41095466860544002,41095402436034562,41095458270609410,41095393846099970,41095385256165378,41095355191394306,41095462565576706,41095475450478594,41095346601459714,41095376666230786,41095449680674818,41095471155511298,41095441090740226,41095436795772930,41095445385707522,41095428205838338,41095359486361602,];

pub fn make_parser() -> RuntimeParser<Construct,Construct>
{
 let mut parser1:RuntimeParser<Construct,Construct> = RuntimeParser::new(60,147);
 let mut rule = RProduction::<Construct,Construct>::new_skeleton("start");
 rule = RProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Classes(cs),Maincl(mc),)=(_vflab_1,_vflab_0,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_14=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_11=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(thebody),Id(an),Id(cn),)=(_vflab_14,_vflab_11,_vflab_1,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Class(cl),Classes(mut cs),)=(_vflab_1,_vflab_0,) { 
  cs.push(parser.lb(cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Decs(mut ds),Id(sup),Id(name),)=(_vflab_4,_vflab_2,_vflab_1,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  let sup:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   sup };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(v),Id(t),)=(_vflab_1,_vflab_0,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Id(v),Id(t),)=(_vflab_3,_vflab_1,_vflab_0,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_7=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_vflab_7,_vflab_4,_vflab_2,_vflab_1,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let v:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(v)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let m:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(m)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_2,_vflab_1,_vflab_0,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  let mut _vflab_3=parser.stack.pop().unwrap().value;   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_3,_vflab_2,_vflab_1,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  let c:Construct=parser.stack.pop().unwrap().value;   c };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Stm(s),Stms(mut sv),)=(_vflab_1,_vflab_0,) {  sv.push(parser.lb(s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(sv),)=(_vflab_1,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_6=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(b),Stm(a),Exp(c),)=(_vflab_6,_vflab_4,_vflab_2,) { 
  Stm(Ifstat(parser.lb(c), parser.lb(a), parser.lb(b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(a),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Ifstat(parser.lb(c),parser.lb(a),parser.lb(Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(s),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Whilest(parser.lb(c),parser.lb(s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Id(v),)=(_vflab_2,_vflab_0,) {  Stm(Assignst(v,parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_5=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Exp(i),Exp(v),)=(_vflab_5,_vflab_2,_vflab_0,) { 
  Stm(ArAssignst(parser.lb(v),parser.lb(i),parser.lb(e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(args),Id(m),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exp(e),)=(_vflab_1,) {  Stm(Returnst(parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Vdec(v),)=(_vflab_0,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exp(a),)=(_vflab_1,) {  Exp(Notexp(parser.lb(a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("<",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("%",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("==",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(i),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("[]",parser.lb(a),parser.lb(i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(field),Exp(obj),)=(_vflab_2,_vflab_0,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(args),Id(f),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let i:Construct=parser.stack.pop().unwrap().value;   i };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let s:Construct=parser.stack.pop().unwrap().value;   s };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let b:Construct=parser.stack.pop().unwrap().value;   b };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(x),)=(_vflab_0,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  
  if let (Exp(s),)=(_vflab_3,) {  Exp(Newarray(parser.lb(s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Id(x),)=(_vflab_1,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let e:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   e };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(mut er),Exp(e),)=(_vflab_1,_vflab_0,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exps(mut er),Exp(e),)=(_vflab_2,_vflab_1,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ parser.stack.pop();  return <Construct>::default();};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras(parser:&mut RuntimeParser<Construct,Construct>)
{
}//end of load_extras: don't change this line as it affects augmentation
