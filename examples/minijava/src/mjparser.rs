//Parser generated by rustlr

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{RuntimeParser,RProduction,Stateaction,decode_action};
use rustlr::LBox;
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [17179934720,176093855745,171798822913,281474976972800,563194766557187,844442110132226,844609614053377,844669743398914,1125998691483648,1407619696689154,1407555272704001,1407392063881216,1688871335690240,1970324837629952,2251816993751042,2252044627017730,2533300560920576,2814792717565952,2814848551747586,2814938746519553,3096254809505792,3377699721510912,3659273482534912,3940684034801664,4222223435235330,4503621102862338,4503715592142850,4503711297175554,4503702707240962,4503638282731522,4503599628025858,4503801492013057,4503629692796930,4785130439901184,5066549582495744,5066764330532865,5066652661907456,5066665546219520,5066661251448832,5066747151056897,5066742855892993,5066579647201280,5066571057070080,5066588237332480,5348063214174208,5629499535392770,5910974512955392,6192565453062144,6192488144175104,6192664238096385,6192449489338368,6192479554043904,6192561158291456,6473924465655810,6473988891017216,6755399441776642,6755429506547714,6755515405893634,6755438096482306,6755420916613122,6755511110926338,6755502520991746,7036874419142658,7318349395918850,7599936041123842,7599845846810626,7599927451189250,7599854436745218,7599940336091138,7599863026679810,7599824371974146,7881299349143554,8163019138007042,8162791504740354,8444313728057344,8725861719343104,8725797294768128,9007199257165824,9288742953418752,9570217930194944,9851645660168194,9851654250102786,9851671429971970,9851718674612226,9851748739383298,9851628480299010,9851744444416002,9851637070233602,9851632775266306,9851722969579522,9851753034350594,9851680019906562,9851662840037378,9851705789710338,9851735854481410,9851714379644930,9851727264546818,9851740149448706,9851624185331714,10133189359042560,10133180768780288,10133103459631104,10133099164598272,10133112049172480,10133107754401792,10133154998910976,10133326797471745,10133193653813248,10414629976080384,10696049116119042,10977524094992384,11259166576082944,11259106446016512,11259063496605696,11259140806148096,11259076381442048,11259132216475648,11259072086867968,11259153690591232,11259157985951744,11259149395755008,11259162280722432,11259145101180928,11540551357759490,11540542767824898,11540607192334338,11540628667170818,11540620077236226,11540641552072706,11540581422530562,11540637257105410,11540559947694082,11540624372203522,11540547062792194,11540615782268930,11540632962138114,11540538472857602,11540534177890306,11822030629044224,11822039219306496,11822043514077184,11821957614665728,11822176659243009,11821953319895040,11822004859174912,11821949024862208,11821961909436416,12103651636019201,12103432591376384,12103479835885568,12103436886147072,12103505605754880,12103518490787840,12103514196017152,12103428296605696,12103424001572864,12385066482139138,12384967697891330,12384959107956738,12385062187171842,12385006352596994,12384971992858626,12384984877760514,12384976287825922,12385032122400770,12385040712335362,12385053597237250,12385057892204546,12385049302269954,12384963402924034,12385045007302658,12666507099308034,12666537164079106,12666434084864002,12666532869111810,12666524279177218,12666541459046402,12666446969765890,12666481329504258,12666519984209922,12666442674798594,12666438379831298,12666459854667778,12666451264733186,12666528574144514,12666515689242626,12947990665887746,12948012140724226,12947917651443714,12948003550789634,12947956306149378,12948016435691522,12947999255822338,12947982075953154,12947926241378306,12948007845756930,12947913356476418,12947994960855042,12947934831312898,12947909061509122,12947921946411010,13229457052467202,13229388332990466,13229491412205570,13229409807826946,13229478527303682,13229392627957762,13229482822270978,13229474232336386,13229401217892354,13229396922925058,13229431282663426,13229469937369090,13229465642401794,13229384038023170,13229487117238274,13510798886371328,13510910555586560,13792303925231616,13792312515362816,13792273860526080,13792333989216258,13792385529479168,13792389824249856,13792488611643393,13792480021643265,14073808969596928,14355232405061632,14355314009702400,14355279649570816,14355228110290944,14355236699832320,14355451450097665,14355318304473088,14355305419440128,14355223815258112,14636707381772288,14636780396150784,14636711676542976,14636788986413056,14636793281183744,14636698791968768,14636926426873857,14636754626281472,14636703087001600,14918263963123712,14918178063712256,14918173768679424,14918186653253632,14918229602992128,14918182358482944,14918401403650049,14918255372861440,14918268257894400,15199653040422912,15199730349572096,15199743234605056,15199704579702784,15199661629964288,15199876380426241,15199648745390080,15199657335193600,15199738939834368,15481123723935744,15762693188026368,15762602993844224,15762654533124096,15762607288614912,15762826333978625,15762611583385600,15762598698811392,15762688893255680,15762680302993408,16044082265325568,16044086560096256,16044129509834752,16044168164737024,16044077970554880,16044301310754817,16044155279704064,16044073675522048,16044163869966336,16325561536806912,16325557242036224,16325604486545408,16325630256414720,16325552947265536,16325638846676992,16325548652232704,16325776287531009,16325643141447680,16607113823387648,16607023628943360,16607079463256064,16607027923976192,16607118118158336,16607105233125376,16607036513517568,16607251264307201,16607032218746880,16888554439966720,16888580209836032,16888502900686848,16888726241083393,16888511490228224,16888588800098304,16888507195457536,16888498605654016,16888593094868992,17170085249024002,17170055184252930,17169995054710786,17170020824514562,17169977874841602,17170003644645378,17170063774187522,17170093838958594,17170072364122114,17170029414449154,17169986464776194,17170102428893186,17169973579874306,17170098133925890,17170068069154818,17170076659089410,17169982169808898,17170089543991298,17170012234579970,17451457148878848,17451452854108160,17451448559075328,17451504393388032,17451538753519616,17451676194570241,17451543048290304,17451530163257344,17451461443649536,17732987960950784,17733069565526016,17732983667621888,17733086745067520,17733082450296832,17733000845787136,17733073860100096,17733030910361600,17733056680820736,17733065270493184,17733091040428032,17733078154936320,18014544542236672,18014458641645570,18014505886285826,18014484411449346,18014475822497792,18014462936612866,18014561720860674,18014553131646976,18014557425893378,18014531656089602,18014548836810752,18014467231580162,18014566017138688,18014540247203840,18014471526547458,18295929326141440,18577412892852224,18858883574661120,19140298421895168,19421872182919168,19703394400993282,19703317091581954,19703312796614658,19703321386549250,19703355746287618,19703402990927874,19703334271451138,19703398695960578,19703415875829762,19703325682761728,19703411580862466,19703407285895170,19703381516091394,19703308501647362,19703390106025986,19984873673785344,19984865084178432,19984882262802434,19984792068489218,19984890854113280,19984877968621568,19984856492998658,19984783478554626,19984830723194882,19984787773521922,19984796363456514,19984886558752768,19984869379211264,19984809248358402,19984800659472384,20266331469381634,20266262749904898,20266357239185410,20266344354283522,20266284224741378,20266258454937602,20266305699577858,20266361534152706,20266267044872194,20266271339839490,20266348649250818,20266352945332224,20266275636183040,20266365830823936,20266340059316226,20547840807534592,20547836511125506,20547806446354434,20547746316812290,20547733431910402,20547819332632576,20547742021844994,20547759201714178,20547827922042880,20547750612893696,20547815037599744,20547823627206656,20547832216158210,20547737726877698,20547780676550658,20829255653720066,20829208409079810,20829290013458434,20829281423523842,20829212704047106,20829225588948994,20829216999014402,20829302898360322,20829315783262210,20829294308425730,20829298603393026,20829204116865024,20829307193327618,20829221293981698,20829311488294914,20829234178883586,21110786465595392,21110730630889472,21110700566315008,21110782170824704,21110764991021056,21110777875464192,21110773580627968,21110790760955904,21110691978543104,21110769286053888,21110687681478656,21110756401348608,21392244262764544,21392231378059264,21392171247140866,21392162657206274,21392175543025664,21392205607600128,21392239967731712,21392248557338624,21392261442306048,21392252852174848,21392257146486786,21392265737666560,21392184132042754,21392166952173570,21392158362238978,21673706353000450,21673637633523714,21673633338556418,21673740714377216,21673736417771522,21673723534049280,21673732122804226,21673714942935042,21673727828885504,21673680583196674,21673719239475200,21673646223458306,21673650519736320,21673641928491010,21673659108360194,21955194214744066,21955155560038402,21955207099645954,21955198510759936,21955181329842178,21955134085201922,21955215691087872,21955112610365442,21955211394613250,21955116905332738,21955125496446976,21955189919776770,21955121200300034,21955108315398146,21955202805596160,22236677782306816,22236686371651586,22236673486749698,22236583292436482,22236656306880514,22236690666618882,22236600473157632,22236669191782402,22236664896815106,22236682076684290,22236596177338370,22236609062240258,22236587587403778,22236630537076738,22236591882371074,22518058269212674,22518084039016450,22518139874574336,22518131283656706,22518165644509184,22518144169607168,22518148464181248,22518071154114562,22518105514442752,22518062564179970,22518161349148672,22518066859147266,22518157053460482,22518152759017472,22518075449868288,22799533246644226,22799559016448002,22799640620826626,22799550426513410,22799614851022850,22799580491284482,22799636325859330,22799619145990146,22799541836578818,22799632030892034,22799546131546114,22799537541611522,22799606261088258,22799623440957442,22799627735924738,23081008225648640,23362504674181120,23362431659802624,23362513264443392,23362650706149377,23362478904311808,23362423069999104,23362435954573312,23362427365031936,23362517559214080,23643996833906688,23925583479898113,23925458925780992,23925433150930946,24206903833198594,24206938192936962,24206963962740738,24206976847642626,24206895243264002,24206959667773442,24206968257708034,24206886653329410,24207071341576193,24206847998623746,24206878063394818,24206929603002370,24206860883525634,24206852293591042,24206942487904258,24206856588558338,24206951077838850,24206946782871554,24488413171286016,24488383106973698,24488550613319681,24488327271874560,24488335861415936,24488417466056704,24488404581023744,24488331566645248,24488322976841728,24488378811154432,24488554908352513,24769956867211266,24769862377930754,24769883852767234,24769943982309378,24769875262832642,24769858082963458,24769870967865346,24769931097407490,24769939687342082,24769905327603714,24769965457145858,24769961162178562,24769948277276674,24769866672898050,24769952572243970,25051427549544450,25051423254577154,25051380304904194,25051358830067714,25051418959609858,25051440434446338,25051414664642562,25051350240133122,25051431844511746,25051337355231234,25051406074707970,25051436139479042,25051345945165826,25051341650198530,25051333060263938,25332812332138496,25332881052008448,25332889641680896,25332816629792768,25332915411615744,25332855281549312,25332902526124032,25332906821484544,25332911116255232,25332825216974848,25332893936713728,25332898231287808,25614252946948098,25614321666424834,25614261536882690,25614351731195906,25614231472111618,25614338846294018,25614317371457538,25614446225391617,25614270126817282,25614304486555650,25614343141261314,25614278716751874,25614313076490242,25614235767078914,25614222882177026,25614325961392130,25614334551326722,25614227177144322,25895809528037376,25895813822808064,25895697859084288,25895727923789824,25895736513921024,25895912612233217,26177232964550658,26458656403619840,26458776666374144,26458841091342337,26458647817420800,26458746601799680,26458875450753025,26458763776229376,26458729417998336,26458652108849152,26458695062388736,26458866860949505,26458660698390528,26458738008260608,26458742303031296,26458750897094656,26458686467342336,26458677877211136,26458703648129024,26458759481458688,26458862560542721,26458768076767232,26740230165102592,26740187215691776,26740182920790018,26740200100528128,26740273114841088,26740359017857025,26740255935561728,26740290295169024,26740264525234176,26740281705037824,26740277409677312,26740268820267008,26740208694067200,26740285999808512,27021657901039616,27303218773229570,27303223068196866,27303137168850946,27303231658131458,27303235953098754,27303205888327682,27303150053752834,27303141463818242,27303240248066050,27303145758785538,27303227363164162,27303214478262274,27303158643687426,27303180118523906,27303132873883650,27584547724263424,27584560605233152,27584663683072000,27584594969231360,27584637915103232,27584577784053760,27584659388301312,27584646508642304,27584676573216768,27584766767792129,27584667983609856,27584762467385345,27584650804199424,27584642209873920,27584775357595649,27584603554971648,27584552015691776,27584556310462464,27584586374184960,27584740998184961,27584629324840960,27866022701760512,28147553513111552,28429140154777602,28429131564843010,28429110094266368,28429122974908418,28429049960464386,28429037075562498,28429118679941122,28429135859810306,28429127269875714,28429114384973826,28428972649218050,28429105795039234,28429080025235458,28710580772536320,28710593657241600,28710524941565952,28710589362208768,28710597951815680,28710555002077184,28710512056598528,28710610836783104,28710602246651904,28710606542012416,28710615132143616,28991931192639490,28992038566821890,28992004207083522,28991961257410562,28991935487606786,28992145947230209,28991926897672194,28992012797018114,28992021386952706,28992034271854594,28991969847345154,28991952667475970,28992025681920002,28992042861789186,28992017091985410,28991922602704898,28992051451723778,28991978437279746,29273492068761602,29273500658696194,29273479183859714,29273517838565378,29273397579481090,29273436234186754,29273509248630786,29273513543598082,29273401874448386,29273406169415682,29273526428499970,29273496363728898,29273427644252162,29273487773794306,29273410464382978,29273444824121346,29273453414055938,29554928396992512,29836351829377024,29836360418918400,29836575172460545,29836403368656896,29836429138526208,29836442023559168,29836437728788480,29836347534344192,29836356124147712,30117938474319874,30117934179352578,30117835395104770,30117942769287170,30117878344777730,30117826805170178,30117904114581506,30117951359221762,30117921294450690,30117822510202882,30117861164908546,30117852574973954,30117916999483394,30117947064254466,30117925589417986,30117912704516098,30117831100137474,30117869754843138,30399400571895808,30680832594673666,30962260325761024,30962247441186816,30962256030990336,30962337635631104,30962329045368832,30962251736219648,30962475079434241,30962303275499520,30962341930401792,31243791137374210,31243868446785538,31243881331687426,31243786842406914,31243864151818242,31243872741752834,31243795432341506,31243829792079874,31243855561883650,31243782547439618,31243889921622018,31243799727308802,31243885626654722,31243808317243394,31243877036720130,31525218867019778,31525197392183298,31525236046888962,31525227456954370,31525300471398402,31525313356300290,31525309061332994,31806882829762561,31806732498829314,31806758273679360,32088241837244416,32088151643062272,32088155937832960,32088228952211456,32088203182342144,32088160232603648,32088374986407937,32088237542473728,32088147348029440,32369626619772928,32369703928922112,32369635209314304,32369712519184384,32369678159052800,32369630914543616,32369622324740096,32369849963184129,32369716813955072,32651187495895040,32651191790665728,32651178905632768,32651097301450752,32651110186024960,32651153135763456,32651324939960321,32651105891254272,32651101596483584,32932572283469824,33214128859054080,33214051549904896,33214094503444480,33214137449316352,33214163217285120,33214240532398081,33214047258476544,33214085908398080,33214262001598465,33214146042855424,33214103089184768,33214176107429888,33214274891808769,33214158922514432,33214167517822976,33214055844675584,33214077318266880,33214266302005249,33214060139446272,33214141744087040,33214150339461120,33495612426027008,33495616720797696,33495530821386240,33495522231582720,33495578065895424,33495749870288897,33495603835764736,33495526526615552,33495535116156928,33777074518294528,33777138943000576,33777104582868992,33777164712935424,33777160417574912,33777130353328128,33777143238033408,33777061633458176,33777156122804224,33777070228242432,33777147532607488,33777151827443712,34058489361924098,34058716995190786,34340114666356736,34340080306749440,34340024471715840,34340183390486529,34340101780865024,34340088896421888,34340110370996224,34340093191454720,34340011586879488,34340054536290304,34340033065254912,34340106076225536,34340097486028800,34340007291977730,34621482266001410,34902957250314240,34902961540300800,34903047439450112,34903060324417536,34903051734286336,34903004489711616,34903038849843200,34903043144876032,34903030260170752,34902974425137152,34903064619778048,34903056029646848,35184436517011456,35184535301128192,35184526710996992,35184505236881408,35184531006357504,35184479466422272,35184513826553856,35184449401847808,35184445111992320,35184539596488704,35184518121586688,35184522416160768,35465954443132928,35465988803264512,35466005983068160,35465924378558464,35466014573199360,35465980213592064,35466010277838848,35466001687707648,35465911493722112,35465915793801216,35465997392871424,35465993098297344,35747386469711874,35747377885675520,35747485253959682,35747468074090498,35747489548926978,35747476664025090,35747463779123202,35747429419384834,35747399354613762,35747455189188610,35747472369057794,35747480958992386,36028912984719362,36028917279686658,36028809905504258,36028852855177218,36028835675308034,36028925869621250,36028797020602370,36028827085373442,36028921574653954,36028891509882882,36028805610536962,36028801315569666,36028878624980994,36028895804850178,36028908689752066,36028844265242626,36028900099817474,36028887214915586,36310418028429312,36310435207970816,36310405143724032,36310332134129664,36310349308690432,36310422323003392,36310379373264896,36310413733396480,36310439503331328,36310336423854080,36310430913200128,36310426617839616,36591802809057282,36591841463762946,36591871528534018,36591746974482434,36591755564417026,36591850053697538,36591751269449730,36591845758730242,36591837168795650,36591759859384322,36591785629188098,36591794219122690,36591858643632130,36591828578861058,36591875823501314,36591867233566722,36591777039253506,36591862938599426,36873282082439170,37154735582347264,37154924565757953,37154709813395456,37154825781379072,37154817191772160,37154911675547649,37154791418036224,37154812891234304,37154726992216064,37154778533003264,37154752763133952,37154744177393664,37154795716804608,37154890206347265,37154787123265536,37154915978117121,37154701223854080,37154696932425728,37154705518624768,37154808596463616,37436283573567490,37436300753436674,37436262098731010,37436210559123458,37436287868534786,37436176199385090,37436296458469378,37436219149058050,37436184789319682,37436274983632898,37436201969188866,37436292163502082,37436171904417794,37436266393698306,37436180494352386,37436270688665602,37436227738992642,37436253508796418,37717801500934146,37717810090868738,37717792910999554,37717797205966850,37717780026097666,37717711306620930,37717754256293890,37717784327225344,37717724191522818,37717805795901442,37717788616032258,37717814385836034,37999130448756736,37999177693265920,37999212053397504,37999121858953216,37999349495431169,37999126153986048,37999216348168192,37999181989085186,37999353793282049,37999203463135232,37999134743527424,38280695623647232,38280811582390273,38280687030108160,38280605425467392,38280708503306240,38280725688221696,38280601130696704,38280596839268352,38280609720238080,38280815885156353,38280626899058688,38280712798076928,38280652669976576,38280824472600577,38280635489189888,38280691324878848,38280790113189889,38280678439845888,38280717098614784,38280644084236288,38562084696096770,38562162005508098,38562196365246466,38562192070279170,38562076106162178,38562071811194882,38562187775311874,38562200660213762,38562080401129474,38562166300475394,38562110465900546,38562153415573506,38562183480344578,38562174890409986,38562170595442690,38562127645769730,38562101875965954,38562119055835138,38843559673659392,38843602623397888,38843641278300160,38843546789085184,38843551084118016,38843774428577793,38843628393267200,38843636983529472,38843555378888704,39125081901629440,39406612705378306,39406599820476418,39406621302915072,39406578345639938,39406535395966978,39406608410411010,39406526806032386,39406625590280194,39406501036228610,39406543985901570,39406509626163202,39406552575836162,39406496741261314,39406617000345602,39406591230541826,39406505331195906,39406586935574530,39406595525509122,39688036144381952,39688079093792768,39688134928498688,39688104864251904,39688139223859200,39688122043531264,39688049029218304,39688126338367488,39688130633728000,39688113453924352,39688117748957184,39688044740083712,39969592724815874,39969554070110210,39969511120437250,39969605609717762,39969597019783170,39969609904685058,39969524005339138,39969588429848578,39969519716859904,39969601314750466,39969579839913986,39969614199652354,40251114950164481,40251041935589376,40251149309575169,40250968921210880,40251050525196288,40250977506951168,40251003276820480,40251011867082752,40251136419364865,40250934557212672,40251020460621824,40250925967671296,40250951736033280,40251037635051520,40250921676242944,40251016161853440,40251033340280832,40250960326164480,40251140722524161,40250930262441984,40532495432548354,40532486842613762,40532521202352130,40532512612417538,40532499727515650,40532426713071618,40532478252679170,40532396648300546,40532400943267842,40532435303006210,40532405238235138,40532443892940802,40532491137581058,40532508317450242,40532525497319426,40532409533202434,40532516907384834,40532452482875394,40813953229455362,40813901689847810,40813871625076738,40813884509978626,40813974704291842,40813910279782402,40813987589193730,40814000474095618,40813961819389954,40813991884161026,40813927459651586,40813996179128322,40813983294226434,40813966114357250,40813875920044034,40813918869716994,40813880215011330,40813970409324546,41095462565576706,41095428205838338,41095471155511298,41095355191394306,41095445385707522,41095475450478594,41095385256165378,41095458270609410,41095441090740226,41095402436034562,41095359486361602,41095393846099970,41095376666230786,41095350896427010,41095466860544002,41095449680674818,41095436795772930,41095346601459714,];

pub fn make_parser() -> RuntimeParser<Construct,Construct>
{
 let mut parser1:RuntimeParser<Construct,Construct> = RuntimeParser::new(60,147);
 let mut rule = RProduction::<Construct,Construct>::new_skeleton("start");
 rule = RProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Classes(cs),Maincl(mc),)=(_vflab_1,_vflab_0,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_14=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_11=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(thebody),Id(an),Id(cn),)=(_vflab_14,_vflab_11,_vflab_1,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Class(cl),Classes(mut cs),)=(_vflab_1,_vflab_0,) { 
  cs.push(parser.lb(cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Decs(mut ds),Id(sup),Id(name),)=(_vflab_4,_vflab_2,_vflab_1,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  let sup:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   sup };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(v),Id(t),)=(_vflab_1,_vflab_0,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Id(v),Id(t),)=(_vflab_3,_vflab_1,_vflab_0,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_7=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_vflab_7,_vflab_4,_vflab_2,_vflab_1,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let v:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(v)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  let m:Construct=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Decs(mut ds),)=(_vflab_0,) {  ds.push(parser.lb(m)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_2,_vflab_1,_vflab_0,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  let mut _vflab_3=parser.stack.pop().unwrap().value;   let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_vflab_3,_vflab_2,_vflab_1,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();  parser.stack.pop();   return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ parser.stack.pop();   return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  let c:Construct=parser.stack.pop().unwrap().value;   c };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Stm(s),Stms(mut sv),)=(_vflab_1,_vflab_0,) {  sv.push(parser.lb(s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Stms(sv),)=(_vflab_1,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_6=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(b),Stm(a),Exp(c),)=(_vflab_6,_vflab_4,_vflab_2,) { 
  Stm(Ifstat(parser.lb(c), parser.lb(a), parser.lb(b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(a),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Ifstat(parser.lb(c),parser.lb(a),parser.lb(Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  
  if let (Stm(s),Exp(c),)=(_vflab_4,_vflab_2,) {  Stm(Whilest(parser.lb(c),parser.lb(s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Id(v),)=(_vflab_2,_vflab_0,) {  Stm(Assignst(v,parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_5=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(e),Exp(i),Exp(v),)=(_vflab_5,_vflab_2,_vflab_0,) { 
  Stm(ArAssignst(parser.lb(v),parser.lb(i),parser.lb(e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(args),Id(m),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exp(e),)=(_vflab_1,) {  Stm(Returnst(parser.lb(e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{  let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Vdec(v),)=(_vflab_0,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("*",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exp(a),)=(_vflab_1,) {  Exp(Notexp(parser.lb(a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("<",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("%",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(b),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("==",parser.lb(a),parser.lb(b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exp(i),Exp(a),)=(_vflab_2,_vflab_0,) { Exp(Binop("[]",parser.lb(a),parser.lb(i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(field),Exp(obj),)=(_vflab_2,_vflab_0,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_4=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_2=parser.stack.pop().unwrap().value;  parser.stack.pop();   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(args),Id(f),Exp(obj),)=(_vflab_4,_vflab_2,_vflab_0,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let i:Construct=parser.stack.pop().unwrap().value;   i };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let s:Construct=parser.stack.pop().unwrap().value;   s };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let b:Construct=parser.stack.pop().unwrap().value;   b };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{  let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Id(x),)=(_vflab_0,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let mut _vflab_3=parser.stack.pop().unwrap().value;  parser.stack.pop();  parser.stack.pop();  parser.stack.pop();  
  if let (Exp(s),)=(_vflab_3,) {  Exp(Newarray(parser.lb(s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();  parser.stack.pop();   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Id(x),)=(_vflab_1,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ parser.stack.pop();   let e:Construct=parser.stack.pop().unwrap().value;  parser.stack.pop();   e };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  let mut _vflab_1=parser.stack.pop().unwrap().value;   let mut _vflab_0=parser.stack.pop().unwrap().value;  
  if let (Exps(mut er),Exp(e),)=(_vflab_1,_vflab_0,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  let mut _vflab_2=parser.stack.pop().unwrap().value;   let mut _vflab_1=parser.stack.pop().unwrap().value;  parser.stack.pop();  
  if let (Exps(mut er),Exp(e),)=(_vflab_2,_vflab_1,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = RProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ parser.stack.pop();  return <Construct>::default();};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras(parser:&mut RuntimeParser<Construct,Construct>)
{
}//end of load_extras: don't change this line as it affects augmentation
