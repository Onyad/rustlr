//Parser generated by rustlr for grammar zcmj

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{LBox,makelbox};
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [17179934720,171798888449,176093790209,281474976972800,562967133421570,563134637342721,563194766688258,844669743267843,1125998691483648,1407555272638465,1407619696689154,1407392063946752,1688871335690240,1970569650307074,1970342017040386,2251799814340608,2533300560920576,2814848551747586,2814792717631488,2814938746454017,3096254809505792,3377798505758720,3659174698287104,3940684034801664,4222326515302401,4222124651315202,4222227730530306,4222236320464898,4222154716086274,4222146126151682,4222240615432194,4222163306020866,4503698411945986,4785130439901184,5066665546809344,5066661251710976,5066742855630849,5066764330532865,5066747150794753,5066579647004672,5066549582495744,5066588237332480,5066571057201152,5066652661645312,5348063214174208,5629538189639682,5629602614149122,5629521009770498,5629499534934018,5629615499051010,5629611204083714,5629529599705090,5910974512955392,6192449489010690,6473945939968002,6474027544346626,6473954529902594,6474036134281218,6474040429248514,6473963119837186,6473924465131522,6755614191517697,6755511111974912,6755429507268608,6755399442759680,6755438097596416,6755515407073280,7036891597897730,7037119231164418,7318349395918850,7599824372498434,7599888797859840,7881299349143554,8162774325788674,8444313728057344,8725861719343104,8725797294768128,9007199257165824,9288742953418752,9570217930194944,9851654250102786,9851705789710338,9851662840037378,9851628480299010,9851714379644930,9851680019906562,9851671429971970,9851645660168194,9851735854481410,9851632775266306,9851748739383298,9851727264546818,9851753034350594,9851740149448706,9851744444416002,9851624185331714,9851718674612226,9851722969579522,9851637070233602,10133107754663936,10133154998976512,10133189358518272,10133103459631104,10133326797537281,10133099164532736,10133193653747712,10133180768714752,10133112049500160,10414629976080384,10696049116119042,10977524094992384,11258999071834112,11259110740918272,11540641552859136,11540615782662144,11540538473578496,11540624372662272,11540607193251840,11540620077826048,11540551358283776,11540581422858240,11540547063775232,11540628667432960,11540637257760768,11540632962990080,11822039218782208,11822030628978688,11822043514011648,11822004859240448,11821949024796672,11822176659374081,11821953319895040,11821957614927872,11821961909764096,12103432591638528,12103651636150273,12103436886474752,12103424001507328,12103505605689344,12103518490722304,12103514195492864,12103479835951104,12103428296605696,12385066482335746,12385049302466562,12384967698087938,12384976288022530,12385045007499266,12384984877957122,12385062187368450,12384971993055234,12385053597433858,12385057892401154,12385040712531970,12385006352793602,12385032122597378,12384963403120642,12384959108153346,12666528574078978,12666442674733058,12666537164013570,12666459854602242,12666515689177090,12666541458980866,12666481329438722,12666438379765762,12666524279111682,12666434084798466,12666519984144386,12666507099242498,12666532869046274,12666446969700354,12666451264667650,12948016435625986,12947999255756802,12947917651378178,12947913356410882,12947934831247362,12947982075887618,12947990665822210,12948012140658690,12947994960789506,12947921946345474,12947926241312770,12947956306083842,12948007845691394,12948003550724098,12947909061443586,13229474232336386,13229491412205570,13229478527303682,13229401217892354,13229392627957762,13229384038023170,13229487117238274,13229409807826946,13229482822270978,13229469937369090,13229396922925058,13229465642401794,13229457052467202,13229388332990466,13229431282663426,13510906259439618,13510940619177986,13510863309766658,13510957799047170,13510962094014466,13510949209112578,13510884784603138,13510859014799362,13510867604733954,13510966388981762,13510944914145282,13510871899701250,13510953504079874,13510932029243394,13510876194668546,13792385529741312,13792389824839680,13792312515362816,13792273860526080,13792488611643393,13792303925035008,13792333989216258,13792480021643265,14073808969596928,14355288241340416,14636754628182016,14918178063712256,14918255372795904,14918263962599424,14918229603057664,14918401403650049,14918268257828864,14918186653581312,14918173768613888,14918182358745088,15199661630291968,15199648745324544,15199653040422912,15199704579768320,15199876380426241,15199743234539520,15199738939310080,15199657335455744,15199730349506560,15481205326217216,15481218211250176,15481213916020736,15481123722035200,15481132312166400,15481136607002624,15481351357202433,15481128017133568,15481179556478976,15762602993844224,15762693187960832,15762688892731392,15762611583713280,15762598698745856,15762654533189632,15762826333978625,15762680302927872,15762607288877056,16044073677488128,16325557242298368,16325630256349184,16325552947265536,16325561537134592,16325643141382144,16325638846152704,16325548652167168,16325776287531009,16325604486610944,16607032219009024,16607079463321600,16607118118092800,16607036513845248,16607023628877824,16607105233059840,16607027923976192,16607251264307201,16607113822863360,16888498605588480,16888554440032256,16888511490555904,16888502900686848,16888593094803456,16888580209770496,16888588799574016,16888726241083393,16888507195719680,17170201217859585,17169973582299136,17170068071514112,17169982172430336,17170029416742912,17169977877397504,17169986467266560,17170055186481152,17170063776284672,17451448559009792,17451676194635777,17451538752995328,17451452854108160,17451504393453568,17451543048224768,17451457149140992,17451461443977216,17451530163191808,17733018024935424,17733151171411969,17732979370164224,17732932125851648,17733013729705984,17733005139902464,17732927830818816,17732936420687872,17732923535720448,18014492999286786,18014523064057858,18014419984842754,18014527359025154,18014445754646530,18014501589221378,18014454344581122,18014497294254082,18014398510006274,18014428574777346,18014402804973570,18014407099940866,18014518769090562,18014437164711938,18014411394908162,18014480114384898,18014514474123266,18014510179155970,18014488704319490,18295933618356226,18295942208290818,18296023813718016,18296019518881792,18296015223717888,18296028108488704,18295980862996482,18296040993914880,18296006632800258,18296036697571330,18295959388160002,18296032402604034,18295937913323522,18295950799339520,18295946503258114,18577425776050176,18577455840624640,18577408597884928,18577481611018240,18577515970625536,18577498790428672,18577503085199360,18577494495592448,18577490200428544,18577511675527168,18577412891344896,18577507380756480,18858883574661120,19140298421895168,19421872182919168,19703304207138816,19703261257662464,19703252667793408,19703256962826240,19703476008714241,19703329976877056,19703338566680576,19703342861910016,19703248372695040,19984783481765888,20266365829251074,20266344354414594,20266340059447298,20266271339970562,20266284224872450,20266262750035970,20266357239316482,20266305699708930,20266361534283778,20266331469512706,20266258455068674,20266267045003266,20266348649381890,20266352944349186,20266275636314112,20547733431975938,20547780676616194,20547823627403264,20547746316877826,20547815037403136,20547750613024768,20547832216223746,20547836512501760,20547840807600128,20547742021910530,20547759201779714,20547806446419970,20547819332567040,20547737726943234,20547827922173952,20829302898884608,20829315784310784,20829281422868482,20829294309277696,20829298604113920,20829216998359042,20829290012803074,20829311487639554,20829208408424450,20829255653064706,20829212703391746,20829234178228226,20829225589735424,20829307192672258,20829221293326338,21110696269971458,21110786464284674,21110683385069570,21110782169317378,21110764989448194,21110769284415490,21110700566446080,21110691975004162,21110790761021440,21110730629709826,21110756399513602,21110687680036866,21110773579382786,21110709154873346,21110777875595264,21392205607141378,21392248556814338,21392175542370306,21392244261847042,21392184132304898,21392239966879746,21392261441716226,21392154070417408,21392257146748930,21392158362501122,21392252851781634,21392231376945154,21392171247403010,21392162657468418,21392265736683522,21392166952435714,21673680583327746,21673719238033410,21673706353131522,21673732122935298,21673637633654786,21673659108491266,21673714943066114,21673727829016576,21673641928622082,21673650519867392,21673723534245888,21673740714442752,21673646223589378,21673736417902594,21673633338687490,21955207099711490,21955121200365570,21955112610430978,21955155560103938,21955108315463682,21955198510956544,21955194216120320,21955189920956416,21955215691153408,21955116905398274,21955181329907714,21955134085267458,21955202805727232,21955211394678786,21955125496578048,22236591885516800,22236669192830976,22236677782437888,22236686372765696,22236600473288704,22236690667864064,22236630537863168,22236656308256768,22236673487667200,22236664897667072,22236682077995008,22236587588583424,22518161348362242,22518131283591170,22518157053394946,22518084038950914,22518075449999360,22518105513787394,22518062564114434,22518165643329538,22518148463460354,22518071154049026,22518144168493058,22518058269147138,22518152759148544,22518066859081730,22518139873525762,22799606261678080,22799580491284480,22799541835726850,22799636326187008,22799559015596034,22799546130694146,22799632030040066,22799627735859200,22799623441088512,22799640621285376,22799550426710016,22799537540759554,22799533245792258,22799619146252288,22799614851088384,23081008222633986,23081098417799168,23081094122962944,23081081237078018,23081033992437762,23081089827799040,23081021107535874,23081025403420672,23081102712569856,23081111302897664,23081012517601282,23081115597996032,23081055467995136,23081107006881794,23081016812568578,23362577689346050,23362581984313346,23362573394378754,23362508969869314,23362483200065538,23362556214509570,23362496084967426,23362487495032834,23362491790000130,23362569099411458,23362530444705794,23362590574247938,23362500379934722,23362564804444162,23362586279280642,23643996833906688,23925458925780992,23925583479898113,23925433150930946,24206968257708034,24206886653329410,24206895243264002,24206860883525634,24206856588558338,24206847998623746,24206852293591042,24206963962740738,24206959667773442,24207071341576193,24206903833198594,24206976847642626,24206878063394818,24206951077838850,24206942487904258,24206946782871554,24206929603002370,24206938192936962,24488400286973952,24488477596123136,24488464711352320,24488430351548416,24488473301352448,24488391699529728,24488387402268672,24488486186450944,24488481891680256,24488490481549312,24488456121942016,24488469006516224,24769965457735682,24769956867801090,24769875263422466,24769858083553282,24769870968455170,24769961162768386,24769866673487874,24769943982899202,24769948277866498,24769939687931906,24769905328193538,24769952572833794,24769883853357058,24769931097997314,24769862378520578,25051354534379520,25051367419412480,25051277225295872,25051285815164928,25051328764641280,25051500566806529,25051281520328704,25051272930197504,25051504861839361,25051333060395010,25051363124183040,25332825216253954,25332902525665282,25332915410567170,25332812331352066,25332889640763394,25332816626319362,25332855281025026,25332808036384770,25332911115599874,25332906820632578,25332893935730690,25332881050828802,25332833806188546,25332820921286658,25332898230697986,25614222882177026,25614446225391617,25614261536882690,25614235767078914,25614334551326722,25614351731195906,25614325961392130,25614317371457538,25614313076490242,25614343141261314,25614278716751874,25614227177144322,25614338846294018,25614231472111618,25614321666424834,25614304486555650,25614252946948098,25614270126817282,25895697859084288,25895813823397888,25895809528299520,25895736513921024,25895727923593216,25895912612233217,26177232964550658,26458750897094656,26458660698718208,26458841091014657,26458875450621953,26458652108849152,26458695062192128,26458763776819200,26458729417932800,26458686467342336,26458703648194560,26458746601865216,26458647817420800,26458776666701824,26458738007736320,26458866861080577,26458768076898304,26458677877014528,26458862560542721,26458742302965760,26458759481720832,26458656403881984,26740191510396930,26740200100331522,26740208690266114,26740187215429634,26740268819808258,26740182920462338,26740290294644738,26740255934906370,26740277409742850,26740273114775554,26740230165102594,26740195805364226,26740281704710146,26740264524840962,26740285999677442,27021765271945216,27021739501748224,27021748091748352,27021683670777856,27021743796912128,27021752386519040,27021756682076160,27021657897500674,27021662192664576,27021730912337920,27021760976846848,27021675077369856,27021833994567681,27021705141944320,27303132877750272,27584560605560832,27584552015691776,27584577783857152,27584676573544448,27584650804199424,27584667983740928,27584603555037184,27584659388563456,27584637914578944,27584646508707840,27584642209808384,27584586374184960,27584594969034752,27584740997857281,27584775357464577,27584556310724608,27584762467385345,27584766767923201,27584629324775424,27584547724263424,27584663683661824,27866022701760512,28147574987948032,28147605048786944,28147660883689472,28147652293361664,28147656588918784,28147643703754752,28147562103111680,28147630819180544,28147665178787840,28147647998590976,28147639408590848,28429127269875714,28429135859810306,28429131564843010,28429140154777602,28429118679941122,28429122974908418,28429037075562498,28429080025235458,28428972649218050,28429110094331904,28429105795039234,28429049960464386,28429114384973826,28710559295799298,28710486281355266,28710546410897410,28710572180701186,28710542115930114,28710529231028226,28710451921616898,28710576475668482,28710494871289858,28710460511551490,28710456216584194,28710537820962818,28710550705864706,28710567885733890,28710447626649602,28710477691420674,28710503461224450,28710563590766594,28992012798132224,28992017093361664,28991922604146688,28992004208328704,28991978438590464,28992150242131969,28991935489114112,28991926899245056,28991931194277888,29273444824055810,29273496363663362,29273513543532546,29273427644186626,29273492068696066,29273509248565250,29273526428434434,29273406169350146,29273500658630658,29273479183794178,29273453413990402,29273517838499842,29273410464317442,29273487773728770,29273401874382850,29273620923940865,29273436234121218,29273397579415554,29554928396992512,29836467791986690,29836459202052098,29836450612117506,29836356122836994,29836386187608066,29836476381921282,29836403367477250,29836442022182914,29836394777542658,29836429137281026,29836347532902402,29836463497019394,29836437727215618,29836446317150210,29836377597673474,29836360417804290,29836351827869698,30117878350479360,30399400571895808,30680832594673666,30962303275565056,30962341930336256,30962337635106816,30962256031252480,30962475079434241,30962251736219648,30962247441121280,30962260326088704,30962329045303296,31243889921622018,31243885626654722,31243868446785538,31243795432341506,31243872741752834,31243864151818242,31243786842406914,31243855561883650,31243881331687426,31243799727308802,31243808317243394,31243791137374210,31243782547439618,31243877036720130,31243829792079874,31525309061332994,31525300471398402,31525197392183298,31525236046888962,31525227456954370,31525218867019778,31525313356300290,31806882829762561,31806758273679360,31806732498829314,32088147353141248,32369635209641984,32369849963184129,32369716813889536,32369622324674560,32369630914805760,32369678159118336,32369703928856576,32369712518660096,32369626619772928,32651110186352640,32651324939960321,32651101596483584,32651097301385216,32651105891516416,32651191790600192,32651153135828992,32651187495370752,32651178905567232,32932735487770624,32932718307835904,32932739782868992,32932714012672000,32932731192999936,32932645297913856,32932636703588352,32932705423261696,32932649588293632,32932679652868096,32932722602672128,32932726897442816,33214240532070401,33214077318070272,33214055844937728,33214128858988544,33214085908398080,33214146042920960,33214051549904896,33214103089250304,33214274891677697,33214266302136321,33214150339461120,33214163217874944,33214176107757568,33214167517954048,33214094503247872,33214060139773952,33214047258476544,33214141744021504,33214137448792064,33214158922776576,33214262001598465,33495530821648384,33495612425502720,33495578065960960,33495603835699200,33495526526615552,33495749870288897,33495616720732160,33495522231517184,33495535116484608,33777087402213376,33777053042671616,33777224847065089,33777091697442816,33777078812409856,33777005798359040,33776997208227840,33777010093195264,33777001503326208,34058716995190786,34058489361924098,34340106076553216,34340054536421376,34340007291977730,34340093191389184,34340114666422272,34340101780996096,34340110371323904,34340088896225280,34340080306814976,34340183390486529,34340033065254912,34340011587141632,34340097486225408,34340024471846912,34621482266001410,34903051733893122,34902952955346944,34903056028860418,34903030259056642,34902961539579906,34903004489252866,34902974424481794,34903043143958530,34903038848991234,34903064618795010,34903047438925826,34903060323827714,35184449401978880,35184522416357376,35184436517273600,35184479466553344,35184539596554240,35184526711128064,35184535301455872,35184440817025024,35184505236946944,35184531006685184,35184513826357248,35184518121521152,35466001687838720,35466014573264896,35465997393068032,35466010278166528,35465924378689536,35465920088768512,35465993098231808,35465911493984256,35466005983395840,35465980213657600,35465988803067904,35465954443264000,35747326339317762,35747322044350466,35747352109121538,35747412238663682,35747442303434754,35747403648729090,35747377878925314,35747433713500162,35747420828598274,35747334929252354,35747425123565570,35747446598402050,35747450893369346,35747360699056130,35747416533630978,35747330634285058,35747438008467458,35747369288990722,36028852855177218,36028908689752066,36028797020602370,36028835675308034,36028844265242626,36028887214915586,36028925869621250,36028891509882882,36028809905504258,36028921574653954,36028805610536962,36028801315569666,36028917279686658,36028900099817474,36028912984719362,36028895804850178,36028827085373442,36028878624980994,36310426617970688,36310418028363776,36310439503396864,36310422323200000,36310379373395968,36310405143789568,36310349308821504,36310435208298496,36310430913527808,36310332134064128,36310336424116224,36310413733199872,36591824285532160,36591905890238464,36591897299910656,36591854350106624,36591901594681344,36591880120500224,36591888709910528,36591910185009152,36591811400826880,36591893005074432,36591807110840320,36591914480107520,36873282082439170,37154709813723136,37154752763199488,37154791417970688,37154757058953218,37154778532937728,37154928863019009,37154701223854080,37154696928755712,37154705518886912,37154924565364737,37154787122741248,37436339409125378,37436279279583234,37436322229256194,37436330819190786,37436335114158082,37436317934288898,37436309350514688,37436305049387010,37436249214812162,37436236329910274,37436313639321602,37436326524223490,37717749960343554,37717741370408962,37717646881128450,37717694125768706,37717737075441666,37717685535834114,37717702715703298,37717655471063042,37717676945899522,37717771435180034,37717762845245442,37717745665376258,37717728485507074,37717775730147330,37717651176095746,37717767140212738,37717659766030338,37717758550278146,37999212052873216,37999349495758849,37999169107329024,37999203463069696,37999250711838720,37999336605679617,37999237821956096,37999130449018880,37999134743855104,37999177693331456,37999242122035200,37999216348102656,37999233526857728,37999151922151424,37999315136151553,37999126153986048,37999220647002112,37999160512479232,37999121862557696,37999340908380161,38280601130696704,38280605425729536,38280717098745856,38280790112862209,38280811582390273,38280708503568384,38280635489189888,38280609720565760,38280596839268352,38280695623712768,38280815885156353,38280626898862080,38280725688549376,38280824472469505,38280678439780352,38280652670042112,38280712798666752,38280687029583872,38280644084039680,38280691324813312,38562131948142592,38843602623463424,38843555379150848,38843774428643329,38843641278234624,38843636983005184,38843559673987072,38843546789019648,38843628393201664,38843551084118016,39125021764616194,39125030354550786,39125146318667778,39125137728733186,39125142023700482,39125034649518082,39125103368994818,39125026059583490,39125060419321858,39125077599191042,39125150613635074,39125051829387266,39125133433765890,39125111958929410,39125120548864002,39125069009256450,39125124843831298,39125116253896706,39406608410411010,39406625590280194,39406509626163202,39406591230541826,39406501036228610,39406612705378306,39406505331195906,39406621302915072,39406578345639938,39406535395966978,39406599820476418,39406496741261314,39406586935574530,39406617000345602,39406595525509122,39406552575836162,39406543985901570,39406526806032386,39688126338039810,39688122043072514,39688117748105218,39688079093399554,39688104863203330,39688036143726594,39688130633007106,39688134927974402,39688113453137922,39688044740083712,39688049028628482,39688139222941698,39969605610766336,39969609905537024,39969519716859904,39969524006060032,39969588430438400,39969579841028096,39969614200635392,39969592725602304,39969597020438528,39969554070634496,39969511121354752,39969601315209216,40250977507016704,40250960326164480,40250925967671296,40251020460687360,40251149309444097,40251016161787904,40250951735836672,40251041935720448,40251050525523968,40251114949836801,40251037635641344,40251136419364865,40251003276754944,40250921676242944,40250934557540352,40251033340542976,40251011866558464,40250930262704128,40251140722524161,40250968921014272,40532443893006338,40532486842679298,40532508317515778,40532478252744706,40532426713137154,40532525497384962,40532521202417666,40532405238300674,40532409533267970,40532396648366082,40532452482940930,40532435303071746,40532499727581186,40532400943333378,40532491137646594,40532495432613890,40532512612483074,40532516907450370,40813953229389826,40813966114291714,40813983294160898,40813996179062786,40813927459586050,40813918869651458,40813884509913090,40813871625011202,40813880214945794,40813961819324418,40814000474030082,40813987589128194,40813875919978498,40813970409259010,40813991884095490,40813901689782274,40813974704226306,40813910279716866,41095428205838338,41095436795772930,41095350896427010,41095462565576706,41095441090740226,41095385256165378,41095475450478594,41095449680674818,41095445385707522,41095346601459714,41095466860544002,41095359486361602,41095471155511298,41095458270609410,41095393846099970,41095376666230786,41095355191394306,41095402436034562,];

pub fn new_parser() -> ZCParser<Construct,Construct>
{
 let mut parser1:ZCParser<Construct,Construct> = ZCParser::new(60,147);
 let mut rule = ZCRProduction::<Construct,Construct>::new_skeleton("start");
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Classes(cs),Maincl(mc),)=(_item1_.value,_item0_.value,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ let _item16_ = parser.popstack(); let _item15_ = parser.popstack(); let _item14_ = parser.popstack(); let _item13_ = parser.popstack(); let _item12_ = parser.popstack(); let _item11_ = parser.popstack(); let _item10_ = parser.popstack(); let _item9_ = parser.popstack(); let _item8_ = parser.popstack(); let _item7_ = parser.popstack(); let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(thebody),Id(an),Id(cn),)=(_item14_.value,_item11_.value,_item1_.value,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Class(cl),Classes(mut cs),)=(_item1_.value,_item0_.value,) { 
  cs.push(makelbox!(_item1_,cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Decs(mut ds),Id(sup),Id(name),)=(_item4_.value,_item2_.value,_item1_.value,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{ let _sup_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (sup,)=(_sup_.value,) {  sup }  else {parser.bad_pattern("(sup,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(v),Id(t),)=(_item1_.value,_item0_.value,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),Id(t),)=(_item3_.value,_item1_.value,_item0_.value,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ let _item8_ = parser.popstack(); let _item7_ = parser.popstack(); let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_item7_.value,_item4_.value,_item2_.value,_item1_.value,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let _v_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (v,Decs(mut ds),)=(_v_.value,_item0_.value,) {  ds.push(makelbox!(_v_,v)); Decs(ds) }  else {parser.bad_pattern("(v,Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let _m_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (m,Decs(mut ds),)=(_m_.value,_item0_.value,) {  ds.push(makelbox!(_m_,m)); Decs(ds) }  else {parser.bad_pattern("(m,Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item2_.value,_item1_.value,_item0_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item3_.value,_item2_.value,_item1_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack();  return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _c_ = parser.popstack(); 
  if let (c,)=(_c_.value,) {  c }  else {parser.bad_pattern("(c,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(s),Stms(mut sv),)=(_item1_.value,_item0_.value,) {  sv.push(makelbox!(_item1_,s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(sv),)=(_item1_.value,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(b),Stm(a),Exp(c),)=(_item6_.value,_item4_.value,_item2_.value,) { 
  Stm(Ifstat(makelbox!(_item2_,c), makelbox!(_item4_,a), makelbox!(_item6_,b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(a),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Ifstat(makelbox!(_item2_,c),makelbox!(_item4_,a),parser.lbx(5,Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(s),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Whilest(parser.lbx(2,c),parser.lbx(4,s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),)=(_item2_.value,_item0_.value,) {  Stm(Assignst(v,parser.lbx(2,e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Exp(i),Exp(v),)=(_item5_.value,_item2_.value,_item0_.value,) { 
  Stm(ArAssignst(parser.lbx(0,v),parser.lbx(2,i),parser.lbx(5,e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(args),Id(m),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),)=(_item1_.value,) {  Stm(Returnst(parser.lbx(1,e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); 
  if let (Vdec(v),)=(_item0_.value,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(a),)=(_item1_.value,) {  Exp(Notexp(parser.lbx(1,a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("<",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("%",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("==",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(i),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("[]",parser.lb(a),parser.lbx(2,i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(field),Exp(obj),)=(_item2_.value,_item0_.value,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(args),Id(f),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _i_ = parser.popstack(); 
  if let (i,)=(_i_.value,) {  i }  else {parser.bad_pattern("(i,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _s_ = parser.popstack(); 
  if let (s,)=(_s_.value,) {  s }  else {parser.bad_pattern("(s,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _b_ = parser.popstack(); 
  if let (b,)=(_b_.value,) {  b }  else {parser.bad_pattern("(b,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item0_.value,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(s),)=(_item3_.value,) {  Exp(Newarray(parser.lbx(3,s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item1_.value,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _e_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (e,)=(_e_.value,) {  e }  else {parser.bad_pattern("(e,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item1_.value,_item0_.value,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item2_.value,_item1_.value,) {  er.push(parser.lbx(1,e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); <Construct>::default()};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras(parser:&mut ZCParser<Construct,Construct>)
{
}//end of load_extras: don't change this line as it affects augmentation
