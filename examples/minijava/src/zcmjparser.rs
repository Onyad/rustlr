//Parser generated by rustlr

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{LBox,makelbox};
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [171798757377,176093855745,17180000256,281719789846531,562949953683456,844669743398914,844442110132226,844609614053377,1125998691483648,1407619696689154,1407392063881216,1407555272704001,1688871335690240,1970324837629952,2251816993751042,2252044627017730,2533300560920576,2814848551747586,2814792717565952,2814938746519553,3096254809505792,3377699721510912,3659273482534912,3940684034801664,4222223435235330,4503638282731522,4503702707240962,4503801492013057,4503711297175554,4503621102862338,4503629692796930,4503599628025858,4503715592142850,4785130439901184,5066588237332480,5066549582561280,5066661251317760,5066665546809344,5066764330467329,5066742855892993,5066652661710848,5066571057135616,5066579647201280,5066747150729217,5348063214174208,5629499536244736,5910974512234498,5911038937530368,6192479553191938,6192488143126530,6192552567635970,6192470963257346,6192561157570562,6192565452537858,6192449488420866,6474040430362624,6474139214872577,6474036134871040,6473954530754560,6473924466114560,6473963120885760,6755438096482306,6755399441776642,6755420916613122,6755502520991746,6755515405893634,6755511110926338,6755429506547714,7036874419142658,7318366574608386,7318594207875074,7599824372629506,7881299349143554,8162774325788674,8444313728057344,8725797294768128,8725861719343104,9007267976642560,9288674233942016,9570217930194944,9851718674612226,9851654250102786,9851744444416002,9851727264546818,9851624185331714,9851740149448706,9851637070233602,9851705789710338,9851748739383298,9851632775266306,9851680019906562,9851662840037378,9851628480299010,9851671429971970,9851714379644930,9851735854481410,9851645660168194,9851722969579522,9851753034350594,10133326797471745,10133112049303552,10133154999304192,10133180768649216,10133103459565568,10133193653616640,10133107754467328,10133189358780416,10133099164663808,10414574139408386,10696104952791040,10977524094992384,11259162280919040,11259166575558656,11259153691049984,11259063496540160,11259140806344704,11259106445950976,11259145101246464,11259132215885824,11259076381704192,11259157985886208,11259072086409216,11259149396344832,11540478343118848,11540474048217088,11540568537169920,11540529882857472,11540555652202496,11540482638020608,11540701682532353,11540486932856832,11540564242333696,11822099349045250,11822056399372290,11822103644012546,11822095054077954,11822022039633922,11822009154732034,11822082169176066,11822034924535810,11822112233947138,11822026334601218,11822116528914434,11822107938979842,11822013449699330,11822090759110658,11822017744666626,12103565735690242,12103587210526722,12103509901115394,12103531375951874,12103501311180802,12103574325624834,12103557145755650,12103488426278914,12103570030657538,12103578620592130,12103591505494018,12103492721246210,12103582915559426,12103497016213506,12103484131311618,12385010648612864,12384898979528704,12666541458849794,12666532868915202,12666507099111426,12666459854471170,12666451264536578,12666515689046018,12666438379634690,12666446969569282,12666481329307650,12666434084667394,12666519984013314,12666442674601986,12666537163882498,12666528573947906,12666524278980610,12947917651247106,12947956305952770,12948003550593026,12947909061312514,12947999255625730,12947913356279810,12948016435494914,12947934831116290,12947921946214402,12947990665691138,12947982075756546,12947926241181698,12948012140527618,12948007845560322,12947994960658434,13229469937565698,13229465642598402,13229392628154370,13229396923121666,13229401218088962,13229482822467586,13229384038219778,13229431282860034,13229491412402178,13229478527500290,13229474232532994,13229457052663810,13229487117434882,13229409808023554,13229388333187074,13510880489177088,13510798885191680,13510889079308288,13510893374144512,13511026519703553,13510854719832064,13510803180093440,13510811769831424,13510807474995200,13792480021643265,13792312515362816,13792389824839680,13792273860591616,13792333989216258,13792385529348096,13792488611643393,13792303925231616,14073808969596928,14355223815323648,14355228110225408,14355236699963392,14355451450097665,14355305419309056,14355314009440256,14355279649964032,14355232405127168,14355318304276480,14636788986150912,14636703086936064,14636711676674048,14636754626674688,14636698792034304,14636926426873857,14636707381837824,14636793280987136,14636780396019712,14918229603385344,14918178063646720,14918268257697792,14918173768744960,14918182358548480,14918186653384704,14918255372730368,14918263962861568,14918401403650049,15199738937212930,15199695987539970,15199777591918594,15199670217736194,15199769001984002,15199687397605378,15199743232180226,15199773296951298,15199760412049410,15199653037867010,15199764707016706,15199661627801602,15199678807670786,15199747527147522,15199657332834306,15199704577474562,15199648742899714,15199751822114818,15199730347278338,15481128017068032,15481132311969792,15481179556806656,15481123722166272,15481213916282880,15481218211119104,15481205326151680,15481136606806016,15481351357136897,15762611583516672,15762602993778688,15762688892993536,15762826333913089,15762654533517312,15762607288680448,15762598698876928,15762693187829760,15762680302862336,16044073675587584,16044082265391104,16044301310689281,16044077970489344,16044155279572992,16044168164540416,16044163869704192,16044086560227328,16044129510227968,16325552947200000,16325643141251072,16325561536937984,16325604486938624,16325638846414848,16325776287465473,16325557242101760,16325630256283648,16325548652298240,16607023630974976,16888498605719552,16888511490359296,16888554440359936,16888726241017857,16888593094672384,16888507195523072,16888502900621312,16888588799836160,16888580209704960,17170201217794049,17170068071383040,17170063776546816,17170029417070592,17170055186415616,17169973582430208,17169986467069952,17169982172233728,17169977877331968,17451530163126272,17451676194570241,17451538753257472,17451457148944384,17451448559140864,17451452854042624,17451504393781248,17451543048093696,17451461443780608,17733091039903744,17733086744150018,17733069565591552,17732987959902210,17732983664934914,17733056679378946,17733082449182722,17732992254869506,17733065270689792,17733078155395072,17732996549836802,17733073860689920,17733000846049280,17733009434738690,17733030909575170,18014462939299840,18295929326141440,18577481610362880,18577490200821760,18577412891017216,18577507380363264,18577408597884928,18577511675396096,18577515970035712,18577425776181248,18577494495723520,18577498790821888,18577455840428032,18577503085527040,18858883574661120,19140298421895168,19421872182919168,19703390107664384,19703394402566144,19703411582238720,19703325683023872,19703402992369664,19703407286091778,19703381516288002,19703312796811266,19703398697664512,19703321386745858,19703308501843970,19703355746484226,19703317091778562,19703415876878336,19703334271647746,19984830723391490,19984890852933634,19984792068685826,19984787773718530,19984877969080320,19984783478751234,19984796363653122,19984869378097154,19984800659734528,19984865083129858,19984809248555010,19984882262999042,19984856493195266,19984886557966338,19984873673064450,20266357239775234,20266284225331202,20266348651085824,20266305700691968,20266258455527426,20266262750494722,20266352945790976,20266361535660032,20266365830299648,20266275636445184,20266271340429314,20266340061085696,20266331469971458,20266344355987456,20266267045462018,20547742025056256,20547737727991808,20547836512370688,20547827922501632,20547806447337472,20547840807010304,20547819332698112,20547823627796480,20547750613155840,20547815037796352,20547832217337856,20547780677402624,20829302899212288,20829212703784962,20829281424048128,20829311489081344,20829298604507136,20829234178621442,20829307193065474,20829315783720960,20829216998752258,20829208408817666,20829294309408768,20829225589866496,20829221293719554,20829255654113280,20829290014507008,21110730629971970,21110700566577152,21110687680299010,21110691975266306,21110696270233602,21110756399775746,21110777875922944,21110764991217664,21110769286119424,21110790760431616,21110683385331714,21110709155135490,21110773581217792,21110786464546818,21110782169579522,21392265736093698,21392158361911298,21392252851191810,21392248556224514,21392257146159106,21392162656878594,21392205606551554,21392244261257218,21392171246813186,21392184131715074,21392239966289922,21392261441126402,21392175543287808,21392166951845890,21392231376355330,21673740713394178,21673641929146370,21673629047062528,21673714943590402,21673736418426882,21673659109015554,21673646224113666,21673637634179074,21673706353655810,21673723533524994,21673719238557698,21673650519080962,21673732123459586,21673680583852034,21673633339211778,21673727828492290,21955211394613250,21955121200300034,21955215690563584,21955198511349760,21955116905332738,21955181329842178,21955189919776770,21955202806054912,21955207099645954,21955112610365442,21955155560038402,21955194214744066,21955125496709120,21955134085201922,21955108315398146,22236686371192834,22236600473419776,22236677782765568,22236682076225538,22236630536617986,22236587586945026,22236669192962048,22236690667274240,22236583291977730,22236596176879618,22236664896356354,22236609061781506,22236591881912322,22236656306421762,22236673488060416,22518148462936066,22518058268622850,22518062563590146,22518157052870658,22518161347837954,22518152759476224,22518139873001474,22518075450130432,22518084038426626,22518144167968770,22518071153524738,22518131283066882,22518105513263106,22518165643984896,22518066858557442,22799481706446848,22799528951283712,22799567605596160,22799700752662529,22799563310759936,22799486001283072,22799473116643328,22799554720628736,22799477411545088,23081008225714176,23362500379934722,23362581984313346,23362483200065538,23362508969869314,23362590574247938,23362573394378754,23362556214509570,23362487495032834,23362564804444162,23362496084967426,23362491790000130,23362586279280642,23362569099411458,23362577689346050,23362530444705794,23643996833906688,23925583479832577,23925433150930946,23925458925846528,24206903833198594,24206951077838850,24206938192936962,24206860883525634,24206959667773442,24206886653329410,24206895243264002,24206976847642626,24207071341576193,24206963962740738,24206878063394818,24206847998623746,24206942487904258,24206946782871554,24206856588558338,24206852293591042,24206929603002370,24206968257708034,24488395991154690,24488456120696834,24488464710631426,24488473300566018,24488477595533314,24488387401220098,24488430350893058,24488408876056578,24488486185467906,24488469005598722,24488383106252802,24488490480435202,24488391696187394,24488481890500610,24488400286121986,24769879557603328,24769810838257664,24769802248519680,24769888147734528,24770029884997633,24769806543421440,24769858083684354,24769797953617920,24769892442570752,24770025590095873,24769853788258304,25051436139741184,25051440434380800,25051341653082112,25051406074707968,25051423255166976,25051337355362304,25051418960068608,25051350240526336,25051380304773120,25051427549872128,25051414665166848,25051431844708352,25332820921876482,25332915411156994,25332906821222402,25332812331941890,25332808036974594,25332833806778370,25332855281614850,25332902526255106,25332825216843778,25332816626909186,25332898231287810,25332911116189698,25332889641353218,25332893936320514,25332881051418626,25614231472111618,25614325961392130,25614446225391617,25614235767078914,25614321666424834,25614222882177026,25614334551326722,25614227177144322,25614317371457538,25614313076490242,25614351731195906,25614343141261314,25614261536882690,25614338846294018,25614304486555650,25614278716751874,25614252946948098,25614270126817282,25895757987840002,26177387588943873,26177211490631680,26177172835860480,26177202900500480,26177288800108544,26177284504616960,26458686467342336,26458660698521600,26458841091276801,26458695062257664,26458750897094656,26458652108783616,26458647817551872,26458738007998464,26458759481327616,26458862560477185,26458866861146113,26458768076570624,26458742302834688,26458763776819200,26458729417867264,26458875450621953,26458703648522240,26458746601930752,26458656403685376,26458776666439680,26458677877211136,26740182924197888,27021743797043200,27021752386846720,27021765271355392,27021730911682560,27021739502141440,27021833994633217,27021683670843392,27021657897500674,27021675077500928,27021760976715776,27021756681682944,27021748092141568,27021662192336896,27021705141747712,27303240248066050,27303214478262274,27303180118523906,27303145758785538,27303150053752834,27303205888327682,27303235953098754,27303132873883650,27303218773229570,27303158643687426,27303227363164162,27303137168850946,27303141463818242,27303231658131458,27303223068196866,27584667983413248,27584560605364224,27584740998119425,27584586374184960,27584642209677312,27584775357464577,27584659388170240,27584766767988737,27584646508773376,27584556310528000,27584552015626240,27584637914841088,27584663683661824,27584603555364864,27584629324709888,27584577784053760,27584676573282304,27584650804199424,27584547724394496,27584762467319809,27584594969100288,27866022701760512,28147639408984064,28147660883558400,28147665178198016,28147656588525568,28147562103046144,28147647998984192,28147643703885824,28147605048590336,28147630818525184,28147652293689344,28147574988013568,28429028489953280,28710503466729472,28992085813231618,28992029978656770,28992068633362434,28992060047884288,28991999913885698,28992077223297026,28992081518264322,28992064338395138,28992072928329730,28991922602639362,28992055748460546,28992090108198914,28991987028983810,29273625218973697,29273479184973824,29273492069941248,29273397580988416,29273406170791936,29273401875890176,29273410465628160,29273487775105024,29273453415628800,29554988520243202,29554954160504834,29554872556126210,29554984225275906,29554975635341314,29554881146060802,29554902620897282,29554919800766466,29554971340374018,29555095900782593,29554992815210498,29554962750439426,29554967045406722,29554876851093506,29554928390701058,29555001405145090,29554885441028098,29554911210831874,29836356123426818,29836351828459522,29836442022772738,29836377598263298,29836472087543810,29836437727805442,29836476382511106,29836450612707330,29836463497609218,29836360418394114,29836386188197890,29836394778132482,29836403368067074,29836467792576514,29836347533492226,29836459202641922,29836429137870850,29836446317740034,30117938473730050,30117826804580354,30117852574384130,30117869754253314,30117912703926274,30117934178762754,30117916998893570,30117951358631938,30117861164318722,30117942768697346,30117921293860866,30117904113991682,30117822509613058,30117831099547650,30117835394514946,30117878344187906,30117925588828162,30399400571895808,30680931378266114,30680918493364226,30680935673233410,30680939968200706,30680858363822082,30680927083298818,30680922788331522,30680832594018306,30680845478920194,30680914198396930,30680836888985602,30680841183952898,30680879838658562,30680905608462338,30680849773887490,30962307571384322,31243722417963008,31243731007766528,31243816906915840,31243726712864768,31243778252603392,31243804021948416,31243735302602752,31243812612079616,31243950056144897,31525227456954370,31525218867019778,31525197392183298,31525313356300290,31525300471398402,31525309061332994,31525236046888962,31806882829762561,31806758273744896,31806732498829314,32088228952080384,32088147348094976,32088155937898496,32088237542211584,32088374986407937,32088160232734720,32088151642996736,32088241837047808,32088203182735360,32369622329917440,32651153136156672,32651191790469120,32651178905501696,32651101596418048,32651105891319808,32651187495632896,32651324939960321,32651097301516288,32651110186156032,32932580868030464,32932576573128704,32932799916736513,32932666767179776,32932572278226944,32932662472343552,32932653882212352,32932585162866688,32932628112867328,33214055844741120,33214060139577344,33214103089577984,33214128858923008,33214141743890432,33214051549839360,33214137449054208,33214047254937600,33214274893512705,33495595251466240,33495586656681984,33495629606092800,33495689735700480,33495599541846016,33495681146028032,33495668261388288,33495655376027648,33495663966486528,33495676851191808,33495672556486656,33495685441060864,33777126060916736,33777010092998656,33777108875804672,33776997212028928,33777095996407808,33777087402475520,33777190485753857,33777224845099009,33777113171296256,33777035861819392,33777053042999296,33777216255623169,33777211954954241,33777005798162432,33777078812344320,33777091697311744,33777001503260672,33777117471047680,33777100293013504,33777027271688192,33777044456734720,34058716995190786,34058489361924098,34340101781323776,34340007291977730,34340106076160000,34340183390486529,34340080306159616,34340011586813952,34340054536224768,34340093191520256,34340110371192832,34340114665832448,34340024471977984,34340033065320448,34340097486618624,34340088896618496,34621482266001410,34903004489646080,34903038850039808,34903047440039936,34903051734745088,34903064619253760,34902961540235264,34903060324614144,34903056029581312,34902965840248832,34903030259580928,34902974425399296,34903043144941568,35184513825701890,35184436516290562,35184479465963522,35184518120669186,35184522415636482,35184526710603778,35184505235767298,35184427932123136,35184449401192450,35184535300538370,35184539595505666,35184531005571074,35465993098362880,35465907203866624,35465954443067392,35466001688166400,35466005983002624,35465988803461120,35465997393461248,35465924378820608,35465980213002240,35466014572675072,35466010278035456,35465911493656576,35747386470367232,35747429419778048,35747485254746112,35747472370171904,35747489549385728,35747480959713280,35747382180642816,35747463780171776,35747468075073536,35747399355531264,35747476664877056,35747455189712896,36028870042320896,36028947346882560,36028960231456768,36028943051784192,36028861447077888,36028964526096384,36028930166423552,36028955936423936,36028938756882432,36028904396488704,36028951641587712,36028874332241920,36310387961888770,36310284882673666,36310392256856066,36310302062542850,36310383666921474,36310327832346626,36310276292739074,36310366487052290,36310362192084994,36310353602150402,36310400846790658,36310271997771778,36310375076986882,36310370782019586,36310319242412034,36310396551823362,36310280587706370,36310310652477442,36591759858925570,36591755563958274,36591777038794754,36591785628729346,36591850053238786,36591751268990978,36591746974023682,36591875823042562,36591828578402306,36591871528075266,36591845758271490,36591794218663938,36591837168336898,36591858643173378,36591862938140674,36591841463304194,36591802808598530,36591867233107970,36873282082439170,37154855842480130,37154860137447426,37154847252545538,37154851547512834,37154774238101506,37154838662610946,37154830072676354,37154761353199618,37154804302872578,37154842957578242,37154834373738496,37154864432414722,37436403839795201,37436176200499200,37436171905597440,37436266394550272,37436180495400960,37436253509582848,37436227740237824,37436262099714048,37436184790237184,37436232035663874,37436399542075393,37717694130683904,37717745670356992,37717874519048193,37717676945637376,37717840159703041,37717728486293504,37717758549753856,37717865931669505,37717775734865920,37717861628903425,37717685535768576,37717741371260928,37717737076424704,37717655472111616,37717651177209856,37717659766947840,37717702716948480,37717762845245440,37717767144996864,37717646885978112,37999130448822272,37999169107394560,37999121862688768,37999212053135360,37999160512479232,37999151922348032,37999340908445697,37999237821956096,37999177693659136,37999134743658496,37999203463004160,37999315136413697,37999336605614081,37999233526464512,37999216347971584,37999349495758849,37999126153920512,37999220647067648,37999242121707520,37999250711576576,38280635489255426,38280699913764866,38280605424484354,38280687028862978,38280712798666754,38280609719451650,38280678438928386,38280596834549762,38280626899320834,38280725683568642,38280721388601346,38280652669124610,38280717093634050,38280691323830274,38280644079190018,38280601129517058,38280695618797570,38280708503699458,38562299451867137,38562162006556672,38562080402243584,38562153416425472,38562127647080448,38562076107341824,38562071812440064,38562084697079808,38562166301392896,38843606924918784,39125034649518082,39125116253896706,39125077599191042,39125124843831298,39125111958929410,39125120548864002,39125150613635074,39125103368994818,39125026059583490,39125060419321858,39125142023700482,39125069009256450,39125021764616194,39125051829387266,39125133433765890,39125137728733186,39125146318667778,39125030354550786,39406595525509122,39406526806032386,39406509626163202,39406535395966978,39406552575836162,39406612705378306,39406625590280194,39406501036228610,39406617000345602,39406621302915072,39406578345639938,39406543985901570,39406599820476418,39406608410411010,39406505331195906,39406496741261314,39406591230541826,39406586935574530,39688036144316416,39688104863662080,39688134928695296,39688079093727232,39688044740083712,39688049029480448,39688122044121088,39688113454120960,39688126338826240,39688117749022720,39688130633662464,39688139223334912,39969588429848578,39969605609717762,39969592724815874,39969601314750466,39969511120437250,39969554070110210,39969579839913986,39969614199652354,39969519716859904,39969597019783170,39969524005339138,39969609904685058,40251114950098945,40250934557343744,40250930262507520,40250968921079808,40251037635641344,40251016161656832,40251011866820608,40251041935392768,40251050525261824,40250960326164480,40251003276689408,40250925967605760,40251140722524161,40251033340149760,40250977507344384,40251149309444097,40251020460752896,40251136419299329,40250951736033280,40250921676374016,40532525497319426,40532435303006210,40532443892940802,40532396648300546,40532400943267842,40532409533202434,40532405238235138,40532516907384834,40532452482875394,40532495432548354,40532478252679170,40532521202352130,40532512612417538,40532491137581058,40532508317450242,40532499727515650,40532486842613762,40532426713071618,40813918869716994,40813961819389954,40813927459651586,40813901689847810,40813871625076738,40813966114357250,40813996179128322,40813880215011330,40813983294226434,40813974704291842,40813910279782402,40814000474095618,40813970409324546,40813953229455362,40813991884161026,40813987589193730,40813875920044034,40813884509978626,41095385256165378,41095471155511298,41095359486361602,41095475450478594,41095441090740226,41095458270609410,41095466860544002,41095393846099970,41095436795772930,41095449680674818,41095376666230786,41095350896427010,41095346601459714,41095355191394306,41095428205838338,41095445385707522,41095462565576706,41095402436034562,];

pub fn new_parser<'t>(tokenizer:&'t mut dyn Tokenizer<'t,Construct>) -> ZCParser<'t,Construct,Construct>
{
 let mut parser1:ZCParser<Construct,Construct> = ZCParser::new(60,147,tokenizer);
 let mut rule = ZCRProduction::<Construct,Construct>::new_skeleton("start");
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Classes(cs),Maincl(mc),)=(_item1_.value,_item0_.value,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ let _item16_ = parser.popstack(); let _item15_ = parser.popstack(); let _item14_ = parser.popstack(); let _item13_ = parser.popstack(); let _item12_ = parser.popstack(); let _item11_ = parser.popstack(); let _item10_ = parser.popstack(); let _item9_ = parser.popstack(); let _item8_ = parser.popstack(); let _item7_ = parser.popstack(); let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(thebody),Id(an),Id(cn),)=(_item14_.value,_item11_.value,_item1_.value,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Class(cl),Classes(mut cs),)=(_item1_.value,_item0_.value,) { 
  cs.push(makelbox!(_item1_,cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Decs(mut ds),Id(sup),Id(name),)=(_item4_.value,_item2_.value,_item1_.value,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{ let _sup_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (sup,)=(_sup_.value,) {  sup }  else {parser.bad_pattern("(sup,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(v),Id(t),)=(_item1_.value,_item0_.value,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),Id(t),)=(_item3_.value,_item1_.value,_item0_.value,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ let _item8_ = parser.popstack(); let _item7_ = parser.popstack(); let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_item7_.value,_item4_.value,_item2_.value,_item1_.value,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let _v_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (v,Decs(mut ds),)=(_v_.value,_item0_.value,) {  ds.push(makelbox!(_v_,v)); Decs(ds) }  else {parser.bad_pattern("(v,Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let _m_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (m,Decs(mut ds),)=(_m_.value,_item0_.value,) {  ds.push(makelbox!(_m_,m)); Decs(ds) }  else {parser.bad_pattern("(m,Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item2_.value,_item1_.value,_item0_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item3_.value,_item2_.value,_item1_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack();  return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _c_ = parser.popstack(); 
  if let (c,)=(_c_.value,) {  c }  else {parser.bad_pattern("(c,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(s),Stms(mut sv),)=(_item1_.value,_item0_.value,) {  sv.push(makelbox!(_item1_,s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(sv),)=(_item1_.value,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(b),Stm(a),Exp(c),)=(_item6_.value,_item4_.value,_item2_.value,) { 
  Stm(Ifstat(makelbox!(_item2_,c), makelbox!(_item4_,a), makelbox!(_item6_,b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(a),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Ifstat(makelbox!(_item2_,c),makelbox!(_item4_,a),parser.lbx(5,Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(s),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Whilest(parser.lbx(2,c),parser.lbx(4,s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),)=(_item2_.value,_item0_.value,) {  Stm(Assignst(v,parser.lbx(2,e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Exp(i),Exp(v),)=(_item5_.value,_item2_.value,_item0_.value,) { 
  Stm(ArAssignst(parser.lbx(0,v),parser.lbx(2,i),parser.lbx(5,e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(args),Id(m),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),)=(_item1_.value,) {  Stm(Returnst(parser.lbx(1,e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); 
  if let (Vdec(v),)=(_item0_.value,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(a),)=(_item1_.value,) {  Exp(Notexp(parser.lbx(1,a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("<",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("%",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("==",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(i),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("[]",parser.lb(a),parser.lbx(2,i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(field),Exp(obj),)=(_item2_.value,_item0_.value,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(args),Id(f),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _i_ = parser.popstack(); 
  if let (i,)=(_i_.value,) {  i }  else {parser.bad_pattern("(i,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _s_ = parser.popstack(); 
  if let (s,)=(_s_.value,) {  s }  else {parser.bad_pattern("(s,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _b_ = parser.popstack(); 
  if let (b,)=(_b_.value,) {  b }  else {parser.bad_pattern("(b,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item0_.value,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(s),)=(_item3_.value,) {  Exp(Newarray(parser.lbx(3,s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item1_.value,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _e_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (e,)=(_e_.value,) {  e }  else {parser.bad_pattern("(e,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item1_.value,_item0_.value,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item2_.value,_item1_.value,) {  er.push(parser.lbx(1,e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); <Construct>::default()};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras(parser:&mut ZCParser<Construct,Construct>)
{
  parser.RSM[27].insert("ANY_ERROR",Stateaction::Error("need type for formal argument"));
  parser.RSM[66].insert("ANY_ERROR",Stateaction::Error("need to close a ("));
}//end of load_extras: don't change this line as it affects augmentation
