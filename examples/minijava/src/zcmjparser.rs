//Parser generated by rustlr for grammar zcmj

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{LBox,makelbox};
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [17179934720,176093790209,171798888449,281474976972800,563194766688258,562967133421570,563134637342721,844669743267843,1125998691483648,1407619696689154,1407392063946752,1407555272638465,1688871335690240,1970342017040386,1970569650307074,2251799814340608,2533300560920576,2814848551747586,2814938746519553,2814792717565952,3096254809505792,3377699721510912,3659273482534912,3940684034801664,4222223435235330,4503702707240962,4503638282731522,4503711297175554,4503801492013057,4503629692796930,4503621102862338,4503599628025858,4503715592142850,4785130439901184,5066549582692352,5066571057070080,5066652661383168,5066588237332480,5066661251579904,5066579647266816,5066742855827457,5066764330467329,5066665546678272,5066747150860289,5348063214174208,5629499536244736,5910991691055106,5911219324321794,6192565453520896,6192664238096385,6192479554109440,6192488144175104,6192449489534976,6192561158422528,6473924465065986,6473954529837058,6474040429182978,6473945939902466,6473963119771650,6474036134215682,6474027544281090,6755515405959170,6755511110991874,6755399441842178,6755420916678658,6755429506613250,6755502521057282,6755438096547842,7036938844438528,7036874419077122,7318349395853314,7599824372367362,7881299349143554,8162774326050818,8444313728057344,8725797294833664,8725861719277568,9007199257165824,9288742953418752,9570217930194944,9851628482461696,9851680022462464,9851718676840448,9851714381938688,9851851820957697,9851624187953152,9851632777691136,9851637072723968,9851705792397312,10133215126159362,10133146406682626,10133189356355586,10133107751976962,10133137816748034,10133112046944258,10133202241257474,10133228011061250,10133210831192066,10133193651322882,10133154996617218,10133129226813442,10133103457009666,10133099162042370,10133180766420994,10133197946290178,10133120636878850,10133223716093954,10133219421126658,10414629976080384,10696049116119042,10977524094992384,11259067790983170,11259072085950466,11259149395361794,11259140805427202,11259076380917762,11259059201048578,11259157985296386,11259063496015874,11259145100394498,11259153690329090,11259162280263682,11259166575230978,11259106445688834,11259084970852354,11259132215492610,11540637257236482,11540538472988674,11540542767955970,11540547062923266,11540624372334594,11540551357890562,11540581422661634,11540628667301890,11540620077367298,11540615782400002,11540632962269186,11540641552203778,11540534178021378,11540559947825154,11540607192465410,11821949025189888,11822060694405120,12103574326476800,12103570031443968,12103578620919808,12103557146411008,12103497016475648,12103591506214912,12103587210985472,12103488427261952,12103582916083712,12103501311574016,12103565736607744,12103531376541696,12385066482139138,12384967697891330,12385006352596994,12384959107956738,12385062187171842,12384971992858626,12385053597237250,12385049302269954,12385032122400770,12385040712335362,12384976287825922,12384963402924034,12385045007302658,12385057892204546,12384984877760514,12666541458915330,12666434084732930,12666438379700226,12666481329373186,12666507099176962,12666519984078850,12666532868980738,12666528574013442,12666446969634818,12666442674667522,12666459854536706,12666515689111554,12666524279046146,12666537163948034,12666451264602114,12947939125755904,12947943420657664,12947857521508352,12947930536214528,12947853226278912,12947861816541184,12948076566216705,12947904766279680,12947848931770368,13229478527500290,13229465642598402,13229431282860034,13229491412402178,13229384038219778,13229469937565698,13229409808023554,13229401218088962,13229482822467586,13229388333187074,13229396923121666,13229457052663810,13229392628154370,13229474232532994,13229487117434882,13510798885191680,13510854719700992,13510889079177216,13510893374078976,13510880489635840,13510803179700224,13510811769962496,13510807474929664,13511026519703553,13792312515362816,13792303925297152,13792488611643393,13792480021643265,13792333989216258,13792273860722688,13792389824708608,13792385529610240,14073808969596928,14355279651405824,14636763218116608,14918203830960130,14918276845404162,14918178061156354,14918229600763906,14918186651090946,14918272550436866,14918195241025538,14918221010829314,14918268255469570,14918298320240642,14918263960502274,14918255370567682,14918285435338754,14918182356123650,14918302615207938,14918173766189058,14918294025273346,14918212420894722,14918289730306050,15199653039964160,15199876380360705,15199657335193600,15199738939441152,15199704579964928,15199661630226432,15199743234342912,15199730349899776,15199648745455616,15481123723870208,15762602993385472,15762826333913089,15762598698876928,15762654533386240,15762688892862464,15762607288614912,15762693187764224,15762611583647744,15762680303321088,16044301310689281,16044129510096896,16044073675587584,16044155280031744,16044168164474880,16044077970096128,16044163869573120,16044086560358400,16044082265325568,16325643141185536,16325630256742400,16325557242036224,16325552946806784,16325604486807552,16325776287465473,16325548652298240,16325561537069056,16325638846283776,16607113822994432,16607251264241665,16607027923517440,16607036513779712,16607032218746880,16607105233453056,16607079463518208,16607118117896192,16607023629008896,16888502900228096,16888588799705088,16888507195457536,16888511490490368,16888726241017857,16888580210163712,16888498605719552,16888554440228864,16888593094606848,17170029416939520,17169982172168192,17169977876938752,17170063776415744,17169973582430208,17170201217794049,17170055186874368,17169986467201024,17170068071317504,17451543048028160,17451457148878848,17451530163585024,17451461443911680,17451504393650176,17451676194570241,17451538753126400,17451452853649408,17451448559140864,17733005140295680,17733151171346433,17732936420622336,17733018024738816,17732927830360064,17732932125589504,17732979370360832,17733013729837056,17732923535851520,18014626148122625,18014402807070720,18014411397332992,18014398512562176,18014454347071488,18014488706547712,18014407102300160,18014480117006336,18014493001449472,18296023814111232,18295937914896384,18295950799208448,18296019519078400,18295933621174272,18296028108554240,18296040993849344,18295980864176128,18296015224242176,18296006634045440,18296032403718144,18296036698619904,18577511674281986,18577498790821888,18577434364870658,18577481609510914,18577455839707138,18577412890034178,18577425775919104,18577503085264896,18577494495789056,18577507379314690,18577490200952832,18577408595066882,18577421479968770,18577515970560000,18577417185001474,18858883574661120,19140298421895168,19421872182919168,19703308504989696,19984723349536768,19984950985490433,19984817838424064,19984804953980928,19984779184046080,19984813543522304,19984731939274752,19984727644045312,19984736234307584,20266348649381890,20266340059447298,20266258455068674,20266365829251074,20266357239316482,20266267045003266,20266271339970562,20266331469512706,20266275636183040,20266305699708930,20266344354414594,20266262750035970,20266284224872450,20266361534283778,20266352944349186,20547840806551554,20547750612238338,20547742022303746,20547815036747778,20547746317271042,20547759202172930,20547832216616962,20547823626682370,20547737727336450,20547729140285440,20547819331715074,20547780677009410,20547836511584258,20547806446813186,20547827921649666,20547733432369154,20829225589604352,20829290014638080,20829212703588354,20829298604507136,20829311487836162,20829234178424834,20829315784245248,20829221293522946,20829216998555650,20829307192868866,20829255653261314,20829208408621058,20829294309474304,20829302898950144,20829281423065090,21110777875660800,21110700566315008,21110769286184960,21110687680495618,21110691975462914,21110773581217792,21110730631282688,21110756401152000,21110790760955904,21110782169776130,21110696270430210,21110683385528322,21110709155332098,21110786465726464,21110764991348736,21392244262895616,21392166952042498,21392158362107906,21392239968059392,21392231376551938,21392257146355714,21392261442437120,21392175543025664,21392252852371456,21392205606748162,21392184131911682,21392171247009794,21392162657075202,21392265737666560,21392248557928448,21673633339080706,21673714944770048,21673719239606272,21673736419147776,21673740714377216,21673641929015298,21673732123328514,21673637634048002,21673723534639104,21673706353524738,21673646223982594,21673727829082112,21673680584704000,21673659108884482,21673650519736320,21955194215071746,21955112610693122,21955202805792768,21955108315725826,21955181330169858,21955116905660418,21955155560366082,21955134085529602,21955215689908226,21955125496446976,21955198510039042,21955189920104450,21955207099973634,21955211394940930,21955121200627714,22236664896487426,22236673488060416,22236630536749058,22236596177010690,22236609061912578,22236682076356610,22236591882043394,22236669191454722,22236583292108802,22236600473157632,22236690667798528,22236677782503424,22236656306552834,22236686371323906,22236587587076098,22518075449868288,22518105513263106,22518144167968770,22518148462936066,22518157052870658,22518084038426626,22518071153524738,22518139873001474,22518165644509184,22518131283066882,22518152759214080,22518161347837954,22518058268622850,22518066858557442,22518062563590146,22799619146448896,22799640621219840,22799537540366338,22799614849777666,22799546130300930,22799632029646850,22799541835333634,22799559015202818,22799580490039298,22799550426578944,22799627735924736,22799533245399042,22799606259843074,22799636324614146,22799623441481728,23081025403289600,23081094123159552,23081012518977536,23081107007799296,23081098418192384,23081055468257280,23081016815648768,23081115597930496,23081081238126592,23081089828323328,23081102712635392,23081111302701056,23362581984313346,23362508969869314,23362487495032834,23362496084967426,23362569099411458,23362483200065538,23362586279280642,23362556214509570,23362573394378754,23362590574247938,23362500379934722,23362564804444162,23362530444705794,23362577689346050,23362491790000130,23643996833906688,23925583479898113,23925458925780992,23925433150930946,24206895243264002,24206878063394818,24206942487904258,24206968257708034,24206860883525634,24206929603002370,24206903833198594,24206946782871554,24206951077838850,24206963962740738,24206938192936962,24206886653329410,24206856588558338,24207071341576193,24206959667773442,24206976847642626,24206847998623746,24206852293591042,24488477596123138,24488464711221250,24488473301155842,24488456121286658,24488408876646402,24488400286711810,24488490481025026,24488481891090434,24488395991744514,24488387401809922,24488383106842626,24488486186057730,24488469006188546,24488391696777218,24488430351482882,24769943983423488,24769905328521216,24769875263553536,24769956868063232,24769948278456320,24769931098390528,24769866676240384,24769965458194432,24769862379241472,24769939688587264,24769952572899328,24769961162964992,25051363124314112,25051272930328576,25051500566806529,25051285815099392,25051354534772736,25051504861839361,25051328764837888,25051333060395010,25051281520066560,25051367419215872,25051277224837120,25332898230697986,25332820921286658,25332902525665282,25332915410567170,25332889640763394,25332881050828802,25332855281025026,25332906820632578,25332893935730690,25332808036384770,25332816626319362,25332812331352066,25332825216253954,25332911115599874,25332833806188546,25614334551326722,25614222882177026,25614317371457538,25614325961392130,25614343141261314,25614235767078914,25614304486555650,25614321666424834,25614446225391617,25614313076490242,25614278716751874,25614261536882690,25614351731195906,25614270126817282,25614227177144322,25614231472111618,25614338846294018,25614252946948098,25895813823266816,25895697859280896,25895912612233217,25895727923855360,25895809528168448,25895736513921024,26177232964550658,26458875450818561,26458759481589760,26458660698652672,26458686467342336,26458729418326016,26458746601734144,26458695062061056,26458656403619840,26458647817355264,26458742302769152,26458768076767232,26458652108390400,26458738007867392,26458776666767360,26458866861146113,26458703648391168,26458677877276672,26458763776688128,26458841091145729,26458750897094656,26458862560477185,26740191510396930,26740230165102594,26740281704710146,26740285999677442,26740264524840962,26740268819808258,26740182920462338,26740277409742850,26740290294644738,26740195805364226,26740200100331522,26740208690266114,26740255934906370,26740273114775554,26740187215429634,27021675077238784,27021748092141568,27021705142206464,27021752386584576,27021756681748480,27021765271879680,27021760976650240,27021657897500674,27021743797108736,27021730912075776,27021683670712320,27021739502272512,27021833994633217,27021662192926720,27303132877750272,27584663683530752,27584577784119296,27584552015233024,27584766767988737,27584603555233792,27584642209611776,27584586374184960,27584650804199424,27584659388432384,27584556310462464,27584762467319809,27584637914710016,27584560605495296,27584594968903680,27584629325168640,27584646508576768,27584740997988353,27584775357661185,27584667983609856,27584547724197888,27584676573609984,27866022701760512,28147647998197762,28147574983753730,28147562098851842,28147660883099650,28147652293165058,28147665178066946,28147605048524802,28147639408263170,28147497672507394,28147630818328578,28147643703230466,28147656588132354,28147635117490176,28429067139743744,28429062844841984,28429054255300608,28428985535627264,28428976945364992,28429028485365760,28429200288579585,28428981240594432,28428972650856448,28710563590111234,28710456215928834,28710537820307458,28710567885078530,28710559295143938,28710503460569090,28710494870634498,28710550705209346,28710486280699906,28710576475013122,28710477690765314,28710447625994242,28710529230372866,28710542115274754,28710546410242050,28710451920961538,28710670970388481,28710460510896130,28992055749050368,28992085813624832,28992077223559168,28992081518723072,28992090108854272,28992029979181056,28991987033440256,28991999918276608,28992064339247104,28992068634083328,28992072929116160,29273427644841986,29273436234776578,29273401875038210,29273496364318722,29273406170005506,29273522134122498,29273517839155202,29273513544187906,29273509249220610,29273492069351426,29273410464972802,29273526429089794,29273397580070914,29273500659286018,29273453414645762,29273479184449538,29273487774384130,29273444824711170,29554928396992512,29836403373768704,30117904113991682,30117852574384130,30117835394514946,30117938473730050,30117822509613058,30117925588828162,30117878344187906,30117861164318722,30117942768697346,30117869754253314,30117831099547650,30117912703926274,30117921293860866,30117934178762754,30117826804580354,30117951358631938,30117916998893570,30399400571895808,30681000102723585,30680772464541696,30680866953428992,30680862658527232,30680781054279680,30680776759050240,30680828299051008,30680854068985856,30680785349312512,30962307571384322,31243782547439618,31243885626654722,31243808317243394,31243868446785538,31243795432341506,31243829792079874,31243881331687426,31243855561883650,31243786842406914,31243889921622018,31243877036720130,31243872741752834,31243791137374210,31243799727308802,31243864151818242,31525227456954370,31525197392183298,31525236046888962,31525218867019778,31525300471398402,31525313356300290,31525309061332994,31806882829762561,31806758273679360,31806732498829314,32088374986407937,32088147348094976,32088203182604288,32088160232865792,32088241836982272,32088228952539136,32088155937832960,32088151642603520,32088237542080512,32369764059774976,32369729699708928,32369686750429184,32369785534152704,32369772649644032,32369789829382144,32369699634741248,32369755469578240,32369781239250944,32369776944087040,32369768354611200,32369695344361472,32651316348780545,32651097304989696,32651127364911104,32651217564401664,32651135954976768,32651187495501824,32651213264322560,32651153136025600,32651178905960448,32651290578780161,32651191790403584,32651208969224192,32651101596024832,32651144549695488,32651324938452993,32651312048111617,32651200385908736,32651110186287104,32651226154401792,32651196089368576,32651105891254272,32932572283469824,33214274893512705,33214047254937600,33214141743824896,33214103089446912,33214137448923136,33214060139708416,33214128859381760,33214051549446144,33214055844675584,33495603836092416,33495526526156800,33495612425633792,33495535116419072,33495578066157568,33495522231648256,33495530821386240,33495749870288897,33495616720535552,33777224847065089,33777005798096896,33777053042868224,33777010093129728,33777087402344448,33777078812803072,33776997208358912,33777091697246208,33777001502867456,34058489361924098,34058716995190786,34340011587403776,34340110371127296,34340093191585792,34340106076225536,34340007291977730,34340054536683520,34340101781061632,34340114666356736,34340183390486529,34340088896749568,34340033065189376,34340024471715840,34340080306552832,34340097486618624,34621482266001410,34903030259974144,34903051734482944,34903064619778048,34903038850170880,34903047440039936,34903056029646848,34902970135216128,34902974425137152,34902961540825088,34903060324548608,34903004490104832,34903043145007104,35184470875176962,35184483760078850,35184496644980738,35184380680863746,35184419335569410,35184384975831042,35184466580209666,35184488055046146,35184427925504002,35184376385896450,35184410745634818,35184492350013442,35184453695307778,35184462285242370,35184500939948034,35184402155700226,35184475170144258,35184372090929154,35465859952082946,35465855657115650,35465945851428866,35465967326265346,35465950146396162,35465847067181058,35465928671559682,35465958736330754,35465851362148354,35465937261494274,35465902901755906,35465894311821314,35465971621232642,35465975916199938,35465963031298050,35465941556461570,35465885721886722,35465877131952130,35747429419384834,35747489548926978,35747399354613762,35747468074090498,35747377885544448,35747472369057794,35747480958992386,35747476664025090,35747463779123202,35747455189188610,35747485253959682,35747386469711874,36028951641325568,36028861447667712,36028955936489472,36028904396947456,36028947346882560,36028964526620672,36028938757013504,36028874331979776,36028960231391232,36028943051849728,36028865747222528,36028930166816768,36310426618036224,36310332134064128,36310430913200128,36310435208101888,36310422323593216,36310418028560384,36310349308690432,36310405143527424,36310379373658112,36310439503331328,36310413733724160,36310336424378368,36591854350368768,36591888710434816,36591824285401088,36591905889910784,36591914480041984,36591880120238080,36591893005271040,36591807110840320,36591811401089024,36591901594746880,36591910184812544,36591897300303872,36873282082439170,37154735582412802,37154791416987650,37154787122020354,37154812891824130,37154752762281986,37154744172347394,37154726992478210,37154800006922242,37154709812609026,37154701222674434,37154795711954946,37154808596856834,37154821481758722,37154705517641730,37154778532085762,37154825776726018,37154817186791426,37154696927707138,37436403839729665,37436180495335424,37436262099582976,37436171905597440,37436184790368256,37436176200105984,37436227740106752,37436266394484736,37436399542075393,37436232035663874,37436253510041600,37717711306620930,37717797205966850,37717805795901442,37717788616032258,37717724191522818,37717801500934146,37717792910999554,37717754256293890,37717814385836034,37717810090868738,37717784327225344,37717780026097666,37999169107197952,37999177693528064,37999151922413568,37999349495955457,37999336605614081,37999220646871040,37999203463462912,37999134743789568,37999126153527296,37999160512479232,37999340908380161,37999237821825024,37999216347906048,37999212053004288,37999315136282625,37999233526726656,37999250711904256,37999242121904128,37999130448756736,37999121862492160,38280652670238720,38280635489189888,38280811582324737,38280790112993281,38280626899124224,38280725688614912,38280601130237952,38280815885156353,38280644083908608,38280596839202816,38280695623581696,38280687029714944,38280708503437312,38280678440173568,38280717098614784,38280691324616704,38280605425467392,38280824472666113,38280609720500224,38280712798535680,38562131948142592,38843628393594880,38843555378888704,38843559673921536,38843636983136256,38843602623660032,38843546789150720,38843641278038016,38843551083659264,38843774428643329,39125116253831170,39125124843765762,39125026059517954,39125150613569538,39125142023634946,39125060419256322,39125069009190914,39125051829321730,39125111958863874,39125146326204416,39125030354485250,39125103368929282,39125021764550658,39125133433700354,39125120548798466,39125077599125506,39125034649452546,39125137728667650,39406552575901698,39406617000411138,39406578345705474,39406509626228738,39406496741326850,39406505331261442,39406612705443842,39406501036294146,39406526806097922,39406621295378434,39406535396032514,39406608410476546,39406599820541954,39406591230607362,39406586935640066,39406625590345730,39406595525574658,39406543985967106,39688134927974402,39688130633007106,39688104863203330,39688036143726594,39688122043072514,39688044740083712,39688049028628482,39688126338039810,39688113453137922,39688139222941698,39688079093399554,39688117748105218,39969605610438656,39969609905340416,39969579840765952,39969614200569856,39969511121616896,39969601315274752,39969554070896640,39969592725798912,39969524005928960,39969588430962688,39969597020831744,39969519716859904,40250930262441984,40251020460556288,40250934557474816,40251003277148160,40251149309640705,40250951736098816,40250968920883200,40251050525589504,40251037635510272,40251011866689536,40251136419299329,40251140722524161,40250921676177408,40251114949967873,40250925967212544,40251016161591296,40251041935589376,40250977507213312,40251033340411904,40250960326164480,40532426713137154,40532508317515778,40532516907450370,40532443893006338,40532478252744706,40532512612483074,40532409533267970,40532400943333378,40532486842679298,40532452482940930,40532405238300674,40532521202417666,40532495432613890,40532435303071746,40532396648366082,40532491137646594,40532525497384962,40532499727581186,40813901689782274,40813991884095490,40813884509913090,40813974704226306,40813970409259010,40813927459586050,40813871625011202,40813910279716866,40813983294160898,40813987589128194,40813918869651458,40813966114291714,40813875919978498,40813961819324418,40813880214945794,40813996179062786,40814000474030082,40813953229389826,41095376666230786,41095385256165378,41095402436034562,41095350896427010,41095471155511298,41095449680674818,41095441090740226,41095359486361602,41095466860544002,41095445385707522,41095355191394306,41095436795772930,41095346601459714,41095458270609410,41095475450478594,41095393846099970,41095428205838338,41095462565576706,];

pub fn new_parser() -> ZCParser<Construct,Construct>
{
 let mut parser1:ZCParser<Construct,Construct> = ZCParser::new(60,147);
 let mut rule = ZCRProduction::<Construct,Construct>::new_skeleton("start");
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Classes(cs),Maincl(mc),)=(_item1_.value,_item0_.value,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ let mut _item16_ = parser.popstack(); let mut _item15_ = parser.popstack(); let mut _item14_ = parser.popstack(); let mut _item13_ = parser.popstack(); let mut _item12_ = parser.popstack(); let mut _item11_ = parser.popstack(); let mut _item10_ = parser.popstack(); let mut _item9_ = parser.popstack(); let mut _item8_ = parser.popstack(); let mut _item7_ = parser.popstack(); let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stms(thebody),Id(an),Id(cn),)=(_item14_.value,_item11_.value,_item1_.value,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Class(cl),Classes(mut cs),)=(_item1_.value,_item0_.value,) { 
  cs.push(parser.lbx(1,cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Decs(mut ds),Id(sup),Id(name),)=(_item4_.value,_item2_.value,_item1_.value,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{ let mut sup = parser.popstack(); let mut _item0_ = parser.popstack();  sup.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Id(v),Id(t),)=(_item1_.value,_item0_.value,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),Id(t),)=(_item3_.value,_item1_.value,_item0_.value,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ let mut _item8_ = parser.popstack(); let mut _item7_ = parser.popstack(); let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_item7_.value,_item4_.value,_item2_.value,_item1_.value,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let mut v = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Decs(mut ds),)=(_item0_.value,) {  ds.push(parser.lbx(1,v.value)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let mut m = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Decs(mut ds),)=(_item0_.value,) {  ds.push(makelbox!(m,m.value)); Decs(ds) }  else {parser.bad_pattern("(Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item2_.value,_item1_.value,_item0_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item3_.value,_item2_.value,_item1_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack();  return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let mut c = parser.popstack();  c.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(s),Stms(mut sv),)=(_item1_.value,_item0_.value,) {  sv.push(makelbox!(_item1_,s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stms(sv),)=(_item1_.value,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(b),Stm(a),Exp(c),)=(_item6_.value,_item4_.value,_item2_.value,) { 
  Stm(Ifstat(makelbox!(_item2_,c), makelbox!(_item4_,a), makelbox!(_item6_,b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(a),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Ifstat(makelbox!(_item2_,c),makelbox!(_item4_,a),parser.lbx(5,Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Stm(s),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Whilest(parser.lbx(2,c),parser.lbx(4,s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),)=(_item2_.value,_item0_.value,) {  Stm(Assignst(v,parser.lbx(2,e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),Exp(i),Exp(v),)=(_item5_.value,_item2_.value,_item0_.value,) { 
  Stm(ArAssignst(parser.lbx(0,v),parser.lbx(2,i),parser.lbx(5,e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item6_ = parser.popstack(); let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(args),Id(m),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(e),)=(_item1_.value,) {  Stm(Returnst(parser.lbx(1,e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (Vdec(v),)=(_item0_.value,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(a),)=(_item1_.value,) {  Exp(Notexp(parser.lbx(1,a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("<",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("%",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("==",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(i),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("[]",parser.lb(a),parser.lbx(2,i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Id(field),Exp(obj),)=(_item2_.value,_item0_.value,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item5_ = parser.popstack(); let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(args),Id(f),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (i,)=(_item0_.value,) {  i }  else {parser.bad_pattern("(i,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut s = parser.popstack();  s.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (b,)=(_item0_.value,) {  b }  else {parser.bad_pattern("(b,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item0_.value,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack();  Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item4_ = parser.popstack(); let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exp(s),)=(_item3_.value,) {  Exp(Newarray(parser.lbx(3,s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item3_ = parser.popstack(); let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item1_.value,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut e = parser.popstack(); let mut _item0_ = parser.popstack();  e.value };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{ let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item1_.value,_item0_.value,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{ let mut _item2_ = parser.popstack(); let mut _item1_ = parser.popstack(); let mut _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item2_.value,_item1_.value,) {  er.push(parser.lbx(1,e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ let mut _item0_ = parser.popstack(); <Construct>::default()};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras(parser:&mut ZCParser<Construct,Construct>)
{
}//end of load_extras: don't change this line as it affects augmentation
