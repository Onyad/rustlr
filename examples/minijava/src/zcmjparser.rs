//Parser generated by rustlr

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{LBox,makelbox};
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [17179934720,171798888449,176093790209,281474976972800,562967133421570,563134637342721,563194766688258,844669743267843,1125998691483648,1407555272704001,1407392063881216,1407619696689154,1688871335690240,1970324837629952,2252044627017730,2251816993751042,2533300560920576,2814792717565952,2814938746519553,2814848551747586,3096254809505792,3377699721510912,3659273482534912,3940684034801664,4222223435235330,4503801492013057,4503715592142850,4503629692796930,4503621102862338,4503638282731522,4503702707240962,4503599628025858,4503711297175554,4785130439901184,5066652661710848,5066665546809344,5066661251710976,5066588237135872,5066571057201152,5066549582168064,5066747150794753,5066579647397888,5066764330467329,5066742855761921,5348063214174208,5629499536244736,5910974512365570,6192552567570434,6192565452472322,6192470963191810,6192488143060994,6192561157505026,6192479553126402,6192449488355330,6473954529902594,6474027544346626,6473945939968002,6474036134281218,6474040429248514,6473924465131522,6473963119837186,6755429507661824,6755511111974912,6755438097399808,6755399442432000,6755515407073280,6755614191517697,7036874419011586,7318594207875074,7318366574608386,7599824372498434,7599888797859840,7881299349274626,8162774325788674,8444313728057344,8725861719343104,8725797294768128,9007199257165824,9288742953418752,9570217930194944,9851637070233602,9851722969579522,9851645660168194,9851753034350594,9851671429971970,9851744444416002,9851628480299010,9851662840037378,9851714379644930,9851748739383298,9851727264546818,9851740149448706,9851624185331714,9851705789710338,9851718674612226,9851654250102786,9851680019906562,9851632775266306,9851735854481410,10133103459303424,10133189358714880,10133112049434624,10133180768845824,10133193653944320,10133154999173120,10133107754139648,10133099164729344,10133326797537281,10414629976080384,10696049116119042,10977524094992384,11259076380983298,11259059201114114,11259153690394626,11259106445754370,11259140805492738,11259132215558146,11259162280329218,11259063496081410,11259067791048706,11259149395427330,11259084970917890,11259166575296514,11259157985361922,11259072086016002,11259145100460034,11540538472988672,11540637257826304,11540551358087168,11540607192924160,11540641552465920,11540547063644160,11540632962596864,11540581423054848,11540620077432832,11540624372858880,11540628667432960,11540615783055360,11822112233684994,11822034924273666,11822103643750402,11822013449437186,11822082168913922,11822009154469890,11822056399110146,11822107938717698,11822095053815810,11822026334339074,11822116528652290,11822022039371778,11822017744404482,11822099348783106,11822090758848514,12103535671836672,12103424002752512,12384989172400128,12384907567824896,12384903272988672,12385126612795393,12384993467629568,12384911863119872,12384980582531072,12384954812858368,12384898978414592,12666446969634818,12666528574013442,12666507099176962,12666537163948034,12666532868980738,12666519984078850,12666451264602114,12666442674667522,12666459854536706,12666438379700226,12666524279046146,12666515689111554,12666434084732930,12666481329373186,12666541458915330,12947848931835904,12947857521246208,12947943421050880,12947861816541184,12947930535952384,12947853226409984,12947939125821440,12948076566282241,12947904766279680,13229457052729346,13229474232598530,13229384038285314,13229396923187202,13229401218154498,13229478527565826,13229482822533122,13229392628219906,13229465642663938,13229409808089090,13229487117500418,13229431282925570,13229469937631234,13229388333252610,13229491412467714,13510906259570690,13510953504210946,13510859014930434,13510867604865026,13510966389112834,13510876194799618,13510863309897730,13510932029374466,13510962094145538,13510871899832322,13510957799178242,13510940619309058,13510944914276354,13510949209243650,13510884784734210,13792333989216258,13792385529741312,13792303925428224,13792488611643393,13792480021643265,13792389824839680,13792273860198400,13792312515166208,14073808969596928,14355228109963264,14355279649832960,14355232404799488,14355314009374720,14355305419505664,14355236700094464,14355223815389184,14355451450097665,14355318304604160,14636703086673920,14636754626543616,14636788986085376,14636793281314816,14636780396216320,14636707381510144,14636698792099840,14636711676805120,14636926426873857,14918255372926976,14918268258025472,14918182358220800,14918263962796032,14918401403650049,14918173768810496,14918186653515776,14918229603254272,14918178063384576,15199648747159552,15481132311642112,15481128016805888,15481179556675584,15481136606937088,15481123722231808,15481351357202433,15481205326348288,15481218211446784,15481213916217344,15762611583647744,15762654533386240,15762688892928000,15762826333978625,15762602993516544,15762680303058944,15762693188157440,15762598698942464,15762607288352768,16044082265063424,16044086560358400,16044168164868096,16044077970227200,16044129510096896,16044073675653120,16044301310754817,16044155279769600,16044163869638656,16325548652363776,16325604486807552,16325643141578752,16325776287531009,16325630256480256,16325557241774080,16325638846349312,16325561537069056,16325552946937856,16607079463518208,16607027923648512,16607032218484736,16607105233190912,16607023629074432,16607113823059968,16607118118289408,16607251264307201,16607036513779712,16888580209901568,16888511490490368,16888498605785088,16888593095000064,16888554440228864,16888502900359168,16888726241083393,16888588799770624,16888507195195392,17170063776481280,17170201217859585,17169977877069824,17169982171906048,17169986467201024,17170068071710720,17170029416939520,17169973582495744,17170055186612224,17451461441486850,17451530160963586,17451470031421442,17451504391159810,17451551635800066,17451452851552258,17451495801225218,17451547340832770,17451448556584962,17451573110636546,17451564520701954,17451568815669250,17451487211290626,17451560225734658,17451577405603842,17451478621356034,17451538750898178,17451543045865474,17451457146519554,17732987962589184,18014454349430784,18295942208290818,18296036697571330,18295959388160002,18296015224111104,18295937913323522,18296006632800258,18296023813914624,18296040993521664,18295946503258114,18296019518488576,18295933618356226,18295950799142912,18296032402604034,18295980862996482,18296028108488704,18577511675592704,18577498790625280,18577515970232320,18577408597884928,18577507380363264,18577481610690560,18577494495199232,18577412890755072,18577425775853568,18577503085199360,18577455840821248,18577490200821760,18858883574661120,19140298421895168,19421872182919168,19703415877074944,19703312797597696,19703411582435328,19703355747663872,19703398697467904,19703407287205888,19703317094924288,19703325682696192,19703381517533184,19703402992041984,19703394402041856,19703390107664384,19984869377769474,19984796363325442,19984830723063810,19984792068358146,19984877968752640,19984800659406848,19984882262671362,19984856492867586,19984809248227330,19984783478423554,19984890853785600,19984886557638658,19984865082802178,19984873674178560,19984787773390850,20266352944349186,20266267045003266,20266365829251074,20266275636117504,20266284224872450,20266344354414594,20266357239316482,20266331469512706,20266271339970562,20266340059447298,20266258455068674,20266305699708930,20266361534283778,20266262750035970,20266348649381890,20547819331715074,20547742022303746,20547733432369154,20547737727336450,20547806446813186,20547729140219904,20547823626682370,20547750612238338,20547832216616962,20547746317271042,20547836511584258,20547759202172930,20547815036747778,20547780677009410,20547827921649666,20547840806551554,20829225589538816,20829208408883202,20829234178686978,20829311488098306,20829298603196418,20829290013261826,20829216998817794,20829281423327234,20829221293785090,20829315783065602,20829302898884608,20829294308229122,20829307193131010,20829212703850498,20829255653523458,21110773581021184,21110786465988608,21110769285595136,21110777875595264,21110790760628224,21110730631217152,21110696270430210,21110683385528322,21110700566249472,21110782169776130,21110691975462914,21110687680495618,21110756401086464,21110709155332098,21110764991217664,21392184131911682,21392175542960128,21392158362107906,21392248557731840,21392244262305792,21392265737338880,21392205606748162,21392239967928320,21392171247009794,21392166952042498,21392231376551938,21392252852305920,21392162657075202,21392261442699264,21392257146355714,21673740714049536,21673680584638464,21673723534442496,21673637634048002,21673706353524738,21673727829016576,21673719239016448,21673641929015298,21673646223982594,21673659108884482,21673714944638976,21673633339080706,21673732123328514,21673650519670784,21673736419409920,21955134085005314,21955125496381440,21955198509514754,21955211394416642,21955181329645570,21955215690760192,21955207099449346,21955189919580162,21955112610168834,21955116905136130,21955155559841794,21955121200103426,21955202805727232,21955194214547458,21955108315201538,22236682076422146,22236690667470848,22236600473092096,22236587587141634,22236583292174338,22236609061978114,22236596177076226,22236656306618370,22236686371389442,22236673487863808,22236677782437888,22236630536814594,22236669192437760,22236591882108930,22236664898060288,22518071153590274,22518131283132418,22518144169148416,22518058268688386,22518075449802752,22518157052936194,22518062563655682,22518139873067010,22518084038492162,22518148464574464,22518152759148544,22518105513328642,22518165644181504,22518161347903490,22518066858622978,22799477411282944,22799563310694400,22799481706119168,22799486001414144,22799700752662529,22799567605923840,22799528951152640,22799473116708864,22799554720825344,23081008225714176,23362556214509570,23362590574247938,23362573394378754,23362581984313346,23362491790000130,23362530444705794,23362500379934722,23362564804444162,23362569099411458,23362586279280642,23362487495032834,23362508969869314,23362577689346050,23362483200065538,23362496084967426,23643996833906688,23925433150930946,23925458925780992,23925583479898113,24207071341576193,24206959667773442,24206929603002370,24206968257708034,24206878063394818,24206886653329410,24206976847642626,24206895243264002,24206951077838850,24206946782871554,24206903833198594,24206847998623746,24206942487904258,24206856588558338,24206963962740738,24206860883525634,24206938192936962,24206852293591042,24488391696187394,24488473300566018,24488383106252802,24488481890500610,24488486185467906,24488430350893058,24488387401220098,24488400286121986,24488464710631426,24488490480435202,24488456120696834,24488477595533314,24488469005598722,24488408876056578,24488395991154690,24769879557799936,24769810838388736,24770025590030337,24769806543093760,24769888147668992,24769802248257536,24769858083684354,24769797953683456,24769892442898432,24769853788127232,24770029885063169,25051418959544320,25051380305166336,25051350240198656,25051431844708352,25051406075035648,25051440434577408,25051427549544448,25051436139937792,25051337355100160,25051341653082112,25051423254970368,25051414665166848,25332906821222402,25332881051418626,25332833806778370,25332812331941890,25332825216843778,25332820921876482,25332915411156994,25332902526255106,25332898231287810,25332911116189698,25332893936320514,25332816626909186,25332889641353218,25332808036974594,25332855281614850,25614270126817282,25614446225391617,25614343141261314,25614261536882690,25614252946948098,25614304486555650,25614227177144322,25614222882177026,25614313076490242,25614338846294018,25614278716751874,25614231472111618,25614321666424834,25614334551326722,25614351731195906,25614325961392130,25614317371457538,25614235767078914,25895727923986432,25895736513724416,25895813823397888,25895912612233217,25895809528299520,25895697858756608,26177232964550658,26458768076505088,26458746601865216,26458695062388736,26458866860883969,26458776666505216,26458841091342337,26458729418063872,26458862560477185,26458677877407744,26458656403357696,26458750897094656,26458738007932928,26458875450621953,26458652108521472,26458742303162368,26458759481720832,26458647817682944,26458660698652672,26458703648391168,26458763776819200,26458686467145728,26740208694001664,26740230165430272,26740268819808256,26740281704972288,26740200100462592,26740277409808384,26740264525430784,26740273115234304,26740187215364096,26740359017922561,26740286000201728,26740290294841344,26740182920790018,26740255935299584,27021657901039616,27303223068196866,27303150053752834,27303231658131458,27303137168850946,27303158643687426,27303240248066050,27303214478262274,27303227363164162,27303235953098754,27303145758785538,27303141463818242,27303132873883650,27303218773229570,27303205888327682,27303180118523906,27584659388563456,27584556310200320,27584552015364096,27584560605495296,27584663683661824,27584766767726593,27584637914775552,27584676573347840,27584667983347712,27584603555233792,27584642210004992,27584629324906496,27584740998184961,27584646508707840,27584586373988352,27584594969231360,27584762467319809,27584775357464577,27584547724525568,27584577784250368,27584650804199424,27866022701760512,28147574987948032,28147652293361664,28147605048983552,28147647998787584,28147562103111680,28147643703361536,28147660883755008,28147665178394624,28147630818852864,28147639408984064,28147656588525568,28429028489953280,28710503466729472,28992021387018242,28991931192705026,28992034271920130,28991961257476098,28992042861854722,28992025681985538,28992004207149058,28992038566887426,28991926897737730,28991935487672322,28991952667541506,28992017092050946,28992012797083650,28991922602770434,28992051451789314,28991969847410690,28991978437345282,29273479183794178,29273513543532546,29273436234121218,29273406169350146,29273453413990402,29273496363663362,29273526428434434,29273410464317442,29273487773728770,29273397579415554,29273444824055810,29273620923940865,29273401874382850,29273500658630658,29273509248565250,29273492068696066,29273517838499842,29273427644186626,29554949867307010,29555027176718338,29555040061620226,29555018586783746,29554936982405122,29555005701881858,29555022881751042,29554979932078082,29554872556060674,29555014291816450,29555010001371136,29555031471685634,29555035766652930,29836351829049344,29836429138591744,29836356123885568,29836403368919040,29836437728460800,29836575172460545,29836442023690240,29836347534475264,29836360419180544,30117831100137474,30117878344777730,30117938474319874,30117942769287170,30117852574973954,30117904114581506,30117934179352578,30117951359221762,30117861164908546,30117826805170178,30117921294450690,30117916999483394,30117912704516098,30117869754843138,30117822510202882,30117947064254466,30117835395104770,30117925589417986,30399400571895808,30680828299051008,30680854068723712,30680776759181312,30680866953822208,30681000102723585,30680785349312512,30680862658592768,30680781054017536,30680772464607232,30962307571384322,31243885626654722,31243829792079874,31243791137374210,31243855561883650,31243799727308802,31243872741752834,31243808317243394,31243795432341506,31243881331687426,31243877036720130,31243782547439618,31243868446785538,31243889921622018,31243786842406914,31243864151818242,31525218867019778,31525300471398402,31525309061332994,31525313356300290,31525236046888962,31525227456954370,31525197392183298,31806758273679360,31806882829762561,31806732498829314,32088147353141248,32369678159314944,32369635209576448,32369849963184129,32369626619445248,32369716814086144,32369712518856704,32369630914281472,32369622324871168,32369703928987648,32651178905698304,32651191790796800,32651153136025600,32651187495567360,32651105890992128,32651101596155904,32651110186287104,32651097301581824,32651324939960321,32932585162997760,32932799916736513,32932666767507456,32932653882408960,32932576572866560,32932628112736256,32932572278292480,32932662472278016,32932580867702784,33214051549577216,33214103089446912,33214163217874944,33214055844413440,33214167517560832,33214146042920960,33214150339461120,33214094503444480,33214085908201472,33214060139708416,33214240532398081,33214158922776576,33214176107560960,33214262001532929,33214274891677697,33214137448988672,33214141744218112,33214266301939713,33214128859119616,33214077318463488,33214047258738688,33495603835830272,33495578066157568,33495616720928768,33495749870288897,33495526526287872,33495535116419072,33495522231713792,33495612425699328,33495530821124096,33777130353065984,33777138943197184,33777156122738688,33777074518228992,33777070228242432,33777160417968128,33777147533000704,33777104583196672,33777143237574656,33777151827574784,33777061633130496,33777164712607744,34058716995190786,34058489361924098,34340033065189376,34340110371389440,34340088896618496,34340007291977730,34340183390486529,34340097486422016,34340106076160000,34340093190995968,34340011586551808,34340024471650304,34340114666029056,34340054536617984,34340080306487296,34340101780996096,34621482266001410,34903030259056642,34903064618795010,34902952955346944,34903047438925826,34903004489252866,34902961539579906,34903043143958530,34902974424481794,34903060323827714,34903038848991234,34903056028860418,34903051733893122,35184518121127936,35184449401782272,35184436516683776,35184440817025024,35184539596161024,35184522416553984,35184479466749952,35184531006291968,35184526711128064,35184535301521408,35184513826750464,35184505236619264,35465954443460608,35466005983002624,35465993097838592,35465997393264640,35465980213329920,35465911493394432,35466001687838720,35466014572871680,35466010278232064,35465907203866624,35465988803461120,35465924378492928,35747485254942720,35747399355203584,35747455190040576,35747476664549376,35747489549582336,35747382180642816,35747480959713280,35747429420171264,35747472369975296,35747386470105088,35747463780171776,35747468074549248,36028925869621250,36028900099817474,36028891509882882,36028908689752066,36028844265242626,36028809905504258,36028835675308034,36028878624980994,36028912984719362,36028801315569666,36028895804850178,36028887214915586,36028921574653954,36028917279686658,36028805610536962,36028852855177218,36028827085373442,36028797020602370,36310426617970688,36310430913134592,36310418027970560,36310379373592576,36310413733593088,36310422323396608,36310336423526400,36310435208364032,36310405143461888,36310349308624896,36310345019031552,36310439503003648,36591875823501314,36591858643632130,36591777039253506,36591862938599426,36591755564417026,36591751269449730,36591867233566722,36591785629188098,36591802809057282,36591850053697538,36591828578861058,36591759859384322,36591837168795650,36591746974482434,36591794219122690,36591845758730242,36591841463762946,36591871528534018,36873282082439170,37154787122937856,37154778533068800,37154705518362624,37154709813657600,37154924565299201,37154696928952320,37154791418167296,37154757058953218,37154752763396096,37154928863019009,37154701223526400,37436309350514688,37436339409125378,37436279279583234,37436236329910274,37436317934288898,37436335114158082,37436313639321602,37436305049387010,37436326524223490,37436322229256194,37436330819190786,37436249214812162,37717655471783936,37717861628903425,37717775734931456,37717728486490112,37717651176947712,37717646886109184,37717758550147072,37717676945833984,37717685535571968,37717737076359168,37717702716817408,37717762845245440,37717767144931328,37717874519048193,37717840159768577,37717745670291456,37717694130814976,37717741371588608,37717865931669505,37717659767078912,37999151922544640,37999203463200768,37999315136479233,37999126153658368,37999336605614081,37999237821956096,37999134743789568,37999340908445697,37999242121641984,37999250711642112,37999177693528064,37999160512282624,37999212053069824,37999220647002112,37999233526857728,37999216348299264,37999121862819840,37999349495758849,37999169107525632,37999130448494592,38280626899320834,38280721388601346,38280596834549762,38280652669124610,38280687028862978,38280695618797570,38280712798666754,38280644079190018,38280601129517058,38280708503699458,38280725683568642,38280691323830274,38280699913764866,38280717093634050,38280605424484354,38280678438928386,38280609719451650,38280635489255426,38562131948142592,38843602623660032,38843628393332736,38843551083790336,38843641278431232,38843555378626560,38843559673921536,38843774428643329,38843546789216256,38843636983201792,39125069009190914,39125077599125506,39125124843765762,39125034649452546,39125137728667650,39125142023634946,39125116253831170,39125146326204416,39125103368929282,39125150613569538,39125133433700354,39125030354485250,39125021764550658,39125026059517954,39125111958863874,39125060419256322,39125120548798466,39125051829321730,39406625590345730,39406595525574658,39406586935640066,39406535396032514,39406617000411138,39406591230607362,39406578345705474,39406612705443842,39406608410476546,39406509626228738,39406526806097922,39406496741326850,39406599820541954,39406501036294146,39406543985967106,39406552575901698,39406621295378434,39406505331261442,39688134927974402,39688122043072514,39688044740083712,39688117748105218,39688049028628482,39688036143726594,39688104863203330,39688130633007106,39688079093399554,39688139222941698,39688113453137922,39688126338039810,39969605610373120,39969588430831616,39969554070831104,39969601315209216,39969579840700416,39969609905602560,39969592725209088,39969597020635136,39969519716859904,39969511120764928,39969524005863424,39969614200242176,40250934557474816,40250977507213312,40250925967343616,40251050525327360,40251033340542976,40251003276886016,40250951736229888,40250921676505088,40251020460687360,40251140722524161,40251016161984512,40251041935327232,40250968921210880,40250960325967872,40250930262179840,40251136419299329,40251114950164481,40251149309444097,40251011866755072,40251037635641344,40532400943333378,40532508317515778,40532491137646594,40532525497384962,40532478252744706,40532452482940930,40532516907450370,40532426713137154,40532409533267970,40532435303071746,40532486842679298,40532396648366082,40532495432613890,40532521202417666,40532512612483074,40532443893006338,40532405238300674,40532499727581186,40813910279716866,40813871625011202,40813884509913090,40813966114291714,40813901689782274,40813991884095490,40813983294160898,40813927459586050,40813996179062786,40814000474030082,40813970409259010,40813953229389826,40813880214945794,40813987589128194,40813961819324418,40813974704226306,40813875919978498,40813918869651458,41095402436034562,41095359486361602,41095346601459714,41095393846099970,41095475450478594,41095350896427010,41095355191394306,41095445385707522,41095458270609410,41095462565576706,41095441090740226,41095449680674818,41095471155511298,41095436795772930,41095466860544002,41095385256165378,41095428205838338,41095376666230786,];

pub fn new_parser<'parser_lt>(tokenizer:&'parser_lt mut dyn Tokenizer<'parser_lt,Construct>) -> ZCParser<'parser_lt,Construct,Construct>
{
 let mut parser1:ZCParser<Construct,Construct> = ZCParser::new(60,147,tokenizer);
 let mut rule = ZCRProduction::<Construct,Construct>::new_skeleton("start");
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Classes(cs),Maincl(mc),)=(_item1_.value,_item0_.value,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ let _item16_ = parser.popstack(); let _item15_ = parser.popstack(); let _item14_ = parser.popstack(); let _item13_ = parser.popstack(); let _item12_ = parser.popstack(); let _item11_ = parser.popstack(); let _item10_ = parser.popstack(); let _item9_ = parser.popstack(); let _item8_ = parser.popstack(); let _item7_ = parser.popstack(); let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(thebody),Id(an),Id(cn),)=(_item14_.value,_item11_.value,_item1_.value,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Class(cl),Classes(mut cs),)=(_item1_.value,_item0_.value,) { 
  cs.push(makelbox!(_item1_,cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Decs(mut ds),Id(sup),Id(name),)=(_item4_.value,_item2_.value,_item1_.value,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{ let _sup_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (sup,)=(_sup_.value,) {  sup }  else {parser.bad_pattern("(sup,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(v),Id(t),)=(_item1_.value,_item0_.value,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),Id(t),)=(_item3_.value,_item1_.value,_item0_.value,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ let _item8_ = parser.popstack(); let _item7_ = parser.popstack(); let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_item7_.value,_item4_.value,_item2_.value,_item1_.value,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let _v_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (v,Decs(mut ds),)=(_v_.value,_item0_.value,) {  ds.push(makelbox!(_v_,v)); Decs(ds) }  else {parser.bad_pattern("(v,Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let _m_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (m,Decs(mut ds),)=(_m_.value,_item0_.value,) {  ds.push(makelbox!(_m_,m)); Decs(ds) }  else {parser.bad_pattern("(m,Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item2_.value,_item1_.value,_item0_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item3_.value,_item2_.value,_item1_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack();  return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _c_ = parser.popstack(); 
  if let (c,)=(_c_.value,) {  c }  else {parser.bad_pattern("(c,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(s),Stms(mut sv),)=(_item1_.value,_item0_.value,) {  sv.push(makelbox!(_item1_,s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(sv),)=(_item1_.value,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(b),Stm(a),Exp(c),)=(_item6_.value,_item4_.value,_item2_.value,) { 
  Stm(Ifstat(makelbox!(_item2_,c), makelbox!(_item4_,a), makelbox!(_item6_,b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(a),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Ifstat(makelbox!(_item2_,c),makelbox!(_item4_,a),parser.lbx(5,Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(s),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Whilest(parser.lbx(2,c),parser.lbx(4,s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),)=(_item2_.value,_item0_.value,) {  Stm(Assignst(v,parser.lbx(2,e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Exp(i),Exp(v),)=(_item5_.value,_item2_.value,_item0_.value,) { 
  Stm(ArAssignst(parser.lbx(0,v),parser.lbx(2,i),parser.lbx(5,e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(args),Id(m),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),)=(_item1_.value,) {  Stm(Returnst(parser.lbx(1,e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); 
  if let (Vdec(v),)=(_item0_.value,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(a),)=(_item1_.value,) {  Exp(Notexp(parser.lbx(1,a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("<",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("%",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("==",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(i),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("[]",parser.lb(a),parser.lbx(2,i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(field),Exp(obj),)=(_item2_.value,_item0_.value,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(args),Id(f),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _i_ = parser.popstack(); 
  if let (i,)=(_i_.value,) {  i }  else {parser.bad_pattern("(i,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _s_ = parser.popstack(); 
  if let (s,)=(_s_.value,) {  s }  else {parser.bad_pattern("(s,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _b_ = parser.popstack(); 
  if let (b,)=(_b_.value,) {  b }  else {parser.bad_pattern("(b,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item0_.value,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(s),)=(_item3_.value,) {  Exp(Newarray(parser.lbx(3,s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item1_.value,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _e_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (e,)=(_e_.value,) {  e }  else {parser.bad_pattern("(e,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item1_.value,_item0_.value,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item2_.value,_item1_.value,) {  er.push(parser.lbx(1,e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); <Construct>::default()};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras<'parser_lt>(parser:&'parser_lt mut ZCParser<Construct,Construct>)
{
}//end of load_extras: don't change this line as it affects augmentation
