//Parser generated by rustlr for grammar zcmj

#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(irrefutable_let_patterns)]
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{LBox,makelbox};
use crate::absyntax::*;
use crate::absyntax::Construct::*;
use crate::absyntax::Expr::*;
use crate::absyntax::Stat::*;

const SYMBOLS:[&'static str;58] = ["ID","INTEGER","STRING","BOOL","class","public","static","void","main","String","extends","return","length","(",")","[","]",";","DOT","!",",","new","this","LBR","RBR","OROR","int","boolean","if","else","while","==","=","+","-","*","/","<","&&","MOD","Program","MainCl","ClassDec","ClassDecl","Extension","VarDec","MethodDec","Decl","FormalLst","FormalRst","Type","Stat","Stats","Exp","ExpLst","ExpRst","START","EOF"];

const TABLE:[u64;1263] = [17180000256,176093724673,171798888449,281659660566529,281492156710914,281719789977602,562949953748992,844669743267843,1125917087105024,1126080295927809,1126144719978498,1407473668325376,1688849860853760,1970342017040386,1970569650307074,2251821289177088,2533373575036930,2533463769677825,2533317740855296,2814775537762304,3096323528982528,3377699721510912,3659204763058176,3940688329310210,3940679739375618,3940851538526209,3940761343754242,3940752753819650,3940765638721538,3940649674604546,3940671149441026,4222223435235330,4503633988288512,4785267878985729,4785177684869120,4785104670621696,4785190570033152,4785272173821953,4785186274934784,4785113260228608,4785074605588480,4785096080228352,4785289354084353,5066605417267200,5348054623059970,5348127637504002,5348046033125378,5348140522405890,5348136227438594,5348024558288898,5348063212994562,5629499535720448,5629714284544001,5629538190360576,5629611205066752,5629529600753664,5629615500165120,5910974511644674,5911013166350338,5911077590859778,5910995986481154,5911004576415746,5911086180794370,5911090475761666,6192449488879618,6473924465786882,6755416621187074,6755644254453762,7036874419798016,7318413821083648,7318349395787778,7599824372563970,7881299349078018,8162812981477376,8444249303547904,8725861719343104,8725797294768128,9007267976642560,9288738658451456,9570205045293056,9851671429971970,9851714379644930,9851748739383298,9851744444416002,9851628480299010,9851718674612226,9851727264546818,9851735854481410,9851740149448706,9851624185331714,9851632775266306,9851645660168194,9851680019906562,9851662840037378,9851637070233602,9851722969579522,9851705789710338,9851654250102786,9851753034350594,10133154998976512,10133112049631232,10133326797471745,10133099164336128,10133107754467328,10133103459237888,10133180769042432,10133193653747712,10133189358911488,10414574139408386,10696117837692928,10977640057667584,10977562747863040,10977738843422721,10977635762569216,10977584222109698,10977730253422593,10977524093222912,10977554158256128,11259076381310976,11259140805885952,11259106446737408,11259153691115520,11259072086474752,11259145100722176,11259132216410112,11259157986279424,11259149395951616,11259166575951872,11259063496867840,11259162280919040,11540607192203266,11540615782137858,11540581422399490,11540637256974338,11540628667039746,11540632962007042,11540624372072450,11540542767693826,11540641551941634,11540551357628418,11540534177759234,11540620077105154,11540538472726530,11540547062661122,11540559947563010,11822095054012418,11822009154666498,11822034924470274,11822090759045122,11822022039568386,11822013449633794,11822107938914306,11822099348979714,11822103643947010,11822056399306754,11822026334535682,11822017744601090,11822112233881602,11822116528848898,11822082169110530,12103424001310720,12103651636019201,12103436886605824,12103428296212480,12103479835951104,12103518490722304,12103514195886080,12103432591441920,12103505606017024,12385032122597378,12385053597433858,12385040712531970,12385006352793602,12384963403120642,12385057892401154,12384976288022530,12384971993055234,12384967698087938,12384959108153346,12385062187368450,12385045007499266,12384984877957122,12385049302466562,12385066482335746,12666537163882498,12666507099111426,12666442674601986,12666528573947906,12666519984013314,12666541458849794,12666446969569282,12666459854471170,12666451264536578,12666434084667394,12666515689046018,12666438379634690,12666524278980610,12666481329307650,12666532868915202,12947848933015552,12947960602099712,13229405512859648,13229323908153344,13229414102728704,13229332498284544,13229328203055104,13229379742793728,13229418397564928,13229336793448448,13229551543058433,13510966389047298,13510957799112706,13510932029308930,13510949209178114,13510884784668674,13510940619243522,13510871899766786,13510876194734082,13510906259505154,13510867604799490,13510863309832194,13510953504145410,13510962094080002,13510859014864898,13510944914210818,13792273863278592,14073808969596928,14355223816830976,14636703086608384,14636698791706624,14636780396412928,14636793281118208,14636711677001728,14636788986281984,14636707381837824,14636926426873857,14636754626347008,14918173770383360,15199730349834240,15199653040029696,15199648745127936,15199876380426241,15199657335259136,15199661630423040,15199743234539520,15199704579768320,15199738939703296,15481170964250626,15481213913923586,15481162374316034,15481239683727362,15481248273661954,15481226798825474,15481218208890882,15481136604512258,15481128014577666,15481145194446850,15481179554185218,15481123719610370,15481153784381442,15481243978694658,15481222503858178,15481235388760066,15481252568629250,15481132309544962,15481205323988994,15762826333913089,15762607288680448,15762654533189632,15762688893124608,15762602993451008,15762693187960832,15762680303255552,15762598698549248,15762611583844352,16044129509900288,16044086560555008,16044073675259904,16044301310689281,16044082265391104,16044168164671488,16044163869835264,16044155279966208,16044077970161664,16325776287465473,16325604486610944,16325561537265664,16325643141382144,16325630256676864,16325552946872320,16325548651970560,16325638846545920,16325557242101760,16607251264241665,16607105233387520,16607113823256576,16607023628681216,16607032218812416,16607118118092800,16607036513976320,16607027923582976,16607079463321600,16888726241017857,16888498605391872,16888554440032256,16888588799967232,16888593094803456,16888502900293632,16888580210098176,16888511490686976,16888507195523072,17170201217794049,17169977877004288,17170063776677888,17169982172233728,17170055186808832,17169973582102528,17170029416742912,17170068071514112,17169986467397632,17451457148944384,17451538753388544,17451676194570241,17451461444108288,17451452853714944,17451448558813184,17451504393453568,17451530163519488,17451543048224768,17733005140230144,17733151171346433,17732932125655040,17733018024935424,17732979370164224,17732923535523840,17732936420818944,17732927830425600,17733013730099200,18014566017007616,18014458644398080,18014561721974784,18014531657465856,18014553132171264,18014475822366720,18014505887793152,18014557427335168,18014544541777920,18014540246941696,18014548837007360,18014462937923584,18295937916141568,18577404302983168,18858986650992642,18858930816417794,18858973767139328,18858909341581314,18858887866744834,18858883571777538,18858990947139584,18858978062303232,18858956586221570,18858900752498688,18858969471909888,18858965177073664,18858892161712130,18858982356025346,18858896456679426,19140358551437312,19421872182919168,19703334274859008,19703458828845057,19703308500271106,19984865082802178,19984783478423554,19984856492867586,19984886557638658,19984877969145856,19984873673981952,19984869377769474,19984787773390850,19984882262671362,19984792068358146,19984830723063810,19984800659341312,19984796363325442,19984809248227330,19984890853982208,20266271340560386,20266254163574784,20266348649971714,20266284225462274,20266352944939010,20266365829840898,20266357239906306,20266267045593090,20266331470102530,20266305700298754,20266262750625794,20266344355004418,20266275635527682,20266361534873602,20266340060037122,20266258455658498,20547733431713794,20547836510928898,20547742021648386,20547827922567168,20547746316615682,20547750612762624,20547832215961602,20547819332173824,20547823627403264,20547759201517570,20547780676354050,20547737726681090,20547806446157826,20547840807403520,20547815036092418,20829281422802946,20829225589473280,20829255652999170,20829212703326210,20829315784114176,20829290012737538,20829311487574018,20829234178162690,20829298602672130,20829302899277824,20829307192606722,20829208408358914,20829294307704834,20829221293260802,20829216998293506,21110709155135490,21110773580824576,21110730629971970,21110700566183936,21110782169579522,21110756399775746,21110687680299010,21110683385331714,21110786464546818,21110764990758912,21110769285595136,21110696270233602,21110777875988480,21110691975266306,21110790760824832,21392175542894592,21392261441519618,21392184132108290,21392239966683138,21392162657271810,21392244261650434,21392248556617730,21392252852699136,21392231376748546,21392265736486914,21392257146552322,21392171247206402,21392205606944770,21392158362304514,21392166952239106,21673714943000578,21673727827902466,21673659108425730,21673637633589250,21673633338621954,21673732122869762,21673719237967874,21673680583262210,21673736417837058,21673740712804354,21673723532935170,21673706353065986,21673650519605248,21673646223523842,21673641928556546,21955116908806144,21955211395923968,21955215690956800,21955194215727104,21955189920890880,21955181331415040,21955125496315904,21955207101284352,21955155561742336,21955112611872768,21955202806120448,21955198510956544,22236583292502018,22236677782831104,22236596177403906,22236600473026560,22236587587469314,22236669192437760,22236686372634624,22236690667667456,22236609062305794,22236673487667200,22236664897601536,22236656306946050,22236630538452992,22236682076749826,22236591882436610,22518131284836352,22518066859016194,22518157053329410,22518105515163648,22518161349345280,22518071153983490,22518165644378112,22518084038885378,22518075449737216,22518148464377856,22518144169148416,22518152759541760,22518058269081602,22518062564048898,22518139874312192,22799541835595778,22799559015464962,22799546130563074,22799640621088768,22799580490301442,22799550426447872,22799614851022848,22799627736252416,22799623441088512,22799533245661186,22799632029908994,22799606260105218,22799537540628482,22799636326055936,22799619145859072,23081012518322178,23081089827733506,23081102712635394,23081094122700802,23081016813289474,23081111302569986,23081008223354882,23081021108256770,23081098417668098,23081025403224066,23081055467995138,23081033993158658,23081081237798914,23081115597537282,23081107007602690,23362513264312320,23362478904377344,23362431659868160,23362650706214913,23362423069736960,23362427364638720,23362435955032064,23362517559148544,23362504674443264,23643958179266560,23925471810748416,24206959667773442,24206938192936962,24206946782871554,24206963962740738,24206929603002370,24206847998623746,24206856588558338,24207071341576193,24206860883525634,24206886653329410,24206942487904258,24206878063394818,24206852293591042,24206903833198594,24206951077838850,24206895243264002,24206976847642626,24206968257708034,24488383104286722,24770012705128449,24769828017078272,24769797952045056,24769909621391360,24769913916489728,24769836606685184,25051504861773825,25051500566872065,25051272930000896,25051277224902656,25051285815296000,25051367419412480,25051281520132096,25051328764641280,25051354534707200,25051333060395010,25051363124576256,25332893935730690,25332816626319362,25332898230697986,25332881050828802,25332825216253954,25332812331352066,25332820921286658,25332889640763394,25332915410567170,25332911115599874,25332833806188546,25332906820632578,25332808036384770,25332902525665282,25332855281025026,25614330258980864,25614373208195072,25614291606568960,25614364618129408,25614386093162496,25614377503358976,25614381798522880,25614300193554432,25614287309111296,25614390388195328,25614356028653568,25614368912965632,25895839594774530,25895865364578306,25895805235036162,25895861069611010,25895856774643714,25895770875297794,25895852479676418,25895775170265090,25895831004839938,25895783760199682,25895766580330498,25895757990395906,25895848184709122,25895843889741826,25895762285363202,26177172835598338,26177284504748034,26177301684617218,26177267324878850,26177263029911554,26177181425532930,26177220080238594,26177185720500226,26177202900369410,26177275914813442,26177228670173186,26177293094682626,26177211490304002,26177177130565634,26177396178878465,26177254439976962,26177271619846146,26177288799715330,26458776666439680,26458841091211265,26458647817551872,26458862560804865,26458686466949120,26458677877342208,26458738008129536,26458750897094656,26458656403685376,26458660698849280,26458695062388736,26458652108455936,26458866861146113,26458768076701696,26458746601734144,26458703648194560,26458763776753664,26458742302965760,26458759481655296,26458875450621953,26458729418260480,26740122794655744,27021657900974080,27303308971409409,27303223068459008,27303150053818368,27303205888917504,27303158647619584,27303218773229568,27303240248459264,27303214478393344,27303180119244800,27303227363622912,27303137169375232,27303235953426432,27303231658786816,27303132874211330,27584715224776706,27584607850594306,27584620735496194,27584680865038338,27584689454972930,27584698044907522,27584706634842114,27584612145561602,27584693749940226,27584655095234562,27584633620398082,27584710929809410,27584702339874818,27584625030463490,27584616440528898,27866026992009216,27866112891682816,27866125780975616,27866250334175233,27866035582402560,27866215974764545,27866069945942016,27866052760895488,27866237444358145,27866151549992960,27866031287238656,27866104301813760,27866061350502400,27866134365208576,27866138660306944,27866121485287424,27866078531747840,27866142960254976,27866022701105152,27866117186519040,27866241744699393,28147639408525312,28147665178591232,28147574987948032,28147643703361536,28147647998590976,28147562103111680,28147652293754880,28147660883558400,28147656588918784,28147605049376768,28147630819049472,28429028489953280,28710503460569090,28710546410242050,28710456215928834,28710460510896130,28710447625994242,28710451920961538,28710670970454017,28710537820307458,28710477690765314,28710567885078530,28710542115274754,28710529230372866,28710559295143938,28710576475013122,28710550705209346,28710486280699906,28710494870634498,28710563590111234,28992090108198914,28992085813231618,28992060047884288,28992064338395138,28991987028983810,28992081518264322,28991999913885698,28992068633362434,28992072928329730,28991922602639362,28992055748460546,28992029978656770,28992077223297026,29273453420281856,29554967046062082,29554997110833154,29555001405800450,29554992815865858,29554902621552642,29554885441683458,29554928391356418,29554962751094786,29554872556781570,29554876851748866,29554954161160194,29554881146716162,29554975635996674,29554971341029378,29554984225931266,29554988520898562,29554919801421826,29554911211487234,29836437728657408,29836429138788352,29836351828983808,29836356124213248,29836403368722432,29836347534082048,29836360419377152,29836442023493632,29836575172460545,30117878344187906,30117826804580354,30117852574384130,30117934178762754,30117921293860866,30117942768697346,30117916998893570,30117904113991682,30117912703926274,30117831099547650,30117951358631938,30117861164318722,30117938473730050,30117925588828162,30117822509613058,30117869754253314,30117835394514946,30399413449457666,30399336140046338,30399297485340674,30399400564555778,30399327550111746,30399409154490370,30399318960177154,30680982922788865,30680832591986690,30680858366574592,30962393470074882,30962414944911362,30962380585172994,30962389175107586,30962402060009474,30962324750598146,30962333340532738,30962320455630850,30962410649944066,30962354815369218,30962307570728962,30962311865696258,30962316160663554,30962406354976770,30962397765042178,31243782548094978,31525197394345984,31525205984477184,31525425032855553,31525201689247744,31525291883757568,31525253228986368,31525278999052288,31525210279641088,31525287588921344,31806775455580160,32088147353141248,32369716813889536,32369849963184129,32369635209773056,32369622324477952,32369703929184256,32369626619379712,32369712519053312,32369630914609152,32369678159118336,32651153135828992,32651097301188608,32651178905894912,32651101596090368,32651105891319808,32651110186483712,32651191790600192,32651187495763968,32651324939960321,32932666767310848,32932580868030464,32932572281896960,32932791325491201,32932653882605568,32932662472474624,32932683946000384,32932619526733824,32932701130784768,32932787025149953,32932675362684928,32932610931294208,32932671066079232,32932628112539648,32932692541046784,32932585163194368,32932602341687296,32932576572801024,32932765555556353,32932799914967041,32932688241098752,33214141744021504,33214137449185280,33214128859316224,33214047254609920,33214274893512705,33214103089250304,33214055844741120,33214051549511680,33214060139905024,33495530821451776,33495522231320576,33495535116615680,33495603836026880,33495578065960960,33495749870288897,33495612425895936,33495616720732160,33495526526222336,33777147532804096,33777151827968000,33777061633720320,33777104583589888,33777130353262592,33777164712804352,33777143237574656,33777070228242432,33777160417771520,33777156123131904,33777138942738432,33777074518163456,34058532312580098,34340183390486529,34340097486225408,34340024471584768,34340007291977730,34340093190995968,34340106076553216,34340088896159744,34340011587141632,34340033065385984,34340054537011200,34340110371192832,34340101781389312,34340080306683904,34340114666225664,34621666948612098,34621439315345410,34903051733893122,34902961539579906,34902974424481794,34903004489252866,34903064618795010,34902952955346944,34903043143958530,34903060323827714,34903038848991234,34903047438925826,34903030259056642,34903056028860418,35184449401716736,35184535301324800,35184440817025024,35184531006685184,35184526711521280,35184479467143168,35184505236815872,35184518121127936,35184436517273600,35184522416357376,35184539596357632,35184513826291712,35465993097838592,35466014573068288,35465924378427392,35466005983395840,35466010278035456,35465997393068032,35465980213526528,35465954443853824,35466001688231936,35465907203866624,35465911493984256,35465988803002368,35747412238204930,35747326338859010,35747450892910594,35747369288531970,35747360698597378,35747438008008706,35747420828139522,35747442302976002,35747433713041410,35747416533172226,35747334928793602,35747377878466562,35747352108662786,35747322043891714,35747330633826306,35747403648270338,35747425123106818,35747446597943298,36028947346489344,36028951641653248,36028861447405568,36028964526489600,36028955936817152,36028870042255360,36028930166947840,36028938756423680,36028960231456768,36028874331848704,36028943051259904,36028904397275136,36310349308559360,36310413733134336,36310336424116224,36310422323200000,36310405143658496,36310418027970560,36310379373985792,36310426618363904,36310332134129664,36310430913527808,36310435208167424,36310439503200256,36591755564417026,36591867233566722,36591759859384322,36591751269449730,36591862938599426,36591858643632130,36591871528534018,36591777039253506,36591837168795650,36591785629188098,36591875823501314,36591845758730242,36591850053697538,36591841463762946,36591828578861058,36591794219122690,36591746974482434,36591802809057282,36873282082439170,37154757058953218,37154928863019009,37154709813854208,37154791417970688,37154705518690304,37154752763199488,37154924565430273,37154696928559104,37154787123134464,37154701223460864,37154778533265408,37436236329910274,37436279279583234,37436309350514688,37436317934288898,37436313639321602,37436326524223490,37436330819190786,37436335114158082,37436305049387010,37436322229256194,37436249214812162,37436339409125378,37717775734865920,37717874519048193,37717840159637505,37717758550081536,37717762845179904,37717676945768448,37717737076555776,37717655472111616,37717767145127936,37717741371392000,37717694130814976,37717728486686720,37717865931669505,37717659767275520,37717702716620800,37717646885978112,37717745670160384,37717861629231105,37717685535375360,37717651176882176,37999233526988802,37999130447773698,37999250706857986,37999237821956098,37999216347119618,37999242116923394,37999134742740994,37999203462217730,37999212052152322,37999224937054210,37999160512544770,37999126152806402,37999177692413954,37999151922610178,37999246411890690,37999220642086914,37999169102479362,37999121857839106,38280708503502848,38280635488796672,38280687029977088,38280644084236288,38280712798601216,38280691324813312,38280609720696832,38280824472469505,38280605425532928,38280811582652417,38280695623581696,38280717098549248,38280596839399424,38280678440108032,38280601130303488,38280626899189760,38280790113058817,38280725688287232,38280815885156353,38280652670042112,38562131948142592,38843602623463424,38843641278234624,38843559674118144,38843555378954240,38843774428643329,38843628393529344,38843551083724800,38843636983398400,38843546788823040,39125146318667778,39125060419321858,39125069009256450,39125116253896706,39125150613635074,39125142023700482,39125120548864002,39125077599191042,39125103368994818,39125051829387266,39125133433765890,39125021764616194,39125124843831298,39125111958929410,39125034649518082,39125030354550786,39125137728733186,39125026059583490,39406535395966978,39406599820476418,39406501036228610,39406526806032386,39406617000345602,39406578345639938,39406612705378306,39406543985901570,39406552575836162,39406505331195906,39406586935574530,39406595525509122,39406621302915072,39406509626163202,39406625590280194,39406591230541826,39406608410411010,39406496741261314,39688139222941698,39688036143726594,39688044740083712,39688049028628482,39688126338039810,39688134927974402,39688122043072514,39688117748105218,39688104863203330,39688113453137922,39688130633007106,39688079093399554,39969597020438528,39969609905405952,39969579840897024,39969601315602432,39969605610766336,39969524005797888,39969614200438784,39969519716859904,39969592725209088,39969554071224320,39969511121354752,39969588430372864,40251136419627009,40251033340477440,40250930262507520,40251114950033409,40251003277082624,40250934557671424,40250921676374016,40250968921210880,40251149309444097,40250960325771264,40251050525261824,40251011866951680,40251037635575808,40250925967278080,40250951736164352,40251020460556288,40251140722524161,40251016161787904,40251041935523840,40250977507016704,40532495432613890,40532521202417666,40532426713137154,40532491137646594,40532409533267970,40532396648366082,40532435303071746,40532443893006338,40532478252744706,40532525497384962,40532508317515778,40532516907450370,40532452482940930,40532400943333378,40532486842679298,40532512612483074,40532499727581186,40532405238300674,40813983294160898,40813901689782274,40813996179062786,40813875919978498,40814000474030082,40813987589128194,40813974704226306,40813884509913090,40813880214945794,40813927459586050,40813953229389826,40813991884095490,40813871625011202,40813918869651458,40813910279716866,40813966114291714,40813961819324418,40813970409259010,41095355191394306,41095475450478594,41095441090740226,41095346601459714,41095445385707522,41095385256165378,41095462565576706,41095471155511298,41095436795772930,41095393846099970,41095376666230786,41095350896427010,41095402436034562,41095359486361602,41095466860544002,41095458270609410,41095428205838338,41095449680674818,];

pub fn new_parser() -> ZCParser<Construct,Construct>
{
 let mut parser1:ZCParser<Construct,Construct> = ZCParser::new(60,147);
 let mut rule = ZCRProduction::<Construct,Construct>::new_skeleton("start");
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Program");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Classes(cs),Maincl(mc),)=(_item1_.value,_item0_.value,) {  Program(parser.lb(mc),cs) }  else {parser.bad_pattern("(Classes(cs),Maincl(mc),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MainCl");
 rule.Ruleaction = |parser|{ let _item16_ = parser.popstack(); let _item15_ = parser.popstack(); let _item14_ = parser.popstack(); let _item13_ = parser.popstack(); let _item12_ = parser.popstack(); let _item11_ = parser.popstack(); let _item10_ = parser.popstack(); let _item9_ = parser.popstack(); let _item8_ = parser.popstack(); let _item7_ = parser.popstack(); let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(thebody),Id(an),Id(cn),)=(_item14_.value,_item11_.value,_item1_.value,) { 
   Maincl(Mainclass{classname:cn,
             argvname:an,
             body: Blockst(thebody),
	    })
  }  else {parser.bad_pattern("(Stms(thebody),Id(an),Id(cn),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{  Classes(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDecl");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Class(cl),Classes(mut cs),)=(_item1_.value,_item0_.value,) { 
  cs.push(makelbox!(_item1_,cl)); Classes(cs)
  }  else {parser.bad_pattern("(Class(cl),Classes(mut cs),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ClassDec");
 rule.Ruleaction = |parser|{ let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Decs(mut ds),Id(sup),Id(name),)=(_item4_.value,_item2_.value,_item1_.value,) { 
  let mut vdecs=Vec::new();
  let mut mdecs=Vec::new();
  separatedecs(ds,&mut vdecs,&mut mdecs); /*split var and method declarations*/
  Class(ClassDec {superclass:sup,
                  classname:name,
		  vars:vdecs,
		  methods:mdecs})
  }  else {parser.bad_pattern("(Decs(mut ds),Id(sup),Id(name),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{ let _sup_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (sup,)=(_sup_.value,) {  sup }  else {parser.bad_pattern("(sup,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Extension");
 rule.Ruleaction = |parser|{  Id("Object".to_owned()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(v),Id(t),)=(_item1_.value,_item0_.value,) {  Vdec(VarDec{dname:v,dtype:t,initval:Nothing,}) }  else {parser.bad_pattern("(Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("VarDec");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),Id(t),)=(_item3_.value,_item1_.value,_item0_.value,) { 
  Vdec(VarDec{dname:v,dtype:t,initval:e})
  }  else {parser.bad_pattern("(Exp(e),Id(v),Id(t),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("MethodDec");
 rule.Ruleaction = |parser|{ let _item8_ = parser.popstack(); let _item7_ = parser.popstack(); let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(mbody),Vdecs(args),Id(name),Id(ty),)=(_item7_.value,_item4_.value,_item2_.value,_item1_.value,) { 
  Method(MethodDec{ formals:args,
                    body: mbody,
		    classname:ty,
		    methodname:name, })
  }  else {parser.bad_pattern("(Stms(mbody),Vdecs(args),Id(name),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  Decs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let _v_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (v,Decs(mut ds),)=(_v_.value,_item0_.value,) {  ds.push(makelbox!(_v_,v)); Decs(ds) }  else {parser.bad_pattern("(v,Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{ let _m_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (m,Decs(mut ds),)=(_m_.value,_item0_.value,) {  ds.push(makelbox!(_m_,m)); Decs(ds) }  else {parser.bad_pattern("(m,Decs(mut ds),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalLst");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item2_.value,_item1_.value,_item0_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{  Vdecs(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("FormalRst");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Vdecs(mut frs),Id(a),Id(ty),)=(_item3_.value,_item2_.value,_item1_.value,) { 
  frs.push(parser.lb(VarDec{dname:a,dtype:ty,initval:Nothing}));
  Vdecs(frs) 
  }  else {parser.bad_pattern("(Vdecs(mut frs),Id(a),Id(ty),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack();  return Id("int[]".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("boolean".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("String".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("int".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  return Id("void".to_owned()); };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Type");
 rule.Ruleaction = |parser|{ let _c_ = parser.popstack(); 
  if let (c,)=(_c_.value,) {  c }  else {parser.bad_pattern("(c,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{  Stms(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stats");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(s),Stms(mut sv),)=(_item1_.value,_item0_.value,) {  sv.push(makelbox!(_item1_,s)); Stms(sv) }  else {parser.bad_pattern("(Stm(s),Stms(mut sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stms(sv),)=(_item1_.value,) {  Stm(Blockst(sv)) }  else {parser.bad_pattern("(Stms(sv),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(b),Stm(a),Exp(c),)=(_item6_.value,_item4_.value,_item2_.value,) { 
  Stm(Ifstat(makelbox!(_item2_,c), makelbox!(_item4_,a), makelbox!(_item6_,b)))
  }  else {parser.bad_pattern("(Stm(b),Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(a),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Ifstat(makelbox!(_item2_,c),makelbox!(_item4_,a),parser.lbx(5,Nopst))) }  else {parser.bad_pattern("(Stm(a),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Stm(s),Exp(c),)=(_item4_.value,_item2_.value,) {  Stm(Whilest(parser.lbx(2,c),parser.lbx(4,s))) }  else {parser.bad_pattern("(Stm(s),Exp(c),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Id(v),)=(_item2_.value,_item0_.value,) {  Stm(Assignst(v,parser.lbx(2,e))) }  else {parser.bad_pattern("(Exp(e),Id(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),Exp(i),Exp(v),)=(_item5_.value,_item2_.value,_item0_.value,) { 
  Stm(ArAssignst(parser.lbx(0,v),parser.lbx(2,i),parser.lbx(5,e)))
  }  else {parser.bad_pattern("(Exp(e),Exp(i),Exp(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item6_ = parser.popstack(); let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(args),Id(m),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) { 
  Stm(Callstat(parser.lb(obj),m,args))
  }  else {parser.bad_pattern("(Exps(args),Id(m),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(e),)=(_item1_.value,) {  Stm(Returnst(parser.lbx(1,e))) }  else {parser.bad_pattern("(Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Stat");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); 
  if let (Vdec(v),)=(_item0_.value,) { Stm(Vardecst(v.dname,v.dtype,parser.lb(v.initval)))}  else {parser.bad_pattern("(Vdec(v),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("*",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(a),)=(_item1_.value,) {  Exp(Notexp(parser.lbx(1,a))) }  else {parser.bad_pattern("(Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("<",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("%",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(b),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("==",parser.lb(a),parser.lbx(2,b)))}  else {parser.bad_pattern("(Exp(b),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(i),Exp(a),)=(_item2_.value,_item0_.value,) { Exp(Binop("[]",parser.lb(a),parser.lbx(2,i)))}  else {parser.bad_pattern("(Exp(i),Exp(a),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(field),Exp(obj),)=(_item2_.value,_item0_.value,) {  Exp(Field(field,parser.lb(obj))) }  else {parser.bad_pattern("(Id(field),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item5_ = parser.popstack(); let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(args),Id(f),Exp(obj),)=(_item4_.value,_item2_.value,_item0_.value,) {  Exp(Callexp(parser.lb(obj),f,args)) }  else {parser.bad_pattern("(Exps(args),Id(f),Exp(obj),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _i_ = parser.popstack(); 
  if let (i,)=(_i_.value,) {  i }  else {parser.bad_pattern("(i,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _s_ = parser.popstack(); 
  if let (s,)=(_s_.value,) {  s }  else {parser.bad_pattern("(s,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _b_ = parser.popstack(); 
  if let (b,)=(_b_.value,) {  b }  else {parser.bad_pattern("(b,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item0_.value,) {  Exp(Var(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack();  Exp(Thisptr) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item4_ = parser.popstack(); let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exp(s),)=(_item3_.value,) {  Exp(Newarray(parser.lbx(3,s))) }  else {parser.bad_pattern("(Exp(s),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item3_ = parser.popstack(); let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Id(x),)=(_item1_.value,) {  Exp(Newobj(x)) }  else {parser.bad_pattern("(Id(x),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("Exp");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _e_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (e,)=(_e_.value,) {  e }  else {parser.bad_pattern("(e,)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpLst");
 rule.Ruleaction = |parser|{ let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item1_.value,_item0_.value,) {  er.push(parser.lb(e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{  Exps(Vec::new()) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("ExpRst");
 rule.Ruleaction = |parser|{ let _item2_ = parser.popstack(); let _item1_ = parser.popstack(); let _item0_ = parser.popstack(); 
  if let (Exps(mut er),Exp(e),)=(_item2_.value,_item1_.value,) {  er.push(parser.lbx(1,e)); Exps(er) }  else {parser.bad_pattern("(Exps(mut er),Exp(e),)")} };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<Construct,Construct>::new_skeleton("START");
 rule.Ruleaction = |parser|{ let _item0_ = parser.popstack(); <Construct>::default()};
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1263 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

fn load_extras(parser:&mut ZCParser<Construct,Construct>)
{
}//end of load_extras: don't change this line as it affects augmentation
