# Grammar testing automatic generation of abstract syntax

# declare input lifetime:
lifetime 'lt
nonterminals Expr
nonterminal ES Vec<LBox<Expr<'lt>>>
# *Expr means type of ES1 will be copied from type of Expr
nonterminal ES1 *Expr
terminals + - * / ( ) = ;
terminals let in
typedterminal int i64
typedterminal var &'lt str
topsym ES
resync ;

left * 500
left / 500
left + 400
left - 400

lexvalue int Num(n) n
lexvalue var Alphanum(x) x
lexattribute set_line_comment("#")

Expr:Val --> int
Expr:Var --> var
Expr:Letexp --> let var = Expr in Expr
Expr:Plus --> Expr + Expr
Expr:Minus --> Expr - Expr
Expr:Div --> Expr / Expr
Expr:Times --> Expr * Expr
Expr:Neg --> - Expr
# override auto-generated creation of abstract syntax, but type matters
Expr --> ( Expr:e )  { e }

#ES:nil -->
#ES:cons --> Expr ; ES
ES1 --> Expr:e ; {e}
ES --> ES1+:v { v }
#ES --> Expr:[e] ; { vec![e] }
#ES --> ES:v Expr:[e] ;  { v.push(e); v }

EOF
