//Abstract syntax types generated by rustlr for grammar l7c
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(dead_code)]
extern crate rustlr;
use rustlr::LBox;

#[derive(Debug)]
pub enum Txpr {
  int_t,
  float_t,
  unit_t,
  string_t,
  vec_t(LBox<Txpr>),
  Txpr_Nothing,
}
impl Default for Txpr { fn default()->Self { Txpr::Txpr_Nothing } }

#[derive(Debug)]
pub enum Expr<'lt> {
  Ifelse{condition:LBox<Expr<'lt>>,truecase:LBox<Expr<'lt>>,falsecase:LBox<Expr<'lt>>},
  Vector_make(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Vector(Vec<LBox<Expr<'lt>>>),
  And(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Or(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  nil,
  integer(i32),
  floatpt(f64),
  App(LBox<Expr<'lt>>,Vec<LBox<Expr<'lt>>>),
  strlit(&'lt str),
  Mult(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Div(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Mod(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Index(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  var(&'lt str),
  Car(LBox<Expr<'lt>>),
  Display(LBox<Expr<'lt>>),
  Neg(LBox<Expr<'lt>>),
  Not(LBox<Expr<'lt>>),
  Cdr(LBox<Expr<'lt>>),
  Minus(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Plus(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Geq(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Gt(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Lt(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Eq(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Neq(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Leq(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Whileloop{condition:LBox<Expr<'lt>>,body:LBox<Expr<'lt>>},
  Let(&'lt str,Option<LBox<Txpr>>,LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  unused{a:Vec<LBox<Varopt<'lt>>>,e:LBox<Expr<'lt>>},
  TypedLambda{return_type:Txpr,formal_args:Vec<LBox<Varopt<'lt>>>,body:LBox<Expr<'lt>>},
  Beginseq(Vec<LBox<Expr<'lt>>>),
  Define(&'lt str,Option<LBox<Txpr>>,LBox<Expr<'lt>>),
  Setq(LBox<Expr<'lt>>,LBox<Expr<'lt>>),
  Expr_Nothing,
}
impl<'lt> Default for Expr<'lt> { fn default()->Self { Expr::Expr_Nothing } }

#[derive(Default,Debug)]
pub struct Varopt<'lt>(pub &'lt str,pub Option<LBox<Txpr>>,);

#[derive(Default,Debug)]
pub struct Sequence<'lt>(pub Vec<LBox<Expr<'lt>>>,);

