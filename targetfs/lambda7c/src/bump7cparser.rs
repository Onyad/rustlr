//Parser generated by rustlr for grammar bump7c
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::{LC,Bumper};
use crate::bump7c_ast;
use crate::bump7c_ast::*;

static SYMBOLS:[&'static str;74] = ["_WILDCARD_TOKEN_","integer","floatpt","strlit","var","NEG","DOT","COMMA","COLON","ARROW","LBRACE","RBRACE","LBRACK","RBRACK","SETQ","AND","OR","NOT","NEQ","MOD","int","string","float","unit","if","else","define","cons","car","cdr","nil","lambda","let","while","print","display","in","then","+","-","*","/","(",")","^","<",">","<=",">=","==",";","Expr","Txpr","Sequence","Varopt","Pxpr","Uxpr","Axpr","Bxpr","Expr2","Expr3","Expr4","ExprStat","Lxpr","NEWSEPNT_8_0","NEWSEPNT2_10_1","NEWRENT_43_0","NEWSEQNT_47_0","NEWRENT_48_1","NEWSEPNT_51_0","NEWSEPNT2_53_1","NEWRENT_59_0","START","EOF"];

static TABLE:[u64;1789] = [266289807361,124555558912,12887130112,111669608448,244814184449,17180655616,223339479041,253403660289,270584578049,219045036033,227635429377,73015689216,120261378048,180390199296,90194444288,51541049344,304943333377,21475098624,146030854144,8591966208,133144051712,128850001920,249108496385,4296736768,236223725569,42951049216,98785361920,240519479297,141734838272,261993201665,94490132480,137440854016,103079936000,257698365441,85901443072,281771331813377,281500749987842,281706907500545,281492159004672,281775626911745,563001497157634,562980022321154,563010087092226,563083101536258,562975727353858,844635385036802,844609615233026,844622500134914,844454996410370,844596731510784,844601026412544,844588140396546,844631090069506,844506537263104,844489356148738,844626795102210,844502241050626,844618205167618,844583845429250,844493651116034,844480766214146,844639680004098,844592435363842,844532305821698,1126140427894785,1125921381941248,1126045937696768,1125917087498240,1126028756844544,1126024462401536,1126136130568193,1125912793972736,1126020168220672,1125972922531840,1126080297041920,1125904203579392,1125908498808832,1126170492600321,1407404950028290,1407585338654722,1407576748720130,1407568158785538,1407533799047170,1407589633622018,1407581043687426,1407538095325184,1407452194668546,1407572453752834,1407443604733954,1407559568850946,1407542390226944,1407439309766658,1407482259439618,1407430719832066,1688905697198082,1689064610988034,1688879927394306,1688957236805634,1688918582886400,1689034546216962,1688914287853568,1970342020055040,2251963023294466,2251997383032834,2251958728327170,2251855649112066,2251864239046658,2251967318261762,2251907188719618,2251993088065538,2251868534013954,2251877123948546,2251829879308290,2251984498130946,2251975908196354,2251980205588480,2252010267934722,2252001678000130,2251971613229058,2251881418915842,2252014562902018,2252005972967426,2533489540923394,2533472362561536,2533485247397888,2533480952365056,2533304857329666,2533352103215104,2533459476152322,2533433706348546,2533382166740994,2533343512035330,2533476657332224,2533339217068034,2533468067266560,2533330627133442,2815063303716866,2814754063843328,2814930157305856,2814994581291009,2814998875602945,2815007465472001,2814861436715008,2814822782795776,2814792718155776,2814771242205184,2814895797960704,2815003170766849,2815020351684609,2814882911158272,2814766947762176,2814985990832129,2814852847042560,2814874322665472,2815011760308225,2814848552468480,2814835668549632,2814990286585857,2814801308155904,2814758359072768,2815016058814465,2814844257239040,2814973106585601,2814878617108480,2814839961550848,2814887207960576,2814870028484608,2814968812142593,2814762654236672,2814891501944832,3096349299376128,3096353593819136,3096241924472832,3096405134016512,3096370774671360,3096297759506432,3096473855721473,3096233335783424,3096465263296513,3096482442182657,3096246218915840,3096478147477505,3096460967542785,3096345005195264,3096495329574913,3096237630947328,3096486737018881,3096229040553984,3377910173925378,3377759850070018,3377854339350530,3377751260135426,3377892994056194,3377901583990786,3377764145037314,3377729785298946,3377905878958082,3377755555102722,3377884404121602,3377777029939202,3377880109154306,3377897289023490,3377781324906498,3377807094710274,3377858634317826,3377867224252418,3377914468892674,3377862929285122,3377768440004610,3377871519219714,3377875814187010,3659307845419010,3659226241040386,3659234830974978,3659204766203906,3659200471236610,3940830066442240,4222201960464386,4222317924581378,4222309334646786,4222305039679490,4222283564843010,4222322219548674,4222154715824130,4222296449744898,4222189075562498,4222206255431682,4222335104450562,4222193370529794,4222330809483266,4222300744712194,4222326514515970,4222339399417858,4222232025235458,4222180485627906,4222279269875714,4222287859810306,4222292154777602,4503629694631938,4503655464435714,4503784313454594,4503707004043266,4503814378225666,4785207752327170,4785126147948546,4785100378144770,4785134737883138,4785104673112066,5066682728775680,5066601124331520,5348260781228033,5348204947701760,5348097573191680,5348153407504384,5348144818880512,5348041738158080,5348265079734273,5348295143260161,5348037444632576,5348046032601088,5348033149468672,5348170588356608,5348028854239232,5348149113061376,5629709988855810,5629581139836930,5629576844869634,5629568254935042,5629529600229378,5629701398921218,5629555370033154,5629658449248258,5629714283823106,5629667039182850,5629662744215554,5629606909640706,5629563959967746,5629692808986626,5629697103953922,5629675629117442,5629705693888514,5629684219052034,5629671334150146,5911094772826114,5911107657728002,5911099067793410,5911017463414786,5911026053349378,5911064708055042,5910983103676418,5910995988578306,5911069003022338,5910987398643714,5910991693611010,5911060413087746,5911154902368258,5911086182891522,5911021758382082,5911047528185858,5911116247662594,5910978808709122,5911073297989634,5911111952695298,5911120542629890,5911077592956930,5911257982894081,5911103362760706,6192707185999873,6192501028683776,6192698596130817,6192724369735681,6192522503323648,6192462374764544,6192569749012480,6192711480836097,6192728664768513,6192694301818881,6192505322864642,6192470962733056,6192552567570432,6192453784371200,6192668535291905,6192685711360001,6192578337636352,6192595518488576,6192629877833728,6192458079600640,6192466668290048,6192702891294721,6192690007113729,6192720072212481,6192574043193344,6474044725723136,6474160688070657,6473997480034304,6473945939443712,6474104854544384,6473937351475200,6474164986904577,6474070495199232,6474053314347008,6473933056311296,6474049019904000,6473941645000704,6474195050102785,6473928761081856,6755635664781313,6755661434257409,6755403737792512,6755472456744960,6755644255240193,6755648549552129,6755579831255040,6755416621711360,6755502520991744,6755545471909888,6755523996614656,6755420916154368,6755670025633793,6755652844716033,6755657139421185,6755519702433792,6755618488844289,6755528291057664,6755412328185856,6755639960535041,6755450982105088,6755408033021952,7037037626654722,7037080576327682,7037076281360386,7036951727308802,7036934551830528,7036956022276098,7036981792079874,7037059101491202,7037046216589314,7037084871294978,7037089166262274,7037054806523906,7037071986393090,7036904482668546,7037067691425794,7037050511556610,7037041921622018,7036930252472322,7036943137374210,7036938842406914,7036925961961472,7318564147494912,7599880205959170,7599854436155394,7599888795893762,7600030529814530,7599901680795650,7600021939879938,7599931745566722,7600034824781826,7600000465043458,7600026234847234,7599987580141570,7600039119749122,7599983285174274,7599978990206978,7600009054978050,7599991875108866,7600017644912642,7599905975762946,7600004760010754,7599996170076162,7599893090861058,7881398136012802,7881419610849282,7881432495751170,7881612884377602,7881428200783874,7881389546078210,7881350891372546,7881303646732290,7881441085685762,7881436790718466,7881385251110914,7881307941699586,7881479740391426,7881423905816578,7881312236666882,7881316531634178,7881411020914690,7881342301437954,7881372366209026,7881402430980098,7881393841045506,7881445380653058,7881320826601474,8162791509196800,8444257893285888,8444369562697728,8444489824272385,8444270776418304,8444429691518976,8444485525045249,8444373856878592,8444378151321600,8444395332173824,8444322317008896,8444519887077377,8444266481975296,8444253598056448,8444262188449792,8725891782017026,8725754343063554,8725887487049730,8725878897115138,8725896076984322,8725921846788098,8725831652474882,8725934731689986,8725900371951618,8725788702801922,8725883192082434,8725917551820802,8725930436722690,8725939026657282,8725801587703810,8725792997769218,8725780112867330,8725805882671106,8725926141755394,8725908961886210,8725904666918914,9007225028608002,9007229323575298,9007250798411778,9007332402790402,9007259388346370,9288987764064259,9570256582672386,9570316712214530,9570351071952898,9570217927966722,9570303827312642,9570333892083714,9570230812868610,9570312417247234,9570213632999426,9570355366920194,9570321007181826,9570359661887490,9570179273261058,9570226517901314,9570342482018306,9570325302149122,9570346776985602,9570329597116418,9570363956854786,9570205043064834,9570308122279938,9851804575072256,9851744446251008,9851894770630657,9851748740431872,9851753034874880,9851641365528576,9851860408598529,9851697200562176,9851637072003072,9851645659971584,9851628481609728,9851632776839168,9851864707891201,9851770215727104,10133129231269888,10133124934926338,10414866201182209,10414608503013376,10414604206211074,10414861906149377,10414599911243778,10696074889986048,10977549864861698,10977554159828994,11259072084115456,11259179458625536,11259007660392448,11259239591837697,11259020543524864,11259119329804288,11259003365163008,11259011955556352,11259127918428160,11259123623985152,11259145099280384,11259269654183937,11259016249081856,11259235292151809,11540598600695808,11540654435336192,11540744630894593,11540486932267008,11540620075991040,11540602895138816,11540547060826112,11540478341873664,11540491225792512,11540710268862465,11540714568613889,11540482637103104,11540594306514944,11540495520235520,11821957613813760,11822129412046848,11821970496946176,11822219607605249,11821966202503168,11821953318584320,11822189545390081,11822077871849472,11821961908977664,11822022037536768,11822069283225600,11822095052701696,11822185245573121,11822073577406464,12103479833264130,12103608682283010,12103591502413826,12103578617511938,12103595797381122,12103475542753280,12103501308100610,12103625862152194,12103454063460354,12103600092348418,12103488423198722,12103604387315714,12103492718166018,12103617272217602,12103531372871682,12103621567184898,12103630157119490,12103582912479234,12103638747054082,12103634452086786,12103505603067906,12103587207446530,12384967695728642,12384980580630530,12385075069911042,12385062185009154,12384976285663234,12384954810826754,12385092249780226,12385070774943746,12385057890041858,12384929041022978,12385096544747522,12385100839714818,12385066479976450,12385109429649410,12385006350434306,12385105134682114,12385113724616706,12385083659845634,12384963400761346,12666614471458817,12666391132635136,12666386839109632,12666554342178816,12666498507538432,12666502801981440,12666519982833664,12666382543945728,12666446967668736,12666378248716288,12666494213357568,12666395427078144,12666644537737217,12666610175705089,12666635950424065,12947977778692096,12948119514447873,12947870403788800,12947994959544320,12947853225426944,12948110927200257,12947969190068224,12947973484249088,12948085152415745,12947857520656384,12948029318889472,12947866109345792,12947861815820288,12947921944379392,12948089448169473,13229396921090048,13229469936254976,13229345380499456,13229560129126401,13229444166778880,13229452755402752,13229594491158529,13229577314041857,13229328202137600,13229332497367040,13229336792530944,13229564424880129,13229448460959744,13229341086056448,13229581603766273,13229585898602497,13229504295600128,13510816062767104,13510803178848256,13510927732113408,13511060875313153,13510807474077696,13510871897800704,13511035105837057,13510923437670400,13510919143489536,13511039401590785,13511052290818049,13511069467869185,13510944912965632,13511056580476929,13510811769241600,13510820357210112,13510979272310784,13792333991510018,13792308223541248,13792565922299905,13792561626677249,14074028014239745,14073761722662912,14073757427499008,14074010828734465,14074006533898241,14073997944029185,14073989355012097,14073894866386944,14073821851222016,14073800376582144,14074002239193089,14074023717634049,14073766016188416,14073753132269568,14073877685534720,14073851915468800,14073869096910848,14073993649717249,14073929225732096,14073967884632065,14074019420110849,14073873391091712,14073770310631424,14073985059258369,14073933519781890,14355228108980224,14355240992899072,14355232404209664,14355245287342080,14355348367802368,14355481516179457,14355464331722753,14355236699373568,14355296827932672,14355485805445121,14355460035969025,14355494398001153,14355369843097600,14355352662245376,14355344073621504,14355404202442752,14636771804643328,14636715969609728,14636823344513024,14636827638956032,14636969374711809,14636707380920320,14636703085690880,14636879179153408,14636720264052736,14636960782155777,14636844819808256,14636935012679681,14636939308433409,14636956492955649,14636711676084224,14636819050332160,14918298321223680,14918319796518912,14918190946320384,14918186652794880,14918195240763392,14918246781353984,14918414285144065,14918435758866433,14918182357630976,14918431469731841,14918294027042816,14918354155864064,14918302615666688,14918178062401536,14918409989390337,14918444351422465,15199829132574720,15199661629505536,15199884966100993,15199721758064640,15199906446508033,15199889261854721,15199794773229568,15199653039112192,15199670217474048,15199665923031040,15199777592377344,15199919328133121,15199910735577089,15199773297934336,15199657334341632,15199769003753472,15481128015822848,15481364238565377,15481136606216192,15481394304843777,15481381423284225,15481132311052288,15481304109285376,15481140899741696,15481248274644992,15481252569088000,15481196734775296,15481385712287745,15481145194184704,15481269749940224,15481359942811649,15481243980464128,15762611582926848,15762607287762944,15762671711485952,15762779085996032,15762744726650880,15762602992533504,15762727545798656,15762834919522305,15762869281554433,15762615876452352,15762860688998401,15762856400060417,15762723251355648,15762620170895360,15762839215276033,15762718957174784,16044219705327618,16044082266374146,16044077971406850,16044095151276034,16044116626112514,16044172460687362,16044090856308738,16044193935523842,16044198230491138,16044211115393026,16044168165720066,16044125216047106,16044086561341442,16044206820425730,16044215410360322,16044163870752770,16044146690883586,16044202525458434,16044176755654658,16044159575785474,16044254065065986,16044387209052162,16044185345589250,16325617371840512,16325613076807680,16325707569299456,16607204016128000,16607285619130369,16607143887306752,16607036513058816,16607045101027328,16607027922665472,16607259849654273,16607169656782848,16607096641617920,16607264145408001,16607152475930624,16607032217894912,16607148181487616,16607294211686401,16607040806584320,16607281324294145,16607272740388865,16607277029588993,16888554443636736,17169990761644032,17170274233548801,17169999352627202,17170269934452737,17170205510139905,17451504391553026,17451611765735426,17451654715408386,17451478621749250,17451650420441090,17451646125473794,17451641830506498,17451555931160578,17451607470768130,17451663305342978,17451530161356802,17451624650637314,17451659010375682,17451525866389506,17451512981487618,17451633240571906,17451616060702722,17451517276454914,17451620355670018,17732970783965184,17733035202379776,17732936419901440,17733194117349377,17733065267609600,17733048088330240,17732996548460544,17733022318133248,17732975073820672,17733164052250625,17733018022903808,17733013727215616,17733060973625344,17732932124737536,17733009434214400,17733176936431617,17733103922970624,17733052382773248,17732945007869952,17733142577807361,17733026612707328,17732966483820544,17732927829508096,17733146872250369,17733159756496897,17733181231136769,17733172641267713,17733069563625472,17733168346955777,17733056676823040,17733185525972993,17733189827362817,17732940713426944,17733043794149376,18014428580937728,18014454344777730,18014583193796610,18295929327517696,18577378528198658,18577563218083840,18577404298002434,18858982354518018,18858990944452610,18859025304190978,18858892160204802,18858905045106690,18858999534387202,18858853505499138,18858900750139394,18859029599158274,18859033894125570,18858995239419906,18859016714256386,18858879275302914,18859021009223682,18859038189092866,18858887865237506,18858986649485314,18858930814910466,18859008124321794,19140483106799616,19421794868133888,19421897948594176,19421781985001472,19422026796695553,19421893654413312,19421919423889408,19422022501531649,19422009616760833,19421902243037184,19422031091400705,19421786280165376,19421846408724480,19421790573690880,19422018213117953,19421953783234560,19422013912514561,19422035386236929,19422043977613313,19421777689772032,19703261256876032,19703467420090369,19703372925304832,19703497478242305,19703321385435136,19703269844844544,19703506068111361,19703368631123968,19703299910795264,19703351449681920,19703377219747840,19703493183930369,19703428759945216,19703256961712128,19703488889225217,19703394400600064,19703265550401536,19703510362947585,19703484593471489,19703518954323969,19703501773406209,19703252666482688,19984774888816642,19984817838489602,19984852198227970,19984731939143682,19984826428424194,19984856493195266,19984727644176386,19984770593849346,19984822133456898,19984869378097154,19984843608293378,19984903737835522,19985036881821698,19984766298882050,19984860788162562,19984736234110978,19984835018358786,19984865083129858,19984744824045570,19984809248555010,19984847903260674,19984740529078274,19984813543522306,19984796363653122,20266486091022337,20266490388021249,20266232687886336,20266258455855106,20547832214847490,20547857984651266,20547888049422338,20547845099749378,20547866574585858,20547754905436162,20547870869553154,20547883754455042,20547849394716674,20547742020534274,20547780675239938,20547750610468866,20547840804782082,20547729135632386,20547879459487746,20547703365828610,20547737725566978,20547875164520450,20547836509814786,20829229882015746,20829324371296258,20829216997113858,20829320076328962,20829363026001922,20829311486394370,20829345846132738,20829341551165442,20829255651819522,20829178342408194,20829225587048450,20829315781361666,20829204112211970,20829354436067330,20829350141100034,20829307191427074,20829332961230850,20829358731034626,20829212702146562,21110640435593216,21110855188676609,21392321575518209,21392188424454144,21392197015371776,21392184131452928,21392192720142336,21673598979735554,21673603274702850,21673633339473922,21955078252003330,21955073957036034,22236613354586112,22236669190995968,22236767974326273,22236596175831040,22236527456878592,22236772268638209,22236647715700736,22236609061584896,22236617650274304,22236634829750272,22236780858507265,22236664894980096,22236660600995840,22236763679621121,22236789455388673,22236621945503744,22236746499620865,22236652010143744,22236544635240448,22236742205177857,22236785153343489,22236793744719873,22236536047271936,22236531752108032,22236574701191168,22236776563802113,22236566111191040,22236703550341120,22236626240077824,22236643421519872,22236656304193536,22236540340797440,22236759383867393,22518204296658946,22518191411757058,22518182821822466,22518169936920578,22518075447640066,22518195706724354,22518028202999810,22518062562738178,22518200001691650,22518165641953282,22518079742607362,22518208591626242,22518066857705474,22518105512411138,22518157052018690,22518174231887874,22518212886593538,22518161346985986,22518053972803586,22799687863238658,22799580489056258,22799541834350594,22799550424285186,22799644913565698,22799670683369474,22799679273304066,22799674978336770,22799537539383298,22799636323631106,22799683568271362,22799554719252482,22799657798467586,22799632028663810,22799666388402178,22799503179644930,22799649208532994,22799528949448706,22799640618598402,23081119890407426,23081154250145794,23081025401126914,23081016811192322,23081158545113090,23080978156486658,23081132775309314,23081141365243906,23081107005505538,23081145660211202,23081111300472834,23081162840080386,23081012516225026,23081055465897986,23081149955178498,23081124185374722,23081115595440130,23081003926290434,23081029696094210,23362590572347394,23362637816987650,23362504674115584,23362453133393922,23362620637118466,23362633522020354,23362616342151170,23362624932085762,23362629227053058,23362586277380098,23362500378034178,23362530442805250,23362599163265024,23362581982412802,23362607752216578,23362594868363264,23362491788099586,23362487493132290,23362478903197698,23644095613763586,23644099908730882,23644091318796290,23643966764744706,23644074139975680,23643975354679298,23644082728861698,23644112793632770,23643928110039042,23644069845073920,23644108498665474,23643979650826240,23644065548992514,23643962469777410,23643953879842818,23644056959057922,23644061254025218,23644005419450370,23644104203698178,23925579182374912,23925531936423938,23925557706227714,23925403087405058,23925566297276416,23925583477407744,23925437447143426,23925587770998786,23925480396816386,23925441742110722,23925574887342080,23925428857208834,23925570592571392,23925450333224960,24207054159085568,24207045569282048,24207006913200130,24206955373592578,24207032683003906,24207062747774978,24206916718886914,24207041273987072,24206925309935616,24206878064181250,24207058454118400,24206903833985026,24207049864052736,24206912423919618,24488383110709248,24769982634655746,24769828015833090,25051457618247680,25332954064486402,25332958359453698,25332949769519106,25332906819846146,25332945474551810,25332855280238594,25332777970827266,25332803740631042,25332941179584514,25332816625532930,25332911115730944,25332915410632704,25332825215467522,25332932589649922,25332812330565634,25332962654420994,25614429040934914,25614390387343360,25614300191916034,25614252947275778,25614291601981442,25614437630869506,25614433335902210,25614407566098434,25614386092441600,25614330256687106,25614424745967618,25614278717079554,25614287307014146,25614420451000322,25614416156033026,25614381796294658,25895912607645698,25895882542874626,25895895427776514,25895856773070850,25895908312678402,25895891132809218,25895762283790338,25895775168692226,25895727924051970,25895805233463298,25895766578757634,25895861069152256,25895904017711106,25895865364054016,25895753693855746,25895899722743810,26177357519650818,26177366109585410,26177340340764672,26177383289454594,26177336045862912,26177250145468418,26177370404552706,26177228670631938,26177331749847042,26177378994487298,26177237260566530,26177241555533826,26177387584421890,26177280210239490,26177202900828162,26177374699520002,26458862560935938,26458849676034050,26458703647145986,26458677877342210,26458815317475328,26458712237080578,26458853971001346,26458806726361090,26458811022573568,26458755186753538,26458845381066754,26458716532047874,26458858265968642,26458841086099458,26458725121982466,26458832496164866,26740281703333890,26740285999284224,26740200098955266,26740324653006850,26740333242941442,26740178624118786,26740307473137666,26740320358039554,26740290294185984,26740337537908738,26740191509020674,26740230163726338,26740152854315010,26740328947974146,26740187214053378,26740316063072258,27021726614224896,27021649305272320,27021614944878592,27021670779912192,27021619239321600,27021838283702273,27021833987948545,27021816815026177,27021859757424641,27021722319781888,27021846872719361,27021851167883265,27021778154422272,27021602060959744,27021700844158976,27021842578407425,27021855462588417,27021868348801025,27021610651353088,27021743795077120,27021606356189184,27021718025601024,27303257432064000,27303141463556096,27303137168523264,27584573491773442,27584680865955842,27584599261577218,27584577786740738,27584607851511810,27866048471760896,28147630818000898,28147596458262530,28147639407935490,28147570688458754,28147643702902786,28147549213622274,28147587868327938,28147583573360642,28147617933099010,28147635112968194,28147506263949314,28147811206627330,28147544918654978,28147501968982018,28147510558916610,28147600753229826,28147609343164418,28147514853883906,28147540623687682,28147626523033602,28147592163295234,28147622228066306,28147678062641154,28147519148851202,28429092909744130,28429015600332802,28428994125496322,28429114384580610,28428976945627138,28428981240594434,28428989830529026,28429110089613314,28429118679547906,28429097204711426,28429062844973058,28429058550005762,28429024190267394,28429075729874946,28429084319809538,28429067139940354,28429153039286274,28429101499678722,28429105794646018,28429071434907650,28429019895300098,28428985535561730,28429045665103874,28710705322852353,28710550704422912,28710576474488832,28710456216453120,28710628014686208,28710701028147201,28710499165536256,28710593655341056,28710666675486721,28710572180045824,28710520640176128,28710464805142528,28710469099585536,28710692438671361,28710683848212481,28710451921223680,28710567885864960,28710688143966209,28710718209064961,28710696732983297,28710709617688577,28710460511617024,28992107287347202,28991978438328322,28991952668524546,28992029977935874,28992137352118274,29273401874644992,29273414758563840,29273526427910144,29273668163665921,29273410465038336,29273406169874432,29273577968107520,29273633808842753,29555040058802178,29555065828605954,29554979929260034,29555031468867586,29554902619848706,29554954159456258,29555074418540546,29554941274554370,29555052943704066,29554928389652482,29555083008475138,29555044353769474,29555078713507842,29555057238671362,29555035763834882,29554949864488962,29555048648736770,29555087303442434,29554936979587074,29555070123573250,29555027173900290,29836403368329218,29836562282119170,29836454907936770,29836532217348098,29836377598525442,30117878350413824,30399357622157312,30680798234673154,30680802529640450,30962273211056130,30962298981711872,30962307570794498,30962277506023426,31243765368225794,31243812612866050,31243846972604418,31243842677637122,31243834087702530,31243743893389314,31243773958160386,31243859857506306,31243808317898754,31243731008487426,31243855562539010,31243816907833346,31243864152473602,31243735303454722,31244035951165442,31243726713520130,31243868447440898,31243851267571714,31243821202800642,31243825497767938,31243795432996866,31243902807179266,31243769663193090,31243739598422018,31525377781792768,31525201688330240,31525309061201920,31525437911072769,31525433615319041,31525334832447488,31525442205777921,31525210278723584,31525339126431744,31525300471529472,31525291881725952,31525317652971520,31525416436629505,31525459384795137,31525270407282688,31525420731072513,31525455089958913,31525205983559680,31525283293036544,31525214572249088,31525218866692096,31525463687495681,31525343422447616,31525326241595392,31525248932642816,31525467976171521,31525287586037760,31525296176955392,31525450795253761,31525330535645184,31525321947152384,31525240342642688,31525446500089857,31806728203665410,31806741088567298,31806753973469186,31806736793600002,31806878527520770,31806844167782402,31806839872815106,31806779743272962,31806869937586178,31806835577847810,31806865642618882,31806848462749698,31806831282880514,31806749678501890,31806702433861634,31806887117455362,31806874232553474,31806882822488066,31806826987913218,31806852757716994,31806857052684290,32088254727192576,32369768352579584,32369742583103488,32369759762579456,32369862841204737,32369635208855552,32369643796824064,32369673862774784,32369733991333888,32369841366761473,32369755465777152,32369858545451009,32369867135909889,32369721107087360,32369746877284352,32369630913691648,32369871430221825,32369892906303489,32369725401661440,32369716811857920,32369626618462208,32369639502381056,32369884314927105,32369880020090881,32369888617758721,32369665272774656,32369802711924736,32369695337414656,32369751171727360,32369875725385729,32369845661204481,32369712516169728,32369764056563712,32369708223168512,32651208968044544,32651243329290240,32651316343472129,32651101595172864,32651277688635392,32651187492880384,32651196083798016,32651363594534913,32651239033274368,32651200378372096,32651226148438016,32651110185566208,32651105890402304,32651367883014145,32651118773534720,32651333522161665,32651140249485312,32651337817915393,32651346406932481,32651114479091712,32651183199879168,32651170314125312,32651359291637761,32651354996801537,32651148839485440,32651217559814144,32651230442487808,32651350702096385,32651320637915137,32651234739290112,32651221853995008,32651191788568576,32651342112620545,32932756959330306,32932602340507650,32932628110311426,33214227643760640,33214103094624256,33495698322292738,33495736976998402,33495694027325442,33495706912227330,33495702617260034,33495719797129218,33495689732358146,33495681142423554,33495728387063810,33495629602816002,33495578063208450,33495552293404674,33495732682031106,33495590948110338,33495582358175746,33495599538044930,33495573768241154,33495685437390850,33495715502161922,33495676847456258,33495724092096514,33495586653143042,33495603833012226,33777126055280640,33777010092408832,33777267791036417,33777014385934336,33777177595478016,33777005797244928,33777233436737537,33777001502015488,34058545200168962,34058592444809218,34058652574351362,34058575264940034,34058562380038146,34058605329711106,34058570969972738,34058515135397890,34058596739776514,34058601034743810,34058523725332482,34058618214612994,34058558085070850,34058609624678402,34058583854874626,34058476480692226,34058493660561410,34058566675005442,34058485070626818,34058613919645698,34058785718337538,34058519430365186,34058489365594114,34058480775659522,34340166210355201,34339998699749376,34340127548899328,34340196267196417,34340093189554176,34339968633798656,34339951455436800,34340187678179329,34340067420078080,34339955750666240,34340204857065473,34340076008701952,34340200562360321,34340050238636032,34340209151901697,34340217743278081,34339964339355648,34340071714258944,34339960045830144,34340191972884481,34340183382425601,34340020174389248,34621602527051778,34621563872346114,34621735671037954,34621443613261826,34621508037771266,34621439318294530,34621473678032898,34621430728359938,34621520922673154,34621542397509634,34621533807575042,34621512332738562,34621568167313410,34621516627705858,34621546692476930,34621550987444226,34621525217640450,34621555282411522,34621495152869378,34621435023327234,34621559577378818,34621426433392642,34621469383065602,34621465088098306,34903210648338434,34903008784875522,34902918590562306,34903077504352258,34903025964744706,34902910000627714,34902991605006338,34903030259712002,34902995899973634,34903038849646594,34903043144613890,34903017374810114,34902901410693122,34902944360366082,34902948655333378,34903000194940930,34902914295595010,34903021669777410,34902987310039042,34903034554679298,34902905705660418,34902970130169858,34902983015071746,34902940065398786,35184427926028290,35184402156224514,35184479465635842,35184556775047170,35184586839818242,35466001692753920,35466027457445888,35747377879515138,35747429419122690,35747536793305090,35747506728534018,35747352109711362,36029033242689537,36028900098899968,36029059012165633,36029063315390465,36028801315700736,36029067603542017,36029020358443009,36028934459817984,36028887213408256,36028917280342016,36028882920407040,36028814199619584,36029016064000001,36028895804325888,36028818494062592,36028977409163264,36029050422624257,36028805610930176,36028870034653184,36028921574522880,36028908688572416,36028943049818112,36028891509096448,36029046127460353,36029037538443265,36028848560013312,36029041833148417,36028930163015680,36028938753802240,36029054717329409,36028809906094080,36028925868965888,36028839970013184,36310289178820610,36310585531564034,36310357898297346,36310383668101122,36310396553003010,36310293473787906,36310323538558978,36310314948624386,36310319243591682,36310370783199234,36310452387577858,36310284883853314,36310418027839490,36310345013395458,36310413732872194,36310366488231938,36310405142937602,36310280588886018,36310409437904898,36310276293918722,36310362193264642,36310400847970306,36310392258035714,36310375078166530,];


fn _semaction_rule_0_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()};  Expr::var(_item0_) }

fn _semaction_rule_1_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Index(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_2_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_3_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_3(_x_3)=parser.popstack().value { _x_3 } else {<i32>::default()};  Expr::integer(_item0_) }

fn _semaction_rule_4_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_4(_x_4)=parser.popstack().value { _x_4 } else {<f64>::default()};  Expr::floatpt(_item0_) }

fn _semaction_rule_5_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()};  Expr::strlit(_item0_) }

fn _semaction_rule_6_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::nil }

fn _semaction_rule_7_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  _item1_ }

fn _semaction_rule_8_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Expr<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  vec![parser.exstate.make(parser.lc(0,_item0_))] }

fn _semaction_rule_9_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Expr<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<Vec<&'lt LC<Expr<'lt>>>>::default()};  _item0_.push(parser.exstate.make(parser.lc(2,_item2_))); _item0_ }

fn _semaction_rule_10_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Expr<'lt>>> {
 vec![] }

fn _semaction_rule_11_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Expr<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<Vec<&'lt LC<Expr<'lt>>>>::default()}; _item0_ }

fn _semaction_rule_12_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<Vec<&'lt LC<Expr<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::App(parser.exstate.make(_item0_),_item2_) }

fn _semaction_rule_13_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_14_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Not(parser.exstate.make(_item1_)) }

fn _semaction_rule_15_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Neg(parser.exstate.make(_item1_)) }

fn _semaction_rule_16_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Car(parser.exstate.make(_item1_)) }

fn _semaction_rule_17_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Cdr(parser.exstate.make(_item1_)) }

fn _semaction_rule_18_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Display(parser.exstate.make(_item1_)) }

fn _semaction_rule_19_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_20_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Mult(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_21_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Div(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_22_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Mod(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_23_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_24_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Plus(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_25_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Minus(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_26_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_27_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Eq(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_28_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Neq(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_29_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Leq(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_30_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Geq(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_31_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Gt(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_32_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Lt(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_33_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_34_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::And(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_35_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Or(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_36_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_37_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Setq(parser.exstate.make(_item0_),parser.exstate.make(_item2_)) }

fn _semaction_rule_38_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_39_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<Vec<&'lt LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Vector(_item1_) }

fn _semaction_rule_40_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Vector_make(parser.exstate.make(_item1_),parser.exstate.make(_item3_)) }

fn _semaction_rule_41_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut falsecase = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut truecase = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut condition = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Ifelse{condition:parser.exstate.make(condition),truecase:parser.exstate.make(truecase),falsecase:parser.exstate.make(falsecase)} }

fn _semaction_rule_42_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_43_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_44_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<Vec<&'lt LC<Expr<'lt>>>>::default()};  _item0_.push(parser.exstate.make(parser.lc(1,_item1_))); _item0_ }

fn _semaction_rule_45_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<Vec<&'lt LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Beginseq(_item1_) }

fn _semaction_rule_46_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut body = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut condition = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Whileloop{condition:parser.exstate.make(condition),body:parser.exstate.make(body)} }

fn _semaction_rule_47_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Txpr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<Txpr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  _item1_ }

fn _semaction_rule_48_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Option<LC<Txpr<'lt>>> {
 None }

fn _semaction_rule_49_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Option<LC<Txpr<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<Txpr<'lt>>::default()};  Some(parser.lc(0,_item0_)) }

fn _semaction_rule_50_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Option<LC<Txpr<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Let(_item1_,_item2_,parser.exstate.make(_item4_),parser.exstate.make(_item6_)) }

fn _semaction_rule_51_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Varopt<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<Varopt<'lt>>::default()};  vec![parser.exstate.make(parser.lc(0,_item0_))] }

fn _semaction_rule_52_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Varopt<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<Varopt<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<&'lt LC<Varopt<'lt>>>>::default()};  _item0_.push(parser.exstate.make(parser.lc(2,_item2_))); _item0_ }

fn _semaction_rule_53_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Varopt<'lt>>> {
 vec![] }

fn _semaction_rule_54_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Varopt<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<&'lt LC<Varopt<'lt>>>>::default()}; _item0_ }

fn _semaction_rule_55_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut body = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut formal_args = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<&'lt LC<Varopt<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut return_type = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<Txpr<'lt>>::default()};  Expr::TypedLambda{return_type:return_type,formal_args:formal_args,body:parser.exstate.make(body)} }

fn _semaction_rule_56_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _e_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  let mut e = parser.exstate.make(parser.lc(3,_e_));  let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut a = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<&'lt LC<Varopt<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::TypedLambda{return_type:Txpr::Txpr_Nothing,formal_args:a,body:e} }

fn _semaction_rule_57_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Expr<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Option<LC<Txpr<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Define(_item1_,_item2_,parser.exstate.make(_item4_)) }

fn _semaction_rule_58_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Varopt<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Option<LC<Txpr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()};  Varopt(_item0_,_item1_,) }

fn _semaction_rule_59_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Expr<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  vec![parser.exstate.make(parser.lc(0,_item0_))] }

fn _semaction_rule_60_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Vec<&'lt LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<Vec<&'lt LC<Expr<'lt>>>>::default()};  _item0_.push(parser.exstate.make(parser.lc(1,_item1_))); _item0_ }

fn _semaction_rule_61_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Sequence<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<Vec<&'lt LC<Expr<'lt>>>>::default()};  Sequence(_item0_,) }

fn _semaction_rule_62_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Txpr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Txpr::int_t }

fn _semaction_rule_63_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Txpr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Txpr::string_t }

fn _semaction_rule_64_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Txpr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Txpr::float_t }

fn _semaction_rule_65_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Txpr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Txpr::unit_t }

fn _semaction_rule_66_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> Txpr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_26(_x_26)=parser.popstack().value { _x_26 } else {<Txpr<'lt>>::default()};  Txpr::vec_t(parser.exstate.make(_item0_)) }

fn _semaction_rule_67_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Sequence<'lt>>::default()}; <()>::default()}

pub fn make_parser<'lt>() -> ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>
{
 let mut parser1:ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>> = ZCParser::new(68,130);
 let mut rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Lxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Lxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWSEPNT_8_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWSEPNT_8_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWSEPNT2_10_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWSEPNT2_10_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Bxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Bxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Bxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Axpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Axpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWRENT_43_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWRENT_43_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWSEQNT_47_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWRENT_48_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWRENT_48_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWSEPNT_51_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWSEPNT_51_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWSEPNT2_53_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWSEPNT2_53_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Varopt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWRENT_59_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("NEWRENT_59_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Sequence");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_26(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,Bumper<'lt,()>>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_32(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1789 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>, lexer:&mut bump7clexer<'lt>) -> Result<Sequence<'lt>,Sequence<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse(lexer) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Sequence<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>, lexer:&mut bump7clexer<'lt>, parserpath:&str) -> Result<Sequence<'lt>,Sequence<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(lexer,parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Sequence<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_4(f64),
  Enumvariant_3(i32),
  Enumvariant_32(()),
  Enumvariant_19(Varopt<'lt>),
  Enumvariant_33(Vec<&'lt LC<Expr<'lt>>>),
  Enumvariant_0(Sequence<'lt>),
  Enumvariant_37(Expr<'lt>),
  Enumvariant_2((usize,usize)),
  Enumvariant_26(Txpr<'lt>),
  Enumvariant_35(Vec<&'lt LC<Varopt<'lt>>>),
  Enumvariant_34(Option<LC<Txpr<'lt>>>),
  Enumvariant_6(&'lt str),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Sequence<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct bump7clexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<Bumper<'lt,()>>>,
}
impl<'lt> bump7clexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> bump7clexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> bump7clexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> bump7clexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<Bumper<'lt,()>>::default()));
    for kw in ["display","int","lambda","in","string","unit","car","_WILDCARD_TOKEN_","if","else","float","define","print","then","cdr","while","cons","nil","let",] {keywords.insert(kw);}
    for c in ['+','-','*','/','(',')','^','<','>',';','.',':','~','%','[','}','=',']',',','{','!',] {stk.add_single(c);}
    for d in ["<=",">=","==","!=","||","&&","->",] {stk.add_double(d);}
    for d in [] {stk.add_triple(d);}
    for (k,v) in [(r"!=","NEQ"),(r".","DOT"),(r":","COLON"),(r"~","NEG"),(r"||","OR"),(r"%","MOD"),(r"[","LBRACK"),(r"}","RBRACE"),(r"=","SETQ"),(r"]","RBRACK"),(r",","COMMA"),(r"&&","AND"),(r"{","LBRACE"),(r"!","NOT"),(r"->","ARROW"),] {lexnames.insert(k,v);}
    bump7clexer {stk,keywords,lexnames,shared_state}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for bump7clexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Num(n)  => Some(TerminalToken::from_raw(token,"integer",RetTypeEnum::Enumvariant_3( (n as i32)
))),
      RawToken:: Float(n)  => Some(TerminalToken::from_raw(token,"floatpt",RetTypeEnum::Enumvariant_4( n
))),
      RawToken:: Strlit(s)  => Some(TerminalToken::from_raw(token,"strlit",RetTypeEnum::Enumvariant_6( s
))),
      RawToken:: Alphanum(n)  => Some(TerminalToken::from_raw(token,"var",RetTypeEnum::Enumvariant_6( n
))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_2((self.stk.previous_position(),self.stk.current_position())),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,Bumper<'lt,()>>)
{
}//end of load_extras: don't change this line as it affects augmentation
