//Bump-allocated AST types generated by rustlr for grammar bump7c
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(dead_code)]
//extern crate rustlr;
use rustlr::{LC,Bumper};

#[derive(Debug)]
pub enum Txpr<'lt> {
  string_t,
  int_t,
  vec_t(&'lt Txpr<'lt>),
  unit_t,
  float_t,
  Txpr_Nothing,
}
impl<'lt> Default for Txpr<'lt> { fn default()->Self { Txpr::Txpr_Nothing } }

#[derive(Debug)]
pub enum Expr<'lt> {
  Vector_make(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Vector(Vec<&'lt LC<Expr<'lt>>>),
  Ifelse{condition:&'lt Expr<'lt>,truecase:&'lt Expr<'lt>,falsecase:&'lt Expr<'lt>},
  Setq(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Leq(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Lt(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Neq(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Geq(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Gt(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Eq(&'lt Expr<'lt>,&'lt Expr<'lt>),
  var(&'lt str),
  Index(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Or(&'lt Expr<'lt>,&'lt Expr<'lt>),
  And(&'lt Expr<'lt>,&'lt Expr<'lt>),
  TypedLambda{return_type:Txpr<'lt>,formal_args:Vec<&'lt LC<Varopt<'lt>>>,body:&'lt Expr<'lt>},
  Beginseq(Vec<&'lt LC<Expr<'lt>>>),
  Whileloop{condition:&'lt Expr<'lt>,body:&'lt Expr<'lt>},
  unused{a:Vec<&'lt LC<Varopt<'lt>>>,e:&'lt LC<Expr<'lt>>},
  Let(&'lt str,Option<LC<Txpr<'lt>>>,&'lt Expr<'lt>,&'lt Expr<'lt>),
  Define(&'lt str,Option<LC<Txpr<'lt>>>,&'lt Expr<'lt>),
  Div(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Mult(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Mod(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Car(&'lt Expr<'lt>),
  Neg(&'lt Expr<'lt>),
  Cdr(&'lt Expr<'lt>),
  Display(&'lt Expr<'lt>),
  Not(&'lt Expr<'lt>),
  Plus(&'lt Expr<'lt>,&'lt Expr<'lt>),
  Minus(&'lt Expr<'lt>,&'lt Expr<'lt>),
  strlit(&'lt str),
  App(&'lt Expr<'lt>,Vec<&'lt LC<Expr<'lt>>>),
  integer(i32),
  nil,
  floatpt(f64),
  Expr_Nothing,
}
impl<'lt> Default for Expr<'lt> { fn default()->Self { Expr::Expr_Nothing } }

#[derive(Default,Debug)]
pub struct Sequence<'lt>(pub Vec<&'lt LC<Expr<'lt>>>,);

#[derive(Default,Debug)]
pub struct Varopt<'lt>(pub &'lt str,pub Option<LC<Txpr<'lt>>>,);

