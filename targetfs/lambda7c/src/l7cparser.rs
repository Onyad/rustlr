//Parser generated by rustlr for grammar l7c
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,ZCParser,ZCRProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::l7c_ast;
use crate::l7c_ast::*;

static SYMBOLS:[&'static str;74] = ["_WILDCARD_TOKEN_","integer","floatpt","strlit","var","NEG","DOT","COMMA","COLON","ARROW","LBRACE","RBRACE","LBRACK","RBRACK","SETQ","AND","OR","NOT","NEQ","MOD","int","string","float","unit","if","else","define","cons","car","cdr","nil","lambda","let","while","print","display","in","then","+","-","*","/","(",")","^","<",">","<=",">=","==",";","Expr","Txpr","Sequence","Varopt","Pxpr","Uxpr","Axpr","Bxpr","Expr2","Expr3","Expr4","ExprStat","Lxpr","NEWSEPNT_8_0","NEWSEPNT2_10_1","NEWRENT_43_0","NEWSEQNT_47_0","NEWRENT_48_1","NEWSEPNT_51_0","NEWSEPNT2_53_1","NEWRENT_59_0","START","EOF"];

static TABLE:[u64;1789] = [111671115776,133145559040,240519151617,257698103297,261993791489,141736017920,223338954753,219045560321,85899476992,304944054273,21476605952,146030919680,90194837504,8591441920,98784575488,270583857153,4296146944,236225036289,253403267073,227634970625,73016606720,128850067456,244813725697,12885753856,249108824065,180390920192,42950918144,94489542656,17181310976,51540918272,120260198400,103081115648,137439346688,266288431105,124555689984,281539402924034,281505043185666,281659662008322,281676841877506,281672546910210,281633892204546,281685431812098,281642482860032,281689726779394,281552287825922,281668251942914,281638187827200,281530812989442,281582352596994,281681136844802,281543697891330,563010087026690,563001497092098,562980022255618,563083101470722,562975727288322,844622501380096,844480766869506,844532306477058,844635386150912,844493651771394,844489356804098,844502242033664,844639680659458,844631091249152,844626796412928,844583846084610,844618206216192,844454997065730,844609615888386,1125951450644482,1125960040579074,1125929975808002,1126033055023106,1125925680840706,1407435017355266,1407508031799298,1407404952584194,1407400657616898,1407426427420674,1688867043016704,1970427920056322,1970410740187138,1970470869729282,1970638373453826,1970419330121730,1970462279794690,1970342020710402,1970453689860098,1970367790514178,1970423625089026,1970449394892802,1970376380448770,1970329135808514,1970436509990914,1970337725743106,1970457984827394,1970466574761986,1970415035154434,1970505229467650,1970346315677698,1970445099925506,1970333430775810,1970397855285250,2251851357421570,2251859947356162,2251932961800194,2251825587617794,2251829882585090,2533459476480002,2533489541251074,2533330627461122,2533304857657346,2533382167068674,2814882914107392,2814801309663232,3096409429770242,3096280580751362,3096254810947586,3096439494541314,3096332120358914,3096289171406848,3096293466439680,3377897290530818,3377781328183296,3377910175432706,3377901585498114,3377875817398272,3377768441511938,3377862930792450,3377867225759746,3377807096217602,3377905880465410,3377871522562048,3377729786806274,3377777031446530,3377764146544642,3377755556610050,3377858635825154,3377892995563522,3377914470400002,3377884405628930,3659329316388866,3659385150963714,3659252006977538,3659230532141058,3659380855996418,3659239122075650,3659333611356162,3659350791225346,3659256301944834,3659282071748610,3659346496258050,3659204762337282,3659243417042946,3659376561029122,3659337906323458,3659355086192642,3659342201290754,3659359381159938,3659389445931010,3659367971094530,3659372266061826,3940817177804802,3940847242575874,3940701217030144,3940825767739394,3940679738851330,3940714098589698,3940855832510466,3940864422445058,3940860127477762,3940757048262658,3940705508655106,3940718393556994,3940726983491586,3940821472772098,3940851537543170,3940830062706690,3940834357673986,3940731278458882,3940842947608578,3940709806899200,3940812882837506,4222339400269826,4222330810335234,4222193371381762,4222322220400642,4222300745564162,4222317925433346,4222154716676098,4222206256283650,4222189076414466,4222326515367938,4222309335498754,4222287860662274,4222296450596866,4222335105302530,4222232026087426,4222283565694978,4222201961316354,4222180486479874,4222292155629570,4503668347240450,4503664052273154,4503681232142338,4503780016390146,4503762836520962,4503775721422850,4503629692534786,4503814376128514,4503805786193922,4503797196259330,4503655462338562,4503801491226626,4503767131488258,4503771426455554,4503676937175042,4503810081161218,4503707001946114,4503758541553666,4503754246586370,4503792901292034,4503784311357442,4785254995001344,4785087489835008,4785194864279552,4785345190559745,4785091785392128,4785199159771136,4785096080687104,4785078900228096,4785220635000832,4785083195523072,4785147620687872,4785315125854209,4785310829117441,4785203454148608,5066656955170818,5066626890399746,5066734264582146,5066717084712962,5066579645759490,5066725674647554,5066708494778370,5066760034385922,5066704199811074,5066605415563266,5066742854516738,5066631185367042,5066751444451330,5066618300465154,5066764329353218,5066712789745666,5066747149484034,5066755739418626,5066729969614850,5066614005497858,5066721379680258,5348157704306690,5348170589208578,5348110459666434,5348097574764546,5348119049601026,5348076099928066,5348144819404802,5348123344568322,5348114754633730,5348153409339394,5348136229470210,5348046035156994,5348041740189698,5348028855287810,5348204948946946,5348161999273986,5348037445222402,5348166294241282,5348071804960770,5348149114372098,5348033150255106,5348308029014017,5348067509993474,5348127639535618,5629551075131392,5629774415986689,5629512419966976,5629555369443330,5629521010819072,5629761528004609,5629602615328768,5629752937480193,5629679925133312,5629645565132800,5629572550819840,5629757232316417,5629628384280576,5629619794411520,5629778710888449,5629770118070273,5629624089903104,5629748643037185,5629508125655040,5629744347938817,5629503830360064,5629735759249409,5629516715524096,5629718581280769,5629740053364737,5911210735960065,5910995987529728,5911069000466432,5911219324649473,5910987396677632,5911094771122176,5911154901843968,5911232209027073,5911240802828289,5911120541843456,5911236504715265,5911026051842048,5911086182039552,5910978807070720,5911215030075393,5911116246941696,5911197849878529,5911099066613760,5911047527530496,5911073295499264,5911060410400768,5911193556484097,5910983102365696,5911288047534082,5911245094780929,5911111950270464,5911064705761280,5911103360991232,5911107656482816,5911227914190849,5911077592039424,5911223619747841,5911017461841920,5910991692234752,6192526797045762,6192664235999234,6192647056130050,6192531092013058,6192621286326274,6192608401424386,6192651351097346,6192616991358978,6192625581293570,6192634171228162,6192612696391682,6192655646064642,6192479552405506,6192518207111170,6192501027241986,6192513912143874,6192629876260866,6192604106457090,6192509617176578,6192505322209282,6192659941031938,6192556861816834,6192642761162754,6474006068985858,6474117738135554,6474096263299074,6474087673364482,6473988889116674,6474100558266370,6474122033102850,6474126328070146,6474031838789634,6474083378397186,6474091968331778,6474104853233666,6474079083429890,6474109148200962,6473954529378306,6473980299182082,6474001774018562,6474134918004738,6474139212972034,6474130623037442,6473993184083970,6755425214332930,6755631373287425,6755700092960769,6755695797862401,6755416625053696,7036895894372352,7037110642802689,7036878713913344,7036994677964800,7037054808686592,7036998973456384,7036883009208320,7036891599077376,7037003267833856,7037145004244993,7036947434373120,7036887303520256,7037020448686080,7037114940194817,7318662927089667,7599845847793664,7600060596224001,7599832962629632,7599837256941568,7600064893681665,7599948926877696,7599841552498688,7599897387794432,7599953221255168,7600004762107904,7599828667334656,7599970402107392,7599944631386112,7600094957666305,7881462557507586,7881329413521410,7881355183325186,7881514097115138,7881380953128962,7881484032344066,7881501212213250,7881479740915712,7881466852474882,7881509802147842,7881471147442178,7881505507180546,7881458262540290,7881376658161666,7881406722932738,7881363773259778,7881475442409474,7881368068227074,7881492622278658,7881496917245954,8163032022712321,8162782916050944,8163044911087617,8162954715529216,8162898880299008,8162847341215744,8163036318400513,8162920355528704,8162903174676480,8162787210362880,8163014843760641,8163027727876097,8162778620755968,8162894584807424,8162795801214976,8163023437168641,8162791505920000,8163010549645313,8444266485710848,8725904668950528,8725737163784192,8725728574177280,8725853128097792,8725848833720320,8725844538228736,8725745754636288,8725964800786433,8725994864508929,8725732869472256,8725797294637056,8725870308950016,8725960503066625,8725741459341312,9007379648020480,9288682822893568,9288820262371328,9288695708057600,9288914754338817,9288794491650048,9288910456487937,9288747248058368,9288803081519104,9288798787141632,9288678527598592,9288691412762624,9288854622371840,9288687117205504,9288944817930241,9570363961311232,9851843233054721,9851637070626816,9851877588140033,9851860409909249,9851804575793152,9851632776314880,9851864704024577,9851628481019904,9851675725791232,9851727265988608,9851770215792640,9851697201479680,9851886178664449,9851753034940416,9851873293697025,9851881882976257,9851748740562944,9851894768730113,9851868998598657,9851641366183936,9851645661478912,9851744445071360,10133219421782016,10133172178190336,10133245192503296,10133339680735233,10133103457730560,10133279552503808,10133112047337472,10133361159503873,10133369748062209,10133120638189568,10133107753025536,10133223717273600,10133228011651072,10133116342894592,10133335386619905,10414720169213952,10414595614900224,10414582729736192,10414698693984256,10414587024048128,10414702988361728,10414647154900992,10414844724772865,10414836136280065,10414814657445889,10414754529214464,10414810363330561,10414591319605248,10414578434441216,10414694398492672,10696169375203328,10696289634156545,10696173670694912,10696306818088961,10696062000758784,10696319701483521,10696229505925120,10696177965072384,10696122131611648,10696066296315904,10696070591610880,10696285340041217,10696311108796417,10696195145924608,10696057706446848,10696053411151872,10977648647405568,10977794678194177,10977760316751873,10977670122635264,10977528387862528,10977704482635776,10977764610867201,10977781794865153,10977532683157504,10977786085507073,10977536977469440,10977644351913984,10977652941783040,10977545568321536,10977541273026560,10977597108322304,11259072085032960,11259239587577857,11259011954180096,11259235293462529,11259020545032192,11259145099345920,11259003364573184,11259016249737216,11259007659868160,11259256771641345,11259179459346432,11259261062217729,11259269654904833,11259119328624640,11259123624116224,11259127918493696,11540547061743616,11540736038928385,11540710270173185,11540482636578816,11540478341283840,11540495521742848,11540744631615489,11540486930890752,11540594305335296,11540714564288513,11540620076056576,11540491226447872,11540731748417537,11540602895204352,11540654436057088,11540598600826880,11821961907601408,11822129412767744,11822206725193729,11822095052767232,11822219608326145,11822189540999169,11822069282045952,11822077871915008,11822022038454272,11822073577537536,11821953317994496,11821970498453504,11821966203158528,11822185246883841,11821957613289472,11822211015639041,12103428294705152,12103694585036801,12103441179869184,12103544258756608,12103436884312064,12103681701969921,12103548554248192,12103660223594497,12103664517709825,12103685992349697,12103445475164160,12103432590000128,12103552848625664,12103497015164928,12103570029477888,12103604389478400,12385191038550017,12384959107956738,12385186743517185,12384933340577792,12666429792190464,12947866112688128,12948080860921857,12948145285496833,12948149582102529,12947874701967362,13229560130437121,13229332496842752,13229328201547776,13229585899192321,13229594491879425,13229341086711808,13229564424552449,13229444165599232,13229469936320512,13229504296321024,13229396922007552,13229452755468288,13229581603504129,13229345382006784,13229577314238465,13229448461090816,13229336791154688,13511039401263105,13510803178258432,13510807473553408,13511056580214785,13510919142309888,13510871898718208,13510820358717440,13510979273031680,13511035107147777,13510923437801472,13511052291014657,13511069468590081,13510816063422464,13510927732178944,13511060875902977,13510944913031168,13510811767865344,13792286744576000,13792295335428096,13792419889741824,13792291040133120,13792510083858433,13792278154969088,13792346875428864,13792544445300737,13792514382888961,13792402708889600,13792282450264064,13792394119020544,13792454249742336,13792398414512128,14074019422011393,14073873391222784,14073985060569089,14073929226452992,14073894866452480,14073757426974720,14073877685600256,14073869095731200,14073766016843776,14073989359665153,14073821852139520,14073770312138752,14073761721286656,14073753131679744,14355236697997312,14355228108390400,14355344072441856,14355369843163136,14355464336441345,14355245288849408,14355404203163648,14355240993554432,14355348367933440,14355460037279745,14355494398722049,14355232403685376,14355352662310912,14355296828850176,14636720265560064,14636935013990401,14636952192221185,14636939308105729,14636969372811265,14636947897778177,14636819049152512,14636711674707968,14636956487057409,14636703085101056,14636707380396032,14636960782745601,14636715970265088,14636823344644096,14636771805560832,14636879179874304,14636943608184833,14636844819873792,14636827639021568,14918182357106688,14918392815157249,14918427168931841,14918414284816385,14918190946975744,14918298321354752,14918435759456257,14918302615732224,14918276846780416,14918431463768065,14918422874488833,14918354156584960,14918178061811712,14918195242270720,14918246782271488,14918294025863168,14918444349521921,14918319796584448,14918186651418624,14918409990701057,14918225306583040,14918418579390465,15199700285456384,15199850605969410,15199854900936706,15199820541198338,15199859195904002,15199678807277570,15199803361329154,15199846311002114,15199842016034818,15199863490871298,15199829131132930,15199717461983234,15199807656296450,15199756116688898,15199816246231042,15199726051917826,15199713167015938,15199704577081346,15199811951263746,15199833426100226,15199824836165634,15199730346885122,15481192439611394,15481282633924610,15481153784905730,15481179554709506,15481295518826498,15481325583597570,15481321288630274,15481188144644098,15481308403728386,15481205324513282,15481329878564866,15481286928891906,15481334173532162,15481201029545986,15481338468499458,15481231094317058,15481316993662978,15481299813793794,15481291223859202,15762718955995136,15762645946728448,15762727545864192,15762852099063809,15762843509522433,15762693185339392,15762744726716416,15762847804620801,15762602991943680,15762869279653889,15762839214948353,15762856393900033,15762834920833025,15762671712403456,15762731841355776,15762615877107712,15762701776912384,15762779086716928,15762736135143424,15762650236715008,15762710366912512,15762723251486720,15762688890634240,15762860689588225,15762697480372224,15762620172402688,15762607287238656,15762864989995009,15762740431814656,15762611581550592,15762817741357057,15762641646714880,15762822034751489,15762684595273728,16044288427229184,16044103737802754,16044129507606530,16325604490215424,16607053697187840,16607208310243330,16607079461224450,16888511491473410,16888640340492290,16888678995197954,16888644635459586,16888550146179074,16888571621015554,16888541556244482,16888588800884738,16888601685786626,16888618865655810,16888507196506114,16888610275721218,16888627455590402,16888812139184130,16888515786440706,16888584505917442,16888502901538818,16888636045524994,16888520081408002,16888593095852034,16888623160623106,16888631750557698,16888597390819330,17169999352496130,17170003647463426,17451478627385344,17451474329403394,17732957898080256,17733215597166593,17732953600688130,17733211301019649,17732949305720834,18014424285970432,18295903552077826,18295942206783490,18295980861489154,18296036696064002,18295950796718082,18296071055802370,18296045285998594,18296079645736962,18296066760835074,18296088235671554,18296058170900482,18296032401096706,18296049580965890,18295955091685378,18295929321881602,18296040991031298,18296083940704258,18295937911816194,18296075350769666,18577455838068738,18577546032381954,18577524557545474,18577511672643586,18577515967610882,18577563212251138,18577404298461186,18577425773297666,18577417183363074,18577430068264962,18577541737414658,18577520262578178,18577533147480066,18577412888395778,18577558917283842,18577554622316546,18577378528657410,18577550327349250,18577507377676290,18858844916219904,18859085433405441,18858896456220672,18858832031055872,18859063958765569,18859076842881025,18859042489696257,18858836325367808,18858952289681408,18858840620924928,18859094023471105,18858947995303936,18859102619303937,18859068253339649,18858969470533632,18859059664650241,18858943699812352,18858926520729600,18859098321387521,18859081137717249,18858874980532224,18859072548438017,18859003830534144,18859008123863042,18858827735760896,19140457336995840,19140367138947072,19140362843914240,19422065457758209,19421807758344192,19421833525723138,19422061161283585,19703312795435010,19703454529355778,19703304205500418,19703411579682818,19703458824323074,19703355745107970,19703325680336898,19703407284715522,19703441644453890,19703317090402306,19703278435696642,19703415874650114,19703433054519298,19703424464584706,19703420169617410,19703463119290370,19703450234388482,19703445939421186,19703329975304194,19984972461572097,19984959571492865,19984736232210432,19984744823062528,19984740527767552,19984993932935169,19984963865608193,19984727642603520,19984843606654976,19984852196524032,19984981044559873,19984869377376256,19984903737376768,19984847902146560,19984796363063296,19984731937898496,19984985340248065,19984976749723649,20266357237874690,20266254158659586,20266408777482242,20266361532841986,20266365827809282,20266413072449538,20266279928463362,20266305698267138,20266228388855810,20266400187547650,20266395892580354,20266275633496066,20266267043561474,20266262748594178,20266370122776578,20266391597613058,20266404482514946,20266374417743874,20266383007678466,20547815036551170,20547746317074434,20547720547270658,20547797856681986,20547819331518466,20547690482499586,20547694777466882,20547767791910914,20547802151649282,20547772086878210,20547681892564994,20547763496943618,20547793561714690,20547776381845506,20547724842237954,20547686187532290,20547806446616578,20547810741583874,20547853691256834,20547759201976322,20547677597597698,20547986835243010,20547784971780098,20547716252303362,20829332967260160,21110786463629314,21110820823367682,21110838003236866,21110653319643138,21110816528400386,21110687679381506,21110833708269570,21110795055333376,21110730629054466,21110825118334978,21110704860954624,21110799350169600,21110807938465794,21110782168662018,21110691974348802,21110679089446914,21110829413302274,21110700564283394,21110790758596610,21392166951124994,21392282915241986,21392175541059586,21392265735372802,21392179837665280,21392261440405506,21392304390078466,21392205605830658,21392270032044032,21392291505176578,21392308685045762,21392295800143874,21392154066223106,21392274326880256,21392257145438210,21392300095111170,21392312980013058,21392162656157698,21392128296419330,21673736417837056,21673732122345474,21673680582737922,21673783661953026,21673637633064962,21673757892149250,21673770777051138,21673641928032258,21673779366985730,21673740712869888,21673650517966850,21673775072018434,21673787956920322,21673766482083842,21673629043130370,21673603273326594,21955250048991234,21955112610037762,21955254343958530,21955155559710722,21955258638925826,21955207099318274,21955116905005058,21955211394547712,21955241459056642,21955104020103170,21955232869122050,21955215689580544,21955245754023938,21955125494939650,21955262933893122,21955078250299394,22236690666291200,22236725025374210,22236737910276098,22236729320341506,22236587586420738,22236720730406914,22236553226682370,22236578996486146,22236630536093698,22236591881388034,22236600471322626,22236733615308802,22236707845505026,22236682075701250,22236686371258368,22236716435439618,22518182822412290,22518212887183362,22518191412346882,22518066858295298,22518161347969024,22518200002281474,22518105513000962,22518208592216066,22518062563328002,22518204297248770,22518075448229890,22518195707314178,22518053973393410,22518157052608514,22518028203589634,22518165643001856,22799528950169602,22799683568992258,22799636324679680,22799541835071490,22799674979057666,22799666389123074,22799679274024962,22799537540104194,22799687863959554,22799550425006082,22799503180365826,22799580489777154,22799640619712512,22799632029384706,22799670684090370,22799657799188482,23081154250604546,23081107005964290,23081016811651074,23081111301390336,23081149955637250,23081115596423168,23081158545571842,23081145660669954,23081132775768066,23081012516683778,23081162840539138,23081141365702658,23081025401585666,23081003926749186,23081055466356738,23080978156945410,23362448839999490,23362453134966786,23362483199737858,23643958180380672,23925596365914113,23925471804981248,23925463215243264,23925458919882752,23925467509948416,24206899541049346,24206873771245570,24206878066212866,24206908130983938,24206981145427970,24488348750905344,24769853787340802,24769991226621952,24770012701130754,24769956866555906,24770004111654912,24769999816818688,24769862377275394,24770008406556672,24769995521785856,24769875262439424,24769828017537026,24769905326948354,24769866672242690,24769982636359682,25051350239150080,25051431843332098,25051341649018882,25051466203332608,25051483383267328,25051479088365568,25051380303724546,25051487677906946,25051337354051586,25051302994313218,25051470498496512,25051328764116994,25051474793529344,25051457613135874,25332954063765506,25332949768798210,25332829509713922,25332915409059842,25332816624812034,25332812329844738,25332923998994434,25332932588929026,25332958358732802,25332825214746626,25332906819125250,25332803739910146,25332919704027138,25332962653700098,25332941178863618,25332911114092546,25332777970106370,25332855279517698,25332945473830914,25614252946882562,25614429040541698,25614287306620930,25614291601588226,25614330256293890,25614304486490114,25614386090868738,25614433335508994,25614407565705218,25614390385836034,25614300191522818,25614437630476290,25614278716686338,25614394680803330,25614416155639810,25614381795901442,25614420450607106,25614424745574402,25614398975770626,25895882542284802,25895762283200514,25895869657382914,25895779463069698,25895856772481026,25895899722153986,25895766578167810,25895873952350210,25895904017121282,25895895427186690,25895753693265922,25895805232873474,25895908312088578,25895775168102402,25895865362415618,25895912607055874,25895727923462146,25895891132219394,25895861067448322,26177280210698242,26177387584880642,26177357520109570,26177228671090690,26177202901286914,26458703652716544,26740221574643714,26740170035036162,26740303179022338,26740212984709122,26740243049480194,26740268819283970,26740127085363202,26740234459545602,26740247344447490,26740144265232386,26740131380330498,26740139970265090,26740195804839938,26740255934382082,26740217279676418,26740165740068866,26740264524316674,26740225869611010,26740174330003458,26740135675297794,26740208689741826,26740260229349378,26740251639414786,27021911299784706,27021778155798530,27021692256452610,27021696551419906,27021683666518018,27021743796060162,27021735206125570,27021645011812354,27021614947041282,27021619242008578,27021687961485314,27021649306779650,27021640716845058,27021602062139394,27021726616190978,27021739501092866,27021718026256386,27021722321223682,27021730911158274,27021606357106690,27021709436321794,27021700846387202,27021670781616130,27021610652073986,27303253131853824,27303308971540481,27303343327412225,27303085626687488,27303089922244608,27303081332375552,27303201591001088,27303077037080576,27584577784971266,27584603554775042,27584762468564994,27584732403793922,27584655094382594,27866241745158145,27866147250044928,27866095710961664,27866267508080641,27866035580108800,27866258919391233,27866263213506561,27866125775470592,27866271803179009,27866280392458241,27866276097622017,27866039875665920,27866142954553344,27866074235273216,27866293278212097,27866031285796864,27866284688146433,27866203085275136,27866168725274624,27866044170960896,27866026990501888,27866151544422400,28147514855063552,28147729606836225,28429002716348418,28428998421381122,28710628015407104,28710490575405056,28710469101092864,28710701027753985,28710460510240768,28710718208344065,28710580770045952,28710567884685312,28710705322590209,28710451920633856,28710688143638529,28710585063833600,28710593655406592,28710572180176896,28710546409062400,28710520641093632,28710576474554368,28710542114029568,28710537819324416,28710533523963904,28710683849523201,28710464805797888,28710589360504832,28710499165405184,28710709618278401,28710692438212609,28710713920061441,28710666670047233,28710559295602688,28710456215928832,28710550705602560,28710670963441665,28710696733310977,28992107285315586,28991952666492930,29273582269169664,29554889735929856,29554885440372736,29555117368344577,29555091605684225,29555108779655169,29554997110308864,29555052945539072,29555018585538560,29554945571225600,29554975635734528,29554894031224832,29555130252722177,29554924095537152,29555125957885953,29555001404686336,29555121663442945,29555113073770497,29554881146060800,29555134548410369,29555143138476033,29554992814817280,29554876850765824,29836407668670464,30117891230662656,30118007199498240,30117886935629824,30399460693966850,30399404859392002,30399482168803330,30399361909719042,30399366204686338,30399452104032258,30399499348672514,30399456398999554,30399490758737922,30399327549980674,30399469283901442,30399473578868738,30399464988934146,30399379089588226,30399477873836034,30399374794620930,30399503643639810,30399353319784450,30399507938607106,30399512233574402,30399495053705218,30681043047940097,30680789642772480,30680781052903424,30680785347215360,30680901311528960,30680952852381696,30681008692592641,30680776757608448,30962277506023426,30962307570794498,30962298980728832,30962273211056130,31243825495998464,31243941460443137,31243743891488768,31243902805803008,31243984408674305,31243988710850561,31243795431489536,31243992998739969,31243821199458304,31243945753837569,31243967228608513,31243773955801088,31243842675081216,31243739596193792,31243958639919105,31243808314359808,31243816904425472,31243735300636672,31243726711029760,31243731006324736,31243765365800960,31243834085998592,31243859854229504,31243851264950272,31243962934034433,31243812609720320,31243980112986113,31243855560441856,31243846970572800,31243868445802496,31243864150900736,31243971523706881,31243975818149889,31525257521201154,31525364895383554,31525356305448962,31525248931266562,31525266111135746,31525399255121922,31525412140023810,31525274701070338,31525227456430082,31525390665187330,31525369190350850,31525373485318146,31525278996037634,31525304765841410,31525360600416258,31525352010481666,31525377780285442,31525261816168450,31525394960154626,31525253226233858,31525407845056514,31525382075252738,31525403550089218,31806728210939904,31806852761321472,32088177410375682,32088203180179458,32088332029198338,32369648094937090,32369652389904386,32651277690732546,32651234741059586,32651170316550146,32651148841713666,32651217561190402,32651239036026882,32651191791386626,32651118776942594,32651144546746370,32651243330994178,32651200381321218,32651114481975298,32651196086353922,32651187496419330,32651140251779074,32651183201452034,32651208971255810,32651410834718722,32651110187008002,32651226151124994,32651221856157698,32651105892040706,32651101597073410,32651230446092290,32932640995409922,32932765549461506,32932649585344514,32932636700442626,32932739779657730,32932752664559618,32932782729330690,32932774139396098,32932653880311810,32932726894755842,32932769844428802,32932679650115586,32932628110508034,32932731189723138,32932735484690434,32932756959526914,32932778434363394,32932748369592322,32932602340704258,32932787024297986,32932744074625026,33214154634166272,33495702619488256,33495745567522817,33495612423405568,33495642488766464,33495530820009984,33495663964585984,33495625309683712,33495608128045056,33495775631835137,33495668259487744,33495633899683840,33495655374127104,33495535114321920,33495539409879040,33495779926671361,33495616718110720,33495771337392129,33495758453604353,33495651078635520,33495573769486336,33495543705174016,33495621013143552,33495762747719681,33495659667914752,33495595245174784,33495788524732417,33495767042293761,33495646784258048,33495565179486208,33495784222359553,33495526524715008,33495741274128385,33495792812425217,33777001501425664,33777121760968704,33777108876394496,33777014386589696,33777263501508609,33777117465477120,33777010091032576,33777216250839041,33777070221885440,33777005796720640,33777220544233473,33777083104755712,33777091694821376,33777087400116224,33777095989854208,33777048746196992,33777040156196864,33777250608545793,33777138941296640,33777134644625408,33777237724430337,33777130350837760,33777018681884672,33777100286394368,33777246314102785,33777254903382017,33777267789135873,33777126055346176,33777233430315009,33777143236198400,33777242019004417,33777177596198912,33777259199070209,34058626809135104,34058652575006720,34340058831454210,34340127550930946,34340071716356098,34340093191192578,34339994406944770,34340084601257986,34339951457271810,34340020176748546,34340045946552322,34339998701912066,34339960047206402,34339964342173698,34340088896225282,34340260694917122,34339955752239106,34340067421388802,34340037356617730,34340041651585026,34340033061650434,34340050241519618,34340080306290690,34339968637140994,34340076011323394,34339990111977474,34621452202803202,34621477972606978,34621636886396930,34621606821625858,34621529512214530,34903077503041536,34903137631272961,34902914293432320,34903021667811328,34902948653039616,34903154810224641,34902905703563264,34903133337157633,34903146220945409,34902901408268288,34902918588727296,34903116163842049,34902909997875200,34903043143041024,34903150515388417,34903017372319744,34902970128728064,34903159105912833,34903167695978497,34903025962188800,34903000193236992,34903141925847041,35184685625180162,35184376387534850,35184466581848066,35184492351651842,35184389272436738,35184496646619138,35184483761717250,35184384977469442,35184470876815362,35184552481193986,35184513826488322,35184393567404034,35184445107011586,35184509531521026,35184505236553730,35184518121455618,35184457991913474,35184462286880770,35184415042240514,35184475171782658,35184423632175106,35184500941586434,35184419337207810,35184380682502146,35466027457183746,35465898608164866,35465941557837826,35465920083001346,35465958737707010,35465984507510786,35465855658491906,35465937262870530,35465993097445378,35465864248426498,35465932967903234,35465868543393794,35465975917576194,35465851363524610,35465859953459202,35465945852805122,35465890018230274,35466160601169922,35465980212543490,35465894313197570,35465950147772418,35465967327641602,35465971622608898,35465988802478082,35747446597943296,35747588338679809,35747395058860032,35747330633695232,35747566855979009,35747373583171584,35747343518859264,35747442302451712,35747579740356609,35747407941730304,35747575445520385,35747420826828800,35747463778271232,35747584036044801,35747558267289601,35747334928007168,35747571151077377,35747450892320768,35747339223564288,35747433713369088,35747459481600000,35747502433173504,35747326338400256,35747425123368960,35747416531795968,35747541087813633,35747468073172992,35747455187812352,35747592626110465,35747364993171456,35747562561404929,35747412237090816,35747545381208065,36028904395833346,36028981705244674,36028852856225794,36029011770015746,36028827086422018,36310314948624386,36310370783199234,36310319243591682,36310375078166530,36310293473787906,36310345013395458,36310452387577858,36310357898297346,36310383668101122,36310276293918722,36310366488231938,36310405142937602,36310400847970306,36310392258035714,36310280588886018,36310362193264642,36310396553003010,36310284883853314,36310585531564034,36310409437904898,36310323538558978,36310413732872194,36310289178820610,36310418027839490,];


fn _semaction_rule_0_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()};  Expr::var(_item0_) }

fn _semaction_rule_1_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_2_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_3_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_3(_x_3)=parser.popstack().value { _x_3 } else {<i32>::default()};  Expr::integer(_item0_) }

fn _semaction_rule_4_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_4(_x_4)=parser.popstack().value { _x_4 } else {<f64>::default()};  Expr::floatpt(_item0_) }

fn _semaction_rule_5_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()};  Expr::strlit(_item0_) }

fn _semaction_rule_6_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::nil }

fn _semaction_rule_7_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  _item1_ }

fn _semaction_rule_8_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Expr<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_9_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Expr<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<LBox<Expr<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_10_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Expr<'lt>>> {
 vec![] }

fn _semaction_rule_11_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Expr<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<LBox<Expr<'lt>>>>::default()}; _item0_ }

fn _semaction_rule_12_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::App(parser.lbx(0,_item0_),_item2_) }

fn _semaction_rule_13_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_14_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Not(parser.lbx(1,_item1_)) }

fn _semaction_rule_15_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Neg(parser.lbx(1,_item1_)) }

fn _semaction_rule_16_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Car(parser.lbx(1,_item1_)) }

fn _semaction_rule_17_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Cdr(parser.lbx(1,_item1_)) }

fn _semaction_rule_18_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Display(parser.lbx(1,_item1_)) }

fn _semaction_rule_19_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_20_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Mult(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_21_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Div(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_22_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Mod(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_23_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_24_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Plus(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_25_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Minus(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_26_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_27_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Eq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_28_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Neq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_29_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Leq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_30_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Geq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_31_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Gt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_32_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Lt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_33_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_34_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::And(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_35_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Or(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_36_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_37_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  Expr::Setq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_38_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_39_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Vector(_item1_) }

fn _semaction_rule_40_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Vector_make(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_41_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut falsecase = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut truecase = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut condition = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Ifelse{condition:parser.lbx(1,condition),truecase:parser.lbx(3,truecase),falsecase:parser.lbx(5,falsecase)} }

fn _semaction_rule_42_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_43_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_44_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<LBox<Expr<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_45_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<LBox<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Beginseq(_item1_) }

fn _semaction_rule_46_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut body = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut condition = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Whileloop{condition:parser.lbx(2,condition),body:parser.lbx(4,body)} }

fn _semaction_rule_47_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Txpr {
let mut _item1_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<Txpr>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  _item1_ }

fn _semaction_rule_48_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Option<LBox<Txpr>> {
 None }

fn _semaction_rule_49_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Option<LBox<Txpr>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<Txpr>::default()};  Some(parser.lbx(0,_item0_)) }

fn _semaction_rule_50_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<Option<LBox<Txpr>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Let(_item1_,_item2_,parser.lbx(4,_item4_),parser.lbx(6,_item6_)) }

fn _semaction_rule_51_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Varopt<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<Varopt<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_52_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Varopt<'lt>>> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_16(_x_16)=parser.popstack().value { _x_16 } else {<Varopt<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_36(_x_36)=parser.popstack().value { _x_36 } else {<Vec<LBox<Varopt<'lt>>>>::default()};  _item0_.push(parser.lbx(2,_item2_)); _item0_ }

fn _semaction_rule_53_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Varopt<'lt>>> {
 vec![] }

fn _semaction_rule_54_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Varopt<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_36(_x_36)=parser.popstack().value { _x_36 } else {<Vec<LBox<Varopt<'lt>>>>::default()}; _item0_ }

fn _semaction_rule_55_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut body = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut formal_args = if let RetTypeEnum::Enumvariant_36(_x_36)=parser.popstack().value { _x_36 } else {<Vec<LBox<Varopt<'lt>>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut return_type = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<Txpr>::default()};  Expr::TypedLambda{return_type:return_type,formal_args:formal_args,body:parser.lbx(4,body)} }

fn _semaction_rule_56_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _e_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  let mut e = parser.lbx(3,_e_);  let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut a = if let RetTypeEnum::Enumvariant_36(_x_36)=parser.popstack().value { _x_36 } else {<Vec<LBox<Varopt<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::TypedLambda{return_type:Txpr::Txpr_Nothing,formal_args:a,body:e} }

fn _semaction_rule_57_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Expr<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<Option<LBox<Txpr>>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Define(_item1_,_item2_,parser.lbx(4,_item4_)) }

fn _semaction_rule_58_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Varopt<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_19(_x_19)=parser.popstack().value { _x_19 } else {<Option<LBox<Txpr>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_6(_x_6)=parser.popstack().value { _x_6 } else {<&'lt str>::default()};  Varopt(_item0_,_item1_,) }

fn _semaction_rule_59_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Expr<'lt>>> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()};  vec![parser.lbx(0,_item0_)] }

fn _semaction_rule_60_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Vec<LBox<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<LBox<Expr<'lt>>>>::default()};  _item0_.push(parser.lbx(1,_item1_)); _item0_ }

fn _semaction_rule_61_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Sequence<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_35(_x_35)=parser.popstack().value { _x_35 } else {<Vec<LBox<Expr<'lt>>>>::default()};  Sequence(_item0_,) }

fn _semaction_rule_62_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Txpr {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Txpr::int_t }

fn _semaction_rule_63_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Txpr {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Txpr::string_t }

fn _semaction_rule_64_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Txpr {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Txpr::float_t }

fn _semaction_rule_65_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Txpr {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Txpr::unit_t }

fn _semaction_rule_66_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> Txpr {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<Txpr>::default()};  Txpr::vec_t(parser.lbx(0,_item0_)) }

fn _semaction_rule_67_<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Sequence<'lt>>::default()}; <()>::default()}

pub fn make_parser<'lt>() -> ZCParser<RetTypeEnum<'lt>,()>
{
 let mut parser1:ZCParser<RetTypeEnum<'lt>,()> = ZCParser::new(68,130);
 let mut rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("start");
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Lxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Lxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWSEPNT_8_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWSEPNT_8_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWSEPNT2_10_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWSEPNT2_10_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Pxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Uxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr4");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr3");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr2");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Bxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Bxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Bxpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Axpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Axpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWRENT_43_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWRENT_43_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWSEQNT_47_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWRENT_48_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWRENT_48_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_19(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWSEPNT_51_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWSEPNT_51_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWSEPNT2_53_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWSEPNT2_53_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_36(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("ExprStat");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Varopt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_16(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWRENT_59_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("NEWRENT_59_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_35(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Sequence");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("Txpr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = ZCRProduction::<RetTypeEnum<'lt>,()>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_32(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1789 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>, lexer:&mut l7clexer<'lt>) -> Result<Sequence<'lt>,Sequence<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse(lexer) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Sequence<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>, lexer:&mut l7clexer<'lt>, parserpath:&str) -> Result<Sequence<'lt>,Sequence<'lt>>
{
  lexer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(lexer,parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Sequence<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_0(Sequence<'lt>),
  Enumvariant_37(Expr<'lt>),
  Enumvariant_30(Txpr),
  Enumvariant_36(Vec<LBox<Varopt<'lt>>>),
  Enumvariant_16(Varopt<'lt>),
  Enumvariant_32(()),
  Enumvariant_2((usize,usize)),
  Enumvariant_35(Vec<LBox<Expr<'lt>>>),
  Enumvariant_3(i32),
  Enumvariant_4(f64),
  Enumvariant_19(Option<LBox<Txpr>>),
  Enumvariant_6(&'lt str),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Sequence<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct l7clexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<()>>,
}
impl<'lt> l7clexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> l7clexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> l7clexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> l7clexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<()>::default()));
    for kw in ["lambda","int","cons","while","float","_WILDCARD_TOKEN_","define","car","in","cdr","print","then","display","let","nil","else","string","unit","if",] {keywords.insert(kw);}
    for c in ['+','-','*','/','(',')','^','<','>',';','}',']','~','{','[','=','.','!',',',':','%',] {stk.add_single(c);}
    for d in ["<=",">=","==","->","!=","||","&&",] {stk.add_double(d);}
    for d in [] {stk.add_triple(d);}
    for (k,v) in [(r"}","RBRACE"),(r"]","RBRACK"),(r"->","ARROW"),(r"~","NEG"),(r"{","LBRACE"),(r"[","LBRACK"),(r"=","SETQ"),(r"!=","NEQ"),(r".","DOT"),(r"||","OR"),(r"!","NOT"),(r",","COMMA"),(r":","COLON"),(r"&&","AND"),(r"%","MOD"),] {lexnames.insert(k,v);}
    l7clexer {stk,keywords,lexnames,shared_state}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for l7clexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Num(n)  => Some(TerminalToken::from_raw(token,"integer",RetTypeEnum::Enumvariant_3( (n as i32)
))),
      RawToken:: Float(n)  => Some(TerminalToken::from_raw(token,"floatpt",RetTypeEnum::Enumvariant_4( n
))),
      RawToken:: Strlit(s)  => Some(TerminalToken::from_raw(token,"strlit",RetTypeEnum::Enumvariant_6( s
))),
      RawToken:: Alphanum(n)  => Some(TerminalToken::from_raw(token,"var",RetTypeEnum::Enumvariant_6( n
))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => Some(TerminalToken::from_raw(token,"<LexicalError>",<RetTypeEnum<'lt>>::default())),
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_2((self.stk.previous_position(),self.stk.current_position())),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt>(parser:&mut ZCParser<RetTypeEnum<'lt>,()>)
{
}//end of load_extras: don't change this line as it affects augmentation
